%PDF-1.2 %‚„œ”
 12 0 obj<</Length 13 0 R>>stream
BT558.6 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (3) Tj-198.6 768.6  TD /F0 12  Tf-0.0037  Tc -0.0863  Tw (Overload issue 61 june 2004) Tj-316.2 -52.8  TD /F1 18  Tf-0.0008  Tc 0  Tw (contents) TjETq 29.4 785.4 m 29.4 739.2 l 372 739.2 l 372 785.4 l 30 784.8 m 30 739.8 l 371.4 739.8 l 371.4 784.8 l h W* n 29.4 739.2 342.6 46.2 re fQ 0.9529 0.9529 0.9529 rg 414.6 57 152.4 727.8 re fBT419.4 757.8  TD0 0 0 rg /F1 16.2  Tf-0.2269  Tc 0.2233  Tw (credits & contacts) Tj-3 -47.4  TD /F0 7.8  Tf0.1286  Tc -0.0146  Tw (Overload Editor:) Tj6 -12.6  TD 0.1244  Tc -0.0104  Tw (Alan Griffiths) Tj0 -9.6  TD /F2 7.8  Tf0.12  Tc 0  Tw (overload@accu.org) TjT* (alan@octopull.demon.co.uk) Tj-6 -28.8  TD /F0 7.8  Tf0.1409  Tc -0.0269  Tw (Contributing Editor:) Tj6 -12.6  TD 0.1204  Tc -0.0064  Tw (Mark Radford) Tj0 -9.6  TD /F2 7.8  Tf0.12  Tc 0  Tw (mark@twonine.co.uk) Tj-6 -38.4  TD /F0 7.8  Tf0.132  Tc -0.018  Tw (Readers: ) Tj6 -18  TD 0.0928  Tc 0.0212  Tw (Ian Bruntlett) Tj0 -9.6  TD /F2 7.8  Tf-0.0735  Tc 0  Tw (IanBruntlett@antiqs.uklinux.net) Tj0 -19.2  TD /F0 7.8  Tf0.1761  Tc -0.0621  Tw (Phil Bass) Tj0 -9.6  TD /F2 7.8  Tf0.12  Tc 0  Tw (phil@stoneymanor.demon.co.uk) Tj0 -19.2  TD /F0 7.8  Tf0.126  Tc -0.012  Tw (Thaddaeus Frogley) Tj0 -9.6  TD /F2 7.8  Tf0.12  Tc 0  Tw (t.frogley@ntlworld.com) Tj0 -19.2  TD /F0 7.8  Tf0.1192  Tc -0.0052  Tw (Richard Blundell) Tj0 -9.6  TD /F2 7.8  Tf-0.0735  Tc 0  Tw (richard.blundell@metapraxis.com) Tj-6 -38.4  TD /F0 7.8  Tf0.1291  Tc (Advertising:) Tj6 -12.6  TD 0.1165  Tc -0.0025  Tw (Chris Lowe) Tj0 -9.6  TD /F2 7.8  Tf0.12  Tc 0  Tw (ads@accu.org) Tj-6 -58.2  TD /F1 9  Tf-0.0019  Tc (Overload) Tj42 0  TD /F3 9  Tf-0.0704  Tc 0.2684  Tw (is a publication of the) Tj-42 -10.8  TD 0.058  Tc -0.2457  Tw (ACCU.  For details of the ACCU and) Tj0 -10.8  TD 0.088  Tc -0.79  Tw (other ACCU) Tj51 0  TD 0.0312  Tc -0.1332  Tw (publications and) Tj-51 -10.8  TD -0.063  Tc 0.161  Tw (activities, see the ACCU) Tj99 0  TD -0.0015  Tc 0  Tw (website.) Tj-99 -42.6  TD /F0 7.8  Tf0.1469  Tc -0.0329  Tw (ACCU Website:) Tj10.2 -12  TD /F2 9  Tf0  Tc 0  Tw (http://www.accu.org/) Tj-10.2 -38.4  TD /F0 7.8  Tf0.1704  Tc -0.0564  Tw (Information and Membership:) Tj0 -14.4  TD /F4 9  Tf0.0246  Tc 0.0054  Tw (Join on the website or contact) Tj10.2 -19.8  TD /F0 7.8  Tf0.1018  Tc 0.0122  Tw (David Hodge) Tj0 -9.6  TD /F2 7.8  Tf0.12  Tc 0  Tw (membership@accu.org) Tj-10.2 -24.6  TD /F0 7.8  Tf0.1411  Tc -0.0271  Tw (Publications Officer:) Tj10.2 -12.6  TD 0.0987  Tc 0.0153  Tw (John Merrells) Tj0 -9.6  TD /F2 7.8  Tf0.12  Tc 0  Tw (publications@accu.org) Tj-10.2 -24.6  TD /F0 7.8  Tf0.3399  Tc (ACCU) Tj31.2 0  TD 0.1538  Tc (Chair:) Tj-21 -12.6  TD 0.1346  Tc -0.0206  Tw (Ewan Milne) Tj0 -9.6  TD /F2 7.8  Tf0.12  Tc 0  Tw (chair@accu.org) TjETq 414 785.4 m 414 56.4 l 567.6 56.4 l 567.6 785.4 l 414.6 784.8 m 414.6 57 l 567 57 l 567 784.8 l h W* n 414 56.4 153.6 729 re fQ BT29.4 702.6  TD/F0 12  Tf0  Tc -0.0406  Tw (Letters to the Editor\(s\)) Tj331.8 0  TD -0.192  Tc 0  Tw (6) Tj-331.8 -30  TD -0.084  Tc 0.084  Tw (The Tale of a Struggling Template) Tj39.6 -18  TD -0.006  Tc 0.0993  Tw (Programmer         ) Tj141.6 0  TD 0.0424  Tc -0.2824  Tw (Stefan Heinzmann) Tj151.8 0  TD -0.108  Tc 0  Tw (7) Tj-333 -30  TD -0.0353  Tc 0.0953  Tw (Lvalues and Rvalues) Tj181.2 0  TD 0.0254  Tc -0.2654  Tw (Mikael Kilpel\344inen) Tj145.2 0  TD -0.132  Tc 0  Tw (12) Tj-326.4 -30  TD -0.008  Tc -0.032  Tw (When is a \223Pattern\224 not a \223Pattern\224?) Tj181.2 -18  TD -0.186  Tc 0  Tw (Alan) Tj36 0  TD 0.0053  Tc (Griffiths) Tj109.2 0  TD -0.132  Tc (14) Tj-326.4 -30  TD -0.003  Tc -0.237  Tw (Efficient Exceptions?) Tj181.2 0  TD -0.0255  Tc -0.2145  Tw (Roger Orr) Tj144 0  TD -0.132  Tc 0  Tw (15) Tj-325.2 -30  TD -0.0803  Tc 0.4403  Tw (Where Egos Dare) Tj181.2 0  TD -0.0312  Tc 0.3912  Tw (Allan Kelly) Tj144 0  TD 0.468  Tc 0  Tw (21) Tj-325.2 -30  TD -0.1092  Tc 0.4692  Tw (A Template Programmer\222s Struggles) Tj39.6 -18  TD 0.087  Tc 0  Tw (Resolved) Tj40.2 -18  TD -0.0051  Tc 0.0651  Tw (Phil Bass and Stefan Heinzmann) Tj242.4 0  TD -0.192  Tc 0  Tw (24) TjETendstreamendobj13 0 obj4270endobj4 0 obj<</Type /Page/Parent 5 0 R/Resources <</Font <</F0 6 0 R /F1 8 0 R /F2 10 0 R /F3 14 0 R /F4 16 0 R >>/ProcSet 2 0 R>>/Contents 12 0 R>>endobj19 0 obj<</Length 20 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (4) Tj0 768.6  TD /F0 12  Tf-0.0037  Tc 0.2137  Tw (Overload issue 61 june 2004) Tj28.8 -50.4  TD /F0 30  Tf0.0032  Tc -0.0032  Tw (Editorial: New Things) Tj238.2 -30  TD -0.0164  Tc 0.0164  Tw (Under the Sun) TjETq 28.8 785.4 m 28.8 721.2 l 567.6 721.2 l 567.6 785.4 l 29.4 784.8 m 29.4 721.8 l 567 721.8 l 567 784.8 l h W* n 28.8 721.2 538.8 64.2 re fQ BT40.2 589.8  TD/F4 10.2  Tf-0.1033  Tc -0.1967  Tw (One of the things that has changed is the ease with which ideas,) Tj-11.4 -12  TD -0.0729  Tc 0.2229  Tw (techniques and even tools circulate. And this isn\222t just the advent) Tj0 -12  TD -0.1098  Tc -0.3402  Tw (of new technologies \226 when I started in the industry the only books) TjT* -0.0877  Tc -0.0078  Tw (around the office tended to be manuals for the system being used.) TjT* 0.0878  Tc 0.3622  Tw (Now I can look around the office to find copies of DeMarco\222s) TjT* -0.1132  Tc 0.4432  Tw (\223Peopleware\224, Senge\222s \223Fifth Discipline\224, Cockburn\222s \223Effective) TjT* 0.1736  Tc 0.2764  Tw (Use Cases\224 and \223Agile Software Development\224, along with a) TjT* 0.2579  Tc 4.8206  Tw (miscellany of books on Design Patterns and Extreme) TjT* -0.0756  Tc -0.0144  Tw (Programming. Some of the ideas these contain are even being put) TjT* -0.0999  Tc -0.1592  Tw (into practice! It may be taking time, but change is happening. And) TjT* -0.0471  Tc 0.4971  Tw (Overload has a role to play in ensuring that useful knowledge is) TjT* -0.1061  Tc -0.0439  Tw (not forgotten.) Tj11.4 -12  TD -0.0916  Tc -0.0584  Tw (Of course, the trouble with change is ensuring that we keep the) Tj-11.4 -12  TD -0.0767  Tc 0.3767  Tw (good and discard the bad. And that is particularly on my mind at) Tj0 -12  TD -0.2075  Tc -0.1606  Tw (the moment. The more observant of you may have noticed a change) TjT* -0.0818  Tc -0.299  Tw (to Overload \(but I hope that there is nothing that has caused you to) TjT* -0.0341  Tc -0.1159  Tw (notice\). Let me explain.) Tj11.4 -12  TD 0.2397  Tc 1.4703  Tw (At the AGM Tom Hughes stood down from the post of) Tj-11.4 -12  TD 0.2378  Tc 0.2122  Tw (Publications Officer having successfully steered the journals) Tj0 -12  TD -0.0877  Tc 0.3877  Tw (through a number of changes in the last few years. This gave the) TjT* -0.1143  Tc -0.569  Tw (previous Overload editor, John Merrells, the opportunity to join the) TjT* 0.2803  Tc 0.4697  Tw (committee as the new Publications Officer \(which might be) TjT* -0.0938  Tc 0.5438  Tw (considered a promotion\). That left a gap to be filled as Overload) TjT* -0.0922  Tc -0.5078  Tw (editor \226 and, when it was offered to me, I took it on. I hope that you) TjT* -0.0929  Tc -0.2879  Tw (will all join me in thanking Tom and John for their efforts over the) TjT* -0.0796  Tc -0.0037  Tw (years, and to wish John success in his new role.) Tj11.4 -12  TD 0.1715  Tc 0.2785  Tw (It was only a year ago that I joined the Overload team as a) Tj-11.4 -12  TD -0.1121  Tc -0.0924  Tw (\223contributing editor\224 \226 and took on the some of the editorial tasks,) Tj0 -12  TD 0.2796  Tc 1.9037  Tw (such as producing the editorial. These are tasks that I\222ve) TjT* -0.1886  Tc -0.2614  Tw (subsequently shared with Overload\222s remaining contributing editor,) TjT* -0.0852  Tc 0.5352  Tw (Mark Radford. The first of these editorials reviewed the changes) TjT* -0.0779  Tc 0.3097  Tw (that had happened to Overload since John took it over \(from me\)) TjT* 0.2788  Tc 1.3712  Tw (and concluded: \223All of this makes Overload a much more) TjT* -0.1029  Tc 0.1244  Tw (impressive publication than it was six years ago.\224) Tj11.4 -12  TD -0.0697  Tc -0.5166  Tw (The last year has not changed that opinion: I\222m very happy with) Tj-11.4 -12  TD 0.2317  Tc 1.3433  Tw (the way that Overload has developed under John Merrells\222) Tj0 -12  TD -0.1264  Tc -0.2236  Tw (guidance. I hope that you are too. It should therefore be no surprise) TjT* -0.075  Tc 0.2523  Tw (that I\222ve not taken on the editorial role with any dynamic agenda) TjT* -0.0499  Tc 0.2272  Tw (for change. Most of the Overload team remains in place and will) TjT* -0.0722  Tc -0.4378  Tw (be performing the same role: helping authors to prepare their work) TjT* -0.083  Tc 0.053  Tw (for publication. And with any luck you, the readers, will continue) TjT* -0.0799  Tc 0.0049  Tw (to find interesting things happening to write articles about.) Tj11.4 -12  TD -0.091  Tc -0.5257  Tw (Having said that, I must immediately confess that some changes) Tj-11.4 -12  TD -0.0808  Tc 0.4708  Tw (are intended: John Merrells, Paul Johnson \(the new C Vu editor\)) Tj0 -12  TD -0.0884  Tc -0.0616  Tw (and I have agreed that the distinction between the journals has not) Tj276.6 528  TD -0.1177  Tc 0.4754  Tw (been clear to the readership. In part this has been due to a failure) Tj0 -12  TD -0.0625  Tc -0.0329  Tw (to route articles to the other journal when that was appropriate. In) TjT* 0.2784  Tc 1.0116  Tw (the future we intend to ensure that articles are re-routed if) TjT* -0.0909  Tc 0.0266  Tw (appropriate. I trust that this won\222t upset anyone.) Tj11.4 -12  TD -0.0594  Tc 0.5094  Tw (Which all begs the question \223in which journal does an article) Tj-11.4 -12  TD -0.1578  Tc -0.374  Tw (belong?\224 While those working on the journals tend to agree on each) Tj0 -12  TD -0.0583  Tc -0.528  Tw (specific article that has been discussed, it isn\222t that easy to explain.) TjT* -0.0423  Tc 0.4257  Tw (Especially as some members \(and the ACCU website\) appear to) TjT* -0.0899  Tc -0.1101  Tw (have views that differ markedly from ours. So let me go on record) TjT* -0.117  Tc 0.117  Tw (about a couple of things:) Tj0 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0828  Tc -0.6127  Tw (Overload is no longer a C++ based publication: it covers a much) Tj0 -12  TD 0.079  Tc 0.371  Tw (broader range of material \226 the current issue discusses team) TjT* -0.0872  Tc -0.0628  Tw (working; design patterns; the use of exceptions in C#, Java and) TjT* -0.0837  Tc 0.067  Tw (C++; and the high competency threshold set by C++. ) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0966  Tc 0.0666  Tw (Overload is not a minority interest: the vast majority of ACCU) Tj0 -12  TD -0.0978  Tc 0.0478  Tw (members \(just over 85%\) subscribe to Overload.) Tj-11.4 -12  TD -0.272  Tc 0.722  Tw (So what is Overload about? In the editorial mentioned above I said) Tj0 -12  TD -0.291  Tc 1.141  Tw (of Overload articles that \223there is a tendency for them to be about) TjT* -0.2991  Tc 0.3491  Tw (designs, illustrated using C++, rather than about C++ itself\224. Having) TjT* -0.2889  Tc 0.6928  Tw (thought about it over the past year I no longer think that captures it) TjT* -0.2937  Tc 1.0437  Tw (at all: The articles assume that most basic development skills have) TjT* 0.0467  Tc 0.7783  Tw (been mastered and address problems faced by journeyman \(or) TjT* -0.2712  Tc 0.7212  Tw (master\) developers. \(While the industry does not have a recognised) TjT* -0.0018  Tc 0.9661  Tw (apprenticeship system it does have recognised masters.\) These) TjT* -0.2859  Tc 0.0026  Tw (articles might examine the effect of applying alternative solutions; or) TjT* -0.2573  Tc 0.1996  Tw (discuss new tools and ideas; or show old ideas in a new light. There) TjT* -0.2057  Tc 1.1224  Tw (are reports back from those venturing away from the mainstream) TjT* -0.106  Tc 1.0893  Tw (approaches in the hopes of finding something better. And don\222t) TjT* -0.2361  Tc 1.2261  Tw (forget that what is \223mainstream\224 for one technology may be new) TjT* -0.2921  Tc 0.0671  Tw (ground for another \226 we need to exchange ideas.) Tj11.4 -12  TD 0.2468  Tc 0.2032  Tw (And the exchange of ideas was the theme of a \223Birds of a) Tj-11.4 -12  TD -0.0911  Tc -0.0589  Tw (Feather\224 [BOF] session on C++ that I led at the conference. \(Why) Tj0 -12  TD -0.1472  Tc -0.5428  Tw (C++? \226 because I\222m currently working in that language and missing) TjT* -0.064  Tc -0.4091  Tw (the support that is available for working in Java.\) In that BOF I led) TjT* 0.0307  Tc 0.4193  Tw (a discussion of tools and techniques that people had enjoyed in) TjT* 0.12  Tc 0.33  Tw (other languages that they lacked when working in C++. Many) TjT* -0.0776  Tc 0.0133  Tw (things came to light from developers using Java:) Tj0 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0792  Tc -0.4041  Tw (Using a refactoring IDE \(Eclipse, IntelliJ\) changes the way that) Tj0 -12  TD -0.0995  Tc 0.5495  Tw (you think about maintaining and developing code \(and makes) TjT* -0.0659  Tc 0.0159  Tw (things achievable that were not before\). ) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf0.0111  Tc 0.4389  Tw (Having a de-facto standard for a unit test framework \(JUnit\)) Tj0 -12  TD -0.0946  Tc 0.0779  Tw (makes test driven development that much easier to establish. ) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1565  Tc -0.4435  Tw (Tools for automating integration, build and smoke test processes) Tj0 -12  TD -0.1199  Tc 0.4699  Tw (\(CruiseControl, AntHill\) make frequent \(or continuous\) builds) TjT* -0.1053  Tc 0.1953  Tw (easy to put in place \226 not a continuous battle. ) Tj-288 586.2  TD /F3 69  Tf0.123  Tc 0  Tw (M) TjETq 86.4 685.2 509.4 15.6 re h W n BT86.4 688.2  TD/F3 13.8  Tf0.049  Tc -0.449  Tw (ark\222s editorial \223An Industry That Refuses To Learn\224 \(Overload 60\) clearly struck) TjETQ q 86.4 665.4 509.4 15.6 re h W n BT86.4 668.4  TD/F3 13.8  Tf0.0376  Tc -0.794  Tw (a chord of recognition \226 as you can see from the letters page. It is disappointing,) TjETQ q 86.4 645 509.4 15.6 re h W n BT86.4 648  TD/F3 13.8  Tf0.3465  Tc 0.5626  Tw (however, that no-one makes the case for there being improvements in the) TjETQ q 28.8 625.2 567 15.6 re h W n BT28.8 628.2  TD/F3 13.8  Tf0.0993  Tc 0.4279  Tw (industry. Despite the depressing repetition of mistakes and rediscovery of ideas, some) TjETQ BT28.8 608.4  TD/F3 13.8  Tf0.0906  Tc -0.087  Tw (things have changed for the better!) TjETendstreamendobj20 0 obj10426endobj18 0 obj<</Type /Page/Parent 5 0 R/Resources <</Font <</F0 6 0 R /F3 14 0 R /F4 16 0 R /F5 21 0 R >>/ProcSet 2 0 R>>/Contents 19 0 R>>endobj24 0 obj<</Length 25 0 R>>stream
BT558.6 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (5) Tj-198.6 768.6  TD /F0 12  Tf-0.0037  Tc -0.0863  Tw (Overload issue 61 june 2004) Tj-330.6 -40.8  TD /F4 10.2  Tf0.0787  Tc 1.2213  Tw (I\222m sure there are others, but these types of tool have a long) Tj0 -12  TD 0.6585  Tc 0.3915  Tw (history in the SmallTalk community \226 and only became) TjT* -0.031  Tc 1.201  Tw (commonplace when ex-SmallTalkers reimplemented them after) TjT* -0.0294  Tc -0.1206  Tw (moving to Java.) Tj11.4 -12  TD 0.1043  Tc 0.5457  Tw (The BOF wasn\222t entirely a matter of discussing the greener) Tj-11.4 -12  TD 0.0205  Tc -0.5039  Tw (grass and sighing with regret: an interesting discussion of various) Tj0 -12  TD 0.2987  Tc 0.1513  Tw (unit testing frameworks developed with people relating why) TjT* 0.2043  Tc 0.3657  Tw (they\222d written their own \(about half the room had done this\).) TjT* 0.4219  Tc 0.7481  Tw (People expressed various dissatisfactions with ) Tj214.8 0  TD /F2 10.2  Tf0.48  Tc 0  Tw (CppUnit) Tj46.2 0  TD /F4 10.2  Tf-0.15  Tc (,) Tj-261 -12  TD /F2 10.2  Tf0.48  Tc (CricketTest) Tj72.6 0  TD /F4 10.2  Tf0.45  Tc (, ) Tj9 0  TD /F2 10.2  Tf0.48  Tc (CppUnitLight) Tj79.2 0  TD /F4 10.2  Tf0.3303  Tc 3.1197  Tw (, and) Tj0  Tc 0.45  Tw ( ) Tj30.6 0  TD /F2 10.2  Tf0.48  Tc 0  Tw (CxxUnit) Tj46.2 0  TD /F4 10.2  Tf0.5729  Tc 2.8771  Tw (, but,) Tj-237.6 -12  TD -0.0107  Tc 0.4607  Tw (interestingly, ) Tj55.2 0  TD /F2 10.2  Tf-0.0109  Tc 0  Tw (boost::test) Tj69.6 0  TD /F4 10.2  Tf0.04  Tc -0.69  Tw (got no bad reports. There were not) Tj-124.8 -12  TD 0.0297  Tc 0.0203  Tw (enough reports on ) Tj77.4 0  TD /F2 10.2  Tf0.0436  Tc 0  Tw (boost::test) Tj70.8 0  TD /F4 10.2  Tf0.0116  Tc 0.0784  Tw (to announce it a winner, but) Tj-148.2 -12  TD 0.0708  Tc -0.4608  Tw (people were sufficiently interested to say they\222d go away and try) Tj0 -12  TD 0.4274  Tc 1.0726  Tw (it. \(I\222ve not had any reports back yet \226 but I\222ll keep you) TjT* -0.014  Tc 0  Tw (informed.\)) Tj11.4 -12  TD 0.2303  Tc 0.7447  Tw (Another thing that was discussed was whether there were) Tj-11.4 -12  TD -0.0876  Tc -0.1957  Tw (technical obstacles to the development of C++ refactoring tools. It) Tj0 -12  TD 0.012  Tc 0.438  Tw (was felt that the difficulty of compiling C++ and the way that a) TjT* -0.0732  Tc 0.3595  Tw (piece of code can appear in multiple translation units made this a) TjT* -0.0902  Tc 0.4856  Tw (lot harder than equivalent tools for SmallTalk or Java. But it was) TjT* -0.1098  Tc -0.0402  Tw (thought possible.) Tj11.4 -12  TD 0.1235  Tc 0.3265  Tw (Developers, it seems, are not the only ones to recognise the) Tj-11.4 -12  TD 0.2657  Tc 1.9093  Tw (potential for refactoring tools for C++. After I mentioned) Tj0 -12  TD -0.0474  Tc 0.4974  Tw (refactoring tools for C++ in my \223Christmas List\224 \(Overload 58\),) TjT* -0.0899  Tc 0.4853  Tw (Giovanni Asproni emailed me with links to an alpha version of a) TjT* 0.1177  Tc 0.3323  Tw (C++ refactoring tool: ) Tj93 0  TD /F2 9  Tf0.24  Tc 0  Tw (http://www.xref-tech.com/) Tj144.6 0  TD /F4 10.2  Tf0.1471  Tc 0.3029  Tw (and to) Tj-237.6 -12  TD -0.181  Tc 0.031  Tw (SlickEdit: ) Tj40.8 0  TD /F2 9  Tf-0.072  Tc 0  Tw (http://www.slickedit.com/) Tj135 0  TD /F4 10.2  Tf-0.134  Tc -0.316  Tw (which advertises these) Tj-175.8 -12  TD -0.1169  Tc -0.4694  Tw (features.  Microsoft has also listed \223refactoring\224 as a feature of their) Tj0 -12  TD -0.0672  Tc -0.0328  Tw (forthcoming IDE. I\222ve not, as yet, had time to review any of these) TjT* 0.0808  Tc 0.3692  Tw (offerings, so the reality may be less than the promise, but I am) TjT* -0.1066  Tc 0.1566  Tw (looking forward with anticipation.) Tj11.4 -12  TD 0.19  Tc 0.26  Tw (Of course, it isn\222t just within the C++ arena that things are) Tj-11.4 -12  TD -0.0963  Tc -0.3537  Tw (happening. I\222ve been hearing from developers taking a first look at) Tj0 -12  TD -0.0948  Tc 0.2448  Tw (Java\222s JDK 1.5, which it seems has grown a host of new features.) TjT* -0.0987  Tc -0.4013  Tw (But while I\222ve heard a few rumours I can\222t yet provide an informed) TjT* -0.0712  Tc 0.0412  Tw (report of any interesting developments there.) Tj11.4 -12  TD -0.0772  Tc 0.0272  Tw (I\222d love to be able to report on progress in other areas: ) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf0.2354  Tc 0.5479  Tw (Languages like Python and C# are widely used by ACCU) Tj0 -12  TD -0.0791  Tc 0.0148  Tw (members. \(But not, at the moment, by me\).) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf0.0904  Tc 0.3596  Tw (New development tools have become available and some of) Tj0 -12  TD -0.1166  Tc 0.4999  Tw (them change the way we can think about developing software.) TjT* -0.0993  Tc -0.0507  Tw (\(I\222ve mentioned some of these above.\)) Tj263.4 493.8  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf0.271  Tc 0.254  Tw (Ideas and techniques for handling various elements of the) Tj0 -12  TD 0.2495  Tc 1.1755  Tw (development process are being explored. \(I know of one) TjT* -0.1413  Tc -0.4587  Tw (developer who took the suggestion that \223test driven development) TjT* -0.0799  Tc 0.2899  Tw (wouldn\222t be appropriate to a compiler\224 as a challenge, and has) TjT* -0.1063  Tc 0.1563  Tw (used that approach to write a compiler.\)) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf0.082  Tc 0.368  Tw (Anything else that develops the art/craft/science of software) Tj0 -12  TD -0.0536  Tc 0  Tw (development.) Tj-11.4 -12  TD -0.0857  Tc 0.3757  Tw (I want to know more, and my guess is that many of you do too. I) Tj0 -12  TD -0.0878  Tc 0.7378  Tw (also know that my time is limited and have no reason to believe) TjT* 0.3521  Tc 0.807  Tw (that yours is any different. But if you are reading this and) TjT* -0.0787  Tc 0.2287  Tw (thinking \223doesn\222t he know about X\224 then you can help the rest of) TjT* -0.1073  Tc 0.83  Tw (us by submitting an article. \(It is only fair, you discovered about) TjT* -0.0532  Tc -0.0968  Tw (A, F and M through articles in Overload.\)) Tj11.4 -12  TD 0.2569  Tc 1.8131  Tw (C++ wasn\222t the only thing I talked about at the Spring) Tj-11.4 -12  TD -0.0729  Tc -0.0225  Tw (Conference \226 I ran a second BOF in conjunction with Neil Martin) Tj0 -12  TD -0.1011  Tc -0.5889  Tw (that discussed the possible role that ACCU could play in promoting) TjT* 0.0433  Tc 0.4067  Tw (a professional approach to software development. Lots of ideas) TjT* -0.0939  Tc -0.4311  Tw (were discussed, including certification schemes. Neil went away to) TjT* -0.0153  Tc 0.4653  Tw (investigate what the implications of becoming a certifying body) TjT* -0.0461  Tc 0.4961  Tw (were, and I got a mailing list set up that includes the people that) TjT* 0.1767  Tc 0.2733  Tw (expressed an interest. While Neil has reported back to the list) TjT* -0.0851  Tc -0.3983  Tw (nothing else has happened \(yet\). Perhaps someone reading this can) TjT* -0.1306  Tc 0.3806  Tw (provide the necessary impetus.) Tj11.4 -12  TD 0.467  Tc 0.283  Tw (I hope that I\222m going to enjoy editing Overload, I have) Tj-11.4 -12  TD 0.0997  Tc 0.2837  Tw (certainly discovered that it involves work. I\222m writing the first) Tj0 -12  TD 0.0025  Tc -0.3025  Tw (draft of this editorial on the train home from working at a client\222s) TjT* 0.0993  Tc 0.265  Tw (for the last few days \226 and it has to go to the production editor) TjT* 0.1133  Tc 0.4291  Tw (tonight! \(So no chance to mull it over for a few days.\) But, so) TjT* 0.1291  Tc 0.3209  Tw (long as worthwhile articles are submitted, I feel that the effort) TjT* 0.0912  Tc -0.2412  Tw (is worthwhile.) Tj11.4 -12  TD 0.2185  Tc 0.6815  Tw (Things are changing: new people, new ideas, some things) Tj-11.4 -12  TD 0.1092  Tc 0.5808  Tw (don\222t \226 some problems are there just because there are people) Tj0 -12  TD 0.386  Tc 0.2276  Tw (involved. But let me repeat a suggestion made to me at the) TjT* 0.1245  Tc 0.5255  Tw (Extreme Tuesday Club \(sorry, I\222ve forgotten your name, but I) TjT* 0.4551  Tc 1.4131  Tw (owe you a pint\) of something that isn\222t just an old idea) TjT* 0.1235  Tc 0.4122  Tw (reinvented: aspect oriented programming. What do you think?) TjT* 0.117  Tc 0.033  Tw (Seen it before?) Tj11.4 -12  TD -0.0649  Tc 0.5149  Tw (While Mark had a valid point that some good old things have) Tj-11.4 -12  TD -0.0973  Tc -0.0527  Tw (been forgotten, there are sometimes new things under the sun, and) Tj0 -12  TD -0.1078  Tc 0.1078  Tw (these may be good too.) Tj213 -12  TD /F6 10.2  Tf-0.0748  Tc -0.3692  Tw (Alan Griffiths) Tj-84.6 -12  TD /F2 9  Tf0  Tc 0  Tw (alan@octopull.demon.co.uk) TjET1 1 1 rg 29.4 56.4 538.2 109.2 re f0.902 0.902 0.902 rg 30.6 57.6 535.8 106.8 re fBT205.8 145.8  TD0 0 0 rg /F7 18  Tf-0.0916  Tc -0.0284  Tw (Copyrights and Trade marks) Tj-169.8 -12  TD /F8 9  Tf-0.0102  Tc -0.1783  Tw (Some articles and other contributions use terms that are either registered trade marks or claimed as such.  The use of such terms is not intended to support nor) Tj0 -12  TD -0.0101  Tc -0.0025  Tw (disparage any trade mark claim.  On request we will withdraw all references to a specific trademark and its owner.) Tj5.4 -12  TD -0.0106  Tc 0.0199  Tw (By default the copyright of all material published by ACCU is the exclusive property of the author. By submitting material to ACCU for publication an author is,) Tj-5.4 -12  TD -0.0012  Tc -0.0692  Tw (by default, assumed to have granted ACCU the right to publish and republish that material in any medium as they see fit. An author of an article or column \(not) Tj0 -12  TD 0.0081  Tc -0.0812  Tw (a letter or a review of software or a book\) may explicitly offer single \(first serial\) publication rights and thereby retain all other rights.) Tj7.8 -12  TD 0.0045  Tc -0.1485  Tw (Except for licences granted to 1\) Corporate Members to copy solely for internal distribution 2\) members to copy source code for use on their own computers,) Tj-7.8 -12  TD -0.0231  Tc 0.0323  Tw (no material can be copied from Overload without written permission of the copyright holder.) TjETq 29.4 165.6 m 29.4 56.4 l 567.6 56.4 l 567.6 165.6 l 30.6 164.4 m 30.6 57.6 l 566.4 57.6 l 566.4 164.4 l h W* n 29.4 56.4 538.2 109.2 re fQ 0.9529 0.9529 0.9529 rg 30 195 537 48.6 re fBT33.6 231  TD0 0 0 rg /F0 12  Tf-0.0369  Tc 0.3969  Tw (Copy Deadlines) Tj0 -13.2  TD /F4 10.2  Tf-0.05  Tc 0.8  Tw (All articles intended for publication in ) Tj162 0  TD /F9 10.2  Tf-0.1325  Tc 1.1825  Tw (Overload 62) Tj54.6 0  TD /F4 10.2  Tf-0.0506  Tc 1.0256  Tw (should be submitted to the editor by July 1) Tj178.8 3.6  TD 0.1983  Tc 0  Tw (st) Tj10.2 -3.6  TD -0.0338  Tc 0.6838  Tw (2004, and for ) Tj59.4 0  TD /F9 10.2  Tf-0.1325  Tc 1.1825  Tw (Overload 63) Tj54.6 0  TD /F4 10.2  Tf0.3  Tc 0  Tw (by) Tj-519.6 -12  TD -0.0725  Tc 0.5225  Tw (September 1) Tj50.4 3.6  TD -0.4017  Tc 0  Tw (st) Tj9 -3.6  TD 0.09  Tc (2004.) TjETq 29.4 244.2 m 29.4 194.4 l 567.6 194.4 l 567.6 244.2 l 30 243.6 m 30 195 l 567 195 l 567 243.6 l h W* n 29.4 194.4 538.2 49.8 re fQ endstreamendobj25 0 obj11389endobj23 0 obj<</Type /Page/Parent 5 0 R/Resources <</Font 34 0 R/ProcSet 2 0 R>>/Contents 24 0 R>>endobj34 0 obj<</F0 6 0 R/F2 10 0 R/F4 16 0 R/F5 21 0 R/F6 26 0 R/F7 28 0 R/F8 30 0 R/F9 32 0 R>>endobj36 0 obj<</Length 37 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (6) Tj0 768.6  TD /F0 12  Tf-0.0037  Tc 0.2137  Tw (Overload issue 61 june 2004) Tj0 -75  TD -0.0086  Tc -0.2314  Tw (Software Project Management) Tj22.2 -12  TD -0.0027  Tc 0  Tw (Classics?) Tj-22.2 -13.8  TD /F4 10.2  Tf0.011  Tc -0.161  Tw (Dear Mark) Tj11.4 -12  TD -0.1136  Tc 0.4545  Tw (Your Overload 60 editorial was very timely for me.  An open-) Tj-11.4 -12  TD 0.1301  Tc 0.3199  Tw (source software project on which I am involved is just getting) Tj0 -12  TD -0.1509  Tc -0.3324  Tw (going, and it is clear that good communication between participants) TjT* -0.0592  Tc 0.5092  Tw (is of paramount importance.  I\222m also rather unimpressed by the) TjT* 0.2483  Tc 1.5517  Tw (project management tomes that line the shelves of today\222s) TjT* -0.0827  Tc 0.0418  Tw (bookshops.  I have a question, arising from your editorial, that I\222d) TjT* -0.009  Tc 0.4044  Tw (be interested in pursuing via the ACCU, but I\222m not sure which) TjT* -0.1352  Tc 0.2852  Tw (would be the best forum.) Tj11.4 -12  TD 0.136  Tc 0.314  Tw (First some brief background: I\222m an ex-academic, just over) Tj-11.4 -12  TD -0.1464  Tc -0.4236  Tw (halfway through a career change into software development.  I have) Tj0 -12  TD -0.1835  Tc -0.3265  Tw (only a little formal education in computer science and virtually none) TjT* -0.0466  Tc -0.1034  Tw (in project management.) Tj11.4 -12  TD -0.1217  Tc -0.4783  Tw (Frederick Brooks\222 book \223The Mythical Man-Month\224 was one of) Tj-11.4 -12  TD -0.0764  Tc 0.2537  Tw (the first project management books I read, and it still stands head) Tj0 -12  TD -0.1035  Tc 0.1172  Tw (and shoulders above the doorstops.  Not only do I re-read Brooks,) TjT* -0.0925  Tc 0.1568  Tw (but many of his ideas have taken root in my head \(I like to think\);) TjT* -0.0906  Tc 0.0406  Tw (the doorstops are in general eminently forgettable.) Tj11.4 -12  TD -0.0698  Tc 0.5198  Tw (I completely agree with you on the waste exemplified in your) Tj-11.4 -12  TD -0.1075  Tc -0.4625  Tw (story about your friends from Bucks: knowledge sent out to fallow,) Tj0 -12  TD -0.1078  Tc 0.2578  Tw (and new generations treading the same ground blindly.  This kind) TjT* -0.089  Tc -0.1155  Tw (of amnesia is surely unimaginable in any other field \(not even pop) TjT* -0.0738  Tc 0.1238  Tw (music is so forgetful\).) Tj11.4 -12  TD -0.0861  Tc -0.6039  Tw (Is there a good list of \221classics\222 of software project management,) Tj-11.4 -12  TD -0.1103  Tc 0.1911  Tw (like Brooks\222 essays?  If not, I\222d be interested in doing a straw poll) Tj0 -12  TD -0.0979  Tc -0.0521  Tw (of ACCU members and keeping a tally linked from my homepage) TjT* 0.2034  Tc 0  Tw (\() Tj3.6 0  TD /F2 9  Tf0  Tc (http://www.iau.ukfsn.org) Tj129.6 0  TD /F4 10.2  Tf-0.2733  Tc (\).) Tj-121.8 -12  TD -0.1679  Tc 0.0179  Tw (Yours sincerely) Tj195.6 -12  TD /F6 10.2  Tf-0.084  Tc 0.24  Tw (Ivan Uemlianin) Tj-207 -18  TD /F0 12  Tf0.0043  Tc 0.0557  Tw (The Invisibility of Software Design) Tj0 -18  TD /F4 10.2  Tf0.0267  Tc 0  Tw (Mark) Tj11.4 -12  TD 0.2663  Tc 1.0237  Tw (I read your editorial in April\222s Overload with a sense of) Tj-11.4 -12  TD -0.0683  Tc 0.5183  Tw (depressing agreement. I have been in the industry for around ten) Tj0 -12  TD 0.2559  Tc 2.4141  Tw (years and I have worked in most phases of the software) TjT* 0.2265  Tc 0.2235  Tw (development cycle, from requirements through to some post-) TjT* -0.0491  Tc 0.4991  Tw (installation customer support. I have worked as a programmer, a) TjT* -0.0876  Tc 0.3876  Tw (designer and as a consultant advising companies on development) TjT* -0.0948  Tc -0.0052  Tw (strategy and technology policy. I think that I am just getting to the) TjT* 0.2091  Tc 0.2409  Tw (point were I can understand what is going on and might have) TjT* -0.0873  Tc 0.0573  Tw (something to say about it. ) Tj11.4 -12  TD -0.1066  Tc -0.5889  Tw (I have been appalled by the lack of learning from experience that) Tj-11.4 -12  TD -0.1017  Tc 0.2517  Tw (is evident in the industry but I am not sure that it is entirely down) Tj0 -12  TD 0.0222  Tc 0.4278  Tw (to the practitioners. I am beginning to think there is a structural) TjT* 0.1125  Tc 0.3375  Tw (problem with IT that exasperates people\222s tendency to want to) TjT* 0.0715  Tc 0.3785  Tw (reinvent everything and I think that it contributes and fuels the) TjT* -0.0999  Tc -0.0501  Tw (\221follow the hype\222 climate.) Tj11.4 -12  TD -0.0941  Tc -0.4378  Tw (I think that the problem lies in the invisibility of software design) Tj-11.4 -12  TD -0.1024  Tc -0.4476  Tw (in the delivered product. I think that this invisibility has at least two) Tj0 -12  TD -0.0629  Tc -0.0871  Tw (important consequences:) Tj11.4 -12  TD -0.0983  Tc -0.0517  Tw (Firstly, it means that good design is not recognised by the users) Tj-11.4 -12  TD 0.1476  Tc 0.3024  Tw (because they can not see it. There is no end-user pay-back for) Tj0 -12  TD -0.1208  Tc -0.1626  Tw (elegant design. Contrast this with civil engineering where design is) TjT* -0.0714  Tc -0.0286  Tw (very visible e.g. it is simple to see that the Millennium Bridge has) TjT* 0.0595  Tc 0.3305  Tw (a wonderfully elegant design. This means that the industry as a) Tj275.4 672  TD 0.2022  Tc 0.2478  Tw (whole does not place much emphasis on quality of design, so) Tj0 -12  TD -0.0917  Tc -0.0083  Tw (practitioners do not see it as important either. Therefore if it is not) TjT* -0.0764  Tc -0.019  Tw (important why learn about how others have done it in the past?) Tj10.8 -12  TD -0.0448  Tc 0.4948  Tw (Secondly, it means that it is difficult for those that do want to) Tj-10.8 -12  TD 0.2815  Tc 1.0685  Tw (learn to know where to start. You can gain a great deal of) Tj0 -12  TD -0.1763  Tc -0.3487  Tw (information about civil engineering and structural design by looking) TjT* -0.1923  Tc -0.2577  Tw (at buildings, bridges, etc. In fact the conversation of many architects) TjT* 0.0362  Tc 0.4138  Tw (will be peppered with references to this building or that bridge.) TjT* -0.0981  Tc -0.4519  Tw (Things are different for software engineers, there might be brilliant) TjT* -0.0906  Tc 0.1806  Tw (examples of software design installed on the computer I am using) TjT* -0.1077  Tc 0.0123  Tw (right now and I would never know. Even worse than not knowing,) TjT* -0.1285  Tc -0.3215  Tw (even if I did know I could not look at them because the source code) TjT* -0.2028  Tc 0.6528  Tw (will be secret.) Tj10.8 -12  TD 0.1815  Tc 0.2685  Tw (This issue of secrets constantly nags at me. I think that the) Tj-10.8 -12  TD 0.2356  Tc 0.2144  Tw (software industry\222s obsession with intellectual property is an) Tj0 -12  TD -0.0566  Tc -0.4752  Tw (important reason for the glacial pace of its advance. As an industry) TjT* -0.0655  Tc 0.2655  Tw (we keep things private and secret more than any other \(at least in) TjT* -0.0017  Tc 0.4517  Tw (my experience\). How is a rookie programmer supposed to learn) TjT* 0.2491  Tc 0.2009  Tw (how those that went before him did things if everything they) TjT* -0.109  Tc 0.5044  Tw (produced is hidden behind a cloak of secrecy? Unless he is lucky) TjT* -0.0674  Tc 0.5174  Tw (enough to work in a very experienced team he is left blind. This) TjT* -0.0767  Tc 0.2767  Tw (point is made clear in your editorial: unless I am lucky enough to) TjT* 0.1486  Tc 0.3014  Tw (know your friends how could I know that they had solved the) TjT* -0.1034  Tc -0.3132  Tw (problems of the transactional programming model 25 years ago? It) TjT* -0.0556  Tc -0.3126  Tw (is easy to see how medieval architects solved the problems of load) TjT* -0.1076  Tc 0.1758  Tw (on cathedral walls, you can go and look at the flying buttresses!) Tj10.8 -12  TD -0.0125  Tc 0.1353  Tw (One light on the horizon is the increasing use of Open Source) Tj-10.8 -12  TD -0.0228  Tc 0.6364  Tw (Licensing. This has led of a large body of software being made) Tj0 -12  TD 0.0218  Tc 0.0128  Tw (available for those that want to learn. I for one have found that I) TjT* 0.0066  Tc 0.1101  Tw (have learnt more about software design from my involvement in) TjT* -0.0509  Tc -0.4222  Tw (a number of Open Source projects in the last few years than I have) TjT* 0.0321  Tc -0.0621  Tw (in most of my professional programming jobs. I have also found) TjT* -0.0141  Tc -0.5177  Tw (that I am more motivated to do an elegant design and professional) TjT* 0.1136  Tc 0.3825  Tw (coding job if I think that many people are likely to look at my) TjT* -0.077  Tc -0.2912  Tw (code. I realise, that as a professional, I should always be motivated) TjT* 0.0208  Tc 0.2792  Tw (to do this, but I, like most practitioners in our industry, am only) TjT* 0.0476  Tc 0  Tw (human.) Tj10.8 -12  TD -0.1221  Tc 0.2221  Tw (So my advice to a new programmer that wants to \223stand on the) Tj-10.8 -12  TD 0.0557  Tc 0.3943  Tw (shoulders of giants\224 rather than be condemned to \223reinvent the) Tj0 -12  TD -0.0891  Tc 0.5391  Tw (wheel\224 is this: Ignore just about everything the software vendors) TjT* -0.0726  Tc 0.5226  Tw (tell you, listen to the old hands on your team and spend some of) TjT* -0.1155  Tc -0.3012  Tw (your spare time reading and contributing to Open Source Software.) Tj10.8 -12  TD 0.0249  Tc 0  Tw (Regards) Tj199.8 -12  TD /F6 10.2  Tf-0.0314  Tc -0.4126  Tw (Richard Taylor) Tj-98.4 -12  TD /F2 9  Tf0  Tc 0  Tw (rjt-accu@thegrindstone.me.uk) Tj-112.2 -18  TD /F0 12  Tf0  Tc -0.24  Tw (Software\222s No Different...) Tj0 -18  TD /F4 10.2  Tf-0.0086  Tc 0  Tw (Mark,) Tj10.8 -12  TD 0.2573  Tc 0.7327  Tw (In many ways I would not classify software as being any) Tj-10.8 -12  TD 0.0692  Tc 0.3208  Tw (different from many other industries.  There is plenty of wheel) Tj0 -12  TD -0.1339  Tc -0.3161  Tw (reinventing going on all over the place \(hence the creation of a term) TjT* -0.0844  Tc 0.2617  Tw (to describe it\). Until we have lots of people regularly being killed) TjT* -0.0868  Tc 0.0868  Tw (for software related reasons, I don\222t see things changing.) Tj10.8 -12  TD 0.2547  Tc 1.3953  Tw (This paper does an excellent job of covering the issues:) Tj-10.8 -12  TD /F2 9  Tf-0.0231  Tc 0  Tw (sunnyday.mit.edu/steam.pdf) Tj210 -12  TD /F6 10.2  Tf0.0022  Tc -0.1462  Tw (Derek M Jones) Tj-43.8 -12  TD /F2 9  Tf0  Tc 0  Tw (derek@knosof.co.uk) Tj-413.4 701.4  TD /F1 30  Tf0.0157  Tc 0.0443  Tw (Letters to the Editor\(s\)) TjETendstreamendobj37 0 obj10639endobj35 0 obj<</Type /Page/Parent 5 0 R/Resources <</Font <</F0 6 0 R /F1 8 0 R /F2 10 0 R /F4 16 0 R /F6 26 0 R >>/ProcSet 2 0 R>>/Contents 36 0 R>>endobj39 0 obj<</Length 40 0 R>>stream
BT559.2 42  TD0 0 0 rg /F0 10.8  Tf0.2028  Tc 0  Tw (7) Tj-199.2 768.6  TD /F0 12  Tf-0.0037  Tc -0.0863  Tw (Overload issue 61 june 2004) Tj-316.8 -38.4  TD /F1 18  Tf-0.1011  Tc 0.1971  Tw (The Tale of a Struggling) Tj25.2 -20.4  TD -0.0693  Tc 0.4653  Tw (Template Programmer) Tj-25.2 -14.4  TD /F0 10.2  Tf-0.1497  Tc -0.0243  Tw (by Stefan Heinzmann) Tj-8.4 -15.6  TD /F8 10.2  Tf-0.0766  Tc -0.0805  Tw (By relieving the brain of all unnecessary work, a good notation sets) Tj0 -12  TD 0.0156  Tc 0.5364  Tw (it free to concentrate on more advanced problems, and in effect) TjT* -0.0776  Tc 0.0296  Tw (increases the mental power of the race.) Tj174.6 0  TD -0.1326  Tc -0.5154  Tw (Alfred N. Whitehead) Tj-180 -12  TD /F4 10.2  Tf-0.1306  Tc 0.8533  Tw (I\222m not exactly a beginner in C++ templates. Hey, I\222ve even got) Tj0 -12  TD -0.1027  Tc 0.3127  Tw (\223the book\224 on it [1]! But, admittedly, I\222m not a guru \226 if I were, I) TjT* -0.0297  Tc 1.2978  Tw (wouldn\222t need the book. So I was fairly confident that I could) TjT* 0.0946  Tc 1.1861  Tw (easily come up with a little tool I have wanted to write for a) TjT* 0.6299  Tc 0.5837  Tw (while now. But it wasn\222t as easy as I thought. For your) TjT* -0.1183  Tc 0.5683  Tw (amusement I\222m going to show you what I set out to do and what) TjT* -0.0745  Tc 0.1245  Tw (roadblocks I bumped into.) Tj11.4 -12  TD 0.0637  Tc 0.3863  Tw (First, let me describe what I wanted to do. I have repeatedly) Tj-11.4 -12  TD 0.1412  Tc 0.3088  Tw (come across the need to do table lookups in constant tables of) Tj0 -12  TD -0.0801  Tc -0.179  Tw (key/value pairs. I program for embedded systems, so I am keen on) TjT* 0.0349  Tc 0.4151  Tw (keeping the table itself in nonvolatile memory \(ROM, Flash, or) TjT* -0.0743  Tc 0.197  Tw (whatever\). I want to use binary search instead of linear search for) TjT* -0.1881  Tc -0.2892  Tw (efficiency. This requires the table to be stored in sorted order. Sorted) TjT* -0.1853  Tc -0.2877  Tw (according to the key alone, that is. Here\222s an example of such a table) TjT* -0.096  Tc 0.3278  Tw (\(binary search is not really beneficial with such a small table, but) TjT* -0.1144  Tc 0.0844  Tw (this is only a toy example\):) Tj13.8 -24  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc 0  Tw (const struct { int key; const char *value; }) Tj0 -12  TD (table[] = {) Tj9.6 -12  TD ({ 0, "Ok" },) Tj0 -12  TD ({ 6, "Minor glitch in self-destruction module" },) TjT* ({ 13, "Error logging printer out of paper" },) TjT* ({ 101, "Emergency cooling system inoperable" },) TjT* ({ 2349, "Dangerous substances released" },) TjT* ({ 32767, "Game over, you lost" }) Tj-9.6 -12  TD (};) Tj-13.8 -24  TD 0 0 0 rg /F4 10.2  Tf0.3369  Tc 0.8631  Tw (The first problem is to ensure the table is sorted. This is a) Tj0 -12  TD -0.0646  Tc 0.5646  Tw (compile-time task, so in theory it could be a job for template \(or) TjT* -0.1001  Tc 0.8501  Tw (preprocessor\) metaprogramming. If you\222re good at that, I\222ve got) TjT* -0.1  Tc 0.7681  Tw (some homework for you. It\222s too difficult for me. I just resolved) TjT* -0.0533  Tc -0.0967  Tw (to tell the programmer to make sure the table is sorted.) Tj11.4 -12  TD -0.0729  Tc -0.0771  Tw (The second problem is simpler: Provide a lookup function that,) Tj-11.4 -12  TD -0.0958  Tc 0.4958  Tw (given a key, returns the associated value, or a default value if the) Tj0 -12  TD 0.2563  Tc 1.121  Tw (key could not be found in the table. Naturally, I wanted to) TjT* -0.0674  Tc -0.0826  Tw (implement this as a function template that adapts to the actual key) TjT* 0.2608  Tc 0.1392  Tw (and value types. As I want the tables to be put in nonvolatile) TjT* -0.0957  Tc -0.2543  Tw (memory, they will in practice be of POD type \(C-style arrays of C-) TjT* -0.0827  Tc -0.3946  Tw (style structs\). This is a much easier problem to solve, wouldn\222t you) TjT* -0.0866  Tc 0.5366  Tw (agree? So pour yourself a glass of your favorite beverage, install) TjT* -0.0996  Tc 0.1496  Tw (yourself in your armchair and chuckle while watching me making) TjT* -0.0266  Tc -0.1234  Tw (a fool of myself.) Tj11.4 -12  TD -0.0912  Tc 0.4212  Tw (The STL contains binary search algorithms, so it is sensible to) Tj-11.4 -12  TD 0.0926  Tc 0.3574  Tw (use them instead of inventing my own. The first attempt at my) Tj0 -12  TD -0.0745  Tc 0.1245  Tw (function template uses ) Tj92.4 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (std::equal_range) Tj98.4 0  TD /F4 10.2  Tf-0.0937  Tc -0.0563  Tw (and goes like this:) Tj-177 -24  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc 0  Tw (template<typename Key, typename Val, unsigned n>) Tj0 -12  TD (const Val &lookup\() Tj86.4 0  TD -0.0436  Tc -0.4364  Tw (const std::pair<Key,Val>\(&tbl\)[n],) Tj0 -12  TD 0.12  Tc 0  Tw (const Key &key, const Val &def\) {) Tj-76.8 -12  TD (typedef const std::pair<Key,Val> Entry;) Tj0 -12  TD (Entry entry\(key, Val\(\)\);) TjT* (std::pair<Entry*,Entry*> range) Tj33.6 -12  TD (= std::equal_range\(tbl, tbl+n, entry\);) Tj241.8 708  TD (if\(range.first != range.second\)) Tj9.6 -12  TD (return range.first->second;) Tj-9.6 -12  TD (return def;) Tj-9.6 -12  TD (}) Tj-14.4 -24  TD 0 0 0 rg /F4 10.2  Tf0.2579  Tc 0.7921  Tw (You probably know or guessed that ) Tj161.4 0  TD /F2 10.2  Tf0.255  Tc 0  Tw (std::equal_range) Tj-161.4 -12  TD /F4 10.2  Tf-0.1038  Tc 0.9902  Tw (returns the range of entries which compare equal to the value to) Tj0 -12  TD -0.0867  Tc 0.1549  Tw (be searched. If there are no duplicates in the collection, this range) TjT* 0.4857  Tc 0.5643  Tw (will encompass either zero or one element. Also note the) TjT* 0.0892  Tc 1.0808  Tw (declaration of the function parameter ) Tj163.8 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (tbl) Tj18.6 0  TD /F4 10.2  Tf0.1545  Tc 0.8955  Tw (, which looks a bit) Tj-182.4 -12  TD 0.1056  Tc 1.0194  Tw (weird at first glance. This declaration specifies that ) Tj225.6 0  TD /F2 10.2  Tf0.08  Tc 0  Tw (tbl) Tj22.8 0  TD /F4 10.2  Tf0.4226  Tc 0.6274  Tw (is a) Tj-248.4 -12  TD 0.5178  Tc 0.4655  Tw (reference to an array whose elements are of type ) Tj231 0  TD /F2 10.2  Tf0.48  Tc 0  Tw (const) Tj-231 -12  TD -0.0867  Tc (std::pair<Key,Val>) Tj112.2 0  TD /F4 10.2  Tf-0.0753  Tc 1.1253  Tw (and whose size is ) Tj77.4 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (n) Tj9.6 0  TD /F4 10.2  Tf-0.0625  Tc 1.1125  Tw (elements. Since) Tj-199.2 -12  TD /F2 10.2  Tf-0.12  Tc 0  Tw (Key) Tj18 0  TD /F4 10.2  Tf-0.15  Tc (, ) Tj6 0  TD /F2 10.2  Tf-0.12  Tc (Val) Tj22.2 0  TD /F4 10.2  Tf-0.1096  Tc -0.0404  Tw (and ) Tj18 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (n) Tj9.6 0  TD /F4 10.2  Tf-0.0592  Tc 1.2292  Tw (are template parameters the compiler deduces) Tj-73.8 -12  TD -0.0929  Tc 0.1229  Tw (all this information at compile time. This version of lookup hence) Tj0 -12  TD 0  Tc 1.2746  Tw (requires the table to be an array of ) Tj153 0  TD /F2 10.2  Tf0.0133  Tc 0  Tw (std::pair) Tj59.4 0  TD /F4 10.2  Tf0.0629  Tc 0.9871  Tw (objects. The) Tj-212.4 -12  TD 0.6593  Tc 2.9907  Tw (example table above thus has to be changed to use) Tj0 -12  TD /F2 10.2  Tf-0.12  Tc 1.2  Tw (std::pair<int,const char*>) Tj159.6 0  TD /F4 10.2  Tf-0.0709  Tc 0.3209  Tw (instead of the anonymous) Tj-159.6 -12  TD /F2 10.2  Tf-0.12  Tc 0  Tw (struct) Tj36 0  TD /F4 10.2  Tf-0.1143  Tc -0.0357  Tw (. You use it like this:) Tj-21.6 -24  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.1064  Tc 0.0136  Tw (std::cout << lookup\(table,6,"???"\) << std::endl;) Tj-14.4 -24  TD 0 0 0 rg /F4 10.2  Tf-0.0705  Tc 0.5205  Tw (But alas, it doesn\222t work. As ) Tj120 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (std::pair) Tj57 0  TD /F4 10.2  Tf-0.0839  Tc 0.9339  Tw (has constructors, it is) Tj-177 -12  TD -0.0599  Tc 1.2736  Tw (not an aggregate, and thus can not be initialized with the curly) Tj0 -12  TD 0.094  Tc 1.0893  Tw (braces notation. Try it: Your compiler will complain. For the) TjT* 0.235  Tc 0.875  Tw (same reason it will most probably not be put into read-only) TjT* -0.1366  Tc 0.2866  Tw (storage. Clearly, ) Tj67.8 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (std::pair) Tj57 0  TD /F4 10.2  Tf-0.1372  Tc 0.4672  Tw (needs to be replaced by something) Tj-124.8 -12  TD -0.082  Tc -0.068  Tw (that allows aggregate initialization:) Tj14.4 -24  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc 0  Tw (template<typename Key, typename Val>) Tj0 -12  TD (struct Pair {) Tj9.6 -12  TD (Key key;) Tj0 -12  TD (Val val;) Tj-9.6 -12  TD (};) Tj0 -24  TD 0.106  Tc 0.014  Tw (template<typename Key, typename Val, unsigned n>) Tj0 -12  TD 0.1064  Tc 0.0136  Tw (const Val &lookup\(const Pair<Key,Val>\(&tbl\)[n],) Tj86.4 -12  TD 0.0978  Tc 0.0222  Tw (const Key &key, const Val &def\) {) Tj-76.8 -12  TD 0.12  Tc 0  Tw (typedef const Pair<Key,Val> Entry;) Tj0 -12  TD (Entry entry = { key, Val\(\) };) TjT* (std::pair<Entry*,Entry*> range) Tj33.6 -12  TD 0.1029  Tc 0.0171  Tw (= std::equal_range\(tbl, tbl+n, entry\);) Tj-33.6 -12  TD 0.12  Tc 0  Tw (if\(range.first != range.second\)) Tj9.6 -12  TD (return range.first->val;) Tj-9.6 -12  TD (return def;) Tj-9.6 -12  TD (}) Tj-14.4 -24  TD 0 0 0 rg /F4 10.2  Tf-0.1192  Tc -0.0308  Tw (That didn\222t work either. Here\222s what Visual C++ 7.1 had to say:) Tj14.4 -24  TD /F2 7.8  Tf0.12  Tc 0  Tw (main.cpp\(33\) : error C2782: 'const Val) Tj0 -12  TD (&lookup\(const Pair<Key,Val> \(&\)[n],const Key) TjT* (&,const Val &\)' : template parameter 'Val' is) TjT* (ambiguous) Tj14.4 -12  TD (main.cpp\(11\) : see declaration of 'lookup') Tj0 -12  TD (could be 'const char [4]') TjT* (or       'const char *') Tj-28.8 -24  TD /F4 10.2  Tf-0.0641  Tc 0.2959  Tw (Ok, fair enough, I thought, the compiler might have a point here.) Tj0 -12  TD 0.095  Tc 0.955  Tw (It can\222t figure out the proper type for ) Tj165.6 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (Val) Tj18.6 0  TD /F4 10.2  Tf0.1171  Tc 0.9329  Tw (, because it occurs) Tj-184.2 -12  TD -0.0898  Tc 0.2398  Tw (twice in ) Tj35.4 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (lookup) Tj36 0  TD /F4 10.2  Tf-0.1085  Tc 0.6442  Tw (\222s signature \(once as part of the ) Tj132 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (Pair) Tj24 0  TD /F4 10.2  Tf0.0423  Tc 0.4077  Tw (, once as) TjETendstreamendobj40 0 obj10366endobj38 0 obj<</Type /Page/Parent 5 0 R/Resources <</Font 43 0 R/ProcSet 2 0 R>>/Contents 39 0 R>>endobj43 0 obj<</F0 6 0 R/F1 8 0 R/F2 10 0 R/F4 16 0 R/F8 30 0 R/F10 41 0 R>>endobj45 0 obj<</Length 46 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (8) Tj0 768.6  TD /F0 12  Tf-0.0037  Tc 0.2137  Tw (Overload issue 61 june 2004) Tj0 -40.8  TD /F4 10.2  Tf-0.0991  Tc 0.2491  Tw (the type of the ) Tj61.2 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (def) Tj21 0  TD /F4 10.2  Tf-0.1591  Tc 0.4377  Tw (argument\). What can we do about this? Well,) Tj-82.2 -12  TD 0.2411  Tc 1.0489  Tw (I decided to try a separate template parameter for the array) Tj0 -12  TD -0.0896  Tc -0.0604  Tw (element type, like this:) Tj14.4 -24  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc 0  Tw (template<typename Key, typename Val,) Tj43.2 -12  TD (typename Elem, unsigned n>) Tj-43.2 -12  TD (const Val &lookup\(Elem\(&tbl\)[n],) Tj86.4 -12  TD (const Key &key, const Val &def\) {) Tj-76.8 -12  TD (Elem entry = { key, Val\(\) };) Tj0 -12  TD (std::pair<Elem*,Elem*> range) Tj33.6 -12  TD (= std::equal_range\(tbl, tbl+n, entry\);) Tj-33.6 -12  TD (if\(range.first != range.second\)) Tj9.6 -12  TD (return range.first->val;) Tj-9.6 -12  TD (return def;) Tj-9.6 -12  TD (}) Tj-14.4 -24  TD 0 0 0 rg /F4 10.2  Tf-0.0754  Tc 0.8754  Tw (I imagined that it would be easier for the compiler to figure out) Tj0 -12  TD -0.0822  Tc 0.6179  Tw (the various type promotions/decays when doing the initialization) TjT* 0.1827  Tc 1.0673  Tw (of the variable entry inside the function template. This stuff) TjT* 0.3977  Tc 0.7523  Tw (would then not get in the way when it tried to deduce the) TjT* 0.424  Tc 1.0546  Tw (template parameters. The compiler still had something to) TjT* -0.097  Tc -0.053  Tw (complain about, however:) Tj14.4 -24  TD /F2 7.8  Tf0.12  Tc 0  Tw (main.cpp\(13\) : error C2440: 'type cast' : cannot) Tj0 -12  TD (convert from 'int' to 'const char [4]') Tj14.4 -12  TD (There are no conversions to array types,) Tj-14.4 -12  TD (although there are conversions to references or) Tj0 -12  TD (pointers to arrays) Tj14.4 -12  TD (main.cpp\(32\) : see reference to function) Tj-14.4 -12  TD (template instantiation 'Val \(&lookup<int,const) Tj0 -12  TD (char[4],const Pair<Key,const char *>,7>\(Elem) TjT* (\(&\)[7],const Key &,Val \(&\)\)\)' being compiled) Tj14.4 -12  TD (with) Tj0 -12  TD ([) Tj14.4 -12  TD (Val=const char [4],) Tj0 -12  TD (Key=int,) TjT* (Elem=const Pair<int,const char *>) Tj-14.4 -12  TD (]) Tj-14.4 -12  TD (main.cpp\(16\) : error C2440: 'return' : cannot) Tj0 -12  TD (convert from 'const char *const ' to 'const char) TjT* (\(&\)[4]') Tj14.4 -12  TD (Reason: cannot convert from 'const char *const ') Tj-14.4 -12  TD (to 'const char [4]') Tj14.4 -12  TD (There are no conversions to array types,) Tj-14.4 -12  TD (although there are conversions to references or) Tj0 -12  TD (pointers to arrays) Tj-14.4 -24  TD /F4 10.2  Tf-0.0908  Tc 0.2135  Tw (The first error looked like complete idiocy to me. Why would the) Tj0 -12  TD 0.1633  Tc 1.0067  Tw (compiler want to convert an ) Tj127.2 0  TD /F2 10.2  Tf0.28  Tc 0  Tw (int) Tj22.8 0  TD /F4 10.2  Tf0.2452  Tc 0.5048  Tw (to a ) Tj20.4 0  TD /F2 10.2  Tf0.23  Tc 2.65  Tw (const char [4]) Tj-170.4 -12  TD /F4 10.2  Tf-0.1118  Tc 0.4868  Tw (anyway? It had deduced the template arguments correctly, hadn\222t) Tj0 -12  TD -0.0839  Tc -0.0661  Tw (it? Compiler confusion!) Tj11.4 -12  TD 0.0346  Tc 0.4154  Tw (Let\222s look at the second error then, as it actually made some) Tj-11.4 -12  TD -0.0924  Tc 0.4424  Tw (sense to me. I\222m using the ) Tj109.8 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (Val) Tj20.4 0  TD /F4 10.2  Tf-0.0974  Tc 0.3974  Tw (template parameter for the return) Tj-130.2 -12  TD -0.1867  Tc -0.3061  Tw (type as well as the default value, so it is no surprise that the compiler) Tj0 -12  TD -0.0913  Tc -0.2433  Tw (thinks it should be an array when I\222m providing an array in the call) TjT* -0.1036  Tc -0.3234  Tw (to lookup. That can be fixed by forcing the pointer decay in the call) TjT* -0.0831  Tc -0.0669  Tw (to lookup, like this:) Tj14.4 -24  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc 0  Tw (std::cout << lookup\(table,6,\(const char*\)"???"\)) Tj48 -12  TD (<< std::endl;) Tj213 708  TD 0 0 0 rg /F4 10.2  Tf0.1175  Tc 0.8125  Tw (Disgusting, isn\222t it? It could be done with a more \223politically) Tj0 -12  TD 0.1196  Tc 0.3804  Tw (correct\224 type of cast, of course, but it is actually a nuisance to) TjT* 0.1655  Tc 1.2845  Tw (need one in the first place. Let\222s see what we can do about) TjT* 0.0851  Tc 0  Tw (this:) Tj13.8 -24  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc (template<typename EKey, typename EVal,) Tj43.2 -12  TD (unsigned n, typename Key, typename Val>) Tj-43.2 -12  TD (const EVal &lookup\(const Pair<EKey,EVal>\(&tbl\)[n],) Tj91.2 -12  TD -0.1022  Tc 0.2222  Tw (const Key &key, const Val &def\) {) Tj-81.6 -12  TD 0.12  Tc 0  Tw (typedef const Pair<EKey,EVal> Elem;) Tj0 -12  TD (Elem entry = { key, Val\(\) };) TjT* (std::pair<Elem*,Elem*> range) Tj33.6 -12  TD (= std::equal_range\(tbl, tbl+n, entry\);) Tj-33.6 -12  TD (if\(range.first != range.second\)) Tj9.6 -12  TD (return range.first->val;) Tj-9.6 -12  TD (return def;) Tj-9.6 -12  TD (}) Tj-13.8 -24  TD 0 0 0 rg /F4 10.2  Tf-0.0962  Tc 0.6662  Tw (Note that I reordered the template parameters to match the order) Tj0 -12  TD -0.0859  Tc 0.8632  Tw (of occurrence in the function argument list. I thought that was a) TjT* -0.1099  Tc 0.9199  Tw (good idea as the number of template parameters is growing. My) TjT* -0.0659  Tc -0.0841  Tw (stupid compiler still doesn\222t get it:) Tj13.8 -24  TD /F2 7.8  Tf0.12  Tc 0  Tw (main.cpp\(14\) : error C2440: 'type cast' : cannot) Tj0 -12  TD (convert from 'int' to 'const char [4]') Tj14.4 -12  TD (There are no conversions to array types,) Tj-14.4 -12  TD (although there are conversions to references or) Tj0 -12  TD (pointers to arrays) TjT* (main.cpp\(33\) : see reference to function template) TjT* (instantiation 'const EVal &lookup<int,const) TjT* (char*,7,int,const char[4]>\(const Pair<Key,Val>) TjT* (\(&\)[7],const Key &,const char \(&\)\) ' being compiled) Tj14.4 -12  TD (with) Tj0 -12  TD ([) Tj14.4 -12  TD (EVal=const char *,) Tj0 -12  TD (Key=int,) TjT* (Val=const char *) Tj-14.4 -12  TD (]) Tj-14.4 -12  TD (main.cpp\(18\) : warning C4172: returning address of) Tj0 -12  TD (local variable or temporary) Tj-13.8 -24  TD /F4 10.2  Tf-0.0826  Tc 0.3826  Tw (I still can\222t figure out why the compiler wants to convert an ) Tj245.4 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (int) Tj-245.4 -12  TD /F4 10.2  Tf-0.3548  Tc 0.8048  Tw (to a ) Tj18.6 0  TD /F2 10.2  Tf-0.12  Tc 1.8  Tw (const char [4]) Tj87.6 0  TD /F4 10.2  Tf-0.0552  Tc 0.6052  Tw (, but the warning is sensible: ) Tj121.2 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (Val) Tj21.6 0  TD /F4 10.2  Tf0.0904  Tc (and) Tj-249 -12  TD /F2 10.2  Tf-0.12  Tc (EVal) Tj27.6 0  TD /F4 10.2  Tf0.0221  Tc 1.1029  Tw (aren\222t necessarily the same, so the compiler is probably) Tj-27.6 -12  TD -0.0796  Tc 1.1296  Tw (compelled to introduce a temporary in the last return statement.) Tj0 -12  TD -0.069  Tc 0.5735  Tw (This temporary of course goes away too soon. Ok, that\222s easy to) TjT* -0.2419  Tc 0  Tw (fix:) Tj13.8 -24  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc (template<typename EKey, typename EVal,) Tj43.2 -12  TD (unsigned n, typename Key, typename Val>) Tj-43.2 -12  TD (EVal lookup\(const Pair<EKey,EVal>\(&tbl\)[n],) Tj57.6 -12  TD (const Key &key, const Val &def\) {) Tj-48 -12  TD (typedef const Pair<EKey,EVal> Elem;) Tj0 -12  TD (Elem entry = { key, Val\(\) };) TjT* (std::pair<Elem*,Elem*> range) Tj33.6 -12  TD (= std::equal_range\(tbl, tbl+n, entry\);) Tj-33.6 -12  TD (if\(range.first != range.second\)) Tj9.6 -12  TD (return range.first->val;) Tj-9.6 -12  TD (return def;) Tj-9.6 -12  TD (}) TjETendstreamendobj46 0 obj7862endobj44 0 obj<</Type /Page/Parent 5 0 R/Resources <</Font <</F0 6 0 R /F2 10 0 R /F4 16 0 R /F10 41 0 R >>/ProcSet 2 0 R>>/Contents 45 0 R>>endobj49 0 obj<</Length 50 0 R>>stream
BT29.4 769.8  TD0 0 0 rg /F4 10.2  Tf-0.2394  Tc 0.0894  Tw (When ) Tj27 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (Val) Tj21.6 0  TD /F4 10.2  Tf-0.1774  Tc 0.6274  Tw (is a ) Tj18 0  TD /F2 10.2  Tf-0.12  Tc 1.8  Tw (const char*) Tj71.4 0  TD /F4 10.2  Tf-0.0866  Tc 1.0366  Tw (the return by value is no more) Tj-138 -12  TD 0.0368  Tc 1.0732  Tw (expensive that the return by reference I used before. Alas, the) Tj0 -12  TD 0.5443  Tc 0.5057  Tw (value type could well be something more complicated \(a) TjT* /F2 10.2  Tf-0.02  Tc 0  Tw (struct) Tj40.8 0  TD /F4 10.2  Tf0.1038  Tc 1.0008  Tw (full of stuff\), so I\222m not very happy to have a copy) Tj-40.8 -12  TD -0.079  Tc 0.004  Tw (made. But if it must be it shall be...) Tj11.4 -12  TD 0.2353  Tc 0.3481  Tw (The weird error remains, however. So how about asking a) Tj-11.4 -12  TD -0.1088  Tc -0.0412  Tw (different compiler? Here\222s what GCC 3.3 says:) Tj13.8 -24  TD /F2 7.8  Tf0.12  Tc 0  Tw (main.cpp: In function 'EVal lookup\(const Pair<EKey,) Tj0 -12  TD (EVal> \(&\)[n], const Key&, const Val&\) [with EKey =) TjT* (int, EVal = const char*, unsigned int n = 7, Key =) TjT* (int, Val = char[4]]':) TjT* (main.cpp:33:   instantiated from here) TjT* (main.cpp:14: error: ISO C++ forbids casting to an) TjT* (array type 'char[4]') Tj-13.8 -24  TD /F4 10.2  Tf0.3574  Tc 0.8726  Tw (A number of further errors follow, but they\222re related to a) Tj0 -12  TD -0.102  Tc 0.8247  Tw (different problem to which I\222m going to turn later. Let\222s first try) TjT* -0.0893  Tc 1.2393  Tw (to find out what the error above means. Line 14 is where entry) TjT* -0.087  Tc 0.6037  Tw (gets initialized. So what\222s wrong with this? When two compilers) TjT* -0.1  Tc 0.175  Tw (more or less agree, they might actually be right.) Tj11.4 -12  TD -0.0813  Tc 0.5313  Tw (Both compilers seem to believe that I want a conversion from) Tj-11.4 -12  TD /F2 10.2  Tf-0.27  Tc 0  Tw (EVal) Tj25.2 0  TD /F4 10.2  Tf-0.0678  Tc -0.0822  Tw (to ) Tj9.6 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (Val) Tj19.8 0  TD /F4 10.2  Tf-0.0983  Tc -0.5017  Tw (\(give or take a ) Tj57 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (const) Tj30 0  TD /F4 10.2  Tf-0.1915  Tc -0.3585  Tw (\). I would have thought it ought) Tj-141.6 -12  TD -0.0517  Tc -0.4983  Tw (to be the other way round. I construct a temporary of type ) Tj228.6 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (Val) Tj20.4 0  TD /F4 10.2  Tf0.0904  Tc (and) Tj-249 -12  TD -0.1221  Tc 0.4221  Tw (expect the compiler to convert it to an ) Tj156.6 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (EVal) Tj27 0  TD /F4 10.2  Tf-0.0575  Tc 0.3075  Tw (in order to initialize) Tj-183.6 -12  TD -0.0978  Tc -0.0522  Tw (the second field of the variable entry. In my particular case ) Tj236.4 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (Val) Tj20.4 0  TD /F4 10.2  Tf0.1983  Tc (is) Tj-256.8 -12  TD -0.1508  Tc 0.2008  Tw (an array and ) Tj50.4 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (EVal) Tj26.4 0  TD /F4 10.2  Tf-0.0669  Tc -0.4581  Tw (is a pointer, so the conversion should simply be) Tj-76.8 -12  TD -0.1105  Tc -0.4758  Tw (a decay. But why convert anyway? I\222ve got an idea: Let\222s construct) Tj0 -12  TD -0.3144  Tc 0.1644  Tw (an ) Tj12 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (EVal) Tj26.4 0  TD /F4 10.2  Tf-0.0441  Tc (directly:) Tj-24.6 -24  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc (template<typename EKey, typename EVal,) Tj43.2 -12  TD (unsigned n, typename Key, typename Val>) Tj-43.2 -24  TD (EVal lookup\(const Pair<EKey,EVal>\(&tbl\)[n],) Tj57.6 -12  TD (const Key &key, const Val &def\) {) Tj-48 -12  TD (typedef const Pair<EKey,EVal> Elem;) Tj0 -12  TD (Elem entry = { key, EVal\(\) };) TjT* (std::pair<Elem*,Elem*> range) Tj33.6 -12  TD (= std::equal_range\(tbl, tbl+n, entry\);) Tj-33.6 -12  TD (if\(range.first != range.second\)) Tj9.6 -12  TD (return range.first->val;) Tj-9.6 -12  TD (return def;) Tj-9.6 -12  TD (}) Tj-13.8 -24  TD 0 0 0 rg /F4 10.2  Tf-0.082  Tc 0.172  Tw (That sorts it out. But it feels as if I had merely dodged the issue. I) Tj0 -12  TD -0.114  Tc 0.4004  Tw (still don\222t know why the original attempt failed. If you know, tell) TjT* -0.2048  Tc 0  Tw (me.) Tj11.4 -12  TD 0.2488  Tc 0.3812  Tw (That brings us to the next errors I mentioned above. GCC) Tj-11.4 -12  TD 0.1181  Tc 0.4955  Tw (emits a lot of error messages which are too numerous to print) Tj0 -12  TD 0.4486  Tc 0.0014  Tw (here, but most of them contain the text \223) Tj183 0  TD /F2 10.2  Tf0.48  Tc 0.9  Tw (no match for) Tj-183 -12  TD 0.08  Tc 0  Tw (operator<) Tj56.4 0  TD /F4 10.2  Tf0.1388  Tc 0.6112  Tw (\224, which is actually quite right since I obviously) Tj-56.4 -12  TD 0.0703  Tc 0.294  Tw (forgot to define how to compare a ) Tj145.2 0  TD /F2 10.2  Tf0.33  Tc 0  Tw (Pair) Tj28.2 0  TD /F4 10.2  Tf0.1051  Tc 0.0449  Tw (to another. So I guess) Tj-173.4 -12  TD 0.0937  Tc -0.2437  Tw (I have two options here. I could either provide ) Tj193.2 0  TD /F2 10.2  Tf0.1467  Tc 0  Tw (operator<) Tj58.2 0  TD /F4 10.2  Tf0.2356  Tc (for) Tj-251.4 -12  TD 0.2712  Tc 0.1788  Tw (a ) Tj12.6 0  TD /F2 10.2  Tf0.63  Tc 0  Tw (Pair) Tj34.8 0  TD /F4 10.2  Tf0.5141  Tc 4.8216  Tw (or I could provide a custom predicate to) Tj-47.4 -12  TD /F2 10.2  Tf0.255  Tc 0  Tw (std::equal_range) Tj105 0  TD /F4 10.2  Tf0.2124  Tc 0.4947  Tw (to do the comparison. I only want to) Tj-105 -12  TD 0.4295  Tc 0.1296  Tw (compare the keys, so I feel that the first option amounts to) Tj0 -12  TD 0.1591  Tc 0.5159  Tw (cheating. If someone else wanted to compare two ) Tj216 0  TD /F2 10.2  Tf0.03  Tc 0  Tw (Pair) Tj25.2 0  TD /F4 10.2  Tf0.2759  Tc 0.1741  Tw (s and) Tj-241.2 -12  TD 0.1774  Tc 0.5392  Tw (did not know about my ruminations here she would probably) Tj0 -12  TD 0.463  Tc 0.587  Tw (expect ) Tj33 0  TD /F2 10.2  Tf0.5467  Tc 0  Tw (operator<) Tj63.6 0  TD /F4 10.2  Tf0.4719  Tc 0.5781  Tw (to take both fields of the ) Tj119.4 0  TD /F2 10.2  Tf0.48  Tc 0  Tw (Pair) Tj30 0  TD /F4 10.2  Tf0.6822  Tc (into) Tj-246 -12  TD 0.141  Tc (account.) Tj286.2 708  TD 0.1082  Tc 0.3963  Tw (So I think I should rather provide a special predicate with a) Tj-11.4 -12  TD 0.1089  Tc 0.5411  Tw (sensible name like ) Tj81.6 0  TD /F2 10.2  Tf0.2229  Tc 0  Tw (LessKey) Tj46.8 0  TD /F4 10.2  Tf0.1574  Tc 0.3926  Tw (that makes it clear that only the) Tj-128.4 -12  TD 0.1174  Tc 0.0326  Tw (key is being compared. Here we go:) Tj14.4 -17.4  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc 0  Tw (template<typename Key, typename Val>) Tj0 -12  TD (struct LessKey : std::binary_function<) Tj110.4 -12  TD (const Pair<Key,Val>&,) Tj0 -12  TD 0.0969  Tc 0.0231  Tw (const Pair<Key,Val>&,bool> {) Tj-100.8 -12  TD 0.12  Tc -0.3  Tw (result_type operator\(\)\(first_argument_type a,) Tj96 -12  TD 0.0978  Tc 0.0222  Tw (second_argument_type b\) const) Tj-86.4 -12  TD 0.12  Tc 0  Tw ({ return a.key < b.key; }) Tj-19.2 -12  TD (};) Tj-14.4 -18.6  TD 0 0 0 rg /F4 10.2  Tf0.6425  Tc 1.8741  Tw (Look Ma! I even made it adaptable by deriving from) Tj0 -12  TD /F2 10.2  Tf-0.12  Tc 0  Tw (std::binary_function) Tj120 0  TD /F4 10.2  Tf-0.0767  Tc 1.1267  Tw (! I earned extra brownie points for) Tj-120 -12  TD -0.0725  Tc -0.0175  Tw (that, didn\222t I? My lookup function template now looks like this:) Tj14.4 -24  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc 0  Tw (template<typename EKey, typename EVal,) Tj43.2 -12  TD 0.1024  Tc 0.0176  Tw (unsigned n, typename Key, typename Val>) Tj-43.2 -12  TD 0.12  Tc 0  Tw (EVal lookup\(const Pair<EKey,EVal>\(&tbl\)[n],) Tj57.6 -12  TD (const Key &key, const Val &def\) {) Tj-48 -12  TD (typedef LessKey<EKey,EVal> Pred;) Tj0 -12  TD (typedef const Pair<EKey,EVal> Elem;) TjT* (Elem entry = { key, EVal\(\) };) TjT* (std::pair<Elem*,Elem*> range) Tj14.4 -12  TD 0.1057  Tc 0.0143  Tw (= std::equal_range\(tbl, tbl+n, entry, Pred\(\)\);) Tj-14.4 -12  TD 0.12  Tc 0  Tw (if\(range.first != range.second\)) Tj9.6 -12  TD (return range.first->val;) Tj-9.6 -12  TD (return def;) Tj-9.6 -12  TD (}) Tj-14.4 -24  TD 0 0 0 rg /F4 10.2  Tf-0.3154  Tc 0.8154  Tw (Needless to say, GCC still isn\222t happy. It emits a series of warnings) Tj0 -12  TD -0.3043  Tc 0.1543  Tw (regarding the implicit usage of ) Tj118.8 0  TD /F2 10.2  Tf-0.42  Tc 0  Tw (typename) Tj46.2 0  TD /F4 10.2  Tf-0.273  Tc -0.237  Tw (. Here\222s just one of them:) Tj-150.6 -24  TD /F2 7.8  Tf0.12  Tc 0  Tw (main.cpp:14: Warning: 'LessKey<Key,) Tj0 -12  TD (Val>::result_type' is implicitly a typename) TjT* (main.cpp:14: Warning: implicit typename is) TjT* (deprecated, please see the documentation for) TjT* (details) Tj-14.4 -24  TD /F4 10.2  Tf0.7094  Tc 0.9406  Tw (The same happens for ) Tj112.2 0  TD /F2 10.2  Tf0.7326  Tc 0  Tw (first_argument_type) Tj135.6 0  TD /F4 10.2  Tf0.6904  Tc (and) Tj-247.8 -12  TD /F2 10.2  Tf0.09  Tc (second_argument_type) Tj124.8 0  TD /F4 10.2  Tf0.082  Tc 1.268  Tw (. I could ignore those as they\222re) Tj-124.8 -12  TD -0.0151  Tc 1.1651  Tw (only warnings, but I want to get it right. Furthermore I think I) Tj0 -12  TD 0.0425  Tc 1.0075  Tw (know what\222s amiss: I need to use the keyword ) Tj202.8 0  TD /F2 10.2  Tf0.105  Tc 0  Tw (typename) Tj52.8 0  TD /F4 10.2  Tf0.2322  Tc (to) Tj-255.6 -12  TD -0.0738  Tc -0.0762  Tw (make clear that they are types. Next try:) Tj14.4 -24  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc 0  Tw (template<typename Key, typename Val>) Tj0 -12  TD (struct LessKey : std::binary_function<) Tj110.4 -12  TD (const Pair<Key,Val>&,) Tj0 -12  TD 0.0969  Tc 0.0231  Tw (const Pair<Key,Val>&,bool> {) Tj-100.8 -12  TD 0.12  Tc 0  Tw (typename result_type operator\(\)\() Tj28.8 -12  TD (typename first_argument_type a,) Tj0 -12  TD 0.0857  Tc 0.0343  Tw (typename second_argument_type b\) const) Tj-24 -12  TD 0.12  Tc 0  Tw ({ return a.key < b.key; }) Tj-14.4 -12  TD (};) Tj-14.4 -24  TD 0 0 0 rg /F4 10.2  Tf-0.1152  Tc 0.5052  Tw (Now, GCC defecates an even bigger heap of error messages onto) Tj0 -12  TD -0.0749  Tc -0.0205  Tw (me \(\221scuse my French!\). I don\222t want to spare you the experience:) Tj14.4 -24  TD /F2 7.8  Tf0.12  Tc 0  Tw (main.cpp:13: error: Fehler beim Parsen before) Tj0 -12  TD ('operator') Tj240 -19.8  TD /F0 10.8  Tf0.1872  Tc (9) Tj-198.6 768.6  TD /F0 12  Tf-0.0037  Tc -0.0863  Tw (Overload issue 61 june 2004) TjETendstreamendobj50 0 obj10512endobj47 0 obj<</Type /Page/Parent 48 0 R/Resources <</Font <</F0 6 0 R /F2 10 0 R /F4 16 0 R /F10 41 0 R >>/ProcSet 2 0 R>>/Contents 49 0 R>>endobj52 0 obj<</Length 53 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.0912  Tc 0  Tw (10) Tj0 768.6  TD /F0 12  Tf-0.0037  Tc 0.2137  Tw (Overload issue 61 june 2004) Tj14.4 -40.8  TD /F2 7.8  Tf0.12  Tc 0  Tw (/usr/include/c++/3.3/bits/stl_algo.h: In function) Tj0 -12  TD ('std::pair<_ForwardIter, _ForwardIter>) TjT* (std::equal_range\(_ForwardIter, _ForwardIter, const) TjT* (_Tp&, _Compare\) [with _ForwardIter = const) TjT* (Pair<int, const char*>*, _Tp = Pair<int, const) TjT* (char*>, _Compare = LessKey<int, const char*>]':) TjT* (main.cpp:22:   instantiated from 'EVal lookup\(const) TjT* (Pair<Key, Val> \(&\)[n], const Key&, const Val&\)) TjT* ([with EKey = int, EVal = const char*, unsigned int) TjT* (n = 7, Key = int, Val = char[4]]') TjT* (main.cpp:40:   instantiated from here) TjT* (/usr/include/c++/3.3/bits/stl_algo.h:3026: error:) TjT* (no match for call to '\(LessKey<int, const char*>\)) TjT* (\(const Pair<int, const char*>&, const Pair<int,) TjT* (const char*>&\)') TjT* (/usr/include/c++/3.3/bits/stl_algo.h:3031: error:) TjT* (no match for call to '\(LessKey<int, const char*>\)) TjT* (\(const Pair<int, const char*>&, const Pair<int,) TjT* (const char*>&\)') TjT* (/usr/include/c++/3.3/bits/stl_algo.h: In function) TjT* ('_ForwardIter std::lower_bound\(_ForwardIter,) TjT* (_ForwardIter, const _Tp&, _Compare\) [with) TjT* (_ForwardIter = const Pair<int, const char*>*, _Tp =) TjT* (Pair<int, const char*>, _Compare = LessKey<int,) TjT* (const char*>]':) TjT* (/usr/include/c++/3.3/bits/stl_algo.h:3034:) TjT* (instantiated from 'std::pair<_ForwardIter,) TjT* (_ForwardIter> std::equal_range\(_ForwardIter,) TjT* (_ForwardIter, const _Tp&, _Compare\) [with) TjT* (_ForwardIter = const Pair<int, const char*>*, _Tp =) TjT* (Pair<int, const char*>, _Compare = LessKey<int,) TjT* (const char*>]') TjT* (main.cpp:22:   instantiated from 'EVal lookup\(const) TjT* (Pair<Key, Val> \(&\)[n], const Key&, const Val&\)) TjT* ([with EKey = int, EVal = const char*, unsigned int) TjT* (n = 7, Key = int, Val = char[4]]') TjT* (main.cpp:40:   instantiated from here) TjT* (/usr/include/c++/3.3/bits/stl_algo.h:2838: error:) TjT* (no match for call to '\(LessKey<int, const char*>\)) TjT* (\(const Pair<int, const char*>&, const Pair<int,) TjT* (const char*>&\)') TjT* (/usr/include/c++/3.3/bits/stl_algo.h: In function) TjT* ('_ForwardIter std::upper_bound\(_ForwardIter,) TjT* (_ForwardIter, const _Tp&, _Compare\) [with) TjT* (_ForwardIter = const Pair<int, const char*>*, _Tp =) TjT* (Pair<int, const char*>, _Compare = LessKey<int,) TjT* (const char*>]':) TjT* (/usr/include/c++/3.3/bits/stl_algo.h:3036:) TjT* (instantiated from `std::pair<_ForwardIter,) TjT* (_ForwardIter> std::equal_range\(_ForwardIter,) TjT* (_ForwardIter, const _Tp&, _Compare\) [with) TjT* (_ForwardIter = const Pair<int, const char*>*, _Tp =) TjT* (Pair<int, const char*>, _Compare = LessKey<int,) TjT* (const char*>]') TjT* (main.cpp:22:   instantiated from 'EVal lookup\(const) TjT* (Pair<Key, Val> \(&\)[n], const Key&, const Val&\)) TjT* ([with EKey = int, EVal = const char*, unsigned int) TjT* (n = 7, Key = int, Val = char[4]]') TjT* (main.cpp:40:   instantiated from here) TjT* (/usr/include/c++/3.3/bits/stl_algo.h:2923: error:) Tj274.8 708  TD (no match for call to '\(LessKey<int, const char*>\)) Tj0 -12  TD (\(const Pair<int, const char*>&, const Pair<int,) TjT* (const char*>&\)') Tj-13.8 -24  TD /F4 10.2  Tf-0.0918  Tc 0.8418  Tw (I hope the occasional German word in there doesn\222t irritate you.) Tj0 -12  TD -0.1152  Tc 0.8925  Tw (Having part of the output of tools translated to German with the) TjT* -0.0382  Tc 1.1549  Tw (remainder in English leads to interesting effects. That\222s a story) TjT* -0.1973  Tc 0.0473  Tw (for another day.) Tj10.8 -12  TD 0.2247  Tc 3.0253  Tw (Are you actually able to spot what\222s wrong from the) Tj-10.8 -12  TD -0.1488  Tc -0.4166  Tw (gobbledygook above? I wasn\222t. Give me a hint if you are. All it tells) Tj0 -12  TD -0.1164  Tc -0.1259  Tw (me is that GCC ran into a parsing error in a system library because) TjT* -0.093  Tc -0.297  Tw (of the code I wrote \(!\). Is this a GCC bug? Visual C++ 7.1 is happy) TjT* -0.0935  Tc 0.4435  Tw (with it, no matter whether the ) Tj123.6 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (typename) Tj51 0  TD /F4 10.2  Tf-0.0999  Tc 0.5499  Tw (keywords are there or) Tj-174.6 -12  TD -0.1162  Tc 0.1046  Tw (not. So do I need them or not? How do I write this correctly?) Tj10.8 -12  TD 0.0188  Tc 0.4312  Tw (Time to consult \223the book\224[1]! On page 131 we can find the) Tj-10.8 -12  TD -0.0682  Tc -0.0818  Tw (following description:) Tj10.8 -12  TD 0.0026  Tc 0.4474  Tw (\223The ) Tj22.8 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (typename) Tj50.4 0  TD /F4 10.2  Tf-0.0811  Tc -0.0689  Tw (prefix to a name is required when the name) Tj-84 -12  TD -0.225  Tc 0  Tw (1.) Tj10.8 0  TD -0.0322  Tc -0.1178  Tw (Appears in a template) Tj-10.8 -12  TD -0.225  Tc 0  Tw (2.) Tj10.8 0  TD -0.0387  Tc 0.4887  Tw (Is qualified) Tj-10.8 -12  TD -0.225  Tc 0  Tw (3.) Tj10.8 0  TD -0.0853  Tc 0.1753  Tw (Is not used as in a list of base class specifications or in a list of) Tj0 -12  TD -0.0708  Tc -0.0792  Tw (member initializers introducing a constructor definition) Tj-10.8 -12  TD -0.225  Tc 0  Tw (4.) Tj10.8 0  TD -0.1201  Tc 0.2101  Tw (Is dependent on a template parameter) Tj-10.8 -12  TD -0.1203  Tc 0.2703  Tw (Furthermore, the ) Tj70.2 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (typename) Tj50.4 0  TD /F4 10.2  Tf-0.0855  Tc 0.3355  Tw (prefix is not allowed unless at least) Tj-120.6 -12  TD -0.1063  Tc 0.0763  Tw (the first three previous conditions hold.\224) Tj10.8 -12  TD -0.0653  Tc 0.0076  Tw (Ok, let\222s see whether I can make any sense of this: Rules 1 and) Tj-10.8 -12  TD 0.1878  Tc 0.2622  Tw (3 are obviously met. Rule 4 seems to be met indirectly, since) Tj0 -12  TD /F2 10.2  Tf0.2073  Tc 0  Tw (result_type) Tj85.2 0  TD /F4 10.2  Tf0.2517  Tc 12.0783  Tw (is defined by the base class) Tj-85.2 -12  TD /F2 10.2  Tf-0.21  Tc 0  Tw (std::binary_function) Tj118.2 0  TD /F4 10.2  Tf-0.1199  Tc -0.5551  Tw (, which in turn is a class template that) Tj-118.2 -12  TD -0.0786  Tc -0.4314  Tw (depends on both template parameters ) Tj148.2 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (Key) Tj19.8 0  TD /F4 10.2  Tf-0.1096  Tc -0.0404  Tw (and ) Tj16.8 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (Var) Tj18 0  TD /F4 10.2  Tf-0.1495  Tc -0.6005  Tw (. However, rule) Tj-202.8 -12  TD 0.123  Tc 0.327  Tw (2 seems to be violated, as I can not see any qualification. So I) Tj0 -12  TD -0.0935  Tc 0.5435  Tw (conclude that ) Tj56.4 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (typename) Tj51 0  TD /F4 10.2  Tf-0.1183  Tc 0.5683  Tw (shouldn\222t even be allowed where I put) Tj-107.4 -12  TD -0.1755  Tc -0.2745  Tw (them. So GCC is technically right although it should have generated) Tj0 -12  TD -0.0458  Tc 0.4958  Tw (better error messages. Visual C++ accepted wrong code without) TjT* 0.028  Tc 0.422  Tw (complaint. But what is wrong with the original version without) TjT* /F2 10.2  Tf-0.195  Tc 0  Tw (typename) Tj47.4 0  TD /F4 10.2  Tf-0.0877  Tc 0.5377  Tw (, why is GCC issuing a warning? Rule 2 pretty much) Tj-47.4 -12  TD -0.0707  Tc 0.1207  Tw (excludes that a ) Tj61.8 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (typename) Tj50.4 0  TD /F4 10.2  Tf-0.0461  Tc -0.1039  Tw (is missing elsewhere.) Tj-101.4 -12  TD 0.2656  Tc 0.1844  Tw (I solved the problem by not using ) Tj150 0  TD /F2 10.2  Tf0.2618  Tc 0  Tw (return_type) Tj73.8 0  TD /F4 10.2  Tf0.2387  Tc 0.2113  Tw (and its) Tj-234.6 -12  TD 0.2024  Tc 0.2476  Tw (siblings from ) Tj60 0  TD /F2 10.2  Tf0.24  Tc 0  Tw (std::binary_function) Tj126.6 0  TD /F4 10.2  Tf0.1945  Tc 0.2555  Tw (. The following is) Tj-186.6 -12  TD -0.1364  Tc 0.1864  Tw (accepted by both GCC and Visual C++:) Tj13.8 -24  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc 0  Tw (template<typename Key, typename Val>) Tj0 -12  TD (struct LessKey : std::binary_function<) Tj100.8 -12  TD (const Pair<Key,Val>&,) Tj0 -12  TD (const Pair<Key,Val>&,bool> {) Tj-91.2 -12  TD (bool operator\(\)\(const Pair<Key,Val> &a,) Tj76.8 -12  TD (const Pair<Key,Val> &b\) const) Tj-67.2 -12  TD ({ return a.key < b.key; }) Tj-19.2 -12  TD (};) Tj-13.8 -24  TD 0 0 0 rg /F4 10.2  Tf0.2973  Tc 0.8194  Tw (Again, I had chickened out instead of solving the problem.) Tj0 -12  TD -0.0953  Tc 0.0787  Tw (Swallowing my pride, I went on to the next challenge:) Tj13.8 -24  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc 0  Tw (const char *result = lookup\(table,6,0\);) Tj-13.8 -24  TD 0 0 0 rg /F4 10.2  Tf0.1766  Tc 1.2734  Tw (I guess you see what I want to achieve?!? I want lookup to) Tj0 -12  TD 0.0934  Tc 0.3105  Tw (return a null pointer if the key wasn\222t found in the table. For a) TjT* 0.1041  Tc 0.9459  Tw (table that contains strings as values this is sensible, wouldn\222t) TjT* 0.1431  Tc -0.2931  Tw (you agree?) Tj10.8 -12  TD -0.2149  Tc -0.3351  Tw (It doesn\222t compile. You already guessed why: The third argument) Tj-10.8 -12  TD -0.0684  Tc 0.0275  Tw (to the lookup function gets interpreted as an integer as opposed to) TjETendstreamendobj53 0 obj9281endobj51 0 obj<</Type /Page/Parent 48 0 R/Resources <</Font <</F0 6 0 R /F2 10 0 R /F4 16 0 R /F10 41 0 R >>/ProcSet 2 0 R>>/Contents 52 0 R>>endobj55 0 obj<</Length 56 0 R>>stream
BT29.4 769.8  TD0 0 0 rg /F4 10.2  Tf-0.1026  Tc -0.3974  Tw (a null pointer, so the compiler comes up with the wrong choices for) Tj0 -12  TD 0.2406  Tc 0.5844  Tw (the template parameters and as a consequence the statement) TjT* 0.2712  Tc 0  Tw (\223) Tj4.2 0  TD /F2 10.2  Tf-0.24  Tc -1.08  Tw (return def;) Tj63.6 0  TD /F4 10.2  Tf-0.1618  Tc -0.4548  Tw (\224 fails to compile. I would have to write something) Tj-67.8 -12  TD -0.0527  Tc -0.0973  Tw (like this:) Tj13.8 -12  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc 0  Tw (const char *result = lookup\(table,6,\(char*\)0\);) Tj-13.8 -24  TD 0 0 0 rg /F4 10.2  Tf-0.0659  Tc 0.5159  Tw (But that\222s ugly; can you really expect that from an innocent user) Tj0 -12  TD -0.0961  Tc 0.0661  Tw (of my templates? What about this:) Tj13.8 -24  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc 0  Tw (const char *result = lookup\(table,6,NULL\);) Tj-13.8 -24  TD 0 0 0 rg /F4 10.2  Tf0.361  Tc 0.8224  Tw (Nope, the compiler still interprets the NULL as an integer) Tj0 -12  TD -0.0895  Tc 0.2395  Tw (constant. Back to square 1. GCC\222s error message is actually quite) TjT* -0.125  Tc 0  Tw (interesting:) Tj13.8 -24  TD /F2 7.8  Tf0.12  Tc (main.cpp: In function 'int main\(\)':) Tj0 -12  TD (main.cpp:40: Warnung: passing NULL used for non-) TjT* (pointer converting 3 of 'EVal lookup\(const) TjT* (Pair<Key, Val> \(&\)[n], const Key&, const Val&\)) TjT* ([with EKey = int, EVal = const char*, unsigned int) TjT* (n = 7, Key = int, Val = int]') TjT* (main.cpp: In function 'EVal lookup\(const Pair<Key,) TjT* (Val> \(&\)[n], const Key&, const Val&\) [with EKey =) TjT* (int, EVal = const char*, unsigned int n = 7, Key =) TjT* (int, Val = int]':) TjT* (main.cpp:40:   instantiated from here) TjT* (main.cpp:25: error: invalid conversion from 'const) TjT* (int' to 'const char*') Tj-13.8 -24  TD /F4 10.2  Tf-0.0271  Tc 1.0771  Tw (The compiler does indeed notice that ) Tj159.6 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (NULL) Tj28.2 0  TD /F4 10.2  Tf0.0864  Tc 1.1136  Tw (is being used as a) Tj-187.8 -12  TD 0.1475  Tc 0.9025  Tw (non-pointer, but it still pigheadedly decides to instantiate the) Tj0 -12  TD -0.0887  Tc -0.0613  Tw (template with ) Tj57 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (Val = int) Tj54 0  TD /F4 10.2  Tf-0.15  Tc (.) Tj-99.6 -12  TD 0.2219  Tc 0.2281  Tw (Despair sets in, creeping slowly from the back of my head) Tj-11.4 -12  TD -0.0639  Tc 0.2831  Tw (towards the front. Is there any hope to get this right? Am I trying) Tj0 -12  TD -0.0839  Tc -0.0661  Tw (to do something frivolous? Illegal? Immoral? Fattening?) Tj11.4 -12  TD -0.0008  Tc 0.4008  Tw (Time to step back and take a deep breath. What can we learn) Tj-11.4 -12  TD -0.1441  Tc -0.0059  Tw (from this?) Tj11.4 -12  TD 0.0562  Tc -0.6262  Tw (It doesn\222t take much to get into serious trouble with templates.) Tj-11.4 -12  TD 0.0587  Tc 0.3913  Tw (This doesn\222t mean that templates themselves are to blame. It is) Tj0 -12  TD -0.0509  Tc -0.1741  Tw (rather the interaction between templates and other C++ \223features\224) TjT* 0.0938  Tc 0.0562  Tw (that cause problems. It is similar to combining drugs: Each one) TjT* 0.0403  Tc -0.0703  Tw (is harmless when taken alone, but taken together they might kill) TjT* -0.1125  Tc 0  Tw (you.) Tj11.4 -12  TD -0.071  Tc -0.2426  Tw (Over the last years we have seen an increasing number of tricks) Tj-11.4 -12  TD -0.0765  Tc 0.3765  Tw (and workarounds attempting to control and contain the unwanted) Tj0 -12  TD -0.0863  Tc 0.1363  Tw (effects of these interactions. Library designers are forced to know) TjT* -0.1059  Tc 0.5559  Tw (and use them to prevent unpleasant surprises for the mere mortal) TjT* -0.108  Tc -0.142  Tw (library user. Here\222s a short list of idiosyncrasies that I just came up) TjT* -0.1498  Tc 0.5452  Tw (with ad-hoc. You\222re invited to add your favorites to it. Maybe we) TjT* -0.1102  Tc 0.2602  Tw (could create a \223C++ derision web page\224 from it. I hope you don\222t) TjT* -0.1211  Tc 0.1711  Tw (take this seriously enough to be offended.) Tj0 -22.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf0.2321  Tc 0.2179  Tw (Angle brackets being mistaken as shift operators in nested) Tj0 -12  TD -0.1108  Tc -0.0392  Tw (template declarations) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0927  Tc 0.2427  Tw (The need to put in additional ) Tj118.2 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (typename) Tj51 0  TD /F4 10.2  Tf-0.0774  Tc 0.2274  Tw (keywords in obscure) Tj-169.2 -12  TD -0.0602  Tc 0  Tw (circumstances) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.2427  Tc 0.0927  Tw (The need to put in additional ) Tj112.2 0  TD /F2 10.2  Tf-0.195  Tc 0  Tw (template) Tj49.2 0  TD /F4 10.2  Tf-0.1118  Tc -0.6382  Tw (keywords in even more) Tj-161.4 -12  TD -0.0952  Tc 0.5452  Tw (obscure circumstances) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0709  Tc 0.2209  Tw (The need to use ) Tj67.2 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (this->) Tj39 0  TD /F4 10.2  Tf-0.0752  Tc 0.5252  Tw (explicitly to control name lookup in) Tj-106.2 -12  TD -0.1199  Tc 0.3699  Tw (templates in another set of obscure circumstances) Tj263.4 709.8  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf0.2644  Tc 9.2856  Tw (The often unwanted effects of automatic type) Tj0 -12  TD -0.0883  Tc 0.5383  Tw (conversions/promotion/decay on template argument deduction) TjT* -0.1168  Tc 0.2668  Tw (and overload resolution.) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0773  Tc 0.1273  Tw (The fact that ) Tj52.8 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (bool) Tj26.4 0  TD /F4 10.2  Tf-0.1093  Tc -0.0407  Tw (converts to ) Tj46.2 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (int) Tj20.4 0  TD /F4 10.2  Tf-0.1115  Tc -0.2385  Tw (automatically. This has the) Tj-145.8 -12  TD 0.027  Tc 0.423  Tw (effect that returning a member function pointer is sometimes) Tj0 -12  TD -0.1441  Tc -0.3059  Tw (superior to returning a ) Tj88.2 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (bool) Tj25.8 0  TD /F4 10.2  Tf-0.1755  Tc -0.4545  Tw (because it doesn\222t convert as easily.) Tj-114 -12  TD -0.0908  Tc -0.4342  Tw (\(Savour this: Member function pointers are better booleans than) Tj0 -12  TD /F2 10.2  Tf-0.12  Tc 0  Tw (bool) Tj24 0  TD /F4 10.2  Tf-0.3966  Tc (!\)) Tj-35.4 -10.2  TD /F5 6  Tf0.054  Tc (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0529  Tc 0.0229  Tw (The fact that the literal ) Tj93.6 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (0) Tj8.4 0  TD /F4 10.2  Tf-0.107  Tc 0.107  Tw (converts to the null pointer.) Tj-113.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0923  Tc 0.1138  Tw (The C/C++ declaration syntax \(need I say more?\)) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0782  Tc -0.0718  Tw (Argument-Dependent Lookup) Tj-11.4 -24  TD -0.0996  Tc 0.5496  Tw (To me it seems the more experience I\222ve gained programming in) Tj0 -12  TD -0.0587  Tc 1.2087  Tw (C++ the more I realize how inadequate my skill still is. I have) TjT* -0.1124  Tc 1.4624  Tw (been programming in C++ for a considerable time now, I have) TjT* 0.0495  Tc 1.1642  Tw (read numerous books on the subject, and still I don\222t seem to) TjT* 0.2061  Tc 0.8439  Tw (have it under control. This bothers me. How can an average) TjT* 0.4404  Tc 0.7429  Tw (programmer be expected to cope with this? Imagine for a) TjT* -0.0818  Tc 0.8045  Tw (moment yourself giving a lecture to a classroom full of the type) TjT* -0.0965  Tc 0.5465  Tw (of programmers you meet in your working life. Your topic is the) TjT* -0.0592  Tc 0.0092  Tw (sort of stuff I came across in my example above. Just imagine the) TjT* -0.0941  Tc -0.0559  Tw (puzzled faces.) Tj11.4 -12  TD -0.1902  Tc -0.3098  Tw (I don\222t know what to do about this. If the other languages weren\222t) Tj-11.4 -12  TD -0.102  Tc -0.098  Tw (even worse in one way or another I would probably switch. But so) Tj0 -12  TD -0.134  Tc -0.2731  Tw (far I haven\222t seen anything I like 100%. I had a look at Haskell, and) TjT* 0.2555  Tc 1.0945  Tw (I generally liked what I saw, particularly regarding generic) TjT* -0.0058  Tc 0.4558  Tw (programming, but I couldn\222t see how to apply this to embedded) TjT* -0.0703  Tc -0.5297  Tw (programming, where you deal extensively with low-level stuff that) TjT* -0.0749  Tc 0.3865  Tw (is rather close to the hardware level. Here I would like to be able) TjT* -0.0695  Tc -0.4805  Tw (to predict what kind of code is being generated. With Haskell I feel) TjT* 0.217  Tc 1.793  Tw (I have no control over this. Maybe that\222s because I\222m not) TjT* -0.1026  Tc 0.3526  Tw (experienced enough with it.) Tj11.4 -12  TD 0.4382  Tc 1.1261  Tw (My dream language would take Haskell\222s elegant type) Tj-11.4 -12  TD 0.1632  Tc 0.4068  Tw (inference machinery and built-in list/tuple/array manipulation) Tj0 -12  TD 0.4092  Tc 0.2408  Tw (and combine it with a more \223conventional\224 syntax. It must) TjT* 0.2977  Tc 0.3923  Tw (support object-oriented and imperative programming styles,) TjT* 0.1011  Tc 0.5126  Tw (because I can\222t see how I could do without them in embedded) TjT* 0.0601  Tc 0  Tw (programming.) Tj11.4 -12  TD -0.1417  Tc -0.281  Tw (My feeling is that languages that have genericity tagged on as an) Tj-11.4 -12  TD -0.1324  Tc 0.0681  Tw (afterthought are not really satisfactory. Backwards compatibility is) Tj0 -12  TD -0.1552  Tc 0.2052  Tw (likely to prevent cleaning up the rough edges. The result is the sort) TjT* -0.1295  Tc -0.1296  Tw (of thing we have now with C++: The language is very complicated) TjT* -0.0389  Tc 0.3798  Tw (and has lots of obscure and surprising special cases. I am asking) TjT* -0.1378  Tc -0.3722  Tw (myself if it would not be possible to deprecate troublesome features) TjT* -0.023  Tc 0.473  Tw (in a language more aggressively. I know of course that C++ has) TjT* -0.2122  Tc -0.2378  Tw (become popular precisely because of its backward compatibility and) TjT* 0.2397  Tc 1.4703  Tw (that right now the standard committees for C and C++ are) TjT* -0.14  Tc 0.0757  Tw (cooperating closely to ensure that this remains so.) Tj11.4 -12  TD 0.1475  Tc 0.2359  Tw (Back in now ancient times the ANSI C standard introduced) Tj-11.4 -12  TD 0.1458  Tc 0.2292  Tw (function prototypes, offering a better alternative to K&R style) Tj0 -12  TD -0.1647  Tc -0.4762  Tw (function declarations. I haven\222t seen any K&R style code for a while) TjT* -0.0368  Tc 0.4368  Tw (now. It still exists, but it is now customary to require a compiler) TjT* -0.1719  Tc 0.4419  Tw (switch to make the compiler accept the old form. Can\222t something) TjT* -0.1314  Tc -0.0186  Tw (similar be done with C++? Something like a C++ generation 2 that) TjT* -0.1387  Tc -0.5513  Tw (is not backwards compatible with the current generation, but is link-) TjT* -0.1355  Tc 0.1655  Tw (compatible with it. And the compiler would continue to accept the) TjT* -0.1745  Tc 0.2495  Tw (old version while it is gradually being phased out.) Tj11.4 -12  TD -0.1537  Tc -0.5463  Tw (To wind up, let\222s see where we are with my little problem. Here\222s) Tj-11.4 -12  TD -0.0891  Tc -0.0609  Tw (the complete code as it stands now:) Tj109.8 -12  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc 0  Tw ([concluded at foot of next page]) Tj141.6 -19.8  TD 0 0 0 rg /F0 10.8  Tf-0.0048  Tc (11) Tj-195.6 768.6  TD /F0 12  Tf-0.0037  Tc -0.0863  Tw (Overload issue 61 june 2004) TjETendstreamendobj56 0 obj11757endobj54 0 obj<</Type /Page/Parent 48 0 R/Resources <</Font <</F0 6 0 R /F2 10 0 R /F4 16 0 R /F5 21 0 R /F10 41 0 R >>/ProcSet 2 0 R>>/Contents 55 0 R>>endobj58 0 obj<</Length 59 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.0912  Tc 0  Tw (12) Tj0 768.6  TD /F0 12  Tf-0.0037  Tc 0.2137  Tw (Overload issue 61 june 2004) Tj0 -292.8  TD /F2 7.8  Tf0.12  Tc 0  Tw ([continued from previous page]) Tj14.4 -12  TD 0.2 0.2 0.2 rg /F10 7.8  Tf(#include <iostream>) Tj0 -12  TD (#include <algorithm>) TjT* (#include <functional>) Tj0 -15  TD (template<typename Key, typename Val>) Tj0 -12  TD (struct Pair { Key key; Val val; };) Tj0 -14.4  TD (template<typename Key, typename Val>) Tj0 -12  TD (struct LessKey : std::binary_function<) Tj18.6 -12  TD -0.0757  Tc 0.0457  Tw (const Pair<Key,Val>&, const Pair<Key,Val>&,bool> {) Tj-9 -12  TD 0.12  Tc 0  Tw (bool operator\(\)\(const Pair<Key,Val> &a,) Tj76.8 -12  TD (const Pair<Key,Val> &b\) const) Tj-67.2 -12  TD ({ return a.key < b.key; }) Tj-19.2 -12  TD (};) Tj0 -18  TD (template<typename EKey, typename EVal,) Tj43.2 -12  TD (unsigned n, typename Key, typename Val>) Tj-43.2 -12  TD (EVal lookup\(const Pair<EKey,EVal>\(&tbl\)[n],) Tj57.6 -12  TD (const Key &key, const Val &def\) {) Tj-48 -12  TD (typedef LessKey<EKey,EVal> Pred;) Tj0 -12  TD (typedef const Pair<EKey,EVal> Elem;) TjT* (Elem entry = { key, EVal\(\) };) TjT* (std::pair<Elem*,Elem*> range) Tj14.4 -12  TD (= std::equal_range\(tbl, tbl+n, entry, Pred\(\)\);) Tj-14.4 -12  TD (if\(range.first != range.second\)) Tj9.6 -12  TD (return range.first->val;) Tj-9.6 -12  TD (return def;) Tj-9.6 -12  TD (}) Tj0 -12.6  TD (const Pair<int, const char*> table[] = {) Tj9.6 -12  TD ({ 0, "Ok" },) Tj0 -12  TD ({ 6, "Minor glitch in self-destruction module" },) TjT* ({ 13, "Error logging printer out of paper" },) TjT* ({ 101, "Emergency cooling system inoperable" },) TjT* ({ 2349, "Dangerous substances released" },) TjT* ({ 32767, "Game over, you lost" }) Tj-9.6 -12  TD (};) Tj0 -15  TD (int main\(\) {) Tj9.6 -12  TD (const char *result = lookup\(table,6,\(char*\)0\);) Tj0 -12  TD (std::cout << \(result ? result : "not found"\)) Tj48 -12  TD (<< std::endl;      }) Tj203.4 447  TD 0 0 0 rg /F4 10.2  Tf-0.0677  Tc -0.0823  Tw (It has the following problems:) Tj0 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj10.8 -1.8  TD /F4 10.2  Tf-0.0746  Tc 0.1746  Tw (It requires the ugly cast for passing the null pointer as the third) Tj0 -12  TD -0.0861  Tc -0.0639  Tw (argument to ) Tj50.4 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (lookup) Tj-61.2 -10.2  TD /F5 6  Tf0.054  Tc (l) Tj10.8 -1.8  TD /F2 10.2  Tf-0.12  Tc (lookup) Tj39 0  TD /F4 10.2  Tf-0.0919  Tc 0.0919  Tw (returns the result by value, which can be inefficient) Tj-49.8 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj10.8 -1.8  TD /F4 10.2  Tf-0.0124  Tc 0.4078  Tw (It is still unclear why I couldn\222t use the typedefs from ) Tj225 0  TD /F2 9  Tf0.12  Tc 0  Tw (std::) Tj-225 -12  TD -0.24  Tc (binary_function) Tj80.4 0  TD /F4 10.2  Tf-0.36  Tc 0.21  Tw (in the ) Tj23.4 0  TD /F2 9  Tf-0.1714  Tc 0  Tw (LessKey) Tj38.4 0  TD /F4 10.2  Tf-0.2911  Tc 0.1411  Tw (predicate \(only with gcc\)) Tj-153 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj10.8 -1.8  TD /F4 10.2  Tf-0.1696  Tc -0.3622  Tw (Neither do I know why the compiler wanted to convert the wrong) Tj0 -12  TD -0.058  Tc -0.092  Tw (way between ) Tj55.2 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (Val) Tj20.4 0  TD /F4 10.2  Tf-0.1096  Tc -0.0404  Tw (and ) Tj16.8 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (EVal) Tj-103.2 -12  TD /F4 10.2  Tf-0.0351  Tc 1.2351  Tw (So if you want to have a go, you\222re invited to contribute your) Tj0 -12  TD -0.0854  Tc 0.0687  Tw (solutions. I\222d like to know how this is done right!) Tj196.8 -12  TD /F6 10.2  Tf-0.0992  Tc -0.3448  Tw (Stefan Heinzmann) Tj-73.8 -12  TD /F2 9  Tf0  Tc 0  Tw (stefan_heinzmann@yahoo.com) Tj-123 -30  TD /F0 12  Tf-0.0167  Tc 0.3767  Tw (Conventional Programming) Tj21.6 -12  TD 0.0251  Tc -0.0651  Tw (Languages: Fat and Flabby) Tj-16.2 -18  TD /F8 10.2  Tf0.2613  Tc 0.2907  Tw (For twenty years programming languages have been steadily) Tj0 -12  TD -0.0703  Tc 0.5623  Tw (progressing toward their present condition of obesity; ... it is now) TjT* -0.0678  Tc 0.5107  Tw (the province of those who prefer to work with thick compendia of) TjT* -0.0936  Tc 0.0456  Tw (details rather than wrestle with new ideas.       John Backus, 1977) Tj-5.4 -18  TD /F0 12  Tf-0.0127  Tc 0  Tw (Acknowledgements) Tj0 -18  TD /F4 10.2  Tf-0.081  Tc 0.7977  Tw (Thanks to the reviewers Phil Bass, Thaddaeus Frogley and Alan) Tj0 -12  TD -0.0616  Tc -0.0884  Tw (Griffiths for their comments.) Tj0 -18  TD /F0 12  Tf-0.0651  Tc -0.1749  Tw (The Book) TjT* /F4 10.2  Tf0.3934  Tc 0.7566  Tw ([1] D. Vandevoorde, N. M. Josuttis, ) Tj168.6 0  TD /F9 10.2  Tf0.3999  Tc 0.6501  Tw (C++ Templates: The) Tj-168.6 -12  TD -0.1451  Tc -0.0049  Tw (complete guide) Tj60.6 0  TD /F4 10.2  Tf-0.1727  Tc -0.2773  Tw (, Addison-Wesley, 2003) Tj-60.6 -33  TD /F8 10.2  Tf-0.1086  Tc 0.3606  Tw (Developers are people too, and hate to admit that they are confused or) Tj0 -9.6  TD -0.0981  Tc 0.3168  Tw (that their understanding is incomplete. We should be grateful therefore) Tj0 -10.2  TD 0.2659  Tc 0.8861  Tw (that Stefan was willing to write this article which illustrates the) TjT* -0.0493  Tc 1.2013  Tw (potential C++ has for causing these symptoms even in experienced) Tj0 -9.6  TD -0.0886  Tc 0.4098  Tw (developers. It is said that an admission of ignorance is the first step to) Tj0 -10.2  TD -0.0766  Tc 0.3286  Tw (wisdom and further steps were taken when one of Overload's Readers) TjT* -0.0817  Tc 0.2737  Tw (became interested in solving the problem presented above. If you wish) Tj0 -9.6  TD -0.0873  Tc 0.312  Tw (to tackle this exercise yourself then you may want to postpone reading) Tj0 -10.2  TD 0.0952  Tc 1.0568  Tw (the results of their collaboration \(which, in the traditional manner,) TjT* -0.0921  Tc 0.0441  Tw (appears towards the end of this magazine\). \(AG\)) Tj0.6 w 1 J 1 j 0 0 0 RG ET28.8 531 m 567.6 531 l S BT43.2 772.2  TD/F1 18  Tf-0.0039  Tc 0.0999  Tw (Lvalues and Rvalues) Tj0 -12  TD /F0 10.2  Tf-0.1257  Tc 0.2517  Tw (by Mikael Kilpel\344inen) Tj-14.4 -14.4  TD /F4 10.2  Tf-0.1067  Tc 0.3567  Tw (The two concepts, ) Tj76.8 0  TD /F9 10.2  Tf-0.1548  Tc 0  Tw (lvalue) Tj27 0  TD /F4 10.2  Tf-0.1096  Tc -0.0404  Tw (and ) Tj17.4 0  TD /F9 10.2  Tf-0.1435  Tc 0  Tw (rvalue) Tj25.2 0  TD /F4 10.2  Tf-0.1011  Tc 0.4011  Tw (, can be somewhat confusing) Tj-146.4 -12  TD -0.0883  Tc 1.1383  Tw (in C++. Nevertheless, the difference is important to understand.) Tj0 -12  TD -0.0779  Tc 0.9029  Tw (The basic consequences related to these concepts are interesting) TjT* -0.064  Tc 0.014  Tw (and good to know in many cases.) Tj11.4 -12  TD -0.094  Tc -0.3288  Tw (In C++ every expression yields either an lvalue or an rvalue and) Tj-11.4 -12  TD -0.0999  Tc -0.2301  Tw (accordingly every expression is called either an lvalue or an rvalue) Tj0 -12  TD -0.0844  Tc 0.4253  Tw (expression. An example of an lvalue is an identifier. As a further) TjT* -0.1389  Tc -0.3929  Tw (example, a reference to an object is an lvalue. Every expression that) TjT* -0.1444  Tc -0.4771  Tw (is not an lvalue is an rvalue. A good example of this is an expression) TjT* -0.0989  Tc 0.0156  Tw (that produces an arithmetic value. An intuitive approach would be) TjT* 0.1746  Tc 0.2754  Tw (to think of expressions as functions and then an lvalue can be) TjT* -0.0658  Tc -0.0842  Tw (thought as the result of a function returning a reference.) Tj0 -24  TD /F11 9  Tf0.0333  Tc 0  Tw (Examples:) Tj0 -12  TD /F4 10.2  Tf-0.225  Tc (1.) Tj11.4 0  TD -0.33  Tc -0.3534  Tw (The subscript operator is a function of the form ) Tj175.8 0  TD /F2 7.8  Tf-0.105  Tc -0.975  Tw (T& operator[]\(T*,) Tj-175.8 -12  TD -0.06  Tc 0  Tw (ptrdiff_t\)) Tj48 0  TD /F4 10.2  Tf-0.345  Tc -0.105  Tw (and therefore ) Tj51 0  TD /F2 7.8  Tf-0.18  Tc 0  Tw (A[0]) Tj20.4 0  TD /F4 10.2  Tf-0.2986  Tc -0.3014  Tw (is an lvalue where ) Tj69 0  TD /F2 7.8  Tf0.12  Tc 0  Tw (A) Tj6 0  TD /F4 10.2  Tf-0.2975  Tc -0.4525  Tw (is of array type.) Tj-205.8 -12  TD -0.225  Tc 0  Tw (2.) Tj11.4 0  TD 0.1017  Tc 3.4233  Tw (The dereference operator is a function of the form) Tj0  Tc -0.15  Tw ( ) Tj242.4 0  TD /F2 7.8  Tf0.72  Tc 0  Tw (T&) Tj-242.4 -12  TD -0.0646  Tc (operator*\(T*\)) Tj61.2 0  TD /F4 10.2  Tf-0.3144  Tc -0.1356  Tw (and hence ) Tj39.6 0  TD /F2 7.8  Tf0.12  Tc 0  Tw (*p) Tj11.4 0  TD /F4 10.2  Tf-0.3386  Tc -0.2614  Tw (is an lvalue where ) Tj68.4 0  TD /F2 7.8  Tf0.12  Tc 0  Tw (p) Tj6.6 0  TD /F4 10.2  Tf-0.3069  Tc -0.4431  Tw (is of pointer type.) Tj76.8 228  TD -0.225  Tc 0  Tw (3.) Tj10.8 0  TD -0.1451  Tc -0.5192  Tw (The negate operator is of the form ) Tj133.8 0  TD /F2 7.8  Tf0.0738  Tc -1.1538  Tw (T operator-\(T\)) Tj67.2 0  TD /F4 10.2  Tf-0.245  Tc 0.095  Tw (and therefore) Tj-201 -12  TD /F2 7.8  Tf0.12  Tc 0  Tw (-x) Tj12.6 0  TD /F4 10.2  Tf-0.1156  Tc -0.0344  Tw (is an rvalue.) Tj-23.4 -12  TD -0.1835  Tc 1.2335  Tw (The terms lvalue and rvalue were inherited from C. The original) Tj0 -12  TD -0.2025  Tc 0.8325  Tw (meaning comes from the assignment: an lvalue being the left side) TjT* 0.1495  Tc 1.0205  Tw (of the assignment and rvalue the right side. However, in the) TjT* -0.1607  Tc 0.2107  Tw (modern C++, lvalue can be considered more as a ) Tj195.6 0  TD /F9 10.2  Tf0.1644  Tc 0  Tw (l) Tj3 0  TD /F4 10.2  Tf-0.2483  Tc 0.0983  Tw (ocator ) Tj27 0  TD /F9 10.2  Tf-0.2186  Tc 0  Tw (value) Tj21 0  TD /F4 10.2  Tf-0.2048  Tc 0.0548  Tw (. An) Tj-246.6 -12  TD -0.1826  Tc 1.2326  Tw (lvalue refers to a defined region of storage. Although, this is not) Tj0 -12  TD 0.1182  Tc 0.9318  Tw (true with the function lvalues since functions are not objects.) TjT* -0.2149  Tc 0.6104  Tw (Similarly, an rvalue can be considered as a value of an expression.) TjT* -0.0076  Tc 1.0576  Tw (This separation of two concepts helps to define and talk about) TjT* -0.2021  Tc 0.8321  Tw (things, though some would say that it has caused more confusion.) TjT* -0.1928  Tc 0.0428  Tw (Nevertheless, exact definitions are needed to clarify a language.) Tj10.8 -12  TD -0.2545  Tc 0.1591  Tw (An rvalue should not be confused with the constness of an object.) Tj-10.8 -12  TD -0.3823  Tc -0.4177  Tw (An rvalue does not mean the object would be immutable. There is some) Tj0 -12  TD -0.2897  Tc -0.3103  Tw (confusion about this, since non-class rvalues are non-modifiable. This) TjT* -0.2608  Tc -0.4492  Tw (is not the case with user types. A class rvalue can be used to modify an) TjT* -0.27  Tc 0.0654  Tw (object through its member functions. Albeit in practice, it can be said) TjT* -0.3621  Tc -0.2879  Tw (that objects are modified only through ) Tj142.2 0  TD /F9 10.2  Tf-0.349  Tc -0.401  Tw (modifiable lvalues) Tj68.4 0  TD /F4 10.2  Tf-0.4092  Tc -0.6407  Tw (. A modifiable) Tj-210.6 -12  TD -0.3007  Tc -0.1724  Tw (lvalue is an lvalue that can be used to modify the object. Other lvalues) Tj0 -12  TD -0.2956  Tc 0.0365  Tw (are non-modifiable lvalues, const reference is a good example of this. ) TjETendstreamendobj59 0 obj11270endobj57 0 obj<</Type /Page/Parent 48 0 R/Resources <</Font 62 0 R/ProcSet 2 0 R>>/Contents 58 0 R>>endobj62 0 obj<</F0 6 0 R/F1 8 0 R/F2 10 0 R/F4 16 0 R/F5 21 0 R/F6 26 0 R/F8 30 0 R/F9 32 0 R/F10 41 0 R/F11 60 0 R>>endobj64 0 obj<</Length 65 0 R>>stream
BT552.6 42  TD0 0 0 rg /F0 10.8  Tf0.0912  Tc 0  Tw (13) Tj-192.6 768.6  TD /F0 12  Tf-0.0037  Tc -0.0863  Tw (Overload issue 61 june 2004) Tj-319.2 -40.8  TD /F4 10.2  Tf0.0497  Tc -0.4663  Tw (As mentioned already, non-class rvalues do not have the same) Tj-11.4 -12  TD 0.1215  Tc -0.2715  Tw (qualities as the user type rvalues. One might wonder about this.) Tj0 -12  TD 0.0513  Tc -0.4195  Tw (After all, C++ was designed so that user types would behave like) TjT* 0.4927  Tc 3.5573  Tw (built-ins, at least as uniformly as possible. Still this) TjT* 0.0418  Tc -0.4318  Tw (inconsistency exists and the reasons for it shall be explored later.) TjT* 0.1094  Tc -0.2594  Tw (Non-class rvalues are not modifiable, nor can have cv-qualified) TjT* 0.1702  Tc 0.4298  Tw (types \(the cv-qualifications are ignored\). On the contrary, the) TjT* 0.0696  Tc -0.4378  Tw (class rvalues are modifiable and can be used to modify an object) TjT* 0.0615  Tc -0.3448  Tw (via its member functions. They can also have cv-qualified types.) TjT* 0.2341  Tc 0.2759  Tw (In case of built-ins, some operators require an lvalue as does) TjT* 0.4716  Tc 0.6534  Tw (every assignment expression as the left side. The built-in) TjT* 0.4781  Tc 1.1719  Tw (address-of operator requires an lvalue which reflects the) TjT* 0.1494  Tc -0.1494  Tw (character of lvalues rather well.) Tj0 -24  TD /F11 9  Tf-0.0333  Tc 0  Tw (Examples:) Tj13.8 -12  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc (int var = 0;) Tj0 -12  TD (var = 1 + 2; ) Tj62.4 0  TD 0 0 0 rg /F2 7.8  Tf(// ok, var is an lvalue here) Tj-62.4 -12  TD 0.2 0.2 0.2 rg /F10 7.8  Tf(var + 1 = 2 + 3; ) Tj81.6 0  TD 0 0 0 rg /F2 7.8  Tf(// error, var + 1 is an rvalue) Tj-81.6 -12  TD 0.2 0.2 0.2 rg /F10 7.8  Tf(int* p1 = &var; ) Tj76.8 0  TD 0 0 0 rg /F2 7.8  Tf(// ok, var is an lvalue) Tj-76.8 -12  TD 0.2 0.2 0.2 rg /F10 7.8  Tf(int* p2 = &\(var + 1\); ) Tj105.6 0  TD 0 0 0 rg /F2 7.8  Tf-0.0626  Tc 0.0112  Tw (// error, var + 1 is an rvalue) Tj-105.6 -12  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc 0  Tw (UserType\(\).member_function\(\); ) Tj144 0  TD 0 0 0 rg /F2 7.8  Tf(// ok, calling a) Tj-86.4 -12  TD (//  member function of the class rvalue) Tj-71.4 -24  TD /F4 10.2  Tf0.4389  Tc 1.102  Tw (The only real reason I can think of for needing the class) Tj0 -12  TD 0.2188  Tc 1.0493  Tw (rvalues to be modifiable, is to allow the calling of the non-) TjT* 0.1702  Tc 1.3298  Tw (const members of the proxies) Tj130.2 2.4  TD /F4 7.2  Tf0  Tc 0  Tw (1) Tj7.8 -2.4  TD /F4 10.2  Tf0.1754  Tc 1.2346  Tw (and similar. That is, a proxy) Tj-138 -12  TD 0.093  Tc 0.6903  Tw (represents a type and it ought to behave accordingly. Keeping) Tj0 -12  TD 0.1482  Tc 0.6018  Tw (this in mind when considering coherent behaviour along with) TjT* 0.124  Tc 0.6688  Tw (the const-correctness, one would make the mutating members) TjT* 0.1209  Tc 0.3291  Tw (non-const. For this to work the modifiable rvalues are needed.) TjT* 0.1216  Tc 0.2084  Tw (Although this may seem quite irrelevant, it is actually quite an) TjT* 0.1117  Tc 1.2049  Tw (important reason. It can be used to emulate lvalue behaviour) TjT* 0.1203  Tc 0.5297  Tw (and hence many things are made possible. Thinking about the) TjT* 0.5054  Tc 0.8875  Tw (modifiable class rvalues more closely, they enable many) TjT* 0.1071  Tc 0.5611  Tw (usable concepts and there are only a few rare cases when that) TjT* 0.1079  Tc 0.7921  Tw (introduces problems. After all, the big difference between the) TjT* 0.1472  Tc 0.0028  Tw (built-in types and the user types is that the user types can have) TjT* 0.3623  Tc 0.8591  Tw (members.  This difference effectively makes the non-class) TjT* 0.1045  Tc 0.3455  Tw (rvalues non-modifiable.) Tj11.4 -12  TD -0.0901  Tc -0.1932  Tw (An rvalue cannot be used to initialise non-const reference. That) Tj-11.4 -12  TD -0.1082  Tc 0.3582  Tw (is, an rvalue cannot be converted to an lvalue, but when an lvalue) Tj0 -12  TD 0.2112  Tc 0.2388  Tw (is used in a context where an rvalue is expected, the lvalue is) TjT* -0.089  Tc 0.4057  Tw (implicitly converted to an rvalue. This binding restriction and the) TjT* -0.0916  Tc 0.0166  Tw (modifiable class rvalue lead to interesting consequences. It allows) TjT* -0.0874  Tc -0.4318  Tw (us to call all member functions for a user type but not mutating free) TjT* -0.0868  Tc -0.0632  Tw (functions. This can be confusing as one needs to know whether an) TjT* -0.0684  Tc 0.3338  Tw (operator is a member or not, and after all it is not consistent. The) TjT* -0.1601  Tc -0.5149  Tw (same problem motivates us to implement operators as non-members) TjT* -0.0829  Tc -0.1338  Tw (where possible, for consistency with built-in types. Also, since the) TjT* -0.036  Tc 0.486  Tw (member functions can be called, the called function can return a) TjT* -0.1544  Tc -0.5356  Tw (non-const reference to the object itself. This means that a modifiable) TjT* 0.0152  Tc 0.4348  Tw (lvalue referring to a temporary object can be created, making it) TjT* -0.0654  Tc 0.4554  Tw (possible to call a function that takes a non-const reference. Time) TjT* -0.0618  Tc -0.0882  Tw (has shown this to be very dangerous as it allows mistakes that can) TjT* -0.0728  Tc 0.4628  Tw (be hard to find, mostly because of the implicit conversions. That) TjT* -0.0551  Tc 0.5051  Tw (ought not to be the case here, since it is not easy to make such a) TjT* -0.0927  Tc 0.2427  Tw (mistake by accident.) Tj274.8 672  TD /F11 9  Tf-0.1  Tc 0  Tw (Examples:) Tj14.4 -12  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc (struct A {) Tj9.6 -12  TD (A& operator=\(const A&\) { return *this; }) Tj-9.6 -12  TD (};) Tj0 -12  TD (void func\(A&\);) TjT* (..) TjT* (func\(A\(\) = A\(\)\); ) Tj81.6 0  TD 0 0 0 rg /F2 7.8  Tf0.04  Tc -0.16  Tw (// fine, operator= yields an lvalue) Tj-81.6 -24  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc 0  Tw (ofstream\(\223some\224\) << some_variable; ) Tj168 0  TD 0 0 0 rg /F2 7.8  Tf0.07  Tc 0.05  Tw (// fine as long) Tj-76.8 -12  TD 0.12  Tc -0.1  Tw (// as the operator<< is a member) Tj-105.6 -24  TD /F4 10.2  Tf0.102  Tc 0.198  Tw (Forbidding the binding of rvalues to non-const references does) Tj0 -12  TD 0.0814  Tc 1.4352  Tw (not come without problems, however. It makes it difficult to) TjT* 0.1194  Tc 0.9306  Tw (provide uniform behaviour with unusual copy semantics, like) TjT* 0.0816  Tc 0.3684  Tw (those of ) Tj36.6 0  TD /F2 10.2  Tf0.18  Tc 0  Tw (auto_ptr) Tj49.8 0  TD /F4 10.2  Tf0.115  Tc 0.155  Tw (, which is why they are a bad idea. This is) Tj-86.4 -12  TD 0.141  Tc 1.149  Tw (why a special reference has been proposed for the next C++) Tj0 -12  TD 0.6108  Tc 0.7059  Tw (standard. It would only bind to an rvalue. The proposal) TjT* 0.1204  Tc 0.3963  Tw (actually makes a distinction between the rvalue and the lvalue) TjT* 0.3596  Tc 0.9154  Tw (references by introducing a new syntax. This would allow) TjT* 0.8717  Tc 0.9783  Tw (detection of an rvalue which is crucial for the move) TjT* 0.0635  Tc 0  Tw (semantics) Tj41.4 2.4  TD /F4 7.2  Tf0  Tc (2) Tj3.6 -2.4  TD /F4 10.2  Tf0.1399  Tc 1.3101  Tw (. The proposed resolution would effectively allow) Tj-45 -12  TD 0.1068  Tc 1.0765  Tw (the uniform behaviour but still not compromise on the safety) Tj0 -12  TD 0.1832  Tc 0  Tw (issues.) Tj11.4 -12  TD 0.2061  Tc 0.2439  Tw (The biggest problem with non-consistency seems to be the) Tj-11.4 -12  TD -0.0957  Tc -0.1088  Tw (confusion among the people. Of course it would be desirable to be) Tj0 -12  TD -0.0321  Tc 0.4821  Tw (consistent in the eyes of purists but you cannot always get it all.) TjT* -0.1264  Tc 0.4673  Tw (After taking a little trouble to understand, an lvalue and an rvalue) TjT* -0.0771  Tc -0.0729  Tw (are quite easy concepts.) Tj195.6 -12  TD /F6 10.2  Tf-0.0424  Tc -0.4016  Tw (Mikael Kilpel\344inen) Tj-94.2 -12  TD /F2 9  Tf0  Tc 0  Tw (mikael.kilpelainen@kolumbus.fi) Tj-101.4 -21  TD /F0 12  Tf-0.0104  Tc (Acknowledgement) Tj0 -15  TD /F4 10.2  Tf0.5393  Tc 0.5774  Tw (I would like to thank Rani Sharoni for providing helpful) Tj0 -12  TD -0.1425  Tc 0  Tw (comments.) Tj0 -18  TD /F0 12  Tf-0.018  Tc (References) TjT* /F4 10.2  Tf-0.0987  Tc 0.0344  Tw ([1] ISO/IEC 14882-1998 Standard for the C++ language) Tj0 -12  TD -0.0953  Tc 0.1853  Tw ([2] ISO/IEC 9899-1999 Programming language C) TjT* 0.2326  Tc 0.7316  Tw ([3] Andrew Koenig and Barbara E. Moo, ) Tj184.8 0  TD /F9 10.2  Tf0.2508  Tc 0.7992  Tw (Accelerated C++,) Tj-184.8 -12  TD -0.0867  Tc -0.0633  Tw (Practical Programming by Example) Tj144.6 0  TD /F4 10.2  Tf-0.1609  Tc 0.0109  Tw (, 2000, Addison Wesley) Tj-144.6 -12  TD -0.067  Tc 0.517  Tw ([4] Bjarne Stroustrup, ) Tj92.4 0  TD /F9 10.2  Tf-0.0644  Tc 0.9944  Tw (The Design and Evolution of C++) Tj142.8 0  TD /F4 10.2  Tf-0.15  Tc 1.2  Tw (, 1994,) Tj-235.2 -12  TD -0.1198  Tc -0.0302  Tw (Addison Wesley) Tj0 -12  TD -0.1115  Tc 0.4865  Tw ([5] Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides,) TjT* /F9 10.2  Tf0.616  Tc 0.554  Tw (Design Patterns: Elements of Reusable Object-Oriented) TjT* -0.1839  Tc 0  Tw (Software) Tj35.4 0  TD /F4 10.2  Tf-0.1925  Tc 0.0425  Tw (, 1995, Addison Wesley) Tj-35.4 -12  TD 0.1208  Tc 0.9292  Tw ([6] Howard E. Hinnant, Peter Dimov and Dave Abrahams, ) Tj257.4 0  TD /F9 10.2  Tf-0.2322  Tc 0  Tw (A) Tj-257.4 -12  TD -0.1074  Tc 0.5574  Tw (Proposal to Add Move Semantics Support to the C++ Language) Tj261 0  TD /F4 10.2  Tf-0.15  Tc 0  Tw (,) Tj-261 -12  TD 0.33  Tc 0.12  Tw (2002, ) Tj28.8 0  TD /F2 9  Tf0.465  Tc 0  Tw (http://std.dkuug.dk/jtc1/sc22/wg21/docs/) Tj-28.8 -12  TD 0  Tc (papers/2002/n1377.htm) Tj0 -18  TD /F0 12  Tf-0.036  Tc 0.396  Tw (Related links) TjT* /F4 10.2  Tf-0.1644  Tc 0.0144  Tw ([1] ) Tj14.4 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (auto_ptr) Tj50.4 0  TD /F4 10.2  Tf-0.0555  Tc -0.0945  Tw (update, Scott Meyers,) Tj-64.8 -12  TD /F2 9  Tf0  Tc 0  Tw (http://www.awprofessional.com/content/images/) Tj0 -12  TD (020163371X/autoptrupdate%5Cauto_ptr_update.html) TjT* /F4 10.2  Tf0.6123  Tc 0.4377  Tw ([2] Generic<Programming>: Move Constructors, Andrei) TjT* 0.0593  Tc -0.2093  Tw (Alexandrescu, ) Tj63 0  TD /F2 9  Tf0.1667  Tc 0  Tw (http://www.cuj.com/documents/s=8246/) Tj-63 -12  TD 0  Tc (cujcexp2102alexandr/alexandr.htm) TjET1 1 1 rg 29.4 56.4 263.4 24 re f29.4 56.4 263.4 24 re fBT29.4 75  TD0 0 0 rg /F7 7.8  Tf-0.144  Tc (1) Tj10.8 0  TD 0.2177  Tc 0.4603  Tw (Proxy: provide a surrogate or placeholder for another object to control access to) Tj0 -10.2  TD 0.3722  Tc 0  Tw (it.) Tj0.6 w 1 J 1 j 0 0 0 RG ET29.4 89.4 m 292.8 89.4 l S 1 1 1 rg 304.2 56.4 263.4 24 re f304.2 56.4 263.4 24 re fBT304.2 75  TD0 0 0 rg -0.144  Tc (2) Tj10.8 0  TD 0.0829  Tc 0.6851  Tw (A proposal to add support for move semantics to the C++ has been made and the) Tj0 -10.2  TD 0.1201  Tc -0.1921  Tw (rvalue-reference proposal is part of it.) TjET304.2 89.4 m 567.6 89.4 l S endstreamendobj65 0 obj11144endobj63 0 obj<</Type /Page/Parent 48 0 R/Resources <</Font 66 0 R/ProcSet 2 0 R>>/Contents 64 0 R>>endobj66 0 obj<</F0 6 0 R/F2 10 0 R/F4 16 0 R/F6 26 0 R/F7 28 0 R/F9 32 0 R/F10 41 0 R/F11 60 0 R>>endobj68 0 obj<</Length 69 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.0912  Tc 0  Tw (14) Tj0 768.6  TD /F0 12  Tf-0.0037  Tc 0.2137  Tw (Overload issue 61 june 2004) Tj14.4 -38.4  TD /F1 18  Tf0.0288  Tc -0.2328  Tw (When is a \223Pattern\224 not a) Tj15 -20.4  TD -0.0408  Tc 0  Tw (\223Pattern\224?) Tj-15 -14.4  TD /F0 10.2  Tf-0.0871  Tc -0.0869  Tw (by Alan Griffiths) Tj-14.4 -15.6  TD /F4 10.2  Tf0.0352  Tc 1.2648  Tw (We all go through life listening to and telling stories: it is an) Tj0 -12  TD -0.0148  Tc 1.0648  Tw (important part of human social behaviour. Parents tell children) TjT* -0.123  Tc 1.113  Tw (bedtime stories, we read novels, watch TV and films, and many) TjT* -0.0803  Tc 1.2637  Tw (successful computer games are based on allowing the player to) TjT* -0.1069  Tc 0.6169  Tw (participate within a story. Incidentally, one of the things that that) TjT* -0.0979  Tc 1.1017  Tw (seems to have been lost in many of these formats is the idea of) TjT* -0.0151  Tc 1.1985  Tw (participation \226 although, to the annoyance of their mother, my) TjT* -0.1051  Tc 1.0051  Tw (children re-invented it for bedtime stories \(she preferred reading) TjT* -0.0466  Tc -0.1034  Tw (from a book to collaborative invention\).) Tj11.4 -12  TD 0.1509  Tc 0.8241  Tw (Stories are also important in the development of computer) Tj-11.4 -12  TD -0.1932  Tc -0.4068  Tw (software. Not only the stories about how the system will be used, but) Tj0 -12  TD -0.261  Tc -0.4461  Tw (also the stories about how it will work. As with the stories in the wider) TjT* -0.1237  Tc 0.41  Tw (world they can take a number of forms: Among these are \223design) TjT* -0.2015  Tc 0.0515  Tw (patterns\224 and that is the form that I want to examine in this essay.) Tj11.4 -12  TD 0.0509  Tc 0.3991  Tw (Before continuing, I should mention that there are those that) Tj-11.4 -12  TD 0.236  Tc 1.414  Tw (think \223Patterns\224 are like the Platonic Ideals to be found in) Tj0 -12  TD -0.1308  Tc -0.3942  Tw (philosophy: unchangeable and perfect examples of a concept. \(This) TjT* -0.0977  Tc -0.1446  Tw (is not to say that any particular write-up of a pattern is ever perfect) TjT* -0.0801  Tc 0.0301  Tw (\226 Plato\222s Ideals exist in the \223real world\224, not the mundane one.\) ) Tj11.4 -12  TD -0.0409  Tc 0.4909  Tw (For me the important aspect of a pattern is that it narrates the) Tj-11.4 -12  TD 0.0077  Tc 0.4423  Tw (way that a design context is transformed by the application of a) Tj0 -12  TD -0.1754  Tc -0.1928  Tw (solution. I don\222t expect to ever meet an idealised design context and) TjT* -0.0903  Tc 0.2634  Tw (so don\222t demand that a pattern is the one true solution to a design) TjT* 0.191  Tc 0.259  Tw (problem. \(Only that it tells me enough to decide for myself if) TjT* -0.0659  Tc 0.0159  Tw (applying the solution will advance the task.\)) Tj11.4 -12  TD -0.1064  Tc -0.0981  Tw (To demonstrate this I am going to present two \223patterns\224 with a) Tj-11.4 -12  TD -0.0811  Tc -0.4689  Tw (common beginning, one that many developers are familiar with. In) Tj0 -12  TD -0.0655  Tc -0.03  Tw (fact, a good number of developers will be familiar with the whole) TjT* -0.1124  Tc -0.2684  Tw (of both stories to the extent that I\222m not going to worry about some) TjT* -0.164  Tc -0.3133  Tw (of the formalities of writing about patterns \226 such as citing \223existing) TjT* -0.0815  Tc 0.5315  Tw (implementations\224. These are left as an exercise for the interested) TjT* -0.1471  Tc 0  Tw (reader.) Tj0 -18  TD /F0 12  Tf-0.012  Tc 0.072  Tw (Story Number 1) TjT* /F11 10.2  Tf-0.0857  Tc -0.0643  Tw (Initial Context) Tj11.4 -12  TD /F4 10.2  Tf-0.1727  Tc -0.3973  Tw (When a program is working with numerical values it is necessary) Tj0 -12  TD 0.0315  Tc 0.4185  Tw (to represent these using the types and names available in the) TjT* -0.1207  Tc -0.4043  Tw (language. Many languages provide some native data types \(such) TjT* 0.0639  Tc 0.3861  Tw (as the C/C++ types ) Tj83.4 0  TD /F2 10.2  Tf0.28  Tc 0  Tw (int) Tj21.6 0  TD /F4 10.2  Tf0.0904  Tc 0.3596  Tw (and ) Tj18 0  TD /F2 10.2  Tf-0.02  Tc 0  Tw (double) Tj37.2 0  TD /F4 10.2  Tf0.0269  Tc 0.4231  Tw (\) which support a rich) Tj-160.2 -12  TD -0.0968  Tc 0.5468  Tw (array of operations and conversions. Some of these operations) Tj0 -12  TD -0.1091  Tc -0.4009  Tw (and conversion may not be appropriate to the types of numerical) TjT* -0.0846  Tc -0.0654  Tw (value being worked with. For example, ) Tj157.8 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (double) Tj38.4 0  TD /F4 10.2  Tf-0.1306  Tc -0.0194  Tw (might provide) Tj-196.2 -12  TD 0.0135  Tc 0.4365  Tw (the range of values and operations required for working with) Tj0 -12  TD 0.2602  Tc 0.1898  Tw (temperature and pressure. However, it is possible to make) TjT* 0.0355  Tc 0.4145  Tw (mistakes by, for example, assigning a temperature value to a) TjT* -0.023  Tc -0.127  Tw (pressure variable.) Tj-11.4 -24  TD /F11 10.2  Tf-0.1133  Tc 0  Tw (Problem) Tj11.4 -12  TD /F4 10.2  Tf-0.0958  Tc 0.0058  Tw (How can such \(hard to diagnose and expensive to fix\) mistakes) Tj0 -12  TD -0.0251  Tc -0.1249  Tw (be avoided?) Tj-11.4 -24  TD /F11 10.2  Tf-0.1102  Tc 0  Tw (Solution) Tj11.4 -12  TD /F4 10.2  Tf-0.0954  Tc -0.0546  Tw (Encode the problem domain types in the variable names so that) Tj0 -12  TD 0.2515  Tc 0.5985  Tw (the programmer is reminded of the appropriate use of the) TjT* -0.098  Tc 0.548  Tw (variable. For example, by using a prefix indicating the type of) TjT* -0.0795  Tc -0.2705  Tw (the variable. Vis: ) Tj70.2 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (cgdEngine) Tj56.4 0  TD /F4 10.2  Tf0.0904  Tc 0.3596  Tw (and ) Tj17.4 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (ntnsOil) Tj42 0  TD /F4 10.2  Tf-0.15  Tc (.) Tj78 708  TD /F11 10.2  Tf-0.133  Tc -0.017  Tw (Resulting Context) Tj10.8 -12  TD /F4 10.2  Tf-0.0601  Tc -0.0899  Tw (The developer can see from its name the appropriate manner in) Tj0 -12  TD -0.0474  Tc -0.1692  Tw (which to make use of a variable. An error like:) Tj25.2 -12  TD /F2 10.2  Tf-0.1553  Tc 0.0353  Tw (ntnsOil = cgdEngine) Tj-25.2 -12  TD /F4 10.2  Tf-0.1066  Tc -0.4253  Tw (is noticeable \223at a glance\224. However, there is an overhead to this) Tj0 -12  TD -0.112  Tc -0.5046  Tw (solution: the developer needs to maintain a catalogue of problem) TjT* 0.0268  Tc 0.4232  Tw (domain type prefixes and the corresponding types within the) TjT* -0.0972  Tc -0.5028  Tw (programming language. Note that this catalogue may be explicit) TjT* -0.0647  Tc 0.0147  Tw (\(written down\) or implicit \(what everyone knows\).) Tj-10.8 -24  TD -0.1811  Tc 0.4311  Tw (This is a ) Tj37.2 0  TD /F9 10.2  Tf-0.0779  Tc 0.5279  Tw (perfectly good pattern) Tj92.4 0  TD /F4 10.2  Tf-0.1244  Tc 0.5744  Tw (that is adequately captured in the) Tj-129.6 -12  TD -0.0291  Tc 1.1336  Tw (above form. It would gain little from written in a more formal) Tj0 -12  TD -0.0942  Tc 0.9261  Tw (structure \(e.g. Coplien\). It could also be written in a less formal) TjT* -0.091  Tc 0.0744  Tw (manner \(e.g. Alexandrian\) and still be considered a valid pattern.) Tj10.8 -12  TD -0.1086  Tc 0.5586  Tw (As for existing usage: this is one of several design approaches) Tj-10.8 -12  TD 0.0209  Tc 0.4291  Tw (referred to as \223Hungarian Notation\224 and there is no shortage of) Tj0 -12  TD -0.0848  Tc -0.0652  Tw (developers willing to attest to its effectiveness.) Tj0 -18  TD /F0 12  Tf-0.022  Tc -0.218  Tw (Story Number 2) TjT* /F11 10.2  Tf-0.1286  Tc -0.0214  Tw (Initial Context) Tj10.8 -12  TD /F4 10.2  Tf-0.1614  Tc -0.3486  Tw (When a program is working with numerical values it is necessary) Tj0 -12  TD 0.0315  Tc 0.4185  Tw (to represent these using the types and names available in the) TjT* -0.1207  Tc -0.2543  Tw (language. Many languages provide some native data types \(such) TjT* 0.0639  Tc 0.2361  Tw (as the C/C++ types ) Tj83.4 0  TD /F2 10.2  Tf0.08  Tc 0  Tw (int) Tj21.6 0  TD /F4 10.2  Tf0.0904  Tc -0.2404  Tw (and ) Tj18 0  TD /F2 10.2  Tf0.18  Tc 0  Tw (double) Tj37.2 0  TD /F4 10.2  Tf0.0936  Tc 0.3564  Tw (\) which support a rich) Tj-160.2 -12  TD -0.0855  Tc 0.4605  Tw (array of operations and conversions. Some of these operations) Tj0 -12  TD -0.1205  Tc -0.3295  Tw (and conversion may not be appropriate to the types of numerical) TjT* -0.0846  Tc -0.1654  Tw (value being worked with. For example, ) Tj158.4 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (double) Tj37.8 0  TD /F4 10.2  Tf-0.1306  Tc -0.0194  Tw (might provide) Tj-196.2 -12  TD 0.0253  Tc 0.4247  Tw (the range of values and operations required for working with) Tj0 -12  TD 0.2479  Tc 0.2021  Tw (temperature and pressure. However, it is possible to make) TjT* 0.0355  Tc 0.4145  Tw (mistakes by, for example, assigning a temperature value to a) TjT* -0.023  Tc -0.127  Tw (pressure variable.) Tj-10.8 -24  TD /F11 10.2  Tf-0.199  Tc 0  Tw (Problem) Tj10.8 -12  TD /F4 10.2  Tf-0.1075  Tc 0.0775  Tw (How can such \(hard to diagnose and expensive to fix\) mistakes) Tj0 -12  TD -0.0851  Tc -0.0649  Tw (be avoided?) Tj-10.8 -24  TD /F11 10.2  Tf-0.0352  Tc 0  Tw (Solution) Tj10.8 -12  TD /F4 10.2  Tf-0.0738  Tc -0.0162  Tw (Encode the problem domain types as user defined types so that) Tj0 -12  TD -0.0249  Tc 0.4749  Tw (the compiler enforces the appropriate use of the variable. For) TjT* 0.288  Tc 0.162  Tw (example, types \223) Tj73.2 0  TD /F2 10.2  Tf0.24  Tc 0  Tw (centigrade) Tj64.2 0  TD /F4 10.2  Tf0.2827  Tc 0.1673  Tw (\224 and \223) Tj31.2 0  TD /F2 10.2  Tf0.3086  Tc 0  Tw (newtons) Tj45 0  TD /F4 10.2  Tf0.013  Tc 0.737  Tw (\224 may be) Tj-213.6 -12  TD -0.0617  Tc -0.3549  Tw (defined so that they only support the appropriate operations and) Tj0 -12  TD -0.0729  Tc 0  Tw (conversions.) Tj-10.8 -24  TD /F11 10.2  Tf-0.133  Tc -0.017  Tw (Resulting Context) Tj10.8 -12  TD /F4 10.2  Tf-0.1015  Tc -0.0485  Tw (An error like:) Tj25.2 -12  TD /F2 10.2  Tf-0.1394  Tc 0.0194  Tw (oil_pressure = engine_temperature) Tj-25.2 -12  TD /F4 10.2  Tf-0.295  Tc -0.455  Tw (will not compile. However, there is an overhead to this solution: the) Tj0 -12  TD -0.2792  Tc -0.2908  Tw (developer needs to maintain a library of problem domain types and) TjT* -0.2667  Tc 0.0417  Tw (code the support for the allowed operations and conversions.) Tj-10.8 -24  TD -0.1193  Tc 0.3122  Tw (Like the first story this is a ) Tj111 0  TD /F9 10.2  Tf-0.1379  Tc 0.5879  Tw (perfectly good pattern) Tj91.8 0  TD /F4 10.2  Tf-0.0332  Tc 0.2832  Tw (but it is clearly) Tj-202.8 -12  TD -0.1233  Tc -0.0267  Tw (a different one.) Tj10.8 -12  TD 0.0289  Tc 0.4211  Tw (Once again it isn\222t hard to find developers that are willing to) Tj-10.8 -12  TD -0.0909  Tc 0.1409  Tw (attest to the effectiveness of this approach.) Tj0 -18  TD /F0 12  Tf-0.0936  Tc 0.1536  Tw (Two Paths to Choose From) TjT* /F4 10.2  Tf-0.1153  Tc 1.0153  Tw (What are we to make of this? We have two \223patterns\224 that start) Tj0 -12  TD 0.3926  Tc 0.6574  Tw (from the same position, and apply different solutions with) TjT* -0.1092  Tc 0.0342  Tw (\223success\224. Which design should we choose for our work?) Tj97.8 -12  TD 0.2 0.2 0.2 rg /F10 9  Tf-0.0889  Tc -0.8711  Tw ([concluded at foot of next page]) TjETendstreamendobj69 0 obj11431endobj67 0 obj<</Type /Page/Parent 48 0 R/Resources <</Font 70 0 R/ProcSet 2 0 R>>/Contents 68 0 R>>endobj70 0 obj<</F0 6 0 R/F1 8 0 R/F2 10 0 R/F4 16 0 R/F9 32 0 R/F10 41 0 R/F11 60 0 R>>endobj73 0 obj<</Length 74 0 R>>stream
BT43.2 772.2  TD0 0 0 rg /F1 18  Tf0.0081  Tc -0.2121  Tw (Efficient Exceptions? ) Tj0 -12  TD /F0 10.2  Tf-0.1549  Tc -0.0191  Tw (by Roger Orr) Tj-13.8 -14.4  TD /F4 10.2  Tf-0.1094  Tc 0.8594  Tw (I recently read a comment on a code review that produced a fair) Tj0 -12  TD -0.0275  Tc 1.2489  Tw (amount of discussion about exceptions. Slightly simplified, the) TjT* -0.1089  Tc -0.0411  Tw (C# code being reviewed was:) Tj13.8 -24  TD 0.2 0.2 0.2 rg /F10 10.2  Tf-0.12  Tc 0  Tw (public bool isNumeric\(string input\) {) Tj12 -12  TD (bool ret = true; ) Tj0 -12  TD (bool decimalFound = false;) Tj0 -24  TD (if\(input == null) Tj48 -12  TD (|| input.Length < 1\) {) Tj-36 -12  TD (ret = false;) Tj-12 -12  TD (} ) Tj0 -12  TD (else {) Tj12 -12  TD (for\(int i = 0) Tj24 -12  TD (; i < input.Length) Tj0 -12  TD (; i ++\) {) Tj-12 -12  TD (if\(!Char.IsNumber\(input[i]\)\)) Tj12 -12  TD (if\(\(input[i] == \221.\222\)) Tj54 -12  TD (&& !decimalFound\) {) Tj-42 -12  TD (decimalFound = true;) Tj-12 -12  TD (}) Tj0 -12  TD (else {) Tj12 -12  TD (ret = false;) Tj-12 -12  TD (}) Tj-24 -12  TD (}) Tj-12 -12  TD (return ret; ) Tj-12 -12  TD (}) Tj-2.4 -24  TD 0 0 0 rg /F4 10.2  Tf-0.084  Tc -0.5326  Tw (The review comment that started the discussion was quite short:) Tj263.4 360  TD /F8 10.2  Tf-0.0936  Tc 0.0456  Tw (Your isNumeric function might be more efficient as:) Tj14.4 -24  TD 0.2 0.2 0.2 rg /F10 10.2  Tf-0.1382  Tc -0.1318  Tw (public bool isNumeric\(string input\) {) Tj12 -12  TD -0.12  Tc 0  Tw (try {) Tj12 -12  TD (Double.Parse\(input\);) Tj0 -12  TD (return true;) Tj-12 -12  TD (}) Tj0 -12  TD (catch\(FormatException ) Tj132 0  TD /F2 10.2  Tf(/*ex*/) Tj36 0  TD /F10 10.2  Tf(\) {) Tj-156 -12  TD (return false;) Tj-12 -12  TD (}) Tj-12 -12  TD (}) Tj-14.4 -24  TD 0 0 0 rg /F4 10.2  Tf-0.0743  Tc 0.4043  Tw (I thought some of the discussion inspired by this comment might) Tj0 -12  TD -0.0749  Tc 1.2449  Tw (be of more general interest.  There are several important issues) TjT* -0.0798  Tc 0.2529  Tw (that are relevant here, and later in the article I will return to some) TjT* -0.0802  Tc 1.084  Tw (of them.  However the first thing that struck me was the use of) TjT* -0.0879  Tc 0.3995  Tw (the word \223efficient\224 and it is this word that the bulk of the article) TjT* -0.0236  Tc 0  Tw (addresses.) Tj0 -18  TD /F0 12  Tf0.0197  Tc -0.1597  Tw (What Does it Mean to be Efficient?) TjT* /F4 10.2  Tf-0.0021  Tc 1.0521  Tw (In the coding context efficiency is usually concerned with size) Tj0 -12  TD -0.0197  Tc -0.1303  Tw (and/or speed.) Tj11.4 -12  TD -0.0266  Tc 0.4766  Tw (The second piece of code is more efficient in terms of source) Tj-11.4 -12  TD 0.0551  Tc 0.3403  Tw (code size. And it is probably slightly more efficient in terms of) Tj0 -12  TD -0.1774  Tc -0.3726  Tw (image code size; but it is almost certainly not more efficient in terms) TjT* -0.0774  Tc -0.3393  Tw (of runtime memory use, particularly on failure, since exceptions in) TjT* -0.2021  Tc 0.4521  Tw (C# will allocate memory.) Tj11.4 -12  TD 0.0703  Tc 0.3797  Tw (So I started wondering about runtime efficiency \226 which for) Tj-11.4 -12  TD -0.2295  Tc 0.3295  Tw (simplicity I will from here on refer to as \221performance\222.  Would the) Tj0 -12  TD -0.3441  Tc -0.4059  Tw (proposed replacement function be any faster than the original function?) Tj133.8 -12  TD 0.2 0.2 0.2 rg /F10 9  Tf0  Tc 0  Tw ([continued on next page]) Tj114.6 -367.8  TD 0 0 0 rg /F0 10.8  Tf0.0912  Tc (15) Tj-192.6 768.6  TD /F0 12  Tf-0.0037  Tc -0.0863  Tw (Overload issue 61 june 2004) Tj-330.6 -448.8  TD 0.2 0.2 0.2 rg /F10 9  Tf0  Tc 0  Tw ([continued from previous page]) Tj11.4 -12  TD 0 0 0 rg /F4 10.2  Tf-0.0689  Tc 0.5189  Tw (Well, it would be easy if one solution always leads to a better) Tj-11.4 -12  TD -0.071  Tc 0.521  Tw (result than the other does. Then one pattern would be better than) Tj0 -12  TD -0.0725  Tc 0.1368  Tw (the other \(and closer to that Ideal\). But this turns out not to be the) TjT* -0.0482  Tc 0.4982  Tw (case \226 it is not always the same solution that produces the better) TjT* -0.0021  Tc 0  Tw (result.) Tj11.4 -12  TD 0.2825  Tc 0.2425  Tw (Clearly both approaches resolve the problem stated in the) Tj-11.4 -12  TD 0.0145  Tc -0.2978  Tw (initial context. But when the two resulting contexts are examined) Tj0 -12  TD 0.1746  Tc 0.2754  Tw (closely it becomes apparent that a careful assessment of costs) TjT* 0.1196  Tc -0.5363  Tw (and benefits is required. Specifically: we have to chose between) TjT* 0.1232  Tc -0.4065  Tw (the cost of maintaining the \223prefix catalogue\224 or of maintaining) TjT* 0.3185  Tc 0.2648  Tw (the \223type library\224 described in the two solutions. \(This may) TjT* 0.1061  Tc -0.2561  Tw (appear to be lower in the first story as the catalogue need not be) TjT* 0.3554  Tc 0.2279  Tw (maintained explicitly.\) At the same time we have to choose) TjT* 0.4629  Tc 1.6371  Tw (between the benefits of visual and compiler based error) TjT* 0.1457  Tc 0  Tw (detection.) Tj11.4 -12  TD -0.0878  Tc 0.1778  Tw (In some circumstances the second solution may not even be an) Tj-11.4 -12  TD -0.1228  Tc -0.3272  Tw (option: the cost of implementing user-defined types may be so high) Tj0 -12  TD -0.0817  Tc 0.1625  Tw (as to be prohibitive \226 in some languages there is no support for it.) TjT* -0.0833  Tc -0.0667  Tw (\(Although it may be possible to add them \226 some \223lint\224 style tools) TjT* 0.0677  Tc 0.3823  Tw (add the notion of \223strong typedef\224 to C for this purpose.\) Even) TjT* -0.1114  Tc -0.3386  Tw (where possible in the language, the developer skills available to the) TjT* -0.0851  Tc 0.3715  Tw (project may not be up to providing the desired user defined types) TjT* -0.1457  Tc 0  Tw (reliably.) Tj11.4 -12  TD 0.0597  Tc 0.3903  Tw (It is far rarer that the first solution isn\222t available: languages) Tj-11.4 -12  TD 0.0139  Tc -0.3354  Tw (whose maximum identifier length is significantly constrained are) Tj274.8 300  TD 0.3725  Tc 1.2775  Tw (thankfully rare these days. But there are occasions where) Tj0 -12  TD 0.0289  Tc -0.1789  Tw (identifiers are displayed to users who would not appreciate these) TjT* 0.0662  Tc 0  Tw (prefixes.) Tj11.4 -12  TD 0.0099  Tc 0.4401  Tw (It could even be worse: the initial context may sometimes be) Tj-11.4 -12  TD -0.0211  Tc 0.4044  Tw (better than either of the resulting contexts described above. This) Tj0 -12  TD -0.1275  Tc -0.2952  Tw (happens whenever the cost of introducing a new type is higher than) TjT* -0.1161  Tc -0.4339  Tw (the risk involved in reusing an existing type \226 or when the language) TjT* -0.0925  Tc 0.1425  Tw (doesn\222t allow user-defined types or long identifiers.) Tj0 -18  TD /F0 12  Tf0.0055  Tc -0.2455  Tw (Will the True Pattern Please) Tj18 -12  TD -0.039  Tc -0.201  Tw (Stand Up?) Tj-18 -18  TD /F4 10.2  Tf-0.1014  Tc 0.5514  Tw (What is this: two \(or three\) patterns that might apply to the same) Tj0 -12  TD -0.0589  Tc 0.7817  Tw (problem? That doesn\222t fit with the popular view of patterns as a) TjT* -0.0961  Tc 1.1461  Tw (template for solving problems: match the initial context and the) TjT* -0.1371  Tc 0.2271  Tw (problem, and the solution follows automatically.) Tj11.4 -12  TD 0.2033  Tc 0.2467  Tw (One way to defend this viewpoint is to insist that there are) Tj-11.4 -12  TD -0.0637  Tc -0.0263  Tw (additional forces at work, ones not captured by the initial context.) Tj0 -12  TD -0.1214  Tc -0.3786  Tw (But look at what these forces are: the cost and/or benefits of aspects) TjT* -0.0738  Tc -0.1962  Tw (the resulting context. Discussing these as part of the initial context) TjT* -0.0915  Tc 0.3615  Tw (would seriously unbalance the story and lead to turgid prose. No,) TjT* -0.029  Tc 0.479  Tw (there is no escaping from it: there is still a role for the designer!) TjT* 0.107  Tc 0.343  Tw (These patterns don\222t replace thought \226 you still have to decide) TjT* -0.1289  Tc 0.1789  Tw (which option is better.) Tj213 -24  TD /F6 10.2  Tf-0.0748  Tc -0.3692  Tw (Alan Griffiths) Tj-84.6 -12  TD /F2 9  Tf0  Tc 0  Tw (alan@octopull.demon.co.uk) Tj0.6 w 1 J 1 j 0 0 0 RG ET35.4 396 m 573.6 396 l S endstreamendobj74 0 obj8397endobj71 0 obj<</Type /Page/Parent 72 0 R/Resources <</Font 75 0 R/ProcSet 2 0 R>>/Contents 73 0 R>>endobj75 0 obj<</F0 6 0 R/F1 8 0 R/F2 10 0 R/F4 16 0 R/F6 26 0 R/F8 30 0 R/F10 41 0 R>>endobj77 0 obj<</Length 78 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.0912  Tc 0  Tw (16) Tj11.4 223.8  TD /F4 10.2  Tf0.033  Tc 0.2785  Tw (It is often said that it is better to use library functions than to) Tj-11.4 -12  TD 0.0083  Tc -0.1583  Tw (write your own code; apart from any other considerations library) Tj0 -12  TD 0.0008  Tc 0.3292  Tw (functions are often optimised by experts using a wide variety of) TjT* -0.0034  Tc -0.2666  Tw (techniques.  However, in this case using the library function adds) TjT* 0.242  Tc 0.2747  Tw (exception handling into the equation \226 would the advice still) TjT* -0.0435  Tc 0  Tw (stand?) Tj11.4 -12  TD -0.0771  Tc 0.0604  Tw (I thought I\222d try to get some actual performance figures.) Tj0 -12  TD -0.0738  Tc -0.0762  Tw (I wrote a simple test harness that called the first and the second) Tj-11.4 -12  TD -0.0841  Tc -0.0659  Tw (functions 1,000,000 times.) Tj0 -17.4  TD -0.0553  Tc -0.0947  Tw (\(execution times in seconds\)) Tj6 -16.8  TD /F11 10.2  Tf-0.1541  Tc 0.6041  Tw (Unoptimised C#) Tj0 -14.4  TD -0.1947  Tc 0  Tw (Argument) Tj70.8 0  TD -0.1307  Tc -0.0193  Tw (Function #1) Tj70.8 0  TD -0.0707  Tc 0.2207  Tw (Function #2 ) Tj-141.6 -15  TD /F4 10.2  Tf0.3  Tc 0  Tw (1) Tj70.8 0  TD 0.0375  Tc (0.19) Tj70.8 0  TD (0.92) Tj-141.6 -15  TD -0.18  Tc (12345) Tj70.8 0  TD 0.0375  Tc (0.56) Tj70.8 0  TD (1.13) Tj-141.6 -14.4  TD -0.1343  Tc 0.5843  Tw (10 digits) Tj70.8 0  TD 0.0375  Tc 0  Tw (1.01) Tj70.8 0  TD (1.38) Tj-141.6 -15  TD -0.1343  Tc 0.5843  Tw (20 digits) Tj70.8 0  TD 0.0375  Tc 0  Tw (1.91) Tj70.8 0  TD (1.79) Tj133.2 714.6  TD /F11 10.2  Tf-0.1276  Tc -0.0224  Tw (Optimised C#) Tj0 -15  TD -0.0447  Tc 0  Tw (Argument) Tj70.8 0  TD -0.1307  Tc -0.0193  Tw (Function #1) Tj70.8 0  TD -0.0707  Tc -0.0793  Tw (Function #2 ) Tj-141.6 -15  TD /F4 10.2  Tf0.3  Tc 0  Tw (1) Tj70.8 0  TD -0.1125  Tc (0.10) Tj70.8 0  TD (0.89) Tj-141.6 -15  TD -0.18  Tc (12345) Tj70.8 0  TD -0.1125  Tc (0.33) Tj70.8 0  TD (1.01) Tj-141.6 -14.4  TD -0.1343  Tc -0.0157  Tw (10 digits) Tj70.8 0  TD -0.1125  Tc 0  Tw (0.65) Tj70.8 0  TD (1.36) Tj-141.6 -15  TD -0.1343  Tc -0.0157  Tw (20 digits) Tj70.8 0  TD -0.1125  Tc 0  Tw (1.28) Tj70.8 0  TD (1.76) Tj-141.6 -15  TD -0.1343  Tc -0.0157  Tw (30 digits) Tj70.8 0  TD -0.1125  Tc 0  Tw (2.07) Tj70.8 0  TD (1.92) Tj-141.6 -14.4  TD -0.1343  Tc -0.0157  Tw (40 digits) Tj70.8 0  TD -0.1125  Tc 0  Tw (2.55) Tj70.8 0  TD (2.38) Tj-147 -22.8  TD 0.2332  Tc 0.9804  Tw (So the first function is quite a bit faster for relatively short) Tj0 -12  TD -0.0748  Tc 0.5248  Tw (strings, but degrades until it is eventually slower than the second) TjT* 0.1655  Tc 0.9595  Tw (function.  Similar results are generated when optimisation is) TjT* -0.1093  Tc 0.2866  Tw (turned on, although the number of digits at the \221break even\222 point) TjT* -0.1016  Tc -0.0484  Tw (is slightly more.) Tj10.8 -12  TD 0.0199  Tc -0.3699  Tw (The main question I was investigating though is what happens) Tj-10.8 -12  TD 0.4462  Tc 0.2704  Tw (when a non-numeric value is supplied and an exception is) Tj0 -12  TD 0.1362  Tc 0  Tw (thrown.) Tj5.4 -24  TD /F11 10.2  Tf-0.0447  Tc (Argument) Tj70.8 0  TD -0.1307  Tc -0.0193  Tw (Function #1) Tj70.8 0  TD -0.0107  Tc -0.1393  Tw (Function #2) Tj-141.6 -15  TD /F4 10.2  Tf-0.1644  Tc 0  Tw (X) Tj70.8 0  TD -0.1125  Tc (0.20) Tj70.8 0  TD -0.0675  Tc 0.0675  Tw (147.60    \(unoptimised\)) Tj-141.6 -14.4  TD -0.1644  Tc 0  Tw (X) Tj70.8 0  TD -0.4125  Tc (0.11) Tj70.8 0  TD -0.1107  Tc 0.1107  Tw (143.24    \(optimised\)) Tj-147 -18.6  TD 0.1204  Tc 1.1296  Tw (Yes, that\222s right \226 the decimal point is in the right place for) Tj0 -12  TD 0.1681  Tc 1.1486  Tw (function #2!  The code path through the exception throwing) TjT* 0.1545  Tc 0.9555  Tw (route took almost 3 orders of magnitude longer than the raw) TjT* 0.0785  Tc 0  Tw (code.) Tj10.8 -12  TD 0.0925  Tc 0.3575  Tw (This is why, for this article, I\222m just not interested in minor) Tj-10.8 -12  TD -0.0342  Tc 0.4842  Tw (optimisations of the source code, since the impact of exceptions) Tj0 -12  TD -0.1367  Tc -0.0133  Tw (dwarfs them.) Tj10.8 -12  TD -0.0406  Tc -0.4094  Tw (This was very intriguing \226 I wondered whether it was only a C#) Tj-10.8 -12  TD -0.0984  Tc 0.1284  Tw (issue or it was also an issue with Java and C++.) Tj10.8 -12  TD 0.2932  Tc 1.1318  Tw (Here is an approximately equivalent pair of functions in) Tj-10.8 -12  TD -0.2322  Tc 0  Tw (Java:) Tj13.8 -24  TD 0.2 0.2 0.2 rg /F10 10.2  Tf-0.12  Tc (public boolean isNumeric\(String input\) {) Tj12 -12  TD (boolean ret = true; ) Tj0 -12  TD (boolean decimalFound = false;) Tj0 -24  TD (if\(input == null) Tj42 -12  TD (|| input.length\(\) < 1\) {) Tj-30 -12  TD (ret = false;) Tj-12 -12  TD (} ) Tj0 -12  TD (else {) Tj12 -12  TD (for\(int i = 0) Tj24 -12  TD (; i < input.length\(\)) Tj0 -12  TD (; i ++\) {) Tj-12 -12  TD (if\(!Character.isDigit\() Tj108 -12  TD (input.charAt\(i\)\)\)) Tj-96 -12  TD (if\(\(input.charAt\(i\) == \221.\222\)) Tj48 -12  TD (&& !decimalFound\) {) Tj-36 -12  TD (decimalFound = true;) Tj-12 -12  TD (}) Tj0 -12  TD (else {) Tj12 -12  TD (ret = false;) Tj-12 -12  TD (}) Tj-24 -12  TD (}) Tj-12 -12  TD (}) Tj0 -12  TD (return ret; ) Tj-12 -12  TD (}) Tj-289.2 748.8  TD 0 0 0 rg /F0 12  Tf-0.0037  Tc 0.2137  Tw (Overload issue 61 june 2004) TjET1 1 1 rg 28.8 281.4 264 504 re f0.9529 0.9529 0.9529 rg 29.4 282 262.8 502.8 re fBT32.4 772.8  TD0 0 0 rg -0.061  Tc 0.221  Tw (The Dangers of Performance) Tj22.2 -12  TD -0.0309  Tc 0  Tw (Figures) Tj-22.2 -15  TD /F4 10.2  Tf-0.0289  Tc 1.0789  Tw (Note: performance figures are very dangerous!  They depend) Tj0 -12  TD 0.0815  Tc 1.0776  Tw (on all sorts of factors, such as the language being used, the) TjT* 0.1668  Tc 1.0332  Tw (compiler settings, the operating system being used and the) TjT* -0.0959  Tc 0.0659  Tw (hardware that the program runs on.) Tj11.4 -12  TD -0.2134  Tc -0.1616  Tw (Although I\222ve done my best to produce repeatable performance) Tj-11.4 -12  TD 0.0287  Tc 0.4213  Tw (figures for this article please do not take any of the figures as) Tj0 -12  TD 0.1175  Tc 0.3325  Tw (being more than indicative of the overall performance of the) TjT* 0.0704  Tc 0.3129  Tw (languages mentioned.  A small change to the programs being) TjT* -0.0729  Tc -0.0771  Tw (tested could produce variations in the figures produced.) Tj11.4 -12  TD -0.1449  Tc 0.3949  Tw (For those who care I was using Windows 2000 SP4 on a 733) Tj-11.4 -12  TD -0.1003  Tc 0.5503  Tw (MHz single CPU machine with 768 Mb of RAM. \(Yes, maybe) Tj0 -12  TD -0.1167  Tc 0.1667  Tw (it\222s time I bought a newer machine!\)) Tj11.4 -12  TD -0.0997  Tc -0.0503  Tw (I was using:) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1818  Tc -0.4349  Tw (C# with csc from Visual Studio .NET \(version 7.00.9466\), both) Tj0 -12  TD -0.0867  Tc -0.0633  Tw (with and without optimising) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0957  Tc 0.0457  Tw (Java with JDK 1.3.0 and JDK 1.4.2) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.105  Tc 0.48  Tw (C++ with Microsoft VC++ 6 \(version 12.00.8804\) both with) Tj0 -12  TD 0.2034  Tc 0  Tw (\() Tj3.6 0  TD /F2 10.2  Tf-0.12  Tc (/Ox) Tj18 0  TD /F4 10.2  Tf-0.1411  Tc -0.0089  Tw (\) and without \() Tj58.2 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (/Od) Tj18 0  TD /F4 10.2  Tf-0.1044  Tc -0.0456  Tw (\) optimising. In both cases I was also) Tj-97.8 -12  TD -0.1007  Tc -0.0493  Tw (using ) Tj24 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (/GX) Tj20.4 0  TD (/GR) Tj18 0  TD /F4 10.2  Tf-0.15  Tc (.) Tj-73.8 -10.2  TD /F5 6  Tf0.054  Tc (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0945  Tc 0.0112  Tw (C++ with gcc 2.95.3-4 under Cygwin \(with and without ) Tj226.2 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (-O) Tj12 0  TD /F4 10.2  Tf0.2034  Tc (\)) Tj-249.6 -12  TD -0.0706  Tc 1.3388  Tw (\(I also repeated a couple of the C++ tests with the Microsoft) Tj0 -12  TD 0.0385  Tc 1.1915  Tw (.NET and .NET 2003 C++ compilers but the results did not) TjT* -0.1443  Tc -0.0057  Tw (change enormously.\)) Tj11.4 -12  TD 0.0681  Tc 0.3819  Tw (It is important to note that I was ) Tj138.6 0  TD /F9 10.2  Tf0.0548  Tc 0  Tw (not) Tj16.2 0  TD /F4 10.2  Tf0.0348  Tc 0.4152  Tw (principally looking to) Tj-166.2 -12  TD -0.1003  Tc -0.0997  Tw (optimise the hand written code \226 I was interested in the effect on) Tj0 -12  TD -0.1017  Tc 0.4851  Tw (performance of using exceptions.  For this reason I deliberately) TjT* -0.0996  Tc 0.2496  Tw (kept the implementations of each function similar to ones in the) TjT* 0.0727  Tc 0.3773  Tw (other languages \226 hence, for example, the use of the member) TjT* -0.0496  Tc -0.1004  Tw (function ) Tj36.6 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (at\(\)) Tj27 0  TD /F4 10.2  Tf-0.0705  Tc 0.5205  Tw (in the C++ code rather than the more idiomatic) Tj-63.6 -12  TD /F2 10.2  Tf-0.12  Tc 0  Tw ([]) Tj15 0  TD /F4 10.2  Tf-0.0718  Tc 0.5218  Tw (notation.  In fact, after being challenged about this, I tested) Tj-15 -12  TD 0.0532  Tc 0.3968  Tw (both methods and to my shock found that ) Tj177 0  TD /F2 10.2  Tf0.03  Tc 0  Tw (at\(\)) Tj28.2 0  TD /F4 10.2  Tf-0.014  Tc 0.464  Tw (was actually) Tj-205.2 -12  TD 0.2981  Tc 0.4519  Tw (faster than ) Tj51 0  TD /F2 10.2  Tf0.24  Tc 0  Tw (operator[]) Tj68.4 0  TD /F4 10.2  Tf0.2106  Tc 1.3394  Tw (with MSVC6.  If you find this) Tj-119.4 -12  TD -0.1202  Tc 0.4202  Tw (unbelievable it only goes to show how unexpected performance) Tj0 -12  TD 0.2314  Tc 1.0853  Tw (measurements can be, and how dependent they are on the) TjT* -0.0532  Tc 0  Tw (optimiser!) Tj11.4 -12  TD -0.0822  Tc -0.2178  Tw (I also made the ) Tj62.4 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (IsNumeric) Tj56.4 0  TD /F4 10.2  Tf-0.1072  Tc -0.2828  Tw (method an instance method of a) Tj-130.2 -12  TD 0.2765  Tc 1.0401  Tw (class in all languages for consistency and ease of testing.) Tj0 -12  TD -0.045  Tc 0.495  Tw (Changing this would have equally affected the performance of) TjT* -0.1495  Tc -0.3697  Tw (both the exception and the non-exception code so I left it as it was.) TjETq 28.8 785.4 m 28.8 281.4 l 292.8 281.4 l 292.8 785.4 l 29.4 784.8 m 29.4 282 l 292.2 282 l 292.2 784.8 l h W* n 28.8 281.4 264 504 re fQ endstreamendobj78 0 obj10564endobj76 0 obj<</Type /Page/Parent 72 0 R/Resources <</Font 79 0 R/ProcSet 2 0 R>>/Contents 77 0 R>>endobj79 0 obj<</F0 6 0 R/F2 10 0 R/F4 16 0 R/F5 21 0 R/F9 32 0 R/F10 41 0 R/F11 60 0 R>>endobj81 0 obj<</Length 82 0 R>>stream
BT29.4 769.8  TD0 0 0 rg /F4 10.2  Tf-0.0411  Tc 0  Tw (and:) Tj13.8 -24  TD 0.2 0.2 0.2 rg /F10 10.2  Tf-0.12  Tc (public boolean isNumeric\(String input\) {) Tj12 -12  TD (try {) Tj12 -12  TD (Double.parseDouble\(input\);) Tj0 -12  TD (return true;) Tj-12 -12  TD (}) Tj0 -12  TD (catch\(NumberFormatException ex\) {) Tj12 -12  TD (return false;) Tj-12 -12  TD (}) Tj-12 -12  TD (}) Tj-13.8 -24  TD 0 0 0 rg /F4 10.2  Tf-0.0692  Tc -0.0308  Tw (Surely code that looks so similar must behave the same way :-\) ?) Tj11.4 -12  TD -0.0993  Tc 0.035  Tw (Here are the results for the non-exception case:) Tj-6 -27  TD /F11 10.2  Tf-0.1174  Tc -0.0326  Tw (jdk 1.3.0) Tj0 -14.4  TD -0.0447  Tc 0  Tw (Argument) Tj70.8 0  TD -0.0107  Tc -0.1393  Tw (Function #1) Tj70.8 0  TD (Function #2) Tj-141.6 -15  TD /F4 10.2  Tf0.3  Tc 0  Tw (1) Tj70.8 0  TD -0.1125  Tc (0.13) Tj70.8 0  TD (0.81) Tj-141.6 -15  TD -0.18  Tc (12345) Tj70.8 0  TD -0.1125  Tc (0.42) Tj70.8 0  TD (1.15) Tj-141.6 -15  TD 0.0157  Tc -0.1657  Tw (10 digits) Tj70.8 0  TD -0.1125  Tc 0  Tw (0.76) Tj70.8 0  TD (1.68) Tj-141.6 -14.4  TD 0.0157  Tc -0.1657  Tw (20 digits) Tj70.8 0  TD -0.1125  Tc 0  Tw (1.48) Tj70.8 0  TD 0.09  Tc (23.16) Tj-141.6 -30  TD /F11 10.2  Tf-0.1174  Tc -0.0326  Tw (jdk 1.4.2) Tj0 -15  TD -0.0447  Tc 0  Tw (Argument) Tj70.8 0  TD -0.0107  Tc -0.1393  Tw (Function #1) Tj70.8 0  TD (Function #2) Tj-141.6 -14.4  TD /F4 10.2  Tf0.3  Tc 0  Tw (1) Tj70.8 0  TD -0.1125  Tc (0.10) Tj70.8 0  TD (0.76) Tj-141.6 -15  TD -0.18  Tc (12345) Tj70.8 0  TD -0.1125  Tc (0.29) Tj70.8 0  TD (1.12) Tj-141.6 -15  TD 0.0157  Tc -0.1657  Tw (10 digits) Tj70.8 0  TD -0.1125  Tc 0  Tw (0.51) Tj70.8 0  TD (1.63) Tj-141.6 -14.4  TD 0.0157  Tc -0.1657  Tw (20 digits) Tj70.8 0  TD -0.1125  Tc 0  Tw (0.94) Tj70.8 0  TD 0.09  Tc (28.08) Tj-147 -23.4  TD -0.2241  Tc 0.4559  Tw (The results here are comparable to the optimised C# results \226 apart) Tj0 -12  TD 0.0522  Tc 0.9378  Tw (from the last line.  What happens here?  The ) Tj195.6 0  TD /F2 10.2  Tf0.0436  Tc 0  Tw (parseDouble) Tj-195.6 -12  TD /F4 10.2  Tf-0.2103  Tc 0.1889  Tw (method is much slower once you exceed 15 digits \226 this is to do \(at) Tj0 -12  TD -0.1935  Tc 0.3435  Tw (least with the versions of Java I\222m using\) with optimisations inside) TjT* /F2 10.2  Tf-0.2533  Tc 0  Tw (Double.parseDouble) Tj108 0  TD /F4 10.2  Tf-0.1606  Tc 0.182  Tw (when the number is small enough to be) Tj-108 -12  TD -0.1777  Tc 0.1368  Tw (represented as an integer value.  Whether this matters in practice of) Tj0 -12  TD -0.1928  Tc 1.0628  Tw (course depends on the range of input values the program actually) TjT* -0.1874  Tc 0.0374  Tw (passes to the ) Tj51.6 0  TD /F2 10.2  Tf-0.2533  Tc 0  Tw (isNumeric) Tj55.2 0  TD /F4 10.2  Tf-0.1941  Tc (function.) Tj-95.4 -12  TD -0.1113  Tc 0.0813  Tw (The exception results look like this:) Tj-6 -20.4  TD /F11 10.2  Tf-0.0447  Tc 0  Tw (Argument) Tj70.8 0  TD -0.0107  Tc -0.1393  Tw (Function #1) Tj70.8 0  TD (Function #2) Tj-141.6 -15  TD /F4 10.2  Tf-0.1644  Tc 0  Tw (X) Tj70.8 0  TD -0.1125  Tc (0.16) Tj70.8 0  TD -0.1319  Tc 0.2219  Tw (15.33    \(jdk 1.3.0\)) Tj-141.6 -15  TD -0.1644  Tc 0  Tw (X) Tj70.8 0  TD -0.1125  Tc (0.12) Tj70.8 0  TD -0.1319  Tc 0.2219  Tw (18.15    \(jdk 1.4.2\)) Tj-147 -21.6  TD -0.1039  Tc 0.6924  Tw (Well, this is not quite as awful as the C# case \226 the performance) Tj0 -12  TD -0.1062  Tc 1.3362  Tw (of the second function is \221only\222 two orders of magnitude worse) TjT* -0.1138  Tc 0.1888  Tw (than the first function when the exception is thrown.) Tj11.4 -12  TD -0.0796  Tc 0.0153  Tw (For completeness, how about a C++ solution? ) Tj0 -12  TD -0.0791  Tc 0.0041  Tw (The roughly equivalent functions I came up with were:) Tj2.4 -24  TD 0.2 0.2 0.2 rg /F10 10.2  Tf-0.12  Tc 0  Tw (bool IsNumeric1::isNumeric\(std::string) Tj114 -12  TD (const & input\) const {) Tj-102 -12  TD (bool ret = true; ) Tj0 -12  TD (bool decimalFound = false;) Tj0 -24  TD (if\(input.length\(\) < 1\) {) Tj12 -12  TD (ret = false;) Tj-12 -12  TD (} ) Tj275.4 708  TD (else {) Tj12 -12  TD (for\(int i = 0) Tj24 -12  TD (; i < input.length\(\)) Tj0 -12  TD (; i ++\) {) Tj-12 -12  TD (if\(!isdigit\(input.at\(i\)\)\)) Tj12 -12  TD (if\(\(input.at\(i\) == \221.\222\)) Tj48 -12  TD (&& !decimalFound\) {) Tj-36 -12  TD (decimalFound = true;) Tj-12 -12  TD (}) Tj0 -12  TD (else {) Tj12 -12  TD (ret = false;) Tj-12 -12  TD (}) Tj-24 -12  TD (}) Tj-12 -12  TD (}) Tj0 -12  TD (return ret;) Tj-12 -12  TD (}) Tj-3 -24  TD 0 0 0 rg /F4 10.2  Tf-0.1911  Tc (and:) Tj3 -24  TD 0.2 0.2 0.2 rg /F10 10.2  Tf-0.1362  Tc 0.0162  Tw (bool IsNumeric2::isNumeric\(std::string) Tj114 -12  TD -0.1533  Tc 0.0333  Tw (const & input\) const {) Tj-102 -12  TD -0.12  Tc 0  Tw (try {) Tj12 -12  TD (convert<double>\(input\);) Tj0 -12  TD (return true;) Tj-12 -12  TD (}) Tj0 -12  TD -0.3632  Tc -0.2068  Tw (catch\(std::invalid_argument const & ex\) {) Tj12 -12  TD -0.12  Tc 0  Tw (return false;) Tj-12 -12  TD (}) Tj-12 -12  TD (}) Tj-14.4 -24  TD 0 0 0 rg /F4 10.2  Tf0.4163  Tc 0.0337  Tw (where ) Tj42 0  TD /F2 10.2  Tf0.48  Tc 0  Tw (convert) Tj61.2 0  TD /F4 10.2  Tf0.4564  Tc 11.6936  Tw (was derived from code in) Tj-103.2 -12  TD /F2 10.2  Tf0.2589  Tc 0  Tw (boost::lexical_cast) Tj124.8 0  TD /F4 10.2  Tf0.1428  Tc -0.2928  Tw (from ) Tj24 0  TD /F2 10.2  Tf0.2031  Tc 0  Tw (www.boost.org) Tj86.4 0  TD /F4 10.2  Tf0.2339  Tc 0.8161  Tw (\(in the) Tj-235.2 -12  TD -0.2892  Tc 0.9792  Tw (absence of a standard C++ library function with similar syntax and) Tj0 -12  TD -0.2516  Tc -0.0984  Tw (semantics to the C# and Java ) Tj112.2 0  TD /F2 10.2  Tf-0.24  Tc 0  Tw (parse) Tj31.2 0  TD /F4 10.2  Tf-0.2692  Tc -0.0308  Tw (functions\) and looks like this:) Tj-129 -24  TD 0.2 0.2 0.2 rg /F10 10.2  Tf-0.12  Tc 0  Tw (template<typename Target>) Tj0 -12  TD -0.1367  Tc 0.0167  Tw (Target convert\(std::string const & arg\) {) Tj12 -12  TD -0.12  Tc 0  Tw (std::stringstream interpreter;) Tj0 -12  TD (Target result;) TjT* (if\(!\(interpreter << arg\)) Tj24 -12  TD (|| !\(interpreter >> result\)) Tj0 -12  TD -0.1388  Tc 0.0188  Tw (|| !\(interpreter >> std::ws\).eof\(\)\)) Tj-12 -12  TD (throw std::invalid_argument\( arg \);) Tj-12 -12  TD -0.12  Tc 0  Tw (return result;) Tj-12 -12  TD (}) Tj-14.4 -24  TD 0 0 0 rg /F4 10.2  Tf-0.0963  Tc 0.7645  Tw (I decided using a reference in C++ kept the source code looking) Tj0 -12  TD -0.0908  Tc 1.2074  Tw (more equivalent although a smart pointer could have been used) TjT* 0.028  Tc 1.172  Tw (instead as its behaviour is more like that of a reference in the) TjT* -0.1223  Tc 0.2723  Tw (other two languages.) Tj11.4 -12  TD -0.0947  Tc -0.0553  Tw (How did C++ fare in the comparison?) Tj-6 -27  TD /F11 10.2  Tf-0.1516  Tc 0.6016  Tw (MSVC unoptimised) Tj0 -14.4  TD -0.1197  Tc 0  Tw (Argument) Tj71.4 0  TD -0.1907  Tc 0.6407  Tw (Function #1) Tj70.8 0  TD -0.1307  Tc -0.0193  Tw (Function #2) Tj-142.2 -15  TD /F4 10.2  Tf0.3  Tc 0  Tw (1) Tj71.4 0  TD -0.2625  Tc (0.14) Tj70.8 0  TD -0.03  Tc (13.04) Tj-142.2 -15  TD 0.06  Tc (12345) Tj71.4 0  TD -0.2625  Tc (0.46) Tj70.8 0  TD -0.03  Tc (17.46) Tj-142.2 -15  TD 0.0157  Tc -0.1657  Tw (10 digits) Tj71.4 0  TD -0.2625  Tc 0  Tw (0.83) Tj70.8 0  TD -0.03  Tc (23.83) Tj-142.2 -14.4  TD 0.0157  Tc -0.1657  Tw (20 digits) Tj71.4 0  TD -0.2625  Tc 0  Tw (1.57) Tj70.8 0  TD -0.03  Tc (34.31) Tj101.4 -27  TD /F0 10.8  Tf0.099  Tc (17) Tj-193.2 768.6  TD /F0 12  Tf-0.0037  Tc -0.0863  Tw (Overload issue 61 june 2004) TjETendstreamendobj82 0 obj7744endobj80 0 obj<</Type /Page/Parent 72 0 R/Resources <</Font <</F0 6 0 R /F2 10 0 R /F4 16 0 R /F10 41 0 R /F11 60 0 R >>/ProcSet 2 0 R>>/Contents 81 0 R>>endobj84 0 obj<</Length 85 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.0912  Tc 0  Tw (18) Tj0 768.6  TD /F0 12  Tf-0.0037  Tc 0.2137  Tw (Overload issue 61 june 2004) Tj6 -40.8  TD /F11 10.2  Tf-0.1332  Tc -0.0168  Tw (MSVC optimised) Tj0 -13.8  TD -0.1947  Tc 0  Tw (Argument) Tj70.8 0  TD -0.1307  Tc -0.0193  Tw (Function #1) Tj70.8 0  TD (Function #2) Tj-141.6 -14.4  TD /F4 10.2  Tf0.3  Tc 0  Tw (1) Tj70.8 0  TD 0.0375  Tc (0.07) Tj70.8 0  TD (5.73) Tj-141.6 -13.8  TD -0.18  Tc (12345) Tj70.8 0  TD 0.0375  Tc (0.21) Tj70.8 0  TD (7.65) Tj-141.6 -13.8  TD -0.1343  Tc 0.5843  Tw (10 digits) Tj70.8 0  TD 0.0375  Tc 0  Tw (0.40) Tj70.8 0  TD -0.27  Tc (11.25) Tj-141.6 -14.4  TD -0.1343  Tc 0.5843  Tw (20 digits) Tj70.8 0  TD 0.0375  Tc 0  Tw (0.74) Tj70.8 0  TD -0.15  Tc (17.12) Tj-147.6 -13.8  TD 0.2433  Tc 0.6867  Tw (Our initial choice for the ) Tj114 0  TD /F2 10.2  Tf0.1371  Tc 0  Tw (convert) Tj48 0  TD /F4 10.2  Tf0.1951  Tc 1.1549  Tw (function is very slow \226) Tj-162 -12  TD -0.0866  Tc 1.0821  Tw (perhaps it is a bad choice.  The cost of using ) Tj192 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (stringstream) Tj-192 -12  TD /F4 10.2  Tf-0.0646  Tc 0.6783  Tw (objects seems to be very high, although that might be a problem) Tj0 -12  TD 0.278  Tc 0.972  Tw (with my compilers\222 implementations.  This is not really an) TjT* -0.0907  Tc 0.3407  Tw (entirely fair comparison either \226 the ) Tj148.2 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (convert) Tj45 0  TD /F4 10.2  Tf-0.1203  Tc 0.5703  Tw (template function) Tj-193.2 -12  TD -0.0891  Tc 0.7391  Tw (is generic whereas the C# and Java code is type-specific.  So let) Tj0 -12  TD -0.0839  Tc 0.2339  Tw (me replace the generic ) Tj93 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (convert) Tj44.4 0  TD /F4 10.2  Tf-0.1668  Tc 0.6168  Tw (function with:) Tj-123 -24  TD 0.2 0.2 0.2 rg /F10 10.2  Tf-0.12  Tc 0  Tw (double convert\(std::string const & arg\) {) Tj12 -12  TD (const char *p = arg.c_str\(\);) Tj0 -12  TD (char *pend = 0;) TjT* (double result = strtod\(p, &pend\);) TjT* (if\(*pend != \221\\0\222\)) Tj12 -12  TD (throw std::invalid_argument\(arg\);) Tj-12 -12  TD (return result;) Tj-12 -12  TD (}) Tj-14.4 -24  TD 0 0 0 rg /F4 10.2  Tf-0.0645  Tc -0.0855  Tw (This produces the following improved performance figures:) Tj6 -26.4  TD /F11 10.2  Tf-0.0716  Tc -0.0784  Tw (MSVC unoptimised) Tj0 -13.8  TD -0.1947  Tc 0  Tw (Argument) Tj70.8 0  TD -0.1307  Tc -0.0193  Tw (Function #1) Tj70.8 0  TD (Function #2) Tj-141.6 -14.4  TD /F4 10.2  Tf0.3  Tc 0  Tw (1) Tj70.8 0  TD 0.0375  Tc (0.14) Tj70.8 0  TD (1.82) Tj-141.6 -13.8  TD -0.18  Tc (12345) Tj70.8 0  TD 0.0375  Tc (0.46) Tj70.8 0  TD (2.71) Tj-141.6 -14.4  TD -0.1343  Tc 0.5843  Tw (10 digits) Tj70.8 0  TD 0.0375  Tc 0  Tw (0.83) Tj70.8 0  TD (5.10) Tj-141.6 -13.8  TD -0.1343  Tc 0.5843  Tw (20 digits) Tj70.8 0  TD 0.0375  Tc 0  Tw (1.57) Tj70.8 0  TD (8.62) Tj-141.6 -28.2  TD /F11 10.2  Tf-0.1332  Tc -0.0168  Tw (MSVC optimised) Tj0 -14.4  TD -0.1947  Tc 0  Tw (Argument) Tj70.8 0  TD -0.1307  Tc -0.0193  Tw (Function #1) Tj70.8 0  TD (Function #2) Tj-141.6 -13.8  TD /F4 10.2  Tf0.3  Tc 0  Tw (1) Tj70.8 0  TD 0.0375  Tc (0.07) Tj70.8 0  TD (1.80) Tj-141.6 -14.4  TD -0.18  Tc (12345) Tj70.8 0  TD 0.0375  Tc (0.21) Tj70.8 0  TD (2.71) Tj-141.6 -14.4  TD -0.1343  Tc 0.5843  Tw (10 digits) Tj70.8 0  TD 0.0375  Tc 0  Tw (0.40) Tj70.8 0  TD (4.94) Tj-141.6 -13.8  TD -0.1343  Tc 0.5843  Tw (20 digits) Tj70.8 0  TD 0.0375  Tc 0  Tw (0.74) Tj70.8 0  TD (8.39) Tj-147.6 -20.4  TD -0.0937  Tc 0.0637  Tw (And finally I recompiled the C++ code with gcc under Cygwin.) Tj6 -26.4  TD /F11 10.2  Tf-0.0574  Tc -0.0926  Tw (gcc unoptimised) Tj0 -13.8  TD -0.1947  Tc 0  Tw (Argument) Tj70.8 0  TD -0.1307  Tc -0.0193  Tw (Function #1) Tj70.8 0  TD (Function #2) Tj-141.6 -14.4  TD /F4 10.2  Tf0.3  Tc 0  Tw (1) Tj70.8 0  TD 0.0375  Tc (0.29) Tj70.8 0  TD (0.63) Tj-141.6 -13.8  TD -0.18  Tc (12345) Tj70.8 0  TD 0.0375  Tc (0.98) Tj70.8 0  TD (0.70) Tj-141.6 -14.4  TD -0.1343  Tc 0.5843  Tw (10 digits) Tj70.8 0  TD 0.0375  Tc 0  Tw (1.79) Tj70.8 0  TD (0.85) Tj-141.6 -13.8  TD -0.1343  Tc 0.5843  Tw (20 digits) Tj70.8 0  TD 0.0375  Tc 0  Tw (3.44) Tj70.8 0  TD (3.87) Tj-141.6 -28.2  TD /F11 10.2  Tf-0.1217  Tc -0.0283  Tw (gcc optimised) Tj0 -14.4  TD -0.1947  Tc 0  Tw (Argument) Tj70.8 0  TD -0.1307  Tc -0.0193  Tw (Function #1) Tj70.8 0  TD (Function #2) Tj-141.6 -13.8  TD /F4 10.2  Tf0.3  Tc 0  Tw (1) Tj70.8 0  TD 0.0375  Tc (0.05) Tj70.8 0  TD (0.33) Tj-141.6 -14.4  TD -0.18  Tc (12345) Tj70.8 0  TD -0.2625  Tc (0.11) Tj70.8 0  TD 0.0375  Tc (0.40) Tj-141.6 -14.4  TD -0.1343  Tc 0.5843  Tw (10 digits) Tj70.8 0  TD 0.0375  Tc 0  Tw (0.17) Tj70.8 0  TD (0.55) Tj-141.6 -13.8  TD -0.1343  Tc 0.5843  Tw (20 digits) Tj70.8 0  TD 0.0375  Tc 0  Tw (0.27) Tj70.8 0  TD (3.55) Tj127.8 699.6  TD -0.1065  Tc 0.4231  Tw (However, what about the exception throwing case \(which is after) Tj0 -12  TD -0.1022  Tc -0.0478  Tw (all the motivating example\) ?) Tj5.4 -27  TD /F11 10.2  Tf-0.0447  Tc 0  Tw (Argument) Tj70.8 0  TD -0.1307  Tc -0.0193  Tw (Function #1) Tj70.8 0  TD -0.0107  Tc -0.1393  Tw (Function #2) Tj-141.6 -14.4  TD /F4 10.2  Tf-0.1644  Tc 0  Tw (X) Tj70.8 0  TD -0.1125  Tc (0.17) Tj70.8 0  TD -0.0768  Tc -0.0732  Tw (11.69  \(MSVC unoptimised\)) Tj-141.6 -15  TD -0.1644  Tc 0  Tw (X) Tj70.8 0  TD -0.1125  Tc (0.08) Tj70.8 0  TD -0.1144  Tc -0.0356  Tw (11.03  \(MSVC optimised\)) Tj-141.6 -15  TD -0.1644  Tc 0  Tw (X) Tj70.8 0  TD -0.1125  Tc (0.40) Tj70.8 0  TD -0.112  Tc 0.082  Tw (4.15    \(gcc unoptimised\)) Tj-141.6 -15  TD -0.1644  Tc 0  Tw (X) Tj70.8 0  TD -0.1125  Tc (0.06) Tj70.8 0  TD -0.0578  Tc 0.0278  Tw (3.17    \(gcc optimised\)) Tj-147 -21.6  TD 0.1839  Tc 0.9752  Tw (Even discounting the cost of solution #2 there is one to two) Tj0 -12  TD 0.2283  Tc 0.8967  Tw (orders of magnitude difference between the return code and) TjT* -0.034  Tc 1.3411  Tw (exception throwing case, but with some significant differences) TjT* -0.0578  Tc -0.0922  Tw (between the two compilers.) Tj0 -30  TD /F0 12  Tf-0.036  Tc 0.096  Tw (What is the Cost of an Exception?) Tj0 -18  TD /F4 10.2  Tf0.4241  Tc 0.8259  Tw (Exceptions tend to be expensive for a number of reasons,) Tj0 -12  TD -0.1767  Tc 0.6267  Tw (described below:) Tj0 -24  TD /F11 10.2  Tf-0.103  Tc 0.053  Tw (The exception object itself must be created.) Tj0 -12  TD /F4 10.2  Tf0.2363  Tc 0.8737  Tw (This is not usually very expensive in C++, although it does) TjT* -0.0845  Tc 0.9845  Tw (obviously depend on the exact class being used.  In Java and in) TjT* -0.0047  Tc 1.2947  Tw (C# the exception object contains a call stack, and the runtime) TjT* 0.0339  Tc 1.1494  Tw (environment has to create this before the exception is thrown.) TjT* 0.1186  Tc 1.0647  Tw (This may be quite expensive, particularly if the function call) TjT* -0.031  Tc -0.119  Tw (stack is deep.) Tj0 -24  TD /F11 10.2  Tf-0.1054  Tc 0.0304  Tw (The act of throwing the exception can be expensive.) Tj0 -12  TD /F4 10.2  Tf-0.0392  Tc 1.0892  Tw (For example, when using Microsoft compilers under Windows,) TjT* -0.086  Tc 0.296  Tw (throwing a C++ exception involves calling the OS kernel to raise) TjT* -0.0967  Tc 0.1717  Tw (an operating system exception, which includes capturing the state) TjT* -0.0775  Tc 0.3093  Tw (of the thread for passing to the exception handler.  This approach) TjT* -0.0922  Tc 0.1922  Tw (is by no means universal \226 gcc under Cygwin does not use native) TjT* -0.1156  Tc 0.4156  Tw (operating system exceptions for its C++ exceptions, which seems) TjT* 0.1616  Tc 1.2703  Tw (to have as a consequence that the execution time cost of an) TjT* -0.1198  Tc -0.0302  Tw (exception is lower.) Tj10.8 -12  TD -0.1011  Tc -0.4489  Tw (Then, in C++, a copy of the supplied object is thrown, which can) Tj-10.8 -12  TD -0.0785  Tc 0.0285  Tw (impose some overhead for non-trivial exception objects.) Tj0 -24  TD /F11 10.2  Tf-0.1322  Tc 0.2393  Tw (There is the cost of catching the exception.) Tj0 -12  TD /F4 10.2  Tf-0.1187  Tc 0.4354  Tw (This in general involves unwinding the stack and finding suitable) TjT* -0.0103  Tc 1.1936  Tw (catch handlers, using run time type identification to match the) TjT* -0.1145  Tc 1.3282  Tw (types of the thrown object to each potential catch handler.  For) TjT* -0.0389  Tc 1.0889  Tw (example, if I throw a ) Tj94.2 0  TD /F2 10.2  Tf-0.0057  Tc 0  Tw (std::invalid_argument) Tj132.6 0  TD /F4 10.2  Tf0.017  Tc 1.633  Tw (object in) Tj-226.8 -12  TD -0.1266  Tc 0.0966  Tw (C++ this might be caught by:) Tj0 -22.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj10.8 -1.8  TD /F10 10.2  Tf-0.12  Tc (catch\(std::invalid_argument const &\)) Tj-10.8 -10.2  TD /F5 6  Tf0.054  Tc (l) Tj10.8 -1.8  TD /F10 10.2  Tf-0.12  Tc (catch\(std::exception\)) Tj-10.8 -10.2  TD /F5 6  Tf0.054  Tc (l) Tj10.8 -1.8  TD /F10 10.2  Tf-0.12  Tc (catch\(...\)) Tj-10.8 -24  TD /F4 10.2  Tf-0.0824  Tc 0.4824  Tw (with different behaviour in each case.  The cost of this rises with) Tj0 -12  TD -0.094  Tc 0.1622  Tw (both the depth of the exception class hierarchy and the number of) TjT* 0.4089  Tc 0.7744  Tw (catch statements that there are between the throw and the) TjT* -0.1121  Tc -0.0379  Tw (successful catch.) Tj10.8 -12  TD -0.0655  Tc 0.0655  Tw (Note that some experts in compiler and library implementation) Tj-10.8 -12  TD 0.0394  Tc 0.4106  Tw (claim that high performance exception handling is theoretically) Tj0 -12  TD -0.0332  Tc 0.4832  Tw (possible; however in practice it seems than many of the popular) TjT* -0.112  Tc 0.322  Tw (compilers out there do have less than optimal performance in this) TjT* -0.1866  Tc 0  Tw (area.) TjETendstreamendobj85 0 obj9891endobj83 0 obj<</Type /Page/Parent 72 0 R/Resources <</Font 86 0 R/ProcSet 2 0 R>>/Contents 84 0 R>>endobj86 0 obj<</F0 6 0 R/F2 10 0 R/F4 16 0 R/F5 21 0 R/F10 41 0 R/F11 60 0 R>>endobj88 0 obj<</Length 89 0 R>>stream
BT552.6 42  TD0 0 0 rg /F0 10.8  Tf0.0912  Tc 0  Tw (19) Tj-192.6 768.6  TD /F0 12  Tf-0.0037  Tc -0.0863  Tw (Overload issue 61 june 2004) Tj-330.6 -34.2  TD 0  Tc -0  Tw (Should I Care How Slow Exceptions) Tj22.2 -12  TD -0.06  Tc 0  Tw (Are?) Tj-22.2 -18.6  TD /F4 10.2  Tf-0.0796  Tc 0.4205  Tw (Let\222s take stock of where we have reached.  I\222ve investigated the) Tj0 -12  TD -0.087  Tc 0.687  Tw (\221efficiency\222 claims for the proposed replacement code and found) TjT* 0.32  Tc 1.09  Tw (that it is almost always slower for numeric input and very) TjT* -0.0649  Tc -0.0851  Tw (significantly slower for non-numeric input.) Tj11.4 -12  TD -0.0681  Tc 0.3981  Tw (On examining the two functions you can quickly see that they) Tj-11.4 -12  TD 0.0181  Tc 0.4319  Tw (do not produce the same answers for all inputs; this is probably) Tj0 -12  TD -0.1708  Tc -0.3392  Tw (much more significant than which function runs faster since in most) TjT* -0.0678  Tc -0.0822  Tw (applications \221right\222 is better than \221fast but wrong\222.) Tj11.4 -12  TD 0.0015  Tc 0.4485  Tw (Consider the results the two C# implementations give for the) Tj-11.4 -12  TD -0.1276  Tc -0.0224  Tw (following inputs:) Tj5.4 -17.4  TD /F11 10.2  Tf-0.1956  Tc 0  Tw (Input) Tj70.8 0  TD -0.0107  Tc -0.1393  Tw (Function #1) Tj70.8 0  TD (Function #2) Tj-141.6 -13.8  TD /F4 10.2  Tf-0.1776  Tc 0  Tw (\223+1\224) Tj70.8 0  TD -0.1064  Tc (False) Tj70.8 0  TD -0.1644  Tc (True) Tj-141.6 -13.2  TD -0.1885  Tc (\223-1\224) Tj70.8 0  TD -0.1064  Tc (False) Tj70.8 0  TD -0.1644  Tc (True) Tj-141.6 -13.8  TD -0.0692  Tc (\223.\224) Tj70.8 0  TD -0.0144  Tc (True) Tj70.8 0  TD -0.1064  Tc (False) Tj-141.6 -13.2  TD -0.1192  Tc -0.0308  Tw (\223 1\224) Tj70.8 0  TD -0.1064  Tc 0  Tw (False) Tj70.8 0  TD -0.1644  Tc (True) Tj-141.6 -13.2  TD -0.1192  Tc -0.0308  Tw (\2231 \223) Tj70.8 0  TD -0.1064  Tc 0  Tw (False) Tj70.8 0  TD -0.1644  Tc (True) Tj-141.6 -13.8  TD 0.0427  Tc (\2231e3\224) Tj70.8 0  TD -0.1064  Tc (False) Tj70.8 0  TD -0.1644  Tc (True) Tj-141.6 -13.2  TD -0.1154  Tc (\2231,000\224) Tj70.8 0  TD -0.1064  Tc (False) Tj70.8 0  TD -0.1644  Tc (True) Tj-141.6 -13.2  TD -0.0058  Tc (\223Infinity\224) Tj70.8 0  TD -0.1064  Tc (False) Tj70.8 0  TD -0.1644  Tc (True) Tj-141.6 -13.8  TD -0.2178  Tc (null) Tj70.8 0  TD -0.1064  Tc (False) Tj70.8 0  TD 0.0043  Tc (Exception) Tj-147 -17.4  TD -0.1799  Tc 0.4299  Tw (The library function understands a much broader range of numeric) Tj0 -12  TD -0.2151  Tc 0.447  Tw (input than the hand-crafted code does.  And that\222s leaving aside all) TjT* 0.2943  Tc 0.7557  Tw (discussion about locales \(should \221,\222 be a decimal point or a) TjT* -0.1605  Tc 0.0772  Tw (thousands separator?\), which the library function takes in its stride.) TjT* -0.1727  Tc 0.2894  Tw (This probably provides an explanation of why our own conversion) TjT* -0.1917  Tc 0.0417  Tw (function is faster than the library call \226 it isn\222t a complete solution!) Tj11.4 -12  TD -0.2353  Tc -0.2747  Tw (The problem with the initial code review was the word \221efficient\222;) Tj-11.4 -12  TD -0.1404  Tc 0.2047  Tw (I would like to make use of the library call to take advantage of its) Tj0 -12  TD -0.1194  Tc -0.467  Tw (rich functionality despite the loss of efficiency.  However I\222d like to) TjT* -0.1636  Tc 0.147  Tw (reduce the expense of the exception \226 is this possible?) Tj11.4 -12  TD -0.0969  Tc -0.1076  Tw (The exception is being thrown when the input is not numeric so) Tj-11.4 -12  TD -0.0891  Tc 0.4534  Tw (its cost only matters in this case.  Ideally I\222d like to find out how) Tj0 -12  TD -0.0707  Tc -0.0126  Tw (many times the function returns false in typical use; unfortunately) TjT* -0.0857  Tc 0.1357  Tw (a simple profiler will only tell me how many times the function is) TjT* -0.0741  Tc 0.4318  Tw (called and not differentiate on return code.  I either need to use a) TjT* -0.0812  Tc -0.0021  Tw (better profiler or to add some instrumentation to my program.) Tj11.4 -12  TD -0.0993  Tc 0.4402  Tw (In the best case I might find that the function usually succeeds) Tj-11.4 -12  TD -0.0965  Tc -0.4535  Tw (and then I probably don\222t mind taking a performance hit on the rare) Tj0 -12  TD -0.0769  Tc -0.0731  Tw (failures.  However I might find that the function is called a lot and) TjT* -0.091  Tc -0.4954  Tw (is roughly evenly divided between success and failure \226 in this case) TjT* -0.0985  Tc 0.0485  Tw (I will want to reduce the cost.) Tj11.4 -12  TD -0.0767  Tc 0.1267  Tw (As it happens, it is fairly easy to do this in the C# case.  Closer) Tj-11.4 -12  TD -0.0591  Tc 0.5091  Tw (investigation of the ) Tj81.6 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (Double) Tj39 0  TD /F4 10.2  Tf-0.0342  Tc 0.4842  Tw (class reveals a ) Tj61.8 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (TryParse) Tj51 0  TD /F4 10.2  Tf0  Tc (method) Tj-233.4 -12  TD -0.1006  Tc -0.4244  Tw (that has exactly the behaviour we require in ) Tj172.2 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (IsNumeric) Tj54 0  TD /F4 10.2  Tf-0.0259  Tc -0.5241  Tw (.  It needs) Tj-226.2 -12  TD -0.0774  Tc -0.0126  Tw (a couple of additional arguments but the resultant code is clear:) Tj13.8 -24  TD 0.2 0.2 0.2 rg /F10 10.2  Tf-0.12  Tc 0  Tw (using System.Globalization;) Tj0 -12  TD (...) TjT* (public bool isNumeric\(string input\) {) Tj12 -12  TD (double ignored;) Tj0 -12  TD (return = Double.TryParse\(input, ) Tj36 -12  TD (NumberStyles.Float |) Tj30 -12  TD (NumberStyles.AllowThousands,) Tj-30 -12  TD (NumberFormatInfo.CurrentInfo,) Tj0 -12  TD (out ignored\);) Tj-48 -12  TD (}) Tj261 708  TD 0 0 0 rg /F4 10.2  Tf-0.0785  Tc -0.0715  Tw (The results of running this function are:) Tj5.4 -24  TD /F11 10.2  Tf-0.1276  Tc 0.5776  Tw (Optimised C#) Tj0 -15  TD -0.1197  Tc 0  Tw (Argument) Tj65.4 0  TD -0.1307  Tc -0.0193  Tw (Function #1) Tj65.4 0  TD (Function #2) Tj64.8 0  TD -0.0107  Tc -0.1393  Tw (Function #3) Tj-195.6 -14.4  TD /F4 10.2  Tf0.3  Tc 0  Tw (1) Tj65.4 0  TD -0.1125  Tc (0.10) Tj65.4 0  TD 0.0375  Tc (0.89) Tj64.8 0  TD -0.1125  Tc (1.08) Tj-195.6 -15  TD 0.06  Tc (12345) Tj65.4 0  TD -0.1125  Tc (0.33) Tj65.4 0  TD 0.0375  Tc (1.01) Tj64.8 0  TD -0.1125  Tc (1.29) Tj-195.6 -15  TD 0.0157  Tc -0.1657  Tw (10 digits) Tj65.4 0  TD -0.1125  Tc 0  Tw (0.65) Tj65.4 0  TD 0.0375  Tc (1.36) Tj64.8 0  TD -0.1125  Tc (1.55) Tj-195.6 -15  TD 0.0157  Tc -0.1657  Tw (20 digits) Tj65.4 0  TD -0.1125  Tc 0  Tw (1.28) Tj65.4 0  TD 0.0375  Tc (1.76) Tj64.8 0  TD -0.1125  Tc (1.95) Tj-195.6 -14.4  TD -0.1644  Tc (X) Tj65.4 0  TD -0.4125  Tc (0.11) Tj65.4 0  TD -0.175  Tc (143.24) Tj64.8 0  TD -0.1125  Tc (1.90) Tj-201 -19.2  TD 0.1675  Tc 0.2825  Tw (Unfortunately ) Tj63 0  TD /F2 10.2  Tf0.18  Tc 0  Tw (Double.Parse\(string\)) Tj130.2 0  TD /F4 10.2  Tf0.2208  Tc 0.8292  Tw (is slightly faster) Tj-193.2 -12  TD -0.0411  Tc 0.4911  Tw (than ) Tj19.8 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (TryParse) Tj50.4 0  TD /F4 10.2  Tf-0.0735  Tc -0.0098  Tw (for the \221good\222 case but this is outweighed by the) Tj-70.2 -12  TD -0.1076  Tc 0.8303  Tw (drastic improvement in speed on \221bad\222 inputs.  In the absence of) Tj0 -12  TD 0.4225  Tc 0.7132  Tw (specific measurements of performance I would prefer this) TjT* -0.0027  Tc 0  Tw (solution.) Tj11.4 -12  TD -0.0836  Tc -0.0664  Tw (The Java case is more difficult \226 there is no direct equivalent to) Tj-11.4 -12  TD /F2 10.2  Tf-0.12  Tc 0  Tw (TryParse) Tj48 0  TD /F4 10.2  Tf-0.0805  Tc -0.0695  Tw (.  I tried the following:) Tj-33.6 -24  TD 0.2 0.2 0.2 rg /F10 10.2  Tf-0.1367  Tc 0.0167  Tw (public boolean isNumeric\(String input\) {) Tj12 -12  TD -0.1553  Tc 0.0353  Tw (java.text.NumberFormat numberFormat) Tj30 -12  TD -0.12  Tc 0  Tw (= java.text.NumberFormat.) Tj120 -12  TD -0.1629  Tc (getInstance\(\);) Tj-150 -12  TD -0.1367  Tc 0.0167  Tw (java.text.ParsePosition parsePosition) Tj30 -12  TD -0.1394  Tc 0.0194  Tw (= new java.text.ParsePosition\(0\);) Tj-30 -24  TD -0.12  Tc 0  Tw (Number value = numberFormat.parse\() Tj102 -12  TD -0.1486  Tc 0.0286  Tw (input, parsePosition\);) Tj-102 -12  TD -0.12  Tc 0  Tw (return \(\(value != null\)) Tj48 -12  TD -0.1422  Tc 0.0222  Tw (&& \(parsePosition.getIndex\(\)) Tj66 -12  TD -0.1516  Tc 0.0316  Tw (== input.length\(\)\)\);) Tj-126 -12  TD -0.12  Tc 0  Tw (}) Tj-14.4 -24  TD 0 0 0 rg /F4 10.2  Tf-0.0968  Tc 0.4135  Tw (However the performance is \221disappointing\222.  The new method is) Tj0 -12  TD 0.4341  Tc 0.8559  Tw (indeed faster when an exception occurs \226 but an order of) TjT* -0.1041  Tc 0.4996  Tw (magnitude slower when the input is in fact numeric.  The biggest) TjT* -0.115  Tc 0.265  Tw (cost is creating the ) Tj78 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (numberFormat) Tj74.4 0  TD /F4 10.2  Tf-0.05  Tc 0.05  Tw (object \226 caching this makes) Tj-152.4 -12  TD -0.0884  Tc 0.6384  Tw (it a lot faster, but additional coding work would need to be done) Tj0 -12  TD 0.4241  Tc 0.7592  Tw (to make it threadsafe \(see the JDK 1.4 documentation for) TjT* /F2 10.2  Tf-0.12  Tc 0  Tw (NumberFormat) Tj72 0  TD /F4 10.2  Tf-0.2733  Tc (\).) Tj-72 -23.4  TD /F11 10.2  Tf-0.1174  Tc -0.0326  Tw (jdk 1.3.0) Tj0 -15  TD -0.0447  Tc 0  Tw (Argument) Tj54 0  TD -0.0409  Tc -0.1091  Tw (Funct\222n #1) Tj53.4 0  TD -0.1075  Tc -0.0425  Tw (Funct\222n #2) Tj54 0  TD (Funct\222n #3) Tj54 0  TD 1.7575  Tw (Funct\222n #3) Tj0 -12  TD -0.1062  Tc -0.0438  Tw (+ caching) Tj-215.4 -14.4  TD /F4 10.2  Tf0.3  Tc 0  Tw (1) Tj54 0  TD 0.0375  Tc (0.13) Tj53.4 0  TD -0.1125  Tc (0.81) Tj54 0  TD -0.15  Tc (14.54) Tj54 0  TD -0.1125  Tc (2.39) Tj-215.4 -15  TD -0.18  Tc (12345) Tj54 0  TD 0.0375  Tc (0.42) Tj53.4 0  TD -0.1125  Tc (1.15) Tj54 0  TD -0.15  Tc (16.00) Tj54 0  TD -0.1125  Tc (3.77) Tj-215.4 -15  TD -0.1343  Tc -0.0157  Tw (10 digits) Tj54 0  TD 0.0375  Tc 0  Tw (0.76) Tj53.4 0  TD -0.1125  Tc (1.68) Tj54 0  TD -0.15  Tc (18.11) Tj54 0  TD -0.1125  Tc (5.88) Tj-215.4 -15  TD -0.1343  Tc -0.0157  Tw (20 digits) Tj54 0  TD 0.0375  Tc 0  Tw (1.48) Tj53.4 0  TD 0.09  Tc (23.16) Tj54 0  TD -0.15  Tc (51.19) Tj54 0  TD (34.70) Tj-215.4 -14.4  TD -0.1644  Tc (X) Tj54 0  TD 0.0375  Tc (0.16) Tj53.4 0  TD 0.09  Tc (15.33) Tj54 0  TD -0.03  Tc (11.79) Tj54 0  TD -0.1125  Tc (0.85) Tj-215.4 -19.8  TD 0.1644  Tc 1.322  Tw (The decision is much harder here \226 can I do anything else?) Tj0 -12  TD 0.5872  Tc 0.7295  Tw (One option is to check for common failure cases before) TjT* 0.7814  Tc 0.5686  Tw (passing the string into ) Tj114 0  TD /F2 10.2  Tf0.93  Tc 0  Tw (Double.Parse) Tj84 0  TD /F4 10.2  Tf0.7853  Tc 0.6647  Tw (.  This means) Tj-198 -12  TD 0.1948  Tc 1.1885  Tw (measuring or guessing what the \221common failures\222 are \226 an) Tj0 -12  TD 0.1233  Tc 0.5113  Tw (example of such a guess would be to check if the first digit is) TjT* 0.1571  Tc 0  Tw (alphabetic.) Tj11.4 -12  TD -0.078  Tc 0.128  Tw (Moving on, the C++ case is easier \226 I can simply return failure) Tj-11.4 -12  TD 0.1428  Tc -0.2928  Tw (from ) Tj23.4 0  TD /F2 10.2  Tf0.28  Tc 0  Tw (strtod) Tj40.8 0  TD /F4 10.2  Tf0.1984  Tc 0.2516  Tw (by using a return code rather than throwing an) Tj-64.2 -12  TD -0.0208  Tc 0  Tw (exception.) TjETendstreamendobj89 0 obj11468endobj87 0 obj<</Type /Page/Parent 72 0 R/Resources <</Font <</F0 6 0 R /F2 10 0 R /F4 16 0 R /F10 41 0 R /F11 60 0 R >>/ProcSet 2 0 R>>/Contents 88 0 R>>endobj91 0 obj<</Length 92 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (20) Tj0 768.6  TD /F0 12  Tf-0.0037  Tc 0.2137  Tw (Overload issue 61 june 2004) Tj14.4 -40.8  TD 0.2 0.2 0.2 rg /F10 10.2  Tf-0.3726  Tc 0.1326  Tw (bool try_convert\(std::string const & arg\) {) Tj12 -12  TD -0.12  Tc 0  Tw (const char *p = arg.c_str\(\);) Tj0 -12  TD (char *pend = 0;) TjT* (\(void\)strtod\(p, &pend\);) TjT* (return \(*pend == \221\\0\222\);) Tj-12 -12  TD (}) Tj-8.4 -24  TD 0 0 0 rg /F11 10.2  Tf-0.2644  Tc (Arg) Tj28.2 0  TD -0.1742  Tc 0.6242  Tw (Funct\222n #1) Tj56.4 0  TD -0.1075  Tc -0.0425  Tw (Funct\222n #2) Tj57 0  TD -0.1742  Tc 0.6242  Tw (Funct\222n #3) Tj-141.6 -15  TD /F4 10.2  Tf-0.1644  Tc 0  Tw (X) Tj28.2 0  TD 0.0375  Tc (0.17) Tj56.4 0  TD -0.15  Tc (11.69) Tj57 0  TD -0.1233  Tc 0.0933  Tw (0.31    \(MSVC unoptimised\)) Tj-141.6 -14.4  TD -0.1644  Tc 0  Tw (X) Tj28.2 0  TD 0.0375  Tc (0.08) Tj56.4 0  TD -0.15  Tc (11.03) Tj57 0  TD -0.1363  Tc 0.1063  Tw (0.26    \(MSVC optimised\)) Tj-147.6 -36.6  TD /F0 12  Tf0.0295  Tc -0.2695  Tw (Anything Else?) Tj0 -18  TD /F4 10.2  Tf0.1879  Tc 1.0421  Tw (There are a couple of other points worth noting about using) Tj0 -12  TD 0.0022  Tc 0  Tw (exceptions.) Tj11.4 -12  TD -0.1292  Tc 0.5192  Tw (It can be hard to correctly identify which exceptions should be) Tj-11.4 -12  TD -0.0887  Tc 0.0387  Tw (caught, and mismatches can cause other problems.) Tj11.4 -12  TD 0.0409  Tc 0.4091  Tw (Firstly, catching too much.  If your code catches too broad a) Tj-11.4 -12  TD -0.0568  Tc 0.3868  Tw (category of exceptions \(for example \223) Tj153.6 0  TD /F2 10.2  Tf-0.12  Tc 1.2  Tw (catch \(Exception\)) Tj103.2 0  TD /F4 10.2  Tf-0.2394  Tc 0  Tw (\224,) Tj-256.8 -12  TD -0.1418  Tc -0.0082  Tw (or \223) Tj15 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (catch \(...\)) Tj66 0  TD /F4 10.2  Tf-0.1294  Tc -0.0206  Tw (\224 in C++\) can mean that error cases other than) Tj-81 -12  TD 0.2657  Tc 0.5343  Tw (the one you are expecting are caught and do not flow to the) Tj0 -12  TD -0.0716  Tc 0.0549  Tw (appropriate higher level handler where they can be correctly dealt) TjT* -0.1926  Tc -0.3266  Tw (with.  This can be even more of an issue in some C++ environments,) TjT* -0.0885  Tc -0.1282  Tw (such as MSVC, where non-C++ exceptions are also swallowed by) TjT* /F2 10.2  Tf-0.12  Tc 0  Tw (catch \(...\)) Tj66 0  TD /F4 10.2  Tf-0.15  Tc (.) Tj-54.6 -12  TD -0.1091  Tc 0.1591  Tw (Conversely, failing to make the exception net wide enough can) Tj-11.4 -12  TD -0.0635  Tc -0.3593  Tw (lead to exceptions leaking out of the function and causing a failure) Tj0 -12  TD 0.0463  Tc 0.4037  Tw (higher up.  This has happened to me when using JDBC in Java) TjT* -0.1098  Tc 0.1598  Tw (where the exception types thrown for data conversion errors, such) TjT* -0.094  Tc -0.1105  Tw (as invalid date format, seem to vary depending on the driver being) TjT* 0.0707  Tc 0  Tw (used.) Tj11.4 -12  TD 0.1971  Tc 0.2529  Tw (Debugging exceptions can be a problem.  Many debuggers) Tj-11.4 -12  TD 0.0078  Tc 0.4422  Tw (cannot easily filter exceptions, so if your program throws many) Tj0 -12  TD -0.1208  Tc -0.2692  Tw (exceptions it can make the debugging process slow or unwieldy, or) TjT* -0.0754  Tc 0.0754  Tw (swamp output with spurious warnings.) Tj11.4 -12  TD -0.0973  Tc -0.0527  Tw (In some environments you can stop when an exception is about) Tj-11.4 -12  TD -0.0942  Tc 0.1156  Tw (to be thrown, but it is very hard to follow the flow of control after) Tj0 -12  TD -0.0799  Tc 0.4549  Tw (that point.  The standard flow-of-control mechanisms are usually) TjT* -0.0065  Tc -0.1435  Tw (easier to trace.) Tj11.4 -12  TD 0.2559  Tc 0.3141  Tw (Finally the code you write must be exception safe \226 when) Tj-11.4 -12  TD 0.0105  Tc 0.4395  Tw (exceptions occur you must make sure that the unwinding of the) Tj0 -12  TD -0.1153  Tc -0.3847  Tw (stack up to the catch handler doesn\222t leave work undone.  The main) TjT* 0.1599  Tc 0.2901  Tw (dangers to avoid are leaving objects in inconsistent states and) TjT* -0.0587  Tc -0.3313  Tw (neglecting to release resources.  This includes, but is not restricted) TjT* 0.1831  Tc 0.2669  Tw (to, dynamically allocated memory \226 don\222t fall for the popular) TjT* 0.2553  Tc 0.1947  Tw (misconception that exception safety is only an issue for C++) TjT* -0.0668  Tc 0.0668  Tw (programs \(see, for example, [1]\).) Tj0 -18  TD /F0 12  Tf0.0327  Tc -0.2727  Tw (When Are Exceptions Exceptional?) TjT* /F4 10.2  Tf-0.0729  Tc -0.0171  Tw (Let\222s go back to first principles \226 what are exceptions for?) Tj11.4 -12  TD 0.1465  Tc 0.6035  Tw (The exception mechanism can be seen as a way to provide) Tj-11.4 -12  TD 0.3719  Tc 0.1448  Tw (separation of concerns for error handling.  It is particularly) Tj0 -12  TD 0.0782  Tc -0.3373  Tw (useful when the code detecting the error is distant from the code) TjT* 0.4597  Tc 0.0653  Tw (handling the error; exceptions provide a structured way of) TjT* 0.1185  Tc -0.3776  Tw (passing information about the error up the call stack to the error) TjT* 0.0575  Tc 0  Tw (handler.) Tj11.4 -12  TD 0.0789  Tc 0.3711  Tw (Exceptions also make errors non-ignorable by default, since) Tj-11.4 -12  TD 0.2609  Tc 0.1891  Tw (uncaught exceptions terminate the process.  More traditional) Tj0 -12  TD -0.0875  Tc 0.3575  Tw (alternatives such as error return values are often ignored and also) Tj275.4 708  TD -0.112  Tc -0.4744  Tw (the flow of error information has to be explicitly coded which leads) Tj0 -12  TD -0.1676  Tc 0.2176  Tw (to increased code complexity.) Tj10.8 -12  TD 0.2634  Tc 0.2466  Tw (Exceptions can, in principle, be viewed as no more than a) Tj-10.8 -12  TD -0.1161  Tc -0.0339  Tw (mechanism to transfer control within a program.  However, unless) Tj0 -12  TD -0.1035  Tc -0.1011  Tw (care is taken, using exceptions as a flow of control mechanism can) TjT* -0.0899  Tc -0.2601  Tw (produce obscure code.  Stroustrup wrote: ) Tj163.8 0  TD /F8 10.2  Tf-0.0945  Tc -0.5535  Tw (\221Whenever reasonable, one) Tj-163.8 -12  TD -0.0918  Tc 0.0438  Tw (should stick to the \223exception handling is error handling\224 view\222) Tj234 0  TD /F4 10.2  Tf-0.1608  Tc 0  Tw ([2].) Tj-223.2 -12  TD -0.0956  Tc 0.3656  Tw (If exceptions are being used for handling errors that need non-) Tj-10.8 -12  TD -0.0633  Tc 0.1133  Tw (local processing then the possible runtime overhead is unlikely to) Tj0 -12  TD -0.1293  Tc 0.4793  Tw (be an issue.  Typical uses of exceptions of this type, where errors) TjT* -0.1122  Tc -0.4878  Tw (are relatively uncommon and the performance impact is secondary,) TjT* -0.058  Tc 0  Tw (include:) Tj0 -10.2  TD /F5 6  Tf0.054  Tc (l) Tj10.8 -1.8  TD /F4 10.2  Tf-0.0613  Tc 0.1779  Tw (signalling errors which require aborting an entire unit of work,) Tj0 -12  TD -0.1004  Tc 0.3104  Tw (for example an unexpected network disconnection) Tj-10.8 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj10.8 -1.8  TD /F4 10.2  Tf-0.0838  Tc 0.1738  Tw (support for pre/post conditions and asserts) Tj-10.8 -12  TD 0.5248  Tc 0.6752  Tw (Grey areas where, since exceptions are thrown for \221non-) Tj0 -12  TD 0.0864  Tc 1.4436  Tw (exceptional\222 or \221non-error\222 conditions, programmers disagree) TjT* -0.1022  Tc 0.0522  Tw (about the validity of using exceptions include:) Tj0 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj10.8 -1.8  TD /F4 10.2  Tf-0.1061  Tc 0.1061  Tw (dealing with invalid user input) Tj-10.8 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj10.8 -1.8  TD /F4 10.2  Tf0.2661  Tc 0.7089  Tw (handling uncommon errors in a recursive algorithm \226 for) Tj0 -12  TD -0.1276  Tc -0.5624  Tw (example a parse failure for a SQL statement or numeric overflow) TjT* -0.1016  Tc 0.2516  Tw (in a calculation) Tj-10.8 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj10.8 -1.8  TD /F4 10.2  Tf-0.0671  Tc 0.5171  Tw (handling end of file \(or, more generally, handling any kind of) Tj0 -12  TD -0.1211  Tc -0.0289  Tw (\221end of data\222 condition\)) Tj-10.8 -12  TD -0.0963  Tc 0.1463  Tw (Examples of abuse include:) Tj0 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj10.8 -1.8  TD /F4 10.2  Tf-0.0886  Tc 0.0386  Tw (using exceptions to handle optional fields missing) Tj-10.8 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj10.8 -1.8  TD /F4 10.2  Tf-0.0909  Tc 0.1409  Tw (using exceptions to give early return for common special cases) Tj-10.8 -12  TD 0.4456  Tc 0.6589  Tw (My own rough guideline for the \221grey areas\222 is that if all) Tj0 -12  TD -0.0812  Tc 1.3979  Tw (exceptions became fatal then most programs should still run at) TjT* -0.0839  Tc -0.0661  Tw (least four days out of five.) Tj10.8 -12  TD -0.094  Tc 0.144  Tw (Others have a more flexible approach and use exceptions more) Tj-10.8 -12  TD -0.0977  Tc 0.5477  Tw (widely than this, sometimes unaware of the consequences of this) Tj0 -12  TD -0.1274  Tc 0  Tw (decision.) Tj0 -18  TD /F0 12  Tf-0.0876  Tc (Conclusion) TjT* /F4 10.2  Tf0.5629  Tc 0.6204  Tw (It is important to recognise that using exceptions has an) Tj0 -12  TD -0.0781  Tc 1.1281  Tw (associated cost in C# and to a slightly lesser extent in Java and) TjT* -0.2648  Tc 0  Tw (C++.) Tj10.8 -12  TD 0.2508  Tc 0.9492  Tw (Using exceptions in the main execution path through the) Tj-10.8 -12  TD -0.1081  Tc 0.4915  Tw (program may have major performance implications.  Their use in) Tj0 -12  TD -0.026  Tc 0.476  Tw (time-critical software, in particular to deal with non-exceptional) TjT* -0.1068  Tc -0.0432  Tw (cases, should be carefully justified and the impact on performance) TjT* -0.1596  Tc 0  Tw (measured.) Tj10.8 -12  TD -0.0627  Tc -0.6873  Tw (When this is an issue alternative techniques which may be faster) Tj-10.8 -12  TD 0.2364  Tc 0.2136  Tw (include: using return values instead of exceptions to indicate) Tj0 -12  TD 0.0716  Tc 0.3784  Tw (\221expected\222 error conditions; and checking for common failures) TjT* -0.0869  Tc -0.0631  Tw (before risking the exception.) Tj228.6 -12  TD /F6 10.2  Tf-0.081  Tc 0.237  Tw (Roger Orr) Tj-105.6 -12  TD /F2 9  Tf0  Tc 0  Tw (rogero@howzatt.demon.co.uk) Tj-123 -30  TD /F0 12  Tf-0.0127  Tc (Acknowledgements) Tj0 -18  TD /F4 10.2  Tf0.1628  Tc 0.8872  Tw (Thanks to Phil Bass and Alan Griffiths for reviewing earlier) Tj0 -12  TD -0.065  Tc 0.115  Tw (drafts of this article.) Tj0 -18  TD /F0 12  Tf-0.018  Tc 0  Tw (References) TjT* /F4 10.2  Tf0.1499  Tc 0.9001  Tw ([1] Alan Griffiths, \223More Exceptional Java\224, ) Tj198 0  TD /F9 10.2  Tf0.0593  Tc 0  Tw (Overload) Tj39.6 0  TD /F4 10.2  Tf0.0707  Tc 0.9793  Tw (, June) Tj-237.6 -12  TD 0  Tc 0  Tw (2002) Tj0 -12  TD -0.067  Tc 0.517  Tw ([2] Bjarne Stroustrup, ) Tj91.8 0  TD /F9 10.2  Tf-0.1119  Tc 0.7119  Tw (C++ programming language, 3rd edition) Tj169.2 0  TD /F4 10.2  Tf-0.15  Tc 0  Tw (,) Tj-261 -12  TD 0  Tc (p375) TjETendstreamendobj92 0 obj11044endobj90 0 obj<</Type /Page/Parent 72 0 R/Resources <</Font 93 0 R/ProcSet 2 0 R>>/Contents 91 0 R>>endobj93 0 obj<</F0 6 0 R/F2 10 0 R/F4 16 0 R/F5 21 0 R/F6 26 0 R/F8 30 0 R/F9 32 0 R/F10 41 0 R/F11 60 0 R>>endobj96 0 obj<</Length 97 0 R>>stream
BT552.6 42  TD0 0 0 rg /F0 10.8  Tf0.0912  Tc 0  Tw (21) Tj-192.6 768.6  TD /F0 12  Tf-0.0037  Tc -0.0863  Tw (Overload issue 61 june 2004) Tj-316.8 -38.4  TD /F1 18  Tf0.0591  Tc -0.2631  Tw (Where Egos Dare) Tj0 -13.8  TD /F0 10.2  Tf-0.0717  Tc -0.1023  Tw (by Allan Kelly) Tj-13.8 -12.6  TD /F4 10.2  Tf-0.0191  Tc 1.1891  Tw (Recently I have had reason to look through some old software) Tj0 -12  TD 0.141  Tc 1.0181  Tw (engineering textbooks, the kind of thing I used to read as an) TjT* -0.0312  Tc 1.2812  Tw (undergraduate and junior programmer.  This reminded me of a) TjT* -0.0507  Tc 1.2643  Tw (few concepts I haven\222t thought about in several years.  One of) TjT* -0.0716  Tc 0.1016  Tw (these is egoless programming.  As I recall my university lecturers) TjT* -0.0115  Tc 1.1215  Tw (were very keen on this concept, it seemed to be ) Tj207 0  TD /F9 10.2  Tf-0.0271  Tc 1.0771  Tw (a good thing) Tj54 0  TD /F4 10.2  Tf-0.15  Tc 0  Tw (.) Tj-261 -12  TD -0.0863  Tc 0.0113  Tw (Although, to be honest, I\222ve always had my doubts...) Tj0 -21  TD /F0 12  Tf0.006  Tc 0.154  Tw (What Exactly is Egoless) Tj22.2 -12  TD -0.002  Tc -0.238  Tw (Programming?  ) Tj-22.2 -15  TD /F4 10.2  Tf-0.0951  Tc 0.1051  Tw (I guess it all depends on what you mean by ego, so I turned to my) Tj0 -12  TD -0.0635  Tc 0.7802  Tw (favourite text on management and psychology \(and all that kind) TjT* -0.0795  Tc 0.0152  Tw (of stuff\) where I found the following definition:) Tj16.8 -12  TD /F8 10.2  Tf0.0486  Tc 0  Tw (\223) Tj4.2 0  TD /F12 10.2  Tf0.2938  Tc (ego) Tj18 0  TD /F8 10.2  Tf0.1921  Tc 0.1799  Tw (has to make sense of the internal conflict in our mind) Tj-33.6 -12  TD -0.1375  Tc -0.0489  Tw (between the id and superego and the external world.  The ego is the) Tj0 -12  TD -0.1179  Tc 0.4699  Tw (decision-making part of personality and is engaged in rational and) TjT* -0.1963  Tc -0.4517  Tw (logical thinking.  It is governed by the reality principle.\224 \(Mullins, 2002\)) Tj-5.4 -12  TD /F4 10.2  Tf-0.0762  Tc -0.0138  Tw (Now this looks a bit confusing.  Does egoless programming mean) Tj0 -12  TD -0.0572  Tc 1.1822  Tw (programming without rational and logical thinking?  Well, I\222ve) TjT* -0.0546  Tc 0.8474  Tw (seen my fair share of programs and I must say a lot of them do) TjT* -0.0958  Tc 0.3822  Tw (seem to lack rational and logical thinking, but I really don\222t think) TjT* 0.1855  Tc 0.9311  Tw (anyone wants to advocate this as a design and programming) TjT* -0.1027  Tc 1.2127  Tw (technique.  What would an irrational program look like?  What) TjT* -0.0964  Tc 0.1864  Tw (would an illogical program look like?) Tj11.4 -12  TD -0.0578  Tc 0.235  Tw (I\222ll admit, the first half of the sentence \223conflict in our minds\224) Tj-11.4 -12  TD -0.0923  Tc 0.3173  Tw (makes sense, I often experience conflict when I\222m programming:) Tj0 -12  TD -0.1322  Tc -0.4178  Tw (do I use ) Tj31.8 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (++i) Tj19.8 0  TD /F4 10.2  Tf-0.0483  Tc 0.4983  Tw (or ) Tj10.2 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (i++) Tj17.4 0  TD /F4 10.2  Tf-0.2149  Tc 0.2649  Tw (, or even ) Tj35.4 0  TD /F2 10.2  Tf-0.22  Tc 0  Tw (i:=i+1) Tj35.4 0  TD /F4 10.2  Tf-0.1131  Tc -0.7569  Tw (? And I\222m often torn between) Tj-150 -12  TD -0.0905  Tc 0.2739  Tw (doing something the \223modern\224 way \(say with a template function) Tj0 -12  TD 0.0342  Tc 0.4158  Tw (specialisation\) or the \223old fashioned way\224 \(with lots of verbose) TjT* -0.0955  Tc -0.4145  Tw (code\).  So maybe conflict-less programming would be a good idea.) Tj11.4 -12  TD -0.0674  Tc -0.0826  Tw (But then, if there was no conflict why do we need people?  It is) Tj-11.4 -12  TD -0.1705  Tc -0.4462  Tw (the human judgement, honed over years of programming that makes) Tj0 -12  TD -0.0816  Tc -0.5299  Tw (developers so valuable.  If there is no conflict, if there is an obvious) TjT* -0.061  Tc 0.511  Tw (solution every time, we can automate it, bring on the Case tools.) TjT* -0.085  Tc -0.1195  Tw (Or even just enhance the compiler.  The fact is, resolving conflicts) TjT* -0.1164  Tc 0.4464  Tw (and balancing competing forces is a fundamental part of what we) TjT* -0.1196  Tc 0.1696  Tw (as software developers do.) Tj11.4 -12  TD -0.0762  Tc -0.0193  Tw (So clearly this is not the right definition for ego.  ) Tj0 -12  TD -0.1023  Tc 0.5523  Tw (Maybe what the books mean is superego-less programming, if) Tj-11.4 -12  TD -0.0778  Tc -0.0722  Tw (egoless is good, then surely, super-egoless must be better?) Tj16.8 -12  TD /F8 10.2  Tf0.0486  Tc 0  Tw (\223) Tj4.2 0  TD /F12 10.2  Tf-0.2165  Tc -0.4316  Tw (Super ego) Tj40.2 0  TD /F8 10.2  Tf-0.2444  Tc -0.2836  Tw (is the conscience of the self, the part of our personality) Tj-55.8 -12  TD -0.2288  Tc 0.0172  Tw (which is influenced by significant others in our life. \223 \(Mullins, 2002\)) Tj-5.4 -12  TD /F4 10.2  Tf0.1006  Tc 1.0494  Tw (Well programming without consciousness, that doesn\222t sound) Tj0 -12  TD -0.1026  Tc 0.8254  Tw (good.  Once or twice I\222ve programmed into the wee small hours) TjT* -0.0387  Tc 0.1656  Tw (of the morning and come pretty close to coding in my sleep but I) TjT* -0.1004  Tc 0.2504  Tw (wouldn\222t recommend it.) Tj11.4 -12  TD -0.1612  Tc -0.4251  Tw (I\222m sure I\222ve met managers who would prefer it if our significant) Tj-11.4 -12  TD 0.07  Tc 0.3255  Tw (others didn\222t influence our lives.  A manager once asked me to) Tj0 -12  TD -0.0801  Tc -0.1899  Tw (cancel a holiday, however the thought of how my significant other) TjT* -0.1088  Tc 0.0788  Tw (would react prevented me from agreeing.) Tj11.4 -12  TD 0.0526  Tc 0.3974  Tw (So, I don\222t think superego-less programming is a good thing) Tj-11.4 -12  TD -0.0875  Tc 0.0232  Tw (either.  That leaves us with id-less programming.) Tj16.8 -12  TD /F8 10.2  Tf0.0486  Tc 0  Tw (\223) Tj4.2 0  TD /F12 10.2  Tf-0.774  Tc (id) Tj9 0  TD /F8 10.2  Tf-0.2213  Tc -0.3517  Tw (consists of the instinctive, hedonistic part self..\224 \(Mullins, 2002\)) Tj-30 -12  TD /F4 10.2  Tf-0.1118  Tc 1.4952  Tw (This sounds more like it.  Id-less programming \226 programming) Tj0 -12  TD 0.0077  Tc 1.1346  Tw (without fun.  This is work, this is serious, fun has no place in) TjT* -0.1434  Tc 0.26  Tw (code.  \(Erh, why did I get into this business?\)) Tj11.4 -12  TD 0.1793  Tc 0.2707  Tw (While I\222ve known many managers who don\222t see fun as an) Tj-11.4 -12  TD -0.1125  Tc -0.3375  Tw (essential part of the job, I can\222t say any have really objected to a bit) Tj274.8 708  TD -0.0643  Tc -0.4607  Tw (of fun.  After, a bit of fun, a few smiles in the office, makes the day) Tj0 -12  TD -0.0293  Tc -0.1207  Tw (much more, erh, fun.) Tj0 -18  TD /F0 12  Tf-0.1185  Tc 0.4785  Tw (Try Again) TjT* /F4 10.2  Tf0.6959  Tc 1.2207  Tw (So I\222m not a lot closer to understanding what egoless) Tj0 -12  TD -0.0759  Tc 0.2532  Tw (programming is meant to give me.  Maybe I\222m reading too much) TjT* -0.0645  Tc 0.7327  Tw (of the definition, maybe what we want is a simpler definition of) TjT* -0.0121  Tc 1.1711  Tw (ego.  So this time I turned my dictionary, this definition looks) TjT* -0.1298  Tc -0.0202  Tw (more hopeful:) Tj16.8 -12  TD /F8 10.2  Tf-0.302  Tc -0.496  Tw (\223ego n. pl. egos 1.  The part of a person\222s self that is able to recognise) Tj-11.4 -12  TD -0.2962  Tc 0.0174  Tw (that person as being distinct from other people in things. 2.  A person\222s) Tj0 -12  TD -0.2942  Tc -0.0038  Tw (opinion of his or her own worth: men with fragile egos.\224 \(Collins, 2001\)) Tj-5.4 -12  TD /F4 10.2  Tf0.2565  Tc 0.8602  Tw (So maybe egoless means we can\222t tell ourselves from other) Tj0 -12  TD 0.0322  Tc 1.1815  Tw (people, we lose ourselves in some kind of great group.  Let\222s) TjT* 0.3915  Tc 1.0014  Tw (forget that 20th century literature and popular philosophy) TjT* 0.1684  Tc 0.9566  Tw (emphasise the individual, we want to hire programmers who) TjT* -0.0663  Tc 1.2363  Tw (can\222t tell themselves from anybody else.  That might get really) TjT* -0.0748  Tc 1.1848  Tw (confusing at times, and where is the difference of opinions that) TjT* -0.0806  Tc -0.0694  Tw (can lead to so many useful insights?) Tj11.4 -12  TD -0.0079  Tc 0.4579  Tw (Or maybe you want people who think they are worthless, we) Tj-11.4 -12  TD 0.266  Tc 2.659  Tw (want programmers who don\222t have very high opinion of) Tj0 -12  TD -0.0728  Tc 0.0085  Tw (themselves.  I can see this be a great position for manager to be in) TjT* -0.1166  Tc 0.1848  Tw (when it comes to the annual pay reviews, or for contract renewal.) Tj0 -17.4  TD /F11 10.2  Tf0.2432  Tc 0  Tw (Manager:) Tj47.4 0  TD /F4 10.2  Tf0.2235  Tc 0.2265  Tw (Well then Bob, I\222d like to renew your contract for) Tj-36 -12  TD -0.1521  Tc 0.3021  Tw (another 3 months) Tj-11.4 -12  TD /F11 10.2  Tf0.0072  Tc 0  Tw (Bob:) Tj23.4 0  TD /F4 10.2  Tf-0.11  Tc 0.1781  Tw (No, no, you don\222t want me, remember that bug in my code?) Tj-12 -12  TD -0.1371  Tc 0.1871  Tw (John had to fix it last week?) Tj-11.4 -12  TD /F11 10.2  Tf-0.0568  Tc 0  Tw (Manager:) Tj44.4 0  TD /F4 10.2  Tf-0.1295  Tc 0.1795  Tw (Yes, I see, well, I can\222t throw you out on the streets, so) Tj-33 -12  TD 0.2352  Tc 0.4876  Tw (what say I keep you for another three months with a 25%) Tj0 -12  TD -0.0454  Tc 0  Tw (reduction?) Tj-11.4 -12  TD /F11 10.2  Tf0.0072  Tc (Bob:) Tj22.8 0  TD /F4 10.2  Tf-0.1161  Tc 0.1661  Tw (I am not worthy) Tj-22.8 -18.6  TD -0.1573  Tc 0.6073  Tw (It seems to me that ego is an essential part of people, and even of) Tj0 -12  TD -0.1296  Tc 0.0224  Tw (software people.    On the whole it\222s more fun to work with people) TjT* -0.1589  Tc 0.5589  Tw (who are confident \226 I\222m sure most people would say no if invited) TjT* -0.1462  Tc 0.6962  Tw (to join a team of people racked by self-doubt.  Actually, we want) TjT* -0.0156  Tc 1.1322  Tw (programmers with egos.  We want programmers who care, we) TjT* -0.1608  Tc 0.1199  Tw (want people who say \223I\222m proud to have worked on this project.\224) Tj11.4 -12  TD 0.2021  Tc 0.2479  Tw (It seems \223egoless programming\224 doesn\222t really stand up to) Tj-11.4 -12  TD -0.1041  Tc 0.1177  Tw (analysis.  We want people who are rational, logical, proud of their) Tj0 -12  TD -0.1195  Tc 0.2266  Tw (work and bring a positive attitude to work.) Tj0 -18  TD /F0 12  Tf-0.0099  Tc -0.2301  Tw (Origins and Setting) TjT* /F4 10.2  Tf0.3706  Tc 0.9366  Tw (The term egoless programming originated with Gerald M.) Tj0 -12  TD -0.111  Tc 1.161  Tw (Weinberg\222s \223The Psychology of Programming\224 in 1971.  In the) TjT* 0.3991  Tc 0.908  Tw (Silver Anniversary edition \(Weinberg, 1998\) and in IEEE) TjT* 0.0096  Tc 1.2118  Tw (Software \(Weinberg, 1999\) Weinberg has reprised his original) TjT* -0.1116  Tc 0.4116  Tw (ideas and claimed he has been misunderstood and misinterpreted.) TjT* -0.1206  Tc 1.1161  Tw (To be fair, Weinberg was making an argument for teams, it just) TjT* 0.6556  Tc 2.3144  Tw (happened people remembered the sound bite,) Tj0  Tc 0.45  Tw ( ) Tj229.8 0  TD /F9 10.2  Tf0.6816  Tc 0  Tw (egoless) Tj-229.8 -12  TD -0.0818  Tc (programming) Tj54.6 0  TD /F4 10.2  Tf-0.1193  Tc 0.2693  Tw (, and forgot a lot of his other ideas.) Tj-43.2 -12  TD -0.1064  Tc 0.3314  Tw (For Weinberg egoless programming is about code reviews and) Tj-11.4 -12  TD -0.1789  Tc -0.462  Tw (letting others comment on your work.  Although the benefits of code) Tj0 -12  TD -0.1183  Tc 0.5683  Tw (reviews are well known they are not always conducted routinely.) TjT* 0.0238  Tc 0.4262  Tw (There are a variety of problems, not least because it often takes) TjT* -0.0755  Tc -0.0283  Tw (longer to review code than it takes to write it in the first place.) Tj11.4 -12  TD -0.3006  Tc -0.2994  Tw (In Weinberg\222s original essay he suggested programmers\222 egos lead) Tj-11.4 -12  TD -0.1782  Tc 0.0782  Tw (them to hide their code, and protect it, they don\222t want other people) Tj0 -12  TD -0.2675  Tc -0.3325  Tw (passing comment on it.  Does this really happen? There is no shortage) TjT* -0.211  Tc 0.061  Tw (of programmers posting their code on SourceForge for all to view.) TjETendstreamendobj97 0 obj12435endobj94 0 obj<</Type /Page/Parent 95 0 R/Resources <</Font 100 0 R/ProcSet 2 0 R>>/Contents 96 0 R>>endobj100 0 obj<</F0 6 0 R/F1 8 0 R/F2 10 0 R/F4 16 0 R/F8 30 0 R/F9 32 0 R/F11 60 0 R/F12 98 0 R>>endobj102 0 obj<</Length 103 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (22) Tj0 768.6  TD /F0 12  Tf-0.0037  Tc 0.2137  Tw (Overload issue 61 june 2004) Tj11.4 -40.8  TD /F4 10.2  Tf-0.0888  Tc 0.2158  Tw (I think the problem is more the social setting of the review.  In) Tj-11.4 -12  TD -0.0694  Tc -0.5006  Tw (reviewing your code, and giving feedback, there is a great capacity) Tj0 -12  TD -0.1037  Tc 0.4337  Tw (to hurt someone\222s feelings.  Receiving feedback can be hard, and) TjT* -0.0798  Tc 0.3117  Tw (it can hurt.  Simply being told \223think of egoless programming\224 is) TjT* -0.0868  Tc 0.0459  Tw (like being told to keep \223the British stiff upper lip.\224  ) Tj11.4 -12  TD 0.2506  Tc 0.1994  Tw (Giving criticism so it doesn\222t hurt, and receiving criticism) Tj-11.4 -12  TD 0.0358  Tc 0.4142  Tw (without feeling personally attacked, are skills themselves.  One) Tj0 -12  TD -0.0751  Tc -0.2749  Tw (organisation I know did code reviews by e-mail, a day or two after) TjT* 0.0597  Tc 0.3903  Tw (your check-in you would receive an e-mail from your reviewer) TjT* -0.0475  Tc 0.4975  Tw (listing your mistakes.  This may be efficient but it is also brutal.) TjT* -0.0485  Tc 0.4985  Tw (Some developers would actually hold off check-ins until the last) TjT* -0.0913  Tc -0.0587  Tw (minute then make a lot in a short space of time, this usually meant) TjT* 0.043  Tc 0.407  Tw (the reviewers could not get the reviews done before the release) TjT* -0.1755  Tc -0.2515  Tw (negating the whole point of a review.  I think this kind of humanless) TjT* 0.1773  Tc 0.2727  Tw (code reviewing from 30,000 feet is a bit like carpet bombing,) TjT* -0.0661  Tc 0.0018  Tw (painless for the reviewers but indiscriminate and uncaring.) Tj0 -18  TD /F0 12  Tf-0.036  Tc -0.204  Tw (Neglected Teams) TjT* /F4 10.2  Tf0.0995  Tc 0.9505  Tw (Programming teams are hardly new concepts, they have been) Tj0 -12  TD 0.0098  Tc 1.1259  Tw (knocking around software development books for many years.) TjT* -0.0833  Tc 0.7333  Tw (Ever since programming projects got beyond the abilities of one) TjT* -0.0771  Tc 0.1271  Tw (person we have had teams.  ) Tj11.4 -12  TD -0.082  Tc 0.2653  Tw (The problem is that our traditional text books devote hundreds) Tj-11.4 -12  TD -0.0767  Tc 0.5267  Tw (of pages to technical issues and almost nothing to team work.  A) Tj0 -12  TD -0.1023  Tc 0.1323  Tw (statement to the effect that \223much software is developed in teams,) TjT* -0.0932  Tc -0.4932  Tw (good teams need egoless programming\224 is about as far as many go.) Tj11.4 -12  TD -0.0264  Tc 0.4764  Tw (For example, to take a standard textbook; if Pressman \(1994\)) Tj-11.4 -12  TD -0.0847  Tc 0.4347  Tw (even mentions teams in the text it doesn\222t make it into the index.) Tj0 -12  TD -0.033  Tc 0.483  Tw (His fourth edition \(Pressman, 1997\) edition is slightly better but) TjT* 0.2716  Tc 0.342  Tw (with over 800 pages you could easily miss the few pages on) TjT* 0.2037  Tc 0.2463  Tw (teamwork.  Other texts can be better, for example Somerville) TjT* -0.0397  Tc 0.4897  Tw (\(2001\), devotes a whole chapter \(20 pages\) to managing people,) TjT* -0.1038  Tc 0.3902  Tw (and six pages alone to team working, pretty good going until you) TjT* -0.1161  Tc 0.1661  Tw (notice it is an 800 page book!) Tj11.4 -12  TD -0.1046  Tc -0.1454  Tw (So, while we can all agree that teamwork is important few of us) Tj-11.4 -12  TD -0.085  Tc -0.365  Tw (actually devote time to thinking about how to make it work.  There) Tj0 -12  TD -0.0922  Tc -0.4397  Tw (is an assumption somewhere that teams just work, once told we are) TjT* -0.0406  Tc -0.1094  Tw (a team then all is sweetness and light.) Tj11.4 -12  TD -0.0932  Tc 0.325  Tw (Personally I don\222t see this myself.  Teamworking is a skill just) Tj-11.4 -12  TD -0.0844  Tc 0.3469  Tw (as much as C++ or SQL is, and we need to learn it.  In fact, each) Tj0 -12  TD -0.0692  Tc 0.2692  Tw (team needs to relearn the skill itself.  This may be especially true) TjT* -0.0977  Tc -0.0523  Tw (of programmers, I know quite a few like myself who preferred the) TjT* -0.1285  Tc -0.4034  Tw (warm dry computer room at school to the cold, wet, muddy football) TjT* -0.092  Tc 0.0086  Tw (pitch where our teamwork skills where supposed to be developed.) Tj11.4 -12  TD 0.2757  Tc 0.1743  Tw (The point is teamwork doesn\222t just happen, we need to be) Tj-11.4 -12  TD -0.1189  Tc -0.4927  Tw (encouraged to work in teams.  It can be scary talking to new people,) Tj0 -12  TD -0.0621  Tc 0.3121  Tw (it can be terrifying trusting somebody else to do work, and it can) TjT* -0.0876  Tc 0.0376  Tw (be demoralising to see somebody else do a piece of work that you) TjT* -0.1104  Tc 0.5604  Tw (really want to do \226 and I haven\222t even mentioned fixing people\222s) TjT* 0.0271  Tc 0  Tw (bugs!) Tj11.4 -12  TD 0.1805  Tc 0.2695  Tw (Simply extolling the virtues of teamwork, asking people to) Tj-11.4 -12  TD 0.1761  Tc 0.2739  Tw (practice \223egoless programming\224 doesn\222t make it happen.  If a) Tj0 -12  TD -0.133  Tc 0.3164  Tw (company wants these objectives it has to work for them.) Tj0 -18  TD /F0 12  Tf-0.0555  Tc -0.1845  Tw (The Irony) TjT* /F4 10.2  Tf-0.0972  Tc 0.4926  Tw (Perhaps the greatest irony of all is that people are social animals,) Tj0 -12  TD 0.2495  Tc 1.0255  Tw (we actually like interacting with other people, working and) TjT* -0.0597  Tc 1.3097  Tw (playing with other people.  In fact work can be so much more) TjT* 0.0609  Tc 1.1091  Tw (enjoyable when you work with a great team, people we trust,) TjT* -0.1186  Tc 0.7868  Tw (people we value.  When we trust people work becomes so much) Tj275.4 708  TD -0.1218  Tc 1.1256  Tw (easier, we don\222t need to keep an eye on them, we don\222t need to) Tj0 -12  TD -0.1124  Tc 1.1079  Tw (secretly double check their code, and we feel happy for them to) TjT* -0.1067  Tc -0.0433  Tw (the see our code.) Tj10.8 -12  TD -0.0974  Tc 0.3838  Tw (There are times when competing is the right solution.  Put two) Tj-10.8 -12  TD -0.098  Tc 0.4389  Tw (teams on a football field, two companies in the same market, any) Tj0 -12  TD -0.1368  Tc -0.2799  Tw (company and Microsoft!  Competition is the bedrock of capitalism,) TjT* -0.076  Tc 0.076  Tw (competition drives us, we all want to win.  But competition is not) TjT* -0.0981  Tc 0.5481  Tw (always the right answer, sometimes we get more by co-operating) TjT* -0.1031  Tc -0.0469  Tw (then competition.) Tj10.8 -12  TD -0.0811  Tc -0.4289  Tw (This is why companies exist, because as a group of co-operating) Tj-10.8 -12  TD -0.0057  Tc 0.4557  Tw (individuals we can achieve something that the same individuals) Tj0 -12  TD -0.0997  Tc -0.5903  Tw (can\222t achieve by competition.  And that is why programming teams) TjT* -0.1064  Tc 0.0949  Tw (exist, because some programs are too big for one person to write.  ) Tj0 -18  TD /F0 12  Tf-0.0371  Tc 0.0971  Tw (It Isn\222t Easy) TjT* /F4 10.2  Tf-0.0812  Tc 0.7158  Tw (One of the most difficult things for a team to do is to overcome) Tj0 -12  TD 0.1073  Tc 1.1999  Tw (Conway\222s Law \(Kelly, 2003, Conway, 1968, Coplien, 2003\).) TjT* -0.088  Tc 0.088  Tw (This is usually stated as:) Tj16.8 -12  TD /F8 10.2  Tf-0.1465  Tc -0.3015  Tw (\223if n developers work on a compiler, it will be an n pass compiler\224  ) Tj-16.8 -12  TD /F4 10.2  Tf-0.0438  Tc -0.1062  Tw (It is so easy on any project to count the number of developers and) Tj0 -12  TD -0.1498  Tc 1.1998  Tw (divide the project into that number of pieces, even if the project) TjT* 0.0289  Tc 1.2711  Tw (can divided into more, or less pieces.  This way we can keep) TjT* 0.0101  Tc 1.1599  Tw (everyone busy, everyone can have their own space and get on) TjT* -0.1055  Tc -0.0445  Tw (with a piece of work.) Tj10.8 -12  TD -0.0689  Tc -0.4503  Tw (But is this always sensible?  If a project naturally has a front and) Tj-10.8 -12  TD -0.0148  Tc 0.4648  Tw (a back-end why divide it into three pieces just because we have) Tj0 -12  TD -0.0885  Tc -0.2252  Tw (three programmers?  The bigger question is: What are we trying to) TjT* -0.075  Tc -0.5113  Tw (optimise here?  Are we just trying to make three programmers look) TjT* -0.1993  Tc 0  Tw (busy?) Tj10.8 -12  TD -0.1309  Tc 0.0809  Tw (A common variation on Conway\222s Law states:) Tj6 -12  TD /F8 10.2  Tf0.2175  Tc 0.3345  Tw (\223if n developers work on a compiler, it will be an n-1 pass) Tj-11.4 -12  TD -0.1217  Tc 0.0737  Tw (compiler, somebody has to manage \223) Tj-5.4 -12  TD /F4 10.2  Tf-0.0107  Tc 1.1107  Tw (This assumes that the role of managers is as police.  They are) Tj0 -12  TD 0.0239  Tc 1.1011  Tw (there to command and control the workers \(programmers\) and) TjT* -0.1302  Tc 0.2202  Tw (ensure they get the work done.) Tj10.8 -12  TD -0  Tc 0.4505  Tw (Actually, I think we need to extend Conway\222s law, it\222s really) Tj-10.8 -12  TD -0.2196  Tc 0.0696  Tw (Conway\222s Trap:) Tj16.8 -12  TD /F8 10.2  Tf-0.0839  Tc -0.1141  Tw (\223The sub-optimal team structure and system design that occurs) Tj-11.4 -12  TD -0.0896  Tc 0.3143  Tw (when n programmers divide any given piece of work into n pieces) Tj0 -12  TD -0.0915  Tc 0.0435  Tw (and allocate one piece per programmer.\224) Tj-5.4 -12  TD /F4 10.2  Tf-0.1041  Tc 0.5541  Tw (This formula is easy to apply, has a superficial attractiveness and) Tj0 -12  TD -0.0938  Tc 0.1284  Tw (is easy to manage.  It\222s particularly easy to manage if some of the) TjT* 0.226  Tc 1.024  Tw (n programmers don\222t particularly like working in a team or) TjT* -0.1284  Tc 0.9213  Tw (communicating with other programmers.  Unfortunately, there is) TjT* -0.0613  Tc 0.4113  Tw (no real reason for dividing the project into n pieces, no reason to) TjT* -0.0887  Tc 0.0887  Tw (believe the n pieces are of equal size, or equal complexity and for) TjT* -0.1  Tc 0.0833  Tw (the project to complete each n piece must be delivered.) Tj0 -18  TD /F0 12  Tf-0.114  Tc 0  Tw (Teamwork) TjT* /F4 10.2  Tf0.1953  Tc 1.0729  Tw (If we want our teams to really work well and develop good) Tj0 -12  TD 0.1003  Tc 1.2831  Tw (software we need to move away from simple exhortations to) TjT* -0.1307  Tc 1  Tw (\223egoless programming.\224  We need to break our projects into the) TjT* 0.2849  Tc 0.7651  Tw (optimal development pieces and work as teams, rather than) TjT* -0.0081  Tc 1.1781  Tw (slavishly divide by the number of programmers and work as a) TjT* -0.1149  Tc 0.5649  Tw (group of individuals.) Tj10.8 -12  TD -0.0989  Tc 0.0689  Tw (This means we have to think seriously about making our teams) Tj-10.8 -12  TD -0.1044  Tc 0.0744  Tw (work well together.  Fortunately some of the more recent writings) Tj0 -12  TD -0.1062  Tc -0.1038  Tw (on software development have started to put a greater emphasis on) TjT* -0.1907  Tc -0.4093  Tw (teamwork \(e.g. Eckstein, 2003, Cockburn, 2002\) and the \(in\)famous) TjT* -0.1054  Tc 0.0221  Tw (pair programming \(Beck, 2000, Coplien, 2003\) is a good example) TjETendstreamendobj103 0 obj11171endobj101 0 obj<</Type /Page/Parent 95 0 R/Resources <</Font <</F0 6 0 R /F4 16 0 R /F8 30 0 R >>/ProcSet 2 0 R>>/Contents 102 0 R>>endobj105 0 obj<</Length 106 0 R>>stream
BT29.4 769.8  TD0 0 0 rg /F4 10.2  Tf-0.0734  Tc 0.0091  Tw (of this.  But learning to work as a team doesn\222t start and stop with) Tj0 -12  TD -0.0462  Tc -0.1038  Tw (pair programming.) Tj11.4 -12  TD -0.0253  Tc 0.4753  Tw (It helps if a team actually knows one another.  Do they lunch) Tj-11.4 -12  TD -0.1048  Tc 0.4348  Tw (together? Do they socialise together?  Some companies try to get) Tj0 -12  TD 0.0509  Tc 0.3991  Tw (teams to socialise by arranging a Friday afternoon \223beer bash\224,) TjT* -0.0806  Tc 0.4215  Tw (these can have an artificial feel to them \(especially if everyone is) TjT* -0.0671  Tc 0.0371  Tw (driving home\) but is a start.) Tj11.4 -12  TD 0.0419  Tc 0.4081  Tw (Other high profile \223teambuilding activities\224 like white-water) Tj-11.4 -12  TD -0.1656  Tc -0.2572  Tw (rafting or paintballing can also be the subject of jokes and mockery.) Tj0 -12  TD -0.0928  Tc -0.2209  Tw (It\222s important to match your team building efforts to the attitude of) TjT* -0.0739  Tc -0.1189  Tw (the team, maybe a trip to the pub or the cinema is more in keeping) TjT* -0.0653  Tc 0.5153  Tw (with your team.  Even ad hoc communal gathering areas such as) TjT* -0.077  Tc -0.0063  Tw (kitchens can be far more effective than one off events.) Tj11.4 -12  TD 0.2636  Tc 0.7007  Tw (This requires ongoing expense and commitment from the) Tj-11.4 -12  TD -0.0801  Tc 0.5301  Tw (company, after all that kitchen space is a continuing cost while a) Tj0 -12  TD -0.1082  Tc -0.4018  Tw (paintball day is a one-off expense.  But this long-term commitment) TjT* -0.1904  Tc -0.3096  Tw (is what is required to build a good team, it doesn\222t happen overnight.) Tj11.4 -12  TD -0.2077  Tc -0.4223  Tw (Companies need to look at their own mechanisms: do they reward) Tj-11.4 -12  TD -0.1438  Tc 0.321  Tw (people for teamwork?  Or do they award annual bonuses based on) Tj0 -12  TD -0.1575  Tc 0.3893  Tw (individual heroic coding efforts?  And are teams broken up once a) TjT* -0.0953  Tc 0.4853  Tw (project finishes, or can they move together onto the next project?) TjT* -0.0447  Tc 0.4401  Tw (Are people allowed to sit together?  Or are people squeezed into) TjT* -0.1402  Tc -0.0098  Tw (whatever space can be found when they arrive on day one?) Tj11.4 -12  TD -0.1025  Tc 0.3679  Tw (There is a lot individual managers can do here too.  If they see) Tj-11.4 -12  TD -0.1555  Tc -0.3945  Tw (their role as commanding and controlling the developers they aren\222t) Tj0 -12  TD -0.1596  Tc -0.2475  Tw (going to get the best from them.  They need to learn to develop their) TjT* -0.0975  Tc 0.0225  Tw (teams, encourage people to work together and learn together.) Tj0 -18  TD /F0 12  Tf-0.0994  Tc -0.0206  Tw (Keep Your Ego, Make Teams Work) TjT* /F4 10.2  Tf-0.0918  Tc 0.3572  Tw (The fact is we want developers to have egos, we want them to be) Tj0 -12  TD 0.4139  Tc 0.9361  Tw (proud of their work, we want them to think logically and) TjT* -0.139  Tc 0.4044  Tw (rationally.  But we want to harness these egos within a team.  We) TjT* 0.3165  Tc 0.8835  Tw (want the team to succeed.  This can only happen if we are) TjT* -0.0953  Tc 0.0453  Tw (socially aware and build towards this goal.) Tj11.4 -12  TD 0.0144  Tc 0.4356  Tw (We can\222t expect any of this to happen just because we say it) Tj-11.4 -12  TD -0.1029  Tc 0.1029  Tw (should happen.  We need to work hard to make these teams work,) Tj274.8 420  TD -0.0695  Tc -0.2651  Tw (people need to learn how to work in teams, how to work with their) Tj0 -12  TD -0.0855  Tc 0.5355  Tw (colleagues, how to give constructive feedback and how to accept) TjT* -0.1069  Tc 0  Tw (feedback.) Tj11.4 -12  TD -0.1375  Tc 0.5208  Tw (Unfortunately, neither Microsoft nor Rational sells a tool to do) Tj-11.4 -12  TD -0.1078  Tc -0.2422  Tw (this, its something you have to create yourselves.  You can bring in) Tj0 -12  TD -0.0913  Tc 0.2644  Tw (outside help but this is a long process, the rewards are great but it) TjT* -0.0619  Tc -0.0881  Tw (won\222t happen overnight.) Tj222.6 -12  TD /F6 10.2  Tf-0.0372  Tc 0.1932  Tw (Allan Kelly) Tj-67.2 -12  TD /F2 9  Tf0  Tc 0  Tw (allan@allankelly.net) Tj-155.4 -30  TD /F0 12  Tf0.012  Tc (Bibliography) Tj0 -18  TD /F4 10.2  Tf0.2293  Tc 0.6207  Tw (Beck, K. \(2000\) ) Tj74.4 0  TD /F9 10.2  Tf0.1563  Tc 0.8937  Tw (Extreme Programming Explained) Tj144 0  TD /F4 10.2  Tf0.2317  Tc 0.2183  Tw (, Addison-) Tj-218.4 -12  TD -0.2771  Tc 0  Tw (Wesley.) Tj0 -12  TD 0.2067  Tc 0.6433  Tw (Cockburn, A. \(2002\) ) Tj94.2 0  TD /F9 10.2  Tf0.2242  Tc 0.8258  Tw (Agile Software Development) Tj124.2 0  TD /F4 10.2  Tf0.1651  Tc 0.8849  Tw (, Addison-) Tj-218.4 -12  TD -0.2771  Tc 0  Tw (Wesley.) Tj0 -12  TD 0.1176  Tc 0.6324  Tw (Collins \(2001\) ) Tj65.4 0  TD /F9 10.2  Tf0.0839  Tc 1.1661  Tw (Collins Paperback English Dictionary) Tj163.2 0  TD /F4 10.2  Tf0.0478  Tc 1.6022  Tw (, Harper) Tj-228.6 -12  TD -0.1524  Tc 0.0024  Tw (Collins, Glasgow.) Tj0 -12  TD -0.1141  Tc 0.1141  Tw (Conway, M. E. \(1968\) ) Tj91.8 0  TD /F9 10.2  Tf-0.1539  Tc 0.4039  Tw (How do committees invent?) Tj111 0  TD /F4 10.2  Tf-0.0411  Tc -0.1089  Tw (, Datamation.) Tj-202.8 -12  TD 0.2065  Tc 0.7435  Tw (Coplien, J., and Harrison, N. \(2003\) ) Tj162.6 0  TD /F9 10.2  Tf0.1507  Tc 0.8993  Tw (Organizational Process) Tj-162.6 -12  TD 0.179  Tc 0  Tw (Patterns) Tj39.6 0  TD /F4 10.2  Tf0.1449  Tc -0.2949  Tw (\(forthcoming\), ) Tj66 0  TD /F2 9  Tf0.2357  Tc 0  Tw (http://www.easycomp.org/cgi-) Tj-105.6 -12  TD 0  Tc (bin/OrgPatterns) Tj81 0  TD /F4 10.2  Tf-0.095  Tc 0.065  Tw (, Wiki web site for book) Tj-81 -12  TD 0.283  Tc 0.567  Tw (Eckstein, J. \(2003\) ) Tj87.6 0  TD /F9 10.2  Tf0.2323  Tc 0.6177  Tw (Scaling Agile Processes ) Tj112.8 0  TD /F4 10.2  Tf0.2734  Tc 0  Tw (\(forthcoming\),) Tj-200.4 -12  TD -0.1886  Tc 0.2386  Tw (Dorset House, New York.) Tj0 -12  TD -0.0951  Tc -0.1406  Tw (Kelly, A. \(2003\) \223The original Conways Law\224, ) Tj190.2 0  TD /F9 10.2  Tf-0.0907  Tc 0  Tw (Overload) Tj37.8 0  TD /F4 10.2  Tf-0.15  Tc (.) Tj-228 -12  TD -0.1325  Tc 0.4325  Tw (Mullins, L. J. \(2002\) ) Tj86.4 0  TD /F9 10.2  Tf-0.0887  Tc 0.3387  Tw (Management and organisational behaviour) Tj174.6 0  TD /F4 10.2  Tf-0.15  Tc 0  Tw (,) Tj-261 -12  TD -0.1031  Tc -0.0469  Tw (Prentice Hall.) Tj0 -12  TD -0.0955  Tc 0.9955  Tw (Pressman, R. S. \(1994\) ) Tj99.6 0  TD /F9 10.2  Tf-0.1266  Tc 1.1766  Tw (Software Engineering: A practictioner\222s) Tj-99.6 -12  TD -0.1621  Tc 0  Tw (approach) Tj40.2 0  TD -0.118  Tc -0.032  Tw (\(European Adaptation\)) Tj93 0  TD /F4 10.2  Tf-0.1496  Tc -0  Tw (, McGraw-Hill Book Company.) Tj-133.2 -12  TD 0.1256  Tc 0.9244  Tw (Pressman, R. S. \(1997\) ) Tj103.8 0  TD /F9 10.2  Tf0.078  Tc 0.972  Tw (Software Engineering: a practioner\222s) Tj-103.8 -12  TD -0.133  Tc -0.017  Tw (approach \(European adaptation\)) Tj132 0  TD /F4 10.2  Tf-0.0476  Tc -0.1024  Tw (, McGraw-Hill.) Tj-132 -12  TD -0.1293  Tc 1.1793  Tw (Somerville, I. \(2001\) ) Tj90 0  TD /F9 10.2  Tf-0.0474  Tc 1.0974  Tw (Software Engineering) Tj88.8 0  TD /F4 10.2  Tf-0.0752  Tc 1.1252  Tw (, Pearson Education,) Tj-178.8 -12  TD -0.2771  Tc 0  Tw (Harlow.) Tj0 -12  TD 0.5214  Tc 1.8786  Tw (Weinberg, G. M. \(1998\) ) Tj122.4 0  TD /F9 10.2  Tf0.6497  Tc 2.2003  Tw (The Psychology of Computer) Tj-122.4 -12  TD -0.0757  Tc 0  Tw (Programming) Tj55.8 0  TD /F4 10.2  Tf-0.1043  Tc 0.1543  Tw (, Dorset House Publishing.) Tj-55.8 -12  TD -0.2049  Tc 0.0549  Tw (Weinberg, G. M. \(1999\) ) Tj97.2 0  TD /F9 10.2  Tf-0.1425  Tc 0.5925  Tw (Egoless Programming) Tj89.4 0  TD /F4 10.2  Tf-0.0725  Tc -0.0775  Tw (, IEEE Software.) Tj58.8 -307.8  TD /F0 10.8  Tf0.1872  Tc 0  Tw (23) Tj-189.6 768.6  TD /F0 12  Tf-0.0037  Tc -0.0863  Tw (Overload issue 61 june 2004) TjET0.9529 0.9529 0.9529 rg 30 64.8 537 271.2 re fBT33 324.6  TD0 0 0 rg -0.0086  Tc 0.0686  Tw (The Vision Thing) Tj0 -22.8  TD /F4 10.2  Tf0.2321  Tc 1.0579  Tw (One way to get a team working together is through shared) Tj0 -12  TD 0.3369  Tc 0.8931  Tw (vision.  While \223vision\224 may seem a bit abstract, vague or) TjT* 0  Tc 1.3493  Tw (ephemeral, it does actually have strong supporters who argue) TjT* -0.0885  Tc 0.3748  Tw (that creating a shared vision is a powerful tool for managers and) TjT* -0.2387  Tc 0  Tw (teams:) Tj16.8 -12  TD /F8 10.2  Tf0.0454  Tc 0.3866  Tw (\223Where there is a genuine vision \(as opposed to the all-too-) Tj-11.4 -12  TD -0.0464  Tc 0.4484  Tw (familiar \221vision statement\222\), people excel, and learn, not because) Tj0 -12  TD -0.1079  Tc 0.0599  Tw (they are told to, but because they want to.\224 \(Senge, 1990\)) Tj-5.4 -12  TD /F4 10.2  Tf0.1321  Tc 1.0679  Tw (There is a brilliant example of the power of vision in an IT) Tj0 -12  TD -0.1021  Tc 0.1321  Tw (project by Conklin.  He described the management of the Digital) TjT* -0.109  Tc 1.339  Tw (Alpha AXP project in the early 1990s.  This project employed) TjT* 0.0298  Tc 1.1702  Tw (over 2,000 engineers both in hardware \(chip design, machine) TjT* -0.0717  Tc -0.0033  Tw (design, integration\) and software \(at least two operating systems,) TjT* 0.5252  Tc 0.6748  Tw (compilers, editors, etc., etc.\).  He called this ) Tj213 0  TD /F9 10.2  Tf0.4151  Tc 0  Tw (Enrolment) Tj-213 -12  TD -0.1654  Tc (Management) Tj54.6 0  TD /F4 10.2  Tf-0.1069  Tc 0.1284  Tw (and at the centre of it was vision.) Tj-43.8 -12  TD -0.1214  Tc -0.4104  Tw (This shared vision was not a weak, ephemeral thing but a strong) Tj-10.8 -12  TD 0.2639  Tc 1.2147  Tw (substantial, lasting vision which moved people to produce) Tj0 -12  TD -0.1139  Tc -0.0361  Tw (seemingly extraordinary work:) Tj16.8 -12  TD /F8 10.2  Tf-0.262  Tc -0.386  Tw (\223given the group\222s commitment to the larger result, we found more) Tj-11.4 -12  TD -0.2508  Tc -0.3972  Tw (aggressive behaviour.  For example, the OpenVMS AXP group publicly) Tj271.2 252  TD -0.1702  Tc 0.0622  Tw (committed to their target schedule and stated, \221We don\222t know how) Tj0 -12  TD -0.1976  Tc 0.0951  Tw (to achieve this, but we commit to finding a way\222.\224 \(Conklin, 1996\)) Tj-5.4 -12  TD /F4 10.2  Tf-0.1048  Tc 0.0548  Tw (Enrolment management used a simple four-point methodology:) Tj0 -12  TD -0.225  Tc 0  Tw (1.) Tj11.4 0  TD -0.0668  Tc -0.0832  Tw (Establish an appropriately large shared vision;) Tj-11.4 -12  TD -0.225  Tc 0  Tw (2.) Tj11.4 0  TD -0.0724  Tc -0.0776  Tw (Delegate completely and elicit specific commitments;) Tj-11.4 -12  TD -0.225  Tc 0  Tw (3.) Tj11.4 0  TD -0.0809  Tc -0.0691  Tw (Inspect rigorously, providing supportive feedback;) Tj-11.4 -12  TD -0.225  Tc 0  Tw (4.) Tj11.4 0  TD 0.2679  Tc 2.7821  Tw (Acknowledge every advance, learning as the program) Tj0 -12  TD -0.1095  Tc 0  Tw (progresses.) Tj-11.4 -12  TD -0.0971  Tc 0.6971  Tw (The case study describes how the project management admitted) Tj0 -12  TD -0.063  Tc 0.563  Tw (they had no project plan.  Nor could they possibly draw one up) TjT* 0.3054  Tc 0.8046  Tw (in the time available.  Instead they took the difficulties as) TjT* 0.1454  Tc 1.0379  Tw (challenges and used each new problem as an opportunity to) TjT* -0.1134  Tc 0.1884  Tw (enforce the vision and increase the speed of development.) Tj11.4 -12  TD -0.069  Tc 0.144  Tw (Perhaps most interesting about this is the similarities between) Tj-11.4 -12  TD 0.1387  Tc 0.2447  Tw (many of Conklin\222s ideas and those of the Agile Development) Tj0 -12  TD 0.1122  Tc 0.2711  Tw (proponents.  Perhaps the biggest difference is that most Agile) TjT* 0.2628  Tc 0.9872  Tw (advocates duck the issue of large teams engaging in Agile) TjT* -0.1624  Tc -0.5126  Tw (Development, but Conklin, in 1990, was doing Agile Development) TjT* -0.0906  Tc -0.0594  Tw (with 2,000 engineers.) TjT* -0.0514  Tc 1.1871  Tw (Conklin, P. F. \(1996\) \223Enrolment Management: Managing the) TjT* -0.1021  Tc -0.2479  Tw (Alpha AXP Program\224, ) Tj92.4 0  TD /F9 10.2  Tf-0.2137  Tc 0.0637  Tw (IEEE Software) Tj59.4 0  TD /F4 10.2  Tf-0.0847  Tc -0.0653  Tw (, 13, 53-64.) Tj-151.8 -12  TD -0.1638  Tc 0.0138  Tw (Senge, P. \(1990\) ) Tj67.8 0  TD /F9 10.2  Tf-0.1151  Tc 0.2651  Tw (The Fifth Discipline) Tj81 0  TD /F4 10.2  Tf-0.1  Tc 0.15  Tw (, Random House Books.) TjETq 29.4 336.6 m 29.4 64.2 l 567.6 64.2 l 567.6 336.6 l 30 336 m 30 64.8 l 567 64.8 l 567 336 l h W* n 29.4 64.2 538.2 272.4 re fQ endstreamendobj106 0 obj12656endobj104 0 obj<</Type /Page/Parent 95 0 R/Resources <</Font 107 0 R/ProcSet 2 0 R>>/Contents 105 0 R>>endobj107 0 obj<</F0 6 0 R/F2 10 0 R/F4 16 0 R/F6 26 0 R/F8 30 0 R/F9 32 0 R>>endobj109 0 obj<</Length 110 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (24) Tj0 768.6  TD /F0 12  Tf-0.0037  Tc 0.2137  Tw (Overload issue 61 june 2004) Tj14.4 -38.4  TD /F1 18  Tf-0.1931  Tc 0.5891  Tw (A Template Programmer\222s) Tj25.2 -20.4  TD -0.0261  Tc 0.4221  Tw (Struggles Resolved) Tj-25.2 -14.4  TD /F0 10.2  Tf-0.1528  Tc 0.2188  Tw (by Stefan Heinzmann and Phil Bass) Tj-14.4 -15.6  TD /F4 10.2  Tf0.0461  Tc 1.0639  Tw (This article is the result of the conversations between the two) Tj0 -12  TD -0.1016  Tc 0.4849  Tw (authors \(Phil Bass and Stefan Heinzmann\) that were triggered by) TjT* 0.2333  Tc 0.9367  Tw (the latter\222s article in this very issue of Overload [1]. Stefan) TjT* -0.0883  Tc 0.4716  Tw (originally wanted to have the resolution of the problems outlined) TjT* -0.1028  Tc 1.0605  Tw (in his article published in the next issue in order to keep you in) TjT* -0.0707  Tc 1.2298  Tw (creative suspension for a while, but the Editor found that to be) TjT* -0.0741  Tc -0.0214  Tw (too cruel, so we tried to finish this article in record time.) Tj11.4 -12  TD -0.3672  Tc -0.3828  Tw (Article [1] ended with 4 unsolved problems which are repeated here:) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0964  Tc 0.1964  Tw (It requires the ugly cast for passing the null pointer as the third) Tj0 -12  TD -0.0861  Tc -0.0639  Tw (argument to ) Tj50.4 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (lookup) Tj-61.8 -10.2  TD /F5 6  Tf0.054  Tc (l) Tj11.4 -1.8  TD /F2 10.2  Tf-0.12  Tc (lookup) Tj38.4 0  TD /F4 10.2  Tf-0.0919  Tc 0.0169  Tw (returns the result by value, which can be inefficient) Tj-49.8 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf0.2417  Tc 0.675  Tw (It is still unclear why I couldn\222t use the ) Tj179.4 0  TD /F2 10.2  Tf0.3086  Tc 0  Tw (typedef) Tj45 0  TD /F4 10.2  Tf0.4007  Tc 0.0493  Tw (s from) Tj-224.4 -12  TD /F2 10.2  Tf-0.12  Tc 0  Tw (std::binary_function) Tj122.4 0  TD /F4 10.2  Tf0  Tc 0.15  Tw (in the ) Tj25.2 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (LessKey) Tj44.4 0  TD /F4 10.2  Tf-0.0939  Tc -0.0561  Tw (predicate \(only) Tj-192 -12  TD -0.1379  Tc -0.0121  Tw (with GCC\)) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1931  Tc -0.3387  Tw (Neither do I know why the compiler wanted to convert the wrong) Tj0 -12  TD -0.058  Tc 0.208  Tw (way between ) Tj55.2 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (Val) Tj20.4 0  TD /F4 10.2  Tf-0.1096  Tc -0.0404  Tw (and ) Tj16.8 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (EVal) Tj-103.8 -12  TD /F4 10.2  Tf-0.0871  Tc 0.8799  Tw (The first two problems relate to the ) Tj150.6 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (lookup) Tj39.6 0  TD /F4 10.2  Tf-0.1221  Tc 1.1721  Tw (function template,) Tj-190.2 -12  TD -0.0828  Tc 0.6828  Tw (while the last two problems relate to the ) Tj168 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (LessKey) Tj45 0  TD /F4 10.2  Tf-0.1358  Tc 1.1858  Tw (predicate. In) Tj-213 -12  TD -0.0744  Tc 0.6744  Tw (addition, the text itself lists as a fifth problem: How to ensure at) Tj0 -12  TD -0.0442  Tc 1.2033  Tw (compile time that the lookup table is sorted. Just for a change,) TjT* -0.1147  Tc -0.0353  Tw (let\222s tackle those problems in reverse order.) Tj0 -18  TD /F0 12  Tf-0.0588  Tc 0.1788  Tw (Ensuring the Lookup Table is Sorted) TjT* /F4 10.2  Tf-0.1106  Tc 0.7606  Tw (Thaddaeus Frogley suggested that rather than sorting the table at) Tj0 -12  TD -0.0717  Tc 1.2551  Tw (compile time, which may be impossible, the debug build could) TjT* -0.1162  Tc 0.4025  Tw (check the sorting when the program starts up. You would need to) TjT* 0.0373  Tc 1.2127  Tw (write a function that checks the table sorting and call it in an) TjT* 0.1762  Tc 0.9338  Tw (assert macro that is run at program startup. As an additional) TjT* -0.0771  Tc 0.5271  Tw (service, the checking code could generate a sorted version of the) TjT* -0.0791  Tc 0.5291  Tw (table in a format that can be cut and pasted into the source code,) TjT* 0.2527  Tc 1.0473  Tw (so that the burden of keeping the table sorted is not on the) TjT* -0.1026  Tc 0.286  Tw (struggling programmer. We\222ll not actually show any code for this) TjT* -0.1033  Tc 0.9533  Tw (here, as we believe that it is fairly straightforward. Furthermore,) TjT* -0.1326  Tc 0.1159  Tw (this issue was not the main point in [1] anyway.) Tj0 -18  TD /F0 12  Tf0.116  Tc -0.356  Tw (The ) Tj31.2 0  TD /F10 12  Tf0  Tc 0  Tw (LessKey) Tj54.6 0  TD /F0 12  Tf0.0427  Tc (Predicate) Tj-85.8 -18  TD /F4 10.2  Tf0.1248  Tc 0.8502  Tw (Here, we owe you an explanation why the ) Tj187.8 0  TD /F2 10.2  Tf0.0514  Tc 0  Tw (typedef) Tj43.8 0  TD /F4 10.2  Tf-0.1613  Tc 1.8113  Tw (s in the) Tj-231.6 -12  TD /F2 10.2  Tf0.52  Tc 0  Tw (binary_function) Tj103.2 0  TD /F4 10.2  Tf0.4079  Tc 0.8993  Tw (base class could not be used in the) Tj-103.2 -12  TD -0.0637  Tc 0.2137  Tw (definition of ) Tj53.4 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (LessKey::operator\(\)) Tj114 0  TD /F4 10.2  Tf-0.0791  Tc 0.7291  Tw (. It turns out that this is) Tj-167.4 -12  TD -0.073  Tc 0.9515  Tw (because of the name lookup rules, namely ) Tj178.8 0  TD /F9 10.2  Tf-0.0864  Tc 1.1364  Tw (two-phase lookup) Tj72 0  TD /F4 10.2  Tf-0.3144  Tc 1.9644  Tw (. If) Tj-250.8 -12  TD -0.1105  Tc 0.5605  Tw (you want to know the full story you need to turn to ) Tj210.6 0  TD /F9 10.2  Tf-0.123  Tc 0.573  Tw (The Book) Tj41.4 0  TD /F4 10.2  Tf-0.1644  Tc 0  Tw ([2]) Tj-252 -12  TD -0.1286  Tc 0.1786  Tw (chapter 9.4.2, but here\222s the bottom line:) Tj11.4 -12  TD 0.0339  Tc 0.4161  Tw (As ) Tj13.8 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (std::binary_function) Tj123 0  TD /F4 10.2  Tf-0.0786  Tc 0.2886  Tw (is a base class for ) Tj73.8 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (LessKey) Tj-222 -12  TD /F4 10.2  Tf0.0827  Tc 0.1673  Tw (that depends on ) Tj69 0  TD /F2 10.2  Tf0.0514  Tc 0  Tw (LessKey) Tj43.8 0  TD /F4 10.2  Tf0.064  Tc 0.386  Tw (\222s template parameters, it is called a) Tj-112.8 -12  TD /F9 10.2  Tf-0.0677  Tc 0.5177  Tw (dependent base class) Tj86.4 0  TD /F4 10.2  Tf-0.0675  Tc 0.5175  Tw (. The C++ standard says that nondependent) Tj-86.4 -12  TD 0.2856  Tc 0.1644  Tw (names are ) Tj47.4 0  TD /F9 10.2  Tf0.2548  Tc 0  Tw (not) Tj16.8 0  TD /F4 10.2  Tf0.2756  Tc 0.3458  Tw (looked up in dependent base classes. Hence a) Tj-64.2 -12  TD -0.0473  Tc 0.4973  Tw (standard conforming compiler will not find ) Tj180 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (result_type) Tj69 0  TD /F4 10.2  Tf-0.1096  Tc (and) Tj-249 -12  TD -0.146  Tc -0.4403  Tw (its siblings and emit an error message. The error messages that were) Tj0 -12  TD -0.1001  Tc -0.1249  Tw (actually emitted by GCC weren\222t particularly helpful, in particular) TjT* -0.0555  Tc 0.3055  Tw (the mentioning of ) Tj74.4 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (typename) Tj51 0  TD /F4 10.2  Tf-0.074  Tc 0.224  Tw (was  misleading, but the code was) Tj-125.4 -12  TD -0.1029  Tc 0.0029  Tw (definitely wrong. So what can we do about it? There are a number) Tj0 -12  TD -0.1106  Tc 0.2177  Tw (of possibilities here, though none are particularly appealing:) Tj0 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf0.2729  Tc 0.2771  Tw (Dodge the issue in the way Stefan did it, i.e. by not using) Tj0 -12  TD /F2 10.2  Tf-0.12  Tc 0  Tw (result_type) Tj68.4 0  TD /F4 10.2  Tf-0.0411  Tc -0.1089  Tw (etc. inside ) Tj43.2 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (LessKey) Tj42 0  TD /F4 10.2  Tf-0.0573  Tc 0.0273  Tw (. The downside of this is) Tj-153.6 -12  TD 0.0907  Tc 0.3593  Tw (that the fairly complicated element type must be written out) Tj0 -12  TD -0.0569  Tc 0.5069  Tw (several times.) Tj264 709.8  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj10.8 -1.8  TD /F4 10.2  Tf-0.18  Tc -0.17  Tw (Explicitly qualify the ) Tj84 0  TD /F2 10.2  Tf-0.2057  Tc 0  Tw (typedef) Tj43.2 0  TD /F4 10.2  Tf-0.2496  Tc -0.1004  Tw (names with the name of the base) Tj-127.2 -12  TD -0.1521  Tc -0.4645  Tw (class. This makes the names dependent, therefore they are looked) Tj0 -12  TD -0.0875  Tc -0.4443  Tw (up and found in the base class. However that removes the whole) TjT* -0.069  Tc -0.081  Tw (point of using the ) Tj73.2 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (typedef) Tj42 0  TD /F4 10.2  Tf-0.0945  Tc -0.0555  Tw (s, because the base class name is a) Tj-115.2 -12  TD -0.0868  Tc -0.0632  Tw (complicated template.) Tj-10.8 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj10.8 -1.8  TD /F4 10.2  Tf-0.0375  Tc 0.4875  Tw (Bring the ) Tj40.8 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (typedef) Tj45 0  TD /F4 10.2  Tf-0.0765  Tc 0.3551  Tw (names into the scope of the derived class) Tj-85.8 -12  TD -0.0087  Tc 0.4587  Tw (with a using declaration. That doesn\222t save any typing either,) Tj0 -12  TD -0.1118  Tc 0.2018  Tw (because the base class name needs to be spelled out, too.) Tj-10.8 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj10.8 -1.8  TD /F4 10.2  Tf-0.0754  Tc 0.5254  Tw (Add another ) Tj53.4 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (typedef) Tj44.4 0  TD /F4 10.2  Tf-0.0528  Tc 0.3313  Tw (to the derived class. That is also fairly) Tj-97.8 -12  TD -0.1206  Tc -0.2476  Tw (verbose, so it may not be an improvement over the first solution.) Tj-10.8 -12  TD 0.394  Tc 0.806  Tw (That\222s disappointing, isn\222t it? It means that deriving from) Tj0 -12  TD /F2 10.2  Tf0.24  Tc 0  Tw (std::binary_function) Tj130.2 0  TD /F4 10.2  Tf0.1866  Tc 1.1034  Tw (in order to make the predicate) Tj-130.2 -12  TD -0.1121  Tc 0.5621  Tw (adaptable according to the rules of the STL is only half as useful) Tj0 -12  TD -0.117  Tc 0.5208  Tw (as you\222d wish it to be. It makes you wonder whether you want to) TjT* 0.0281  Tc 0.7219  Tw (derive from ) Tj52.8 0  TD /F2 10.2  Tf0.03  Tc 0  Tw (std::binary_function) Tj126 0  TD /F4 10.2  Tf-0.0048  Tc 1.3548  Tw (at all. After all, you) Tj-178.8 -12  TD 0.1346  Tc 0.9904  Tw (can make your predicate adaptable by providing the required) Tj0 -12  TD /F2 10.2  Tf-0.2057  Tc 0  Tw (typedef) Tj41.4 0  TD /F4 10.2  Tf-0.0746  Tc -0.0754  Tw (s yourself, like this:) Tj-27.6 -24  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc 0  Tw (template<typename Key, typename Val>) Tj0 -12  TD (struct LessKey {) Tj9.6 -12  TD (typedef bool result_type;) Tj0 -12  TD (typedef const Pair<Key,Val> &first_argument_type;) TjT* (typedef first_argument_type second_argument_type;) TjT* (result_type operator\(\)\(first_argument_type a,) Tj96 -12  TD (second_argument_type b\) const) Tj-86.4 -12  TD ({ return a.key < b.key; }) Tj-19.2 -12  TD (};) Tj-13.8 -24  TD 0 0 0 rg /F4 10.2  Tf-0.1606  Tc 1.2106  Tw (If you don\222t want the predicate to be adaptable, you can apply a) Tj0 -12  TD -0.2381  Tc 1.1245  Tw (clever trick that appeared in [3]: You make the predicate work on) TjT* -0.262  Tc 0.2211  Tw (the key type directly. This removes the need to construct an element) TjT* -0.107  Tc 1.157  Tw (with all its associated problems mentioned in [1]. If we needn\222t) TjT* -0.2429  Tc 1.1729  Tw (construct an element, we need no default constructor for the ) Tj245.4 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (Val) Tj-245.4 -12  TD /F4 10.2  Tf-0.2582  Tc 0.0415  Tw (type either, which is an additional advantage. Here\222s the code:) Tj13.8 -24  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc 0  Tw (template<typename Key, typename Val>) Tj0 -12  TD (struct CleverLessKey {) Tj9.6 -12  TD (typedef const Pair<Key,Val> Elem;) Tj0 -12  TD (bool operator\(\)\(Elem &elem, const Key &key\) const) Tj9.6 -12  TD ({ return elem.key < key; }) Tj-9.6 -12  TD (bool operator\(\)\(const Key &key, Elem &elem\) const) Tj9.6 -12  TD ({ return key < elem.key; }) Tj-19.2 -12  TD (};) Tj-13.8 -24  TD 0 0 0 rg /F4 10.2  Tf0.2042  Tc 0.6958  Tw (Note the overloading of ) Tj108 0  TD /F2 10.2  Tf0.18  Tc 0  Tw (operator\(\)) Tj67.2 0  TD /F4 10.2  Tf0.1492  Tc 1.1008  Tw (to allow passing the) Tj-175.2 -12  TD -0.1139  Tc 1.1639  Tw (arguments in any order. Inside the lookup function template the) Tj0 -12  TD -0.0878  Tc -0.0622  Tw (key can now be passed directly to ) Tj137.4 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (equal_range) Tj66 0  TD /F4 10.2  Tf0.1644  Tc (:) Tj-189.6 -24  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc (template<typename EKey, typename EVal,) Tj43.2 -12  TD (unsigned n, typename Key, typename Val>) Tj-43.2 -12  TD (EVal lookup\(const Pair<EKey,EVal>\(&tbl\)[n],) Tj57.6 -12  TD (const Key &key, const Val &def\) {) Tj-48 -12  TD (typedef CleverLessKey<EKey,EVal> Pred;) Tj0 -12  TD (typedef const Pair<EKey,EVal> Elem;) TjT* (std::pair<Elem*,Elem*> range) Tj24 -12  TD (= std::equal_range\(tbl, tbl+n, key, Pred\(\)\);) Tj-24 -12  TD (if\(range.first != range.second\)) Tj9.6 -12  TD (return range.first->val;) Tj-9.6 -12  TD (return def;) Tj-9.6 -12  TD (}) TjETendstreamendobj110 0 obj13030endobj108 0 obj<</Type /Page/Parent 95 0 R/Resources <</Font 111 0 R/ProcSet 2 0 R>>/Contents 109 0 R>>endobj111 0 obj<</F0 6 0 R/F1 8 0 R/F2 10 0 R/F4 16 0 R/F5 21 0 R/F9 32 0 R/F10 41 0 R>>endobj113 0 obj<</Length 114 0 R>>stream
BT29.4 769.8  TD0 0 0 rg /F4 10.2  Tf-0.2167  Tc 0.5576  Tw (This bends the intuitive rule of what a good predicate is; ordinarily) Tj0 -12  TD -0.2016  Tc 0.2363  Tw (you would think both argument types had to be the same, but as far) TjT* -0.2576  Tc 1.1985  Tw (as we know there\222s nothing in the C++ standard that would make) TjT* -0.2449  Tc 0.0349  Tw (this illegal. It certainly works with VC++ 7.1 and GCC 3.3.) Tj11.4 -12  TD -0.094  Tc 0.4583  Tw (The Comeau compiler [4] disagrees, however. Apparently, the) Tj-11.4 -12  TD 0.0658  Tc 0.3842  Tw (library implementation used by Comeau contains compile-time) Tj0 -12  TD -0.0476  Tc 0.0776  Tw (concept checks that verify whether the two argument types of the) TjT* -0.0782  Tc 0.4782  Tw (predicate are the same. As ours are not, those checks fail and the) TjT* -0.0955  Tc 0.0055  Tw (compiler rejects the code. We feel that this is overly restrictive.) Tj11.4 -12  TD 0.1491  Tc 0.3009  Tw (That leads us to the weird error mentioned in [1] where the) Tj-11.4 -12  TD -0.0951  Tc -0.0549  Tw (compiler apparently wanted to convert an ) Tj167.4 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (int) Tj19.8 0  TD /F4 10.2  Tf-0.1548  Tc 0.0048  Tw (to a ) Tj16.8 0  TD /F2 10.2  Tf-0.12  Tc -0.6  Tw (const char) Tj-204 -12  TD 0.28  Tc 0  Tw ([4]) Tj19.2 0  TD /F4 10.2  Tf0.2187  Tc 0.2313  Tw (. We owe you an explanation here, too. Let us repeat the) Tj-19.2 -12  TD -0.0991  Tc 0.1891  Tw (relevant code where the error occurs:) Tj13.8 -24  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc 0  Tw (template<typename EKey, typename EVal,) Tj43.2 -12  TD (unsigned n, typename Key, typename Val>) Tj-43.2 -12  TD (EVal lookup\(const Pair<EKey,EVal>\(&tbl\)[n],) Tj57.6 -12  TD (const Key &key, const Val &def\) {) Tj-48 -12  TD (typedef LessKey<EKey,EVal> Pred;) Tj0 -12  TD (typedef const Pair<EKey,EVal> Elem;) TjT* (Elem entry = { key, Val\(\) };        ) Tj172.8 0  TD 0 0 0 rg /F2 7.8  Tf(// error here) Tj-172.8 -12  TD 0.2 0.2 0.2 rg /F10 7.8  Tf(std::pair<Elem*,Elem*> range) Tj14.4 -12  TD (= std::equal_range\(tbl, tbl+n, entry, Pred\(\)\);) Tj-14.4 -12  TD (if\(range.first != range.second\)) Tj9.6 -12  TD (return range.first->val;) Tj-9.6 -12  TD (return def;) Tj-9.6 -12  TD (}) Tj-13.8 -24  TD 0 0 0 rg /F4 10.2  Tf-0.1009  Tc 1.0909  Tw (The error message was strange, but there\222s indeed an error. The) Tj0 -12  TD -0.1059  Tc 1.2417  Tw (compiler correctly deduces the following type for ) Tj209.4 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (Val) Tj18.6 0  TD /F4 10.2  Tf-0.0255  Tc 1.0755  Tw (, namely) Tj-228 -12  TD /F2 10.2  Tf-0.07  Tc 2.95  Tw (const char [4]) Tj90.6 0  TD /F4 10.2  Tf0.028  Tc 0.872  Tw (. That means that ) Tj77.4 0  TD /F2 10.2  Tf-0  Tc 0  Tw (Val\(\)) Tj34.2 0  TD /F4 10.2  Tf-0.0732  Tc 1.4232  Tw (tries to default) Tj-202.2 -12  TD 0.0438  Tc 1.0062  Tw (construct a temporary of type ) Tj129.6 0  TD /F2 10.2  Tf0.03  Tc 2.85  Tw (const char [4]) Tj91.8 0  TD /F4 10.2  Tf-0.0103  Tc 1.6603  Tw (, which is) Tj-221.4 -12  TD -0.0966  Tc 0.5466  Tw (impossible. No conversion from ) Tj133.8 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (int) Tj21.6 0  TD /F4 10.2  Tf-0.0678  Tc 0.5178  Tw (to ) Tj10.8 0  TD /F2 10.2  Tf-0.12  Tc 1.8  Tw (const char [4]) Tj90.6 0  TD /F4 10.2  Tf0.1983  Tc 0  Tw (is) Tj-256.8 -12  TD 0.1647  Tc 1.0853  Tw (involved, the error displayed by the compiler is again rather) Tj0 -12  TD -0.0448  Tc -0.1052  Tw (misleading here.) Tj11.4 -12  TD -0.0751  Tc 0.0888  Tw (The fix employed in [1] was correct, but there is another, more) Tj-11.4 -12  TD -0.1161  Tc -0.0339  Tw (elegant possibility:) Tj13.8 -24  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc 0  Tw (template<typename EKey, typename EVal,) Tj43.2 -12  TD (unsigned n, typename Key, typename Val>) Tj-43.2 -12  TD (EVal lookup\(const Pair<EKey,EVal>\(&tbl\)[n],) Tj57.6 -12  TD (const Key &key, const Val &def\) {) Tj-48 -12  TD (typedef LessKey<EKey,EVal> Pred;) Tj0 -12  TD (typedef const Pair<EKey,EVal> Elem;) TjT* (Elem entry = { key };    ) Tj120 0  TD 0 0 0 rg /F2 7.8  Tf(// second part of Pair) Tj0 -12  TD (// omitted) Tj-120 -12  TD 0.2 0.2 0.2 rg /F10 7.8  Tf(std::pair<Elem*,Elem*> range) Tj14.4 -12  TD (= std::equal_range\(tbl, tbl+n, entry, Pred\(\)\);) Tj-14.4 -12  TD (if\(range.first != range.second\)) Tj9.6 -12  TD (return range.first->val;) Tj-9.6 -12  TD (return def;) Tj-9.6 -12  TD (}) Tj-13.8 -24  TD 0 0 0 rg /F4 10.2  Tf-0.085  Tc 0.8077  Tw (As you may have noted, it is not actually necessary to explicitly) Tj0 -12  TD -0.0588  Tc 0.5088  Tw (initialize the ) Tj55.2 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (val) Tj21.6 0  TD /F4 10.2  Tf-0.0758  Tc 1.2758  Tw (member of the variable ) Tj101.4 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (entry) Tj30 0  TD /F4 10.2  Tf-0.0672  Tc 1.1172  Tw (, as we don\222t) Tj-208.2 -12  TD -0.0226  Tc 1.244  Tw (use it anyway. Omitting the initializer for ) Tj180 0  TD /F2 10.2  Tf0.28  Tc 0  Tw (val) Tj22.2 0  TD /F4 10.2  Tf-0.0048  Tc 1.4548  Tw (causes it to be) Tj-202.2 -12  TD 0.2194  Tc 0.9806  Tw (value-initialized, which in practice does the same as calling) Tj0 -12  TD /F2 10.2  Tf-0.12  Tc 0  Tw (EVal\(\)) Tj38.4 0  TD /F4 10.2  Tf-0.1351  Tc (explicitly.) Tj-27 -12  TD -0.1435  Tc -0.3398  Tw (Anyway, we will use our clever predicate henceforth, despite the) Tj-11.4 -12  TD -0.1324  Tc -0.0176  Tw (problems with the Comeau compiler.) Tj274.8 714.6  TD /F0 12  Tf-0.084  Tc -0.156  Tw (The ) Tj31.2 0  TD /F10 12  Tf0  Tc 0  Tw (lookup) Tj47.4 0  TD /F0 12  Tf-0.0982  Tc 0.4583  Tw (Function Template) Tj-78.6 -18.6  TD /F4 10.2  Tf-0.1088  Tc 0.7434  Tw (Now that we\222ve got those niggles out of the way, we can turn to) Tj0 -12  TD 0.2697  Tc 0.9517  Tw (the remaining problems. Remember what the question was:) TjT* -0.0848  Tc 1.2848  Tw (Given the following program fragment, how can we implement) TjT* 0.0452  Tc 0.4048  Tw (the ) Tj16.2 0  TD /F2 10.2  Tf-0.045  Tc 0  Tw (lookup\(\)) Tj52.8 0  TD /F4 10.2  Tf0.0239  Tc 1.1119  Tw (function as a function template that works for) Tj-69 -12  TD -0.1289  Tc 0.3789  Tw (arbitrary instantiations of ) Tj103.8 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (Pair<Key,Val>) Tj78 0  TD /F4 10.2  Tf0.2712  Tc (?) Tj-167.4 -24  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc (template<typename Key, typename Val>) Tj0 -12  TD (struct Pair {) Tj9.6 -12  TD (Key key;) Tj0 -12  TD (Val val;) Tj-9.6 -12  TD (};) Tj0 -17.4  TD (const Pair<int, const char*> table[] = {) Tj9.6 -12  TD ({ 0, "Ok" },) Tj0 -12  TD 0.1057  Tc 0.0143  Tw ({ 6, "Minor glitch in self-destruction module" },) TjT* 0.12  Tc -0.075  Tw ({ 13, "Error logging printer out of paper" },) TjT* 0.1054  Tc 0.0146  Tw ({ 101, "Emergency cooling system inoperable" },) TjT* 0.12  Tc 0  Tw ({ 2349, "Dangerous substances released" },) TjT* ({ 32767, "Game over, you lost" }) Tj-9.6 -12  TD (};) Tj0 -18.6  TD (int main\(\) {) Tj9.6 -12  TD 0.1057  Tc 0.0143  Tw (const char *result = lookup\(table,6,\(char*\)0\);) Tj0 -12  TD 0.0876  Tc 0.0324  Tw (std::cout << \(result ? result : "not found"\)) Tj48 -12  TD 0.12  Tc 0  Tw (<< std::endl;) Tj-57.6 -12  TD (}) Tj-14.4 -24  TD 0 0 0 rg /F4 10.2  Tf0.0897  Tc 1.1403  Tw (The implementation we arrived at in the last chapter still has) Tj0 -12  TD -0.049  Tc -0.101  Tw (those two problems:) Tj0 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0901  Tc 0.4401  Tw (It requires an ugly cast for passing the null pointer as the third) Tj0 -12  TD -0.1027  Tc -0.0473  Tw (argument to lookup.) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F2 10.2  Tf-0.12  Tc (lookup) Tj38.4 0  TD /F4 10.2  Tf-0.0801  Tc 0.0801  Tw (returns the result by value, which can be inefficient.) Tj-49.8 -18  TD /F0 10.8  Tf0.1561  Tc 0.6479  Tw (Replacing ) Tj69.6 0  TD /F10 12  Tf0  Tc 0  Tw (equal_range) Tj83.4 0  TD /F0 10.8  Tf0.0996  Tc 0.1044  Tw (by ) Tj19.8 0  TD /F10 12  Tf0  Tc 0  Tw (lower_bound) Tj-172.8 -18  TD /F4 10.2  Tf-0.0344  Tc 0.4844  Tw (First, note that the ) Tj78 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (lookup\(\)) Tj51 0  TD /F4 10.2  Tf-0.0906  Tc 0.6606  Tw (function given above is based on) Tj-129 -12  TD /F2 10.2  Tf0.4467  Tc 0  Tw (std::equal_range\(\)) Tj118.2 0  TD /F4 10.2  Tf0.4002  Tc 0.6498  Tw (, but actually behaves more like) Tj-118.2 -12  TD /F2 10.2  Tf0.08  Tc 0  Tw (std::lower_bound\(\)) Tj111 0  TD /F4 10.2  Tf0.0166  Tc 1.3763  Tw (. It returns the mapped value of the) Tj-111 -12  TD -0.1423  Tc 1.1173  Tw (first element matching the key, if any. Since ) Tj185.4 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (lower_bound\(\)) Tj-185.4 -12  TD /F4 10.2  Tf-0.0831  Tc 0.1831  Tw (is a simpler and slightly more efficient algorithm we will use it in) Tj0 -12  TD -0.1148  Tc 0.8375  Tw (the subsequent code samples. However, it is a bit trickier to use,) TjT* -0.0934  Tc -0.0566  Tw (as you\222ll see shortly.) Tj11.4 -12  TD -0.3058  Tc 0.1558  Tw (While ) Tj25.2 0  TD /F2 10.2  Tf-0.2836  Tc 0  Tw (equal_range) Tj66 0  TD /F4 10.2  Tf-0.2578  Tc -0.3722  Tw (returns a pair of iterators, ) Tj97.2 0  TD /F2 10.2  Tf-0.3927  Tc 0  Tw (lower_bound) Tj-199.8 -12  TD /F4 10.2  Tf0.0573  Tc 0.2727  Tw (returns just one. If there are suitable elements \(according to the) Tj0 -12  TD -0.2089  Tc -0.4866  Tw (predicate\) in the collection, the returned iterator points to the first one) TjT* -0.1929  Tc -0.0662  Tw (found. Otherwise it points to the place where such an element could) TjT* -0.1872  Tc 0.5772  Tw (be inserted without breaking the sorting order. This makes it more) TjT* -0.258  Tc -0.2348  Tw (complicated to test for success. Here\222s what ) Tj167.4 0  TD /F2 10.2  Tf-0.32  Tc 0  Tw (lookup) Tj36.6 0  TD /F4 10.2  Tf-0.2412  Tc -0.5088  Tw (would look like) Tj-204 -12  TD -0.2207  Tc 0.0707  Tw (using ) Tj23.4 0  TD /F2 10.2  Tf-0.2291  Tc 0  Tw (lower_bound) Tj67.2 0  TD /F4 10.2  Tf-0.1548  Tc 0.3048  Tw (instead of ) Tj40.8 0  TD /F2 10.2  Tf-0.2291  Tc 0  Tw (equal_range) Tj64.2 0  TD /F4 10.2  Tf0.1644  Tc (:) Tj-181.2 -24  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc (template<typename EKey, typename EVal,) Tj43.2 -12  TD 0.1024  Tc 0.0176  Tw (unsigned n, typename Key, typename Val>) Tj-43.2 -12  TD 0.12  Tc 0  Tw (EVal lookup\(const Pair<EKey,EVal>\(&tbl\)[n],) Tj57.6 -12  TD (const Key &key, const Val &def\) {) Tj-48 -12  TD (CleverLessKey<EKey,EVal> pred;) Tj0 -12  TD (const Pair<EKey,EVal> *pos) Tj33.6 -12  TD -0.15  Tw (= std::lower_bound\(tbl, tbl+n, key, pred\);) Tj-33.6 -12  TD 0  Tw (if\(pos == tbl+n || pred\(key,*pos\)\)) Tj9.6 -12  TD (return def;) Tj-9.6 -12  TD (return pos->val;) Tj-9.6 -12  TD (}) Tj231 -19.8  TD 0 0 0 rg /F0 10.8  Tf0.1872  Tc (25) Tj-189.6 768.6  TD /F0 12  Tf-0.0037  Tc -0.0863  Tw (Overload issue 61 june 2004) TjETendstreamendobj114 0 obj10986endobj112 0 obj<</Type /Page/Parent 95 0 R/Resources <</Font <</F0 6 0 R /F2 10 0 R /F4 16 0 R /F5 21 0 R /F10 41 0 R >>/ProcSet 2 0 R>>/Contents 113 0 R>>endobj116 0 obj<</Length 117 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (26) Tj0 768.6  TD /F0 12  Tf-0.0037  Tc 0.2137  Tw (Overload issue 61 june 2004) Tj0 -33.6  TD /F0 10.8  Tf0.113  Tc 0.091  Tw (Generalization for Arbitrary Maps) Tj0 -19.2  TD /F4 10.2  Tf0.0783  Tc 1.0717  Tw (Lets take a step back and look at the problem from a generic) Tj0 -12  TD 0.1985  Tc 0.9181  Tw (angle: Why restrict ourselves to arrays? Surely, it should be) TjT* -0.0755  Tc 0.5255  Tw (possible to write ) Tj71.4 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (lookup\(\)) Tj51 0  TD /F4 10.2  Tf-0.1033  Tc 0.8533  Tw (so that it works with any map-like) Tj-122.4 -12  TD -0.095  Tc 0.065  Tw (container. In particular, we would expect to be able to write:) Tj14.4 -24  TD /F2 7.8  Tf0.12  Tc 0  Tw (// ... table definition, etc. as before ...) Tj0 -24  TD 0.2 0.2 0.2 rg /F10 7.8  Tf(using namespace std;) TjT* (int main\(\) {) Tj9.6 -12  TD (map<int, const char*> message_map;) Tj0 -12  TD (message_map[6]) Tj24 -12  TD (= "Minor glitch in self-destruction module";) Tj-24 -12  TD (cout << lookup\(message_map, 6, "not found\224\)) Tj24 -12  TD (<< endl;) Tj-24 -12  TD (cout << lookup\(message_map, 6, 0\) << endl;) Tj0 -12  TD (cout << lookup\(table, 6, "not found"\) << endl;) TjT* (cout << lookup\(table, 6, 0\) << endl;) Tj-9.6 -12  TD (}) Tj-14.4 -24  TD 0 0 0 rg /F4 10.2  Tf-0.025  Tc 1.255  Tw (Although this is a slightly different problem, it points the way) Tj0 -12  TD 0.2331  Tc 1.0169  Tw (towards a solution to the original problem that removes the) TjT* -0.0948  Tc -0.0552  Tw (remaining blemishes in Stefan\222s code.) Tj11.4 -12  TD -0.287  Tc 0.137  Tw (The ) Tj17.4 0  TD /F2 10.2  Tf-0.42  Tc 0  Tw (lookup) Tj37.2 0  TD /F4 10.2  Tf-0.2751  Tc 0.2965  Tw (function needs to be implemented in quite different) Tj-66 -12  TD 0.1105  Tc 1.6895  Tw (ways for maps and arrays. For a map, ) Tj174.6 0  TD /F2 10.2  Tf0.08  Tc 0  Tw (lookup) Tj42 0  TD /F4 10.2  Tf0.0668  Tc 2.1832  Tw (should call) Tj-216.6 -12  TD /F2 10.2  Tf0.0467  Tc 0  Tw (std::map<>::find\(\)) Tj111.6 0  TD /F4 10.2  Tf-0.0026  Tc 6.9526  Tw (; for an array, it should call) Tj-111.6 -12  TD /F2 10.2  Tf0.0467  Tc 0  Tw (std::lower_bound\(\)) Tj111.6 0  TD /F4 10.2  Tf0.0146  Tc 0.9154  Tw (. These two functions have different) Tj-111.6 -12  TD -0.2863  Tc -0.4637  Tw (interfaces. The former is a member function taking a single parameter;) Tj0 -12  TD -0.1767  Tc 0.3867  Tw (the latter is a non-member function taking four parameters \(for the) TjT* -0.2297  Tc 0.3197  Tw (overload we need\). Somehow, the ) Tj135.6 0  TD /F2 10.2  Tf-0.22  Tc 0  Tw (lookup) Tj37.8 0  TD /F4 10.2  Tf-0.2482  Tc 0.6982  Tw (function template must) Tj-173.4 -12  TD -0.2807  Tc 0.0216  Tw (deduce these differences from the type of the container passed to it.) Tj11.4 -12  TD -0.0827  Tc -0  Tw (In principle, we could just provide separate overloads for maps) Tj-11.4 -12  TD -0.1083  Tc -0.0417  Tw (and arrays:) Tj14.4 -24  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc 0  Tw (template<typename Key, typename Val>) Tj0 -12  TD (const Val& lookup\(const std::map<Key,Val>&,) Tj86.4 -12  TD (const Key&, const Val&\);) Tj-86.4 -24  TD (template<typename Key, typename Val, unsigned n>) Tj0 -12  TD (const Val& lookup\(const Pair<Key,Val>\(&\)[n],) Tj86.4 -12  TD (const Key&, const Val&\);) Tj-100.8 -24  TD 0 0 0 rg /F4 10.2  Tf-0.1084  Tc 1.1084  Tw (But that gets us back to where we came in. Stefan\222s article was) Tj0 -12  TD 0.0809  Tc 1.1691  Tw (all about the difficulties of implementing the second of those) TjT* /F2 10.2  Tf-0.12  Tc 0  Tw (lookup\(\)) Tj50.4 0  TD /F4 10.2  Tf-0.0336  Tc -0.1164  Tw (function overloads.) Tj-39 -12  TD -0.06  Tc 0.2434  Tw (An alternative approach treats lookup as an algorithm that can) Tj-11.4 -12  TD -0.0646  Tc -0.4454  Tw (be applied to any map-like container. There is a single ) Tj216 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (lookup\(\)) Tj-216 -12  TD /F4 10.2  Tf0.2425  Tc 0.8075  Tw (function, but there can be several types of \223map\224. Or, more) Tj0 -12  TD -0.1266  Tc 0.1766  Tw (precisely, we define a generic Map concept, write the ) Tj216 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (lookup\(\)) Tj-216 -12  TD /F4 10.2  Tf0.0875  Tc 0.3625  Tw (function template in terms of the Map interface and provide as) Tj0 -12  TD -0.1159  Tc 0.4326  Tw (many implementations of the Map concept as we need \(including) TjT* /F2 10.2  Tf-0.12  Tc 0  Tw (std::map<>) Tj60 0  TD /F4 10.2  Tf-0.0426  Tc 0.0426  Tw (s and arrays of ) Tj61.2 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (Pair<>) Tj36 0  TD /F4 10.2  Tf-0.1048  Tc (s\).) Tj-145.8 -12  TD 0.2803  Tc 0.3947  Tw (Using the Map concept, the lookup algorithm would look) Tj-11.4 -12  TD -0.0877  Tc -0.0623  Tw (something like this:) Tj14.4 -24  TD /F2 7.8  Tf0.12  Tc 0  Tw (// pseudo-code) Tj0 -12  TD 0.2 0.2 0.2 rg /F10 7.8  Tf(template<typename Map>) TjT* (const MapVal& lookup\(const Map&, const MapKey&,) Tj100.8 -12  TD (const MapVal&\);) Tj160.2 708  TD 0 0 0 rg /F4 10.2  Tf-0.0544  Tc 0.0544  Tw (Here, we have used ) Tj81 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (MapKey) Tj38.4 0  TD /F4 10.2  Tf-0.1096  Tc -0.0404  Tw (and ) Tj17.4 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (MapVal) Tj38.4 0  TD /F4 10.2  Tf-0.2048  Tc 0.3548  Tw (to stand for the Map\222s) Tj-175.2 -12  TD -0.0289  Tc 0.0425  Tw (key and mapped value types. In real C++ code these types would) Tj0 -12  TD -0.0952  Tc 0.5452  Tw (be deduced from the Map type. In the case of ) Tj188.4 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (std::map<>) Tj63 0  TD /F4 10.2  Tf-0.3548  Tc (the) Tj-251.4 -12  TD /F2 10.2  Tf-0.22  Tc (MapKey) Tj38.4 0  TD /F4 10.2  Tf-0.1096  Tc -0.0404  Tw (and ) Tj17.4 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (MapVal) Tj38.4 0  TD /F4 10.2  Tf-0.1188  Tc 0.4188  Tw (types are immediately available: ) Tj133.2 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (MapKey) Tj-227.4 -12  TD /F4 10.2  Tf0.4983  Tc 0.5517  Tw (is ) Tj21 0  TD /F2 10.2  Tf0.75  Tc 0  Tw (std::map<>::key_type) Tj150.6 0  TD /F4 10.2  Tf0.6904  Tc -0.2404  Tw (and ) Tj30 0  TD /F2 10.2  Tf0.68  Tc 0  Tw (MapVal) Tj54.6 0  TD /F4 10.2  Tf0.1983  Tc (is) Tj-256.2 -12  TD /F2 10.2  Tf-0.0157  Tc (std::map<>::mapped_type) Tj141 0  TD /F4 10.2  Tf-0.0175  Tc 1.2675  Tw (. In the case of arrays things) Tj-141 -12  TD -0.087  Tc 1.077  Tw (are less straightforward. Arrays are not classes, so we can\222t add) Tj0 -12  TD -0.1435  Tc -0.0065  Tw (nested ) Tj27.6 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (typedef) Tj42 0  TD /F4 10.2  Tf-0.0844  Tc 0.0344  Tw (s. Instead we can use the ) Tj101.4 0  TD /F9 10.2  Tf-0.12  Tc 0.27  Tw (traits class technique) Tj85.2 0  TD /F4 10.2  Tf-0.15  Tc 0  Tw (.) Tj-242.4 -17.4  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc (template<typename Map>) Tj0 -12  TD (const typename map_traits<Map>::mapped_type&) TjT* (lookup\(const Map& map,) Tj33.6 -12  TD (const typename map_traits<Map>::key_type&) Tj57.6 -12  TD (target_key,) Tj-57.6 -12  TD (const typename map_traits<Map>::mapped_type&) Tj57.6 -12  TD (default_value\);) Tj-105 -18.6  TD 0 0 0 rg /F4 10.2  Tf-0.1276  Tc 0.5109  Tw (Now we can put information about the differences between maps) Tj0 -12  TD 0.1412  Tc 1.127  Tw (and arrays in the traits class and use that information in our) TjT* -0.1083  Tc -0.0417  Tw (implementation of ) Tj75.6 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (lookup\(\)) Tj48 0  TD /F4 10.2  Tf-0.15  Tc (.) Tj-112.8 -12  TD -0.3043  Tc -0.3257  Tw (Note that now there\222s only one template parameter for the compiler) Tj-10.8 -12  TD -0.2746  Tc 0.4477  Tw (to deduce: The type of the map itself. Only the first argument to the) Tj0 -12  TD /F2 10.2  Tf-0.42  Tc 0  Tw (lookup) Tj37.8 0  TD /F4 10.2  Tf-0.1986  Tc 0.4486  Tw (function participates in this deduction, as the types of the) Tj-37.8 -12  TD -0.2019  Tc 0.3519  Tw (other arguments are dependent on the result of this deduction. This) Tj0 -12  TD -0.3359  Tc -0.4141  Tw (greatly reduces the chance for deduction problems such as ambiguities.) Tj0 -18  TD /F0 10.8  Tf0.1034  Tc 0.1006  Tw (Implementation of ) Tj124.2 0  TD /F10 12  Tf0  Tc 0  Tw (lookup\(\)) Tj61.8 0  TD /F0 10.8  Tf-0.0668  Tc (Traits) Tj-186 -18  TD /F4 10.2  Tf0.6228  Tc 2.5272  Tw (As noted above,) Tj0  Tc 0.45  Tw ( ) Tj86.4 0  TD /F2 10.2  Tf0.705  Tc 0  Tw (lookup\(\)) Tj60.6 0  TD /F4 10.2  Tf0.6591  Tc 2.3409  Tw (will need to call either) Tj-147 -12  TD /F2 10.2  Tf0.3133  Tc 0  Tw (std::map<>::find\(\)) Tj120 0  TD /F4 10.2  Tf0.5517  Tc 0.4983  Tw (or ) Tj13.2 0  TD /F2 10.2  Tf0.38  Tc 0  Tw (std::lower_bound\(\)) Tj117 0  TD /F4 10.2  Tf0.4428  Tc 0.0072  Tw (. A) Tj-250.2 -12  TD /F2 10.2  Tf-0.15  Tc 0  Tw (map_traits<>::find\(\)) Tj123 0  TD /F4 10.2  Tf-0.0955  Tc 1.1455  Tw (function is introduced to hide this) Tj-123 -12  TD -0.1562  Tc 0.6062  Tw (from the ) Tj38.4 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (lookup\(\)) Tj52.2 0  TD /F4 10.2  Tf-0.0583  Tc 0.7083  Tw (function itself. Then ) Tj87 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (lookup\(\)) Tj51.6 0  TD /F4 10.2  Tf0.0056  Tc 1.0444  Tw (needs to) Tj-229.2 -12  TD 0.0158  Tc 1.0342  Tw (check whether the key was found and return either the default) Tj0 -12  TD -0.11  Tc 0.26  Tw (value or the value part of the element matching the key. Here, we) TjT* -0.1813  Tc 0.3313  Tw (use a ) Tj23.4 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (map_traits<>::end\(\)) Tj117 0  TD /F4 10.2  Tf-0.1078  Tc 0.5578  Tw (function to get the appropriate) Tj-140.4 -12  TD 0.1815  Tc 1.1685  Tw (past-the-end iterator for the \221key found\222 test. Retrieving the) Tj0 -12  TD -0.1145  Tc 0.1281  Tw (mapped value via an iterator depends on the element type \(not the) TjT* 0.6597  Tc 5.2653  Tw (map type\), so an element traits template with ) Tj5.6712  Tc 0  Tw (a) TjT* /F2 10.2  Tf-0.1629  Tc (mapped_value\(\)) Tj86.4 0  TD /F4 10.2  Tf-0.0534  Tc -0.0966  Tw (member is used for that.) Tj-75.6 -12  TD -0.0518  Tc -0.2315  Tw (The traits functions represent operations that might be useful in) Tj-10.8 -12  TD -0.1069  Tc 0.0769  Tw (other contexts. In those cases writing) Tj13.8 -12  TD 0.2 0.2 0.2 rg /F10 7.8  Tf-0.0626  Tc 0  Tw (map_element_traits<Map>::mapped_value\(element\)) Tj-13.8 -12  TD 0 0 0 rg /F4 10.2  Tf-0.0133  Tc 1.0633  Tw (for example, is both tedious and verbose. So, we provide non-) Tj0 -12  TD -0.287  Tc 1.337  Tw (member wrapper functions to simplify the code in these situations) TjT* -0.31  Tc 0.0743  Tw (and take advantage of them in the ) Tj130.2 0  TD /F2 10.2  Tf-0.42  Tc 0  Tw (lookup\(\)) Tj48.6 0  TD /F4 10.2  Tf-0.2764  Tc 0.1264  Tw (function itself.) Tj-165 -17.4  TD /F2 7.8  Tf0.12  Tc 0  Tw (// The mapped_value\(\) convenience function) Tj0 -12  TD 0.2 0.2 0.2 rg /F10 7.8  Tf(template<typename Elem>) TjT* (inline) TjT* -0.0682  Tc -0.4118  Tw (const typename map_element_traits<Elem>::mapped_type&) TjT* 0.12  Tc 0  Tw (mapped_value\(const Elem& element\) {) Tj9.6 -12  TD (return map_element_traits<Elem>::mapped_value\() Tj192 -12  TD (element\);) Tj-201.6 -12  TD (}) Tj0 -18.6  TD 0 0 0 rg /F2 7.8  Tf(// The find\(\) convenience function) Tj0 -12  TD 0.2 0.2 0.2 rg /F10 7.8  Tf(template<typename Map>) TjT* (inline) TjT* (typename map_traits<Map>::const_iterator) TjT* (find\(const Map& map,) Tj24 -12  TD -0.0573  Tc -0.1227  Tw (const typename map_traits<Map>::key_type& key\) {) Tj-14.4 -12  TD 0.12  Tc 0  Tw (return map_traits<Map>::find\(map, key\);) Tj-9.6 -12  TD (}) TjETendstreamendobj117 0 obj11687endobj115 0 obj<</Type /Page/Parent 95 0 R/Resources <</Font <</F0 6 0 R /F2 10 0 R /F4 16 0 R /F9 32 0 R /F10 41 0 R >>/ProcSet 2 0 R>>/Contents 116 0 R>>endobj120 0 obj<</Length 121 0 R>>stream
BT43.2 769.8  TD0 0 0 rg /F2 7.8  Tf0.12  Tc 0  Tw (// The lookup\(\) function) Tj0 -12  TD 0.2 0.2 0.2 rg /F10 7.8  Tf(template<typename Map>) TjT* (const typename map_traits<Map>::mapped_type&) TjT* (lookup\(const Map& map,) Tj33.6 -12  TD (const typename map_traits<Map>::key_type&) Tj57.6 -12  TD (target_key,) Tj-57.6 -12  TD (const typename map_traits<Map>::mapped_type&) Tj57.6 -12  TD (default_value\) {) Tj-81.6 -12  TD (typename map_traits<Map>::const_iterator i) Tj28.8 -12  TD (= find\(map, target_key\);) Tj-28.8 -17.4  TD (return \(i == end\(map\)\)) Tj38.4 -12  TD (? default_value : mapped_value\(*i\);) Tj-48 -12  TD (}) Tj-13.8 -18.6  TD 0 0 0 rg /F4 10.2  Tf0.2528  Tc 0.8639  Tw (The traits templates are declared \(but not defined\) and then) Tj0 -12  TD -0.0723  Tc 0.0556  Tw (specializations are defined for each of the map-like containers we) TjT* 0.247  Tc 1.003  Tw (wish to support. This prevents the instantiation of the traits) TjT* -0.0933  Tc 0.7147  Tw (templates with unexpected template arguments \(e.g. via template) TjT* -0.0848  Tc 0.5348  Tw (argument deduction\), which should help to minimize the number) TjT* -0.0744  Tc 1.1994  Tw (of incomprehensible error messages if the programmer makes a) TjT* -0.0103  Tc 0  Tw (mistake.) Tj13.8 -12  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc (template<typename Elem> struct map_element_traits;) Tj0 -12  TD (template<typename Map> struct map_traits;) Tj-13.8 -18  TD 0 0 0 rg /F0 10.8  Tf0.0212  Tc 0.1828  Tw (Traits for ) Tj63.6 0  TD /F10 12  Tf0  Tc 0  Tw (std::map<>) Tj-63.6 -18  TD /F4 10.2  Tf0.0452  Tc 1.1548  Tw (The traits templates for ) Tj103.8 0  TD /F2 10.2  Tf0.06  Tc 0  Tw (std::map<>) Tj66 0  TD /F4 10.2  Tf0.1174  Tc 0.6326  Tw (are straightforward. A) Tj-169.8 -12  TD 0.3935  Tc 0.7315  Tw (partial specialisation of the map element traits template is) Tj0 -12  TD -0.0774  Tc 0.1274  Tw (provided for any ) Tj69 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (std::pair<>) Tj66 0  TD /F4 10.2  Tf-0.15  Tc (.) Tj-121.2 -24  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc (template<typename Key, typename Val>) Tj0 -12  TD (struct map_element_traits< std::pair<Key,Val> > {) Tj9.6 -12  TD (typedef std::pair<Key,Val> value_type;) Tj0 -17.4  TD -0.0757  Tc 0.1957  Tw (typedef typename value_type:: first_type key_type;) Tj0 -12  TD 0.12  Tc 0  Tw (typedef typename value_type::second_type) Tj172.8 -12  TD (mapped_type;) Tj-172.8 -18.6  TD (static const key_type& key\() Tj91.2 -12  TD (const value_type& element\) {) Tj-81.6 -12  TD (return element.first;) Tj-9.6 -12  TD (}) Tj0 -24  TD (static const mapped_type& mapped_value\() Tj91.2 -12  TD (const value_type& element\) {) Tj-81.6 -12  TD (return element.second;) Tj-9.6 -12  TD (}) Tj-9.6 -12  TD (};) Tj-13.8 -24  TD 0 0 0 rg /F4 10.2  Tf0.031  Tc 1.219  Tw (Similarly, a partial specialization of the map traits template is) Tj0 -12  TD -0.0774  Tc 0.1274  Tw (provided for any ) Tj69 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (std::map<>) Tj60 0  TD /F4 10.2  Tf-0.15  Tc (.) Tj-115.2 -24  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc (template<typename Key, typename T, typename Cmp,) Tj43.2 -12  TD (typename A>) Tj-43.2 -12  TD (struct map_traits< std::map<Key,T,Cmp,A> > {) Tj9.6 -12  TD (typedef std::map<Key,T,Cmp,A> map_type;) Tj0 -24  TD (typedef typename map_type::key_type key_type;) Tj0 -12  TD (typedef ) Tj38.4 0  TD -0.041  Tc -0.439  Tw (typename map_type::mapped_type mapped_type;) Tj-38.4 -12  TD 0.12  Tc 0  Tw (typedef typename map_type::value_type value_type;) Tj0 -12  TD (typedef typename map_type::const_iterator) Tj163.2 -12  TD (const_iterator;) Tj112.2 708  TD 0.1064  Tc 0.0136  Tw (static const_iterator begin\(const map_type& map\)) Tj9.6 -12  TD 0.12  Tc 0  Tw ({ return map.begin\(\); }) Tj-9.6 -12  TD 0.1057  Tc 0.0143  Tw (static const_iterator end\(const map_type& map\)) Tj9.6 -12  TD 0.12  Tc 0  Tw ({ return map.end\(\); }) Tj-9.6 -24  TD -0.15  Tw (static const_iterator find\(const map_type& map,) Tj129.6 -12  TD -0.3  Tw (const key_type& key\)) Tj-120 -12  TD 0  Tw ({ return map.find\(key\); }) Tj-19.2 -12  TD (};) Tj-14.4 -24  TD 0 0 0 rg /F4 10.2  Tf0.688  Tc 0.662  Tw (These traits classes adapt ) Tj127.2 0  TD /F2 10.2  Tf0.705  Tc 0  Tw (std::map) Tj58.8 0  TD /F4 10.2  Tf0.7214  Tc 0.7286  Tw (for use with our) Tj-186 -12  TD /F2 10.2  Tf-0.12  Tc 0  Tw (lookup\(\)) Tj50.4 0  TD /F4 10.2  Tf0.0059  Tc (function.) Tj-50.4 -18  TD /F0 10.8  Tf-0  Tc 0.204  Tw (Traits for Arrays of Key,Value Pairs) Tj0 -18  TD /F4 10.2  Tf-0.0885  Tc 0.1785  Tw (The traits for arrays of ) Tj92.4 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (Pair<Key,Val>) Tj80.4 0  TD /F4 10.2  Tf-0.0575  Tc 0.0575  Tw (are similar to those for) Tj-172.8 -12  TD /F2 10.2  Tf0.72  Tc 0  Tw (std::map<>) Tj69 0  TD /F4 10.2  Tf0.6764  Tc 4.4736  Tw (. There is a partial specialisation of) Tj-69 -12  TD /F2 10.2  Tf-0.12  Tc 0  Tw (map_element_traits<>) Tj122.4 0  TD /F4 10.2  Tf0.0356  Tc 0.4144  Tw (for ) Tj14.4 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (Pair<Key,Val>) Tj78 0  TD /F4 10.2  Tf-0.15  Tc (.) Tj-200.4 -24  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc (template<typename Key, typename Val>) Tj0 -12  TD (struct map_element_traits< Pair<Key,Val> > {) Tj9.6 -12  TD (typedef Pair<Key,Val> value_type;) Tj0 -12  TD (typedef Key key_type;) TjT* (typedef Val mapped_type;) Tj0 -17.4  TD (static const key_type& key\() Tj105.6 -12  TD 0.095  Tc 0.025  Tw (const value_type& element\)) Tj-96 -12  TD 0.12  Tc 0  Tw ({ return element.key; }) Tj-9.6 -18.6  TD (static const mapped_type& mapped_value\() Tj105.6 -12  TD 0.095  Tc 0.025  Tw (const value_type& element\)) Tj-96 -12  TD 0.12  Tc 0  Tw ({ return element.val; }) Tj-19.2 -12  TD (};) Tj-14.4 -24  TD 0 0 0 rg /F4 10.2  Tf0.2067  Tc 0.7576  Tw (And there is a partial specialisation of ) Tj171.6 0  TD /F2 10.2  Tf0.18  Tc 0  Tw (map_traits<>) Tj79.8 0  TD /F4 10.2  Tf0.2356  Tc (for) Tj-251.4 -12  TD -0.0519  Tc 0.2019  Tw (arrays of ) Tj37.8 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (Pair<Key,Val>) Tj78 0  TD /F4 10.2  Tf-0.15  Tc (.) Tj-101.4 -24  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.106  Tc 0.014  Tw (template<typename Key, typename Val, unsigned n>) Tj0 -12  TD 0.12  Tc 0  Tw (struct map_traits< Pair<Key,Val>[n] > {) Tj9.6 -12  TD (typedef Key key_type;) Tj0 -12  TD (typedef Val mapped_type;) TjT* (typedef Pair<Key,Val> value_type;) TjT* (typedef const value_type* const_iterator;) Tj0 -24  TD (static const_iterator begin\() Tj86.4 -12  TD 0.096  Tc 0.024  Tw (const value_type \(&map\)[n]\)) Tj-76.8 -12  TD 0.12  Tc 0  Tw ({ return &map[0]; }) Tj-9.6 -12  TD (static const_iterator end\() Tj86.4 -12  TD 0.096  Tc 0.024  Tw (const value_type \(&map\)[n]\)) Tj-76.8 -12  TD 0.12  Tc 0  Tw ({ return &map[n]; }) Tj-9.6 -24  TD (static const_iterator find\() Tj86.4 -12  TD 0.096  Tc 0.024  Tw (const value_type \(&map\)[n],) Tj0 -12  TD 0.0969  Tc 0.0231  Tw (const key_type& target_key\) {) Tj-76.8 -12  TD 0.1064  Tc 0.0136  Tw (const_iterator i = std::lower_bound\(begin\(map\),) Tj67.2 -12  TD 0.12  Tc 0  Tw (end\(map\), target_key,) Tj0 -12  TD 0.1018  Tc (key_value_compare<value_type>\(\)\);) Tj-67.2 -24  TD 0.105  Tc 0.015  Tw (return \(i == end\(map\) || key\(*i\) != target_key\)) Tj38.4 -12  TD 0.12  Tc 0  Tw (? end\(map\) : i;) Tj-48 -12  TD (}) Tj-9.6 -12  TD (};) Tj231.6 -19.8  TD 0 0 0 rg /F0 10.8  Tf0.195  Tc (27) Tj-190.2 768.6  TD /F0 12  Tf-0.0037  Tc -0.0863  Tw (Overload issue 61 june 2004) TjETendstreamendobj121 0 obj7604endobj118 0 obj<</Type /Page/Parent 119 0 R/Resources <</Font <</F0 6 0 R /F2 10 0 R /F4 16 0 R /F10 41 0 R >>/ProcSet 2 0 R>>/Contents 120 0 R>>endobj123 0 obj<</Length 124 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (28) Tj0 768.6  TD /F0 12  Tf-0.0037  Tc 0.2137  Tw (Overload issue 61 june 2004) Tj0 -40.8  TD /F4 10.2  Tf0.113  Tc 0.337  Tw (The ) Tj19.8 0  TD /F2 10.2  Tf0.08  Tc 0  Tw (find\(\)) Tj41.4 0  TD /F4 10.2  Tf0.1033  Tc 0.6467  Tw (function uses ) Tj60 0  TD /F2 10.2  Tf0.0646  Tc 0  Tw (lower_bound\(\)) Tj84.6 0  TD /F4 10.2  Tf0.0493  Tc 1  Tw (passing a key) Tj-205.8 -12  TD 0.589  Tc 0.461  Tw (comparison predicate with two asymmetric function call) Tj0 -12  TD 0.0261  Tc 1.1739  Tw (operators. The predicate class is generated from the following) TjT* -0.0183  Tc 0  Tw (template:) Tj14.4 -24  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc (template<typename Elem>) Tj0 -12  TD (struct key_value_compare {) Tj9.6 -12  TD (typedef typename) Tj57.6 -12  TD (map_element_traits<Elem>::key_type) Tj0 -12  TD (key_type;) Tj-57.6 -12  TD (typedef typename) Tj57.6 -12  TD (map_element_traits<Elem>::value_type) Tj0 -12  TD (value_type;) Tj-57.6 -24  TD (bool operator\(\)\(const value_type& x,) Tj76.8 -12  TD (const value_type& y\) const {) Tj-67.2 -12  TD (return map_element_traits<Elem>::key\(x\) <) Tj33.6 -12  TD (map_element_traits<Elem>::key\(y\);) Tj-43.2 -12  TD (}) Tj0 -24  TD (bool operator\(\)\(const value_type& elem,) Tj76.8 -12  TD (const key_type& key\) const {) Tj-67.2 -12  TD (return map_element_traits<Elem>::key\(elem\) <) Tj33.6 -12  TD (key;) Tj-43.2 -12  TD (}) Tj0 -24  TD (bool operator\(\)\(const key_type& key,) Tj76.8 -12  TD (const value_type& elem\) const {) Tj-67.2 -12  TD (return key <) Tj33.6 -12  TD (map_element_traits<Elem>::key\(elem\);) Tj-43.2 -12  TD (}) Tj-9.6 -12  TD (};) Tj-14.4 -24  TD 0 0 0 rg /F4 10.2  Tf0.0134  Tc 0.9366  Tw (This is a generalisation of the ) Tj130.8 0  TD /F2 10.2  Tf0.0185  Tc 0  Tw (CleverLessKey) Tj82.8 0  TD /F4 10.2  Tf-0.0261  Tc 1.0761  Tw (class shown) Tj-213.6 -12  TD -0.1312  Tc 0.4312  Tw (above. It uses the ) Tj73.2 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (key\(\)) Tj32.4 0  TD /F4 10.2  Tf-0.0692  Tc 0.1192  Tw (function from the map element traits to) Tj-105.6 -12  TD -0.0879  Tc 0.9579  Tw (ensure that the predicate class can be generated for any element) Tj0 -12  TD 0.6569  Tc 2.0598  Tw (of a map-like class and only those elements. A third) TjT* /F2 10.2  Tf-0.12  Tc 0  Tw (operator\(\)) Tj63.6 0  TD /F4 10.2  Tf-0.0967  Tc 0.6967  Tw (overload is provided so that two elements can be) Tj-63.6 -12  TD -0.0415  Tc 1.1665  Tw (compared to each other. We omitted the additional ) Tj217.2 0  TD /F2 10.2  Tf-0.0343  Tc 0  Tw (typedef) Tj42.6 0  TD /F4 10.2  Tf0.2322  Tc (s) Tj-259.8 -12  TD -0.1497  Tc 0.2997  Tw (needed for adaptability.) Tj0 -18  TD /F0 12  Tf0.029  Tc -0.269  Tw (Problem Solved! - Problem Solved?) TjT* /F4 10.2  Tf0.2062  Tc 1.0838  Tw (The code presented in the previous sections does fix all the) Tj0 -12  TD -0.0851  Tc -0.0649  Tw (imperfections in Stefan\222s version. At least, it does if you are using) TjT* -0.1044  Tc 0.8817  Tw (the GCC compiler \(Code tested on gcc 3.2 and 3.3.\). But VC++) TjT* 0.4448  Tc 0.8052  Tw (7.1 produces an error. It turns out that it fails to find the) TjT* /F2 10.2  Tf-0.12  Tc 0  Tw (map_traits) Tj63 0  TD /F4 10.2  Tf-0.0814  Tc 0.2314  Tw (specialization for ) Tj72.6 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (Pair<Key,Val>) Tj78 0  TD /F4 10.2  Tf-0.1233  Tc 0.5733  Tw (. The reason) Tj-213.6 -12  TD 0.6097  Tc 0.2403  Tw (is related to ) Tj60.6 0  TD /F2 10.2  Tf0.6  Tc 0  Tw (const) Tj37.8 0  TD /F4 10.2  Tf0.5796  Tc 0.4704  Tw (qualification. VC++ is happy if the) Tj-98.4 -12  TD /F2 10.2  Tf0.84  Tc 0  Tw (map_traits) Tj78.6 0  TD /F4 10.2  Tf0.669  Tc 5.781  Tw (template is specialized for) Tj0  Tc 0.45  Tw ( ) Tj151.8 0  TD /F2 10.2  Tf0.84  Tc 0  Tw (const) Tj-230.4 -12  TD -0.0277  Tc (Pair<Key,Val>) Tj82.8 0  TD /F4 10.2  Tf0.0052  Tc 1.0448  Tw (instead of just ) Tj63.6 0  TD /F2 10.2  Tf-0.0277  Tc 0  Tw (Pair<Key,Val>) Tj79.2 0  TD /F4 10.2  Tf0.0393  Tc 1.0107  Tw (, but that) Tj-225.6 -12  TD -0.0853  Tc 1.2553  Tw (creates an error when compiled with GCC. We don\222t know yet) Tj0 -12  TD 0.1614  Tc 1.0522  Tw (whether this is because of a compiler error or because of an) TjT* -0.0999  Tc 1.2832  Tw (imprecision in the C++ standard. In practice, you will therefore) TjT* -0.0543  Tc -0.0957  Tw (have to provide both \(otherwise identical\) specializations.) Tj11.4 -12  TD -0.0862  Tc 0.0029  Tw (So here is the entire code in all its glory:) Tj3 -24  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc 0  Tw (#include <iostream>) Tj0 -12  TD (#include <algorithm>) TjT* (#include <map>) TjT* (#include <functional>) Tj274.8 708  TD 0 0 0 rg /F2 7.8  Tf(// Generic map element declarations.) Tj0 -12  TD 0.2 0.2 0.2 rg /F10 7.8  Tf(template<typename Elem> struct map_element_traits;) Tj0 -24  TD (template<typename Elem> inline) Tj0 -12  TD -0.0682  Tc -0.4118  Tw (const typename map_element_traits<Elem>::mapped_type&) TjT* 0.12  Tc 0  Tw (mapped_value\(const Elem& element\) {) Tj9.6 -12  TD (return map_element_traits<Elem>::mapped_value\() Tj192 -12  TD (element\);) Tj-201.6 -12  TD (}) Tj0 -24  TD (template<typename Elem> inline) Tj0 -12  TD (const typename map_element_traits<Elem>::key_type&) TjT* (key\(const Elem& element\) {) Tj9.6 -12  TD (return map_element_traits<Elem>::key\(element\);) Tj-9.6 -12  TD (}) Tj0 -24  TD (template<typename Elem>) Tj0 -12  TD (struct key_value_compare {) Tj9.6 -12  TD (typedef typename) Tj57.6 -12  TD (map_element_traits<Elem>::key_type) Tj0 -12  TD (key_type;) Tj-57.6 -12  TD (typedef typename) Tj57.6 -12  TD (map_element_traits<Elem>::value_type) Tj0 -12  TD (value_type;) Tj-57.6 -24  TD (bool operator\(\)\(const value_type& x,) Tj76.8 -12  TD (const value_type& y\) const {) Tj-67.2 -12  TD (return map_element_traits<Elem>::key\(x\) <) Tj33.6 -12  TD (map_element_traits<Elem>::key\(y\);) Tj-43.2 -12  TD (}) Tj0 -24  TD (bool operator\(\)\(const value_type& elem,) Tj76.8 -12  TD (const key_type& key\) const {) Tj-67.2 -12  TD (return map_element_traits<Elem>::key\(elem\) <) Tj33.6 -12  TD (key;) Tj-43.2 -12  TD (}) Tj0 -24  TD (bool operator\(\)\(const key_type& key,) Tj76.8 -12  TD (const value_type& elem\) const {) Tj-67.2 -12  TD (return key <) Tj33.6 -12  TD (map_element_traits<Elem>::key\(elem\);) Tj-43.2 -12  TD (}) Tj-9.6 -12  TD (};) Tj0 -24  TD 0 0 0 rg /F2 7.8  Tf(// Generic map declarations.) Tj0 -12  TD 0.2 0.2 0.2 rg /F10 7.8  Tf(template<typename Map> struct map_traits;) Tj0 -24  TD (template<typename Map> inline) Tj0 -12  TD (typename map_traits<Map>::const_iterator) TjT* (find\(const Map& map,) Tj24 -12  TD (const typename map_traits<Map>::key_type&) Tj72 -12  TD (key\) {) Tj-86.4 -12  TD (return map_traits<Map>::find\(map, key\);) Tj-9.6 -12  TD (}) Tj0 -24  TD (template<typename Map> inline) Tj0 -12  TD (typename map_traits<Map>::const_iterator) TjT* (end\(Map const& map\) {) Tj9.6 -12  TD (return map_traits<Map>::end\(map\);) Tj-9.6 -12  TD (}) TjETendstreamendobj124 0 obj7150endobj122 0 obj<</Type /Page/Parent 119 0 R/Resources <</Font <</F0 6 0 R /F2 10 0 R /F4 16 0 R /F10 41 0 R >>/ProcSet 2 0 R>>/Contents 123 0 R>>endobj126 0 obj<</Length 127 0 R>>stream
BT43.2 769.8  TD0 0 0 rg /F2 7.8  Tf0.12  Tc 0  Tw (// The lookup\(\) function) Tj0 -12  TD 0.2 0.2 0.2 rg /F10 7.8  Tf(template<typename Map>) TjT* (const typename map_traits<Map>::mapped_type&) TjT* (lookup\(const Map& map,) Tj33.6 -12  TD (const typename map_traits<Map>::key_type&) Tj48 -12  TD (target_key,) Tj-48 -12  TD (const typename map_traits<Map>::mapped_type&) Tj48 -12  TD (default_value\) {) Tj-72 -12  TD (typename map_traits<Map>::const_iterator pos) Tj19.2 -12  TD (= find\(map, target_key\);) Tj-19.2 -24  TD (return \(pos == end\(map\)\)) Tj38.4 -12  TD (? default_value) Tj0 -12  TD (: mapped_value\(*pos\);) Tj-48 -12  TD (}) Tj0 -24  TD 0 0 0 rg /F2 7.8  Tf(// specializations for std::map) Tj0 -12  TD 0.2 0.2 0.2 rg /F10 7.8  Tf(template<typename Key, typename Val>) TjT* (struct map_element_traits< std::pair<Key,Val> > {) Tj9.6 -12  TD (typedef std::pair<Key,Val> value_type;) Tj0 -24  TD (typedef typename value_type:: first_type) Tj57.6 -12  TD (key_type;) Tj-57.6 -12  TD (typedef typename value_type::second_type) Tj57.6 -12  TD (mapped_type;) Tj-57.6 -24  TD (static const key_type& key\() Tj96 -12  TD (const value_type& element\) {) Tj-86.4 -12  TD (return element.first;) Tj-9.6 -12  TD (}) Tj0 -24  TD (static const mapped_type& mapped_value\() Tj91.2 -12  TD (const value_type& element\) {) Tj-81.6 -12  TD (return element.second;) Tj-9.6 -12  TD (}) Tj-9.6 -12  TD (};) Tj0 -24  TD (template<typename Key, typename T, typename Cmp,) Tj43.2 -12  TD (typename A>) Tj-43.2 -12  TD (struct map_traits< std::map<Key,T,Cmp,A> > {) Tj9.6 -12  TD (typedef std::map<Key,T,Cmp,A> map_type;) Tj0 -24  TD (typedef typename map_type::key_type) Tj57.6 -12  TD (key_type;) Tj-57.6 -12  TD (typedef typename map_type::mapped_type) Tj57.6 -12  TD (mapped_type;) Tj-57.6 -12  TD (typedef typename map_type::value_type) Tj57.6 -12  TD (value_type;) Tj-57.6 -12  TD (typedef typename map_type::const_iterator) Tj57.6 -12  TD (const_iterator;) Tj-57.6 -24  TD (static const_iterator begin\(const map_type& map\)) Tj9.6 -12  TD ({ return map.begin\(\); }) Tj-9.6 -12  TD (static const_iterator end\(const map_type& map\)) Tj9.6 -12  TD ({ return map.end\(\); }) Tj-9.6 -24  TD (static const_iterator find\(const map_type& map,) Tj129.6 -12  TD (const key_type& key\)) Tj-120 -12  TD ({ return map.find\(key\); }) Tj-19.2 -12  TD (};) Tj275.4 708  TD 0 0 0 rg /F2 7.8  Tf(// Our own Pair type suitable for aggregate) Tj0 -12  TD (// initialization) TjT* 0.2 0.2 0.2 rg /F10 7.8  Tf(template<typename Key, typename Val>) TjT* (struct Pair {) Tj9.6 -12  TD (Key key;) Tj0 -12  TD (Val val;) Tj-9.6 -12  TD (};) Tj0 -24  TD 0 0 0 rg /F2 7.8  Tf(// Specializations for Pair) Tj0 -12  TD 0.2 0.2 0.2 rg /F10 7.8  Tf(template<typename Key, typename Val>) TjT* (struct map_element_traits< Pair<Key,Val> > {) Tj9.6 -12  TD (typedef Pair<Key,Val> value_type;) Tj0 -12  TD (typedef Key key_type;) TjT* (typedef Val mapped_type;) TjT* (static const key_type& key\() Tj86.4 -12  TD 0.07  Tc 0.05  Tw (const value_type& element\)) Tj-76.8 -12  TD 0.12  Tc 0  Tw ({ return element.key; }) Tj-9.6 -12  TD (static const mapped_type& mapped_value\() Tj86.4 -12  TD 0.07  Tc 0.05  Tw (const value_type& element\)) Tj-76.8 -12  TD 0.12  Tc 0  Tw ({ return element.val; }) Tj-19.2 -12  TD (};) Tj0 -24  TD 0.106  Tc 0.014  Tw (template<typename Key, typename Val, unsigned n>) Tj0 -12  TD 0.12  Tc 0  Tw (struct map_traits< Pair<Key,Val>[n] > {  ) Tj196.8 0  TD /F2 7.8  Tf0.045  Tc 0.075  Tw (// for GCC) Tj-187.2 -12  TD /F10 7.8  Tf0.12  Tc 0  Tw (typedef Key key_type;) Tj0 -12  TD (typedef Val mapped_type;) TjT* (typedef Pair<Key,Val> value_type;) TjT* (typedef const value_type* const_iterator;) Tj0 -24  TD (static const_iterator begin\() Tj86.4 -12  TD 0.096  Tc 0.024  Tw (const value_type \(&map\)[n]\)) Tj-76.8 -12  TD 0.12  Tc 0  Tw ({ return &map[0]; }) Tj-9.6 -12  TD (static const_iterator end\() Tj86.4 -12  TD 0.096  Tc 0.024  Tw (const value_type \(&map\)[n]\)) Tj-76.8 -12  TD 0.12  Tc 0  Tw ({ return &map[n]; }) Tj-9.6 -12  TD (static const_iterator find\() Tj86.4 -12  TD 0.096  Tc 0.024  Tw (const value_type \(&map\)[n],) Tj0 -12  TD 0.0969  Tc 0.0231  Tw (const key_type& target_key\) {) Tj-76.8 -12  TD 0.12  Tc 0  Tw (const_iterator i = std::lower_bound\() Tj67.2 -12  TD 0.1006  Tc 0.0194  Tw (begin\(map\), end\(map\), target_key,) Tj0 -12  TD 0.1018  Tc 0  Tw (key_value_compare<value_type>\(\)\);) Tj-67.2 -12  TD 0.105  Tc 0.015  Tw (return \(i == end\(map\) || key\(*i\) != target_key\)) Tj38.4 -12  TD 0.12  Tc 0  Tw (? end\(map\) : i;) Tj-48 -12  TD (}) Tj-9.6 -12  TD (};) Tj0 -24  TD 0.106  Tc 0.014  Tw (template<typename Key, typename Val, unsigned n>) Tj0 -12  TD 0.12  Tc 0  Tw (struct map_traits< const Pair<Key,Val>[n] > {) TjT* /F2 7.8  Tf(// for VC++) Tj9.6 -12  TD /F10 7.8  Tf(typedef Key key_type;) Tj0 -12  TD (typedef Val mapped_type;) TjT* (typedef Pair<Key,Val> value_type;) TjT* (typedef const value_type* const_iterator;) Tj0 -24  TD (static const_iterator begin\() Tj86.4 -12  TD 0.096  Tc 0.024  Tw (const value_type \(&map\)[n]\)) Tj-76.8 -12  TD 0.12  Tc 0  Tw ({ return &map[0]; }) Tj-9.6 -12  TD (static const_iterator end\() Tj86.4 -12  TD 0.096  Tc 0.024  Tw (const value_type \(&map\)[n]\)) Tj-76.8 -12  TD 0.12  Tc 0  Tw ({ return &map[n]; }) Tj211.8 -19.8  TD 0 0 0 rg /F0 10.8  Tf0.1872  Tc (29) Tj-189.6 768.6  TD /F0 12  Tf-0.0037  Tc -0.0863  Tw (Overload issue 61 june 2004) TjETendstreamendobj127 0 obj5580endobj125 0 obj<</Type /Page/Parent 119 0 R/Resources <</Font <</F0 6 0 R /F2 10 0 R /F10 41 0 R >>/ProcSet 2 0 R>>/Contents 126 0 R>>endobj129 0 obj<</Length 130 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (30) Tj0 768.6  TD /F0 12  Tf-0.0037  Tc 0.2137  Tw (Overload issue 61 june 2004) Tj24 -40.8  TD 0.2 0.2 0.2 rg /F10 7.8  Tf0.12  Tc 0  Tw (static const_iterator find\() Tj86.4 -12  TD (const value_type \(&map\)[n],) Tj0 -12  TD (const key_type& target_key\) {) Tj-76.8 -12  TD (const_iterator i) Tj28.8 -12  TD (= std::lower_bound\() Tj33.6 -12  TD (begin\(map\), end\(map\), target_key,) Tj0 -12  TD (key_value_compare<value_type>\(\)\);) Tj-62.4 -24  TD (return \(i == end\(map\) || key\(*i\) != target_key\)) Tj38.4 -12  TD (? end\(map\) : i;) Tj-48 -12  TD (}) Tj-9.6 -12  TD (};) Tj0 -24  TD 0 0 0 rg /F2 7.8  Tf(// Test code) Tj0 -12  TD 0.2 0.2 0.2 rg /F10 7.8  Tf(typedef const Pair<int, const char*> Elem;) Tj0 -24  TD (Elem table[] = {) Tj9.6 -12  TD ({ 0, "Ok" },) Tj0 -12  TD ({ 6, "Minor glitch in self-destruction module" },) TjT* ({ 13, "Error logging printer out of paper" },) TjT* ({ 101, "Emergency cooling system inoperable" },) TjT* ({ 2349, "Dangerous substances released" },) TjT* ({ 32767, "Game over, you lost" }) Tj-9.6 -12  TD (};) Tj0 -24  TD (using namespace std;) TjT* (int main\(\) {) Tj9.6 -12  TD (map<int, const char*> message_map;) Tj0 -12  TD (message_map[6]) Tj24 -12  TD (= "Minor glitch in self-destruction module";) Tj-24 -12  TD (const char *result) Tj24 -12  TD (= lookup\(message_map, 6, "not found"\);) Tj-24 -12  TD (cout << "lookup\(map, 6, \\"not found\\"\) = ") Tj24 -12  TD (<< result << endl;) Tj-24 -12  TD (result = lookup\(message_map, 6, 0\);) Tj0 -12  TD (cout << "lookup\(map, 6, 0\) = " << result) Tj24 -12  TD (<< endl;) Tj-24 -12  TD (result = lookup\(table, 5, "not found"\);) Tj0 -12  TD (cout << "lookup\(table, 5, \\"not found\\"\) = ") Tj24 -12  TD (<< result << endl;) Tj-24 -12  TD (result = lookup\(table, 6, 0\);) Tj0 -12  TD (cout << "lookup\(table, 6, 0\) = ") Tj24 -12  TD (<< result) Tj0 -12  TD (<< endl;) Tj-33.6 -12  TD (}) Tj-14.4 -18  TD 0 0 0 rg /F0 12  Tf-0.0192  Tc (Afterwords) Tj0 -24  TD /F0 10.8  Tf0.1066  Tc -0.5026  Tw (Phil\222s Afterword) Tj0 -18  TD /F4 10.2  Tf0.448  Tc 0.722  Tw (First, I completely agree with Stefan that C++ is too big,) Tj0 -12  TD -0.0843  Tc 0.7343  Tw (complicated and difficult to use for most programmers and most) TjT* 0.3089  Tc 0.8161  Tw (organisations. C++ is a great language for developing high) TjT* -0.0958  Tc 0.0791  Tw (quality, flexible and efficient software components - but \(and I\222ve) TjT* -0.0723  Tc 0.0723  Tw (said this before\) most software is not like that.) Tj11.4 -12  TD -0.2231  Tc -0.2269  Tw (The main lesson we can take from this apparently simple exercise) Tj-11.4 -12  TD -0.0303  Tc 0.2803  Tw (is that experience counts. I became involved in Stefan\222s problem) Tj0 -12  TD -0.0526  Tc 0.4481  Tw (because I felt instinctively that the first step should have been to) TjT* /F9 10.2  Tf-0.2257  Tc 0  Tw (reduce) Tj28.2 0  TD /F4 10.2  Tf-0.1878  Tc -0.4422  Tw (the number of template parameters, not \(as Stefan tried to do\)) Tj-28.2 -12  TD -0.203  Tc -0.5008  Tw (to increase it. How did I know this would help? I\222d been there before.) Tj275.4 708  TD -0.182  Tc 0.632  Tw (My advice to C++ programmers struggling with templates \(or any) Tj0 -12  TD -0.1929  Tc -0.0071  Tw (other part of the language\) is this: learn the rules, don\222t guess; don\222t) TjT* 0.1384  Tc 0.3116  Tw (panic; simplify the problem as far as you can; think carefully;) TjT* -0.2015  Tc 0.0515  Tw (experiment; and, finally, don\222t be afraid to ask for help.) Tj10.8 -12  TD -0.0863  Tc 0.1363  Tw (If there is a moral to this story I would say it is that software is) Tj-10.8 -12  TD -0.066  Tc -0.4532  Tw (a very young discipline. As a profession we still have a lot to learn.) Tj0 -12  TD 0.1345  Tc 0.3155  Tw (One of the problems that remains unsolved is how to design a) TjT* 0.2182  Tc 0.2318  Tw (programming language that is easy to learn, is easy to use, is) TjT* 0.0559  Tc 0.3941  Tw (applicable to a wide range of applications and which generates) TjT* -0.131  Tc 0.3628  Tw (compact and efficient code. In my opinion, C++ is about the state) TjT* -0.1131  Tc 0.0092  Tw (of the art. It makes most of this possible, but it\222s not always easy.) Tj229.8 -12  TD /F6 10.2  Tf0.072  Tc -0.516  Tw (Phil Bass) Tj-117.6 -12  TD /F2 9  Tf0  Tc 0  Tw (phil@stoneymanor.demon.co.uk) Tj-112.2 -18  TD /F0 10.8  Tf0.106  Tc 0.098  Tw (Stefan\222s Afterword) Tj0 -18  TD /F4 10.2  Tf-0.1334  Tc 1.2834  Tw (So we\222ve solved all the problems. And I\222ve learned a lot in the) Tj0 -12  TD -0.135  Tc 0.085  Tw (process! That\222s a happy end, isn\222t it?) Tj10.8 -12  TD 0.2397  Tc 0.8103  Tw (I don\222t think so. Look at what I wanted to achieve at the) Tj-10.8 -12  TD -0.0689  Tc -0.2196  Tw (beginning and what we ended up with. All this is just a clever way) Tj0 -12  TD 0.0226  Tc 0.4274  Tw (to call ) Tj28.8 0  TD /F2 10.2  Tf0.0675  Tc 0  Tw (std::lower_bound) Tj99.6 0  TD /F4 10.2  Tf0.0862  Tc 0.3638  Tw (, isn\222t it? \(Or the ) Tj73.8 0  TD /F2 10.2  Tf0.18  Tc 0  Tw (find) Tj27.6 0  TD /F4 10.2  Tf-0.0709  Tc (member) Tj-229.8 -12  TD -0.1093  Tc -0.0407  Tw (function of ) Tj46.2 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (std::map) Tj48 0  TD /F4 10.2  Tf-0.0466  Tc -0.0034  Tw (\). Ok, I\222m a bit sarcastic here.) Tj-83.4 -12  TD 0.495  Tc 2.355  Tw (If we subtract the test code and the code related to) Tj-10.8 -12  TD /F2 10.2  Tf0.03  Tc 0  Tw (std::map) Tj49.8 0  TD /F4 10.2  Tf0.1146  Tc 0.2688  Tw (, which don\222t really count here, we have written in) Tj-49.8 -12  TD 0.0611  Tc 0.2389  Tw (excess of 100 lines of source code, some of it quite tricky. And) Tj0 -12  TD 0.4495  Tc 5.0671  Tw (most of it is just the scaffolding needed to make) TjT* /F2 10.2  Tf0.4425  Tc 0  Tw (std::lower_bound) Tj108.6 0  TD /F4 10.2  Tf0.3484  Tc 0.5016  Tw (usable in a nice way with constant) Tj-108.6 -12  TD 0.1006  Tc -0.3172  Tw (ROMable key/value pairs. If we include all compiler quirks and) Tj0 -12  TD 0.1007  Tc -0.1307  Tw (crappy error messages, this matter was suitable for filling a fair) TjT* 0.1006  Tc 0.1494  Tw (number of Overload pages.) Tj10.8 -12  TD -0.0893  Tc 0.3593  Tw (Clearly there\222s something amiss here. If this sort of thing does) Tj-10.8 -12  TD -0.1221  Tc 0.1903  Tw (not get easier a lot of programmers will get frustrated by C++.) Tj196.8 -12  TD /F6 10.2  Tf-0.0992  Tc -0.3448  Tw (Stefan Heinzmann) Tj-73.8 -12  TD /F2 9  Tf0  Tc 0  Tw (stefan_heinzmann@yahoo.com) Tj-123 -18  TD /F0 10.8  Tf0.1051  Tc 0.0989  Tw (Editor\222s Afterword) Tj0 -18  TD /F4 9  Tf-0.0197  Tc 1.1031  Tw (Reading Stefan's contributions to this issue brought back memories for) Tj0 -12  TD -0.0215  Tc 0.0915  Tw (me of an article I wrote nine years ago \(Overload 8\).  There isn't space to) TjT* 0.0457  Tc 0.8543  Tw (reproduce it in this issue, or the editorial response it elicited \(this was) TjT* 0.0232  Tc 0.5126  Tw (longer than the article\).  I won't go into the detail of the arguments, but) TjT* -0.0319  Tc 0.0961  Tw (just quote from the end of that response:) Tj10.8 -12  TD /F4 10.2  Tf-0.2841  Tc 0.0913  Tw ("At the end of the day, I basically agree with Alan - C++ is harder) Tj-10.8 -12  TD -0.2853  Tc 0.1353  Tw (to use than C - and I think his comparison between a Stylophone and) Tj0 -12  TD -0.2955  Tc 0.6532  Tw (a violin is well drawn. I don't blame the language \(and I don't really) TjT* -0.3096  Tc 0.0505  Tw (think Alan does either\) - I blame IT management for giving everyone) TjT* -0.2799  Tc 0.2299  Tw (a violin and saying "right, now play a tune!" What C++ highlights is) TjT* -0.3708  Tc -0.3792  Tw (the need for better training, better tools and more realistic expectations.") TjT* -0.3966  Tc 0.2466  Tw (- ) Tj5.4 0  TD /F6 10.2  Tf-0.3554  Tc 0.2114  Tw (Sean A Corfield) Tj5.4 -12  TD /F4 10.2  Tf-0.3076  Tc 0.3576  Tw (Nine years have passed and nothing significant has changed. C++) Tj-10.8 -12  TD -0.2868  Tc 0.4868  Tw (is still to hard to use, lacks decent tools and expectations are seldom) Tj0 -12  TD -0.3043  Tc 0  Tw (realistic.) Tj212.4 -12  TD /F6 10.2  Tf-0.0286  Tc 0.1846  Tw (Alan Griffiths) Tj-212.4 -18  TD /F0 12  Tf-0.018  Tc 0  Tw (References) Tj0 -18  TD /F4 10.2  Tf0.4363  Tc 0.7637  Tw ([1] Stefan Heinzmann: \223The tale of a struggling template) Tj0 -12  TD -0.1188  Tc 0.1188  Tw (programmer\224, this issue of ) Tj108.6 0  TD /F9 10.2  Tf-0.0907  Tc 0  Tw (Overload) Tj-108.6 -12  TD /F4 10.2  Tf0.4239  Tc 0.5261  Tw ([2] D. Vandevoorde, N. M. Josuttis: ) Tj169.2 0  TD /F9 10.2  Tf0.3624  Tc 0.6876  Tw (C++ Templates: The) Tj-169.2 -12  TD -0.1451  Tc -0.0049  Tw (complete guide) Tj60.6 0  TD /F4 10.2  Tf-0.1423  Tc -0.3077  Tw (, Addison-Wesley 2003) Tj-60.6 -12  TD -0.1007  Tc 1.065  Tw ([3] Rich Sposato: \223A More Flexible Container\224, ) Tj202.2 0  TD /F9 10.2  Tf-0.0907  Tc 0.5407  Tw (Overload ) Tj41.4 0  TD /F4 10.2  Tf-0.24  Tc 0  Tw (issue) Tj-243.6 -12  TD -0.1223  Tc -0.0277  Tw (58 December 2003) Tj0 -12  TD -0.1644  Tc 0.6144  Tw ([4] ) Tj13.8 0  TD /F2 9  Tf0  Tc 0  Tw (http://www.comeaucomputing.com) TjETendstreamendobj130 0 obj9329endobj128 0 obj<</Type /Page/Parent 119 0 R/Resources <</Font 131 0 R/ProcSet 2 0 R>>/Contents 129 0 R>>endobj131 0 obj<</F0 6 0 R/F2 10 0 R/F4 16 0 R/F6 26 0 R/F9 32 0 R/F10 41 0 R>>endobj6 0 obj<</Type /Font/Subtype /Type1/Name /F0/BaseFont /EFHDGL+HelveticaNeue-BoldExt/FirstChar 32/LastChar 255/Widths [ 370 370 592 816 816 1037 926 370 444 444 464 600 370 481 370 426 816 556 816 816 816 816 816 759 816 816 370 370 600 600 600 759 800 834 889 907 907 778 722 944 926 330 685 870 722 1130 926 944 833 944 852 815 722 870 796 1148 796 778 759 444 426 444 600 500 260 741 778 741 778 758 426 778 741 296 296 722 296 1130 741 778 778 778 519 704 444 741 668 1056 722 648 648 444 222 444 600 500 500 500 370 816 592 1000 816 816 260 1167 815 370 1167 500 759 500 500 370 370 592 592 500 500 1000 260 1000 704 370 1148 500 648 778 370 370 816 816 816 816 222 816 260 800 482 611 600 481 800 260 400 600 530 530 260 741 620 370 260 361 506 611 1222 1222 1222 759 834 834 834 834 834 834 1148 907 778 778 778 778 330 330 330 330 907 926 944 944 944 944 944 600 944 870 870 870 870 778 833 759 741 741 741 741 741 741 1148 741 758 758 758 758 296 296 296 296 778 741 778 778 778 778 778 600 778 741 741 741 741 648 778 648 ]/Encoding /WinAnsiEncoding/FontDescriptor 7 0 R>>endobj7 0 obj<</Type /FontDescriptor/FontName /EFHDGL+HelveticaNeue-BoldExt/Flags 16416/FontBBox [ -250 -213 1466 1000 ]/MissingWidth 944/StemV 218/StemH 218/ItalicAngle 0/CapHeight 1405/XHeight 1055/Ascent 984/Descent -213/Leading 469/MaxWidth 1222/AvgWidth 683/FontFile3 132 0 R>>endobj132 0 obj<</Filter /FlateDecode /Length 133 0 R/Subtype /Type1C>>stream
HâtUmPSgæ!…M@HÄÎçòÑ$RE*U®
E°(
à
»ó¥l4ê®¨@Ä -⁄µ›*¢≥⁄vµ∫•Zª≤Z?®¯âÆ“-*ÓÇ÷ØR≠≠Àÿù›UÎvÍ<7=awﬂT™˛Ÿ…Lnﬁ˜ûÛÊyûÛúÛ 8E 'ì…"32≥“gd«f9+ÍùuÂeˆ\Á2ÁÿiÆ
G∆Ú:@¨§Â$ÉL2Hëri®ÇFQπQ—¸SÖ2í„~£	¡N-.Ñ4äA·ú\&˚ÌüLwU7‘ñ/^Rgâ){—ÚÚ§IÒñ4á´‘i)lp◊9+›ñôUeÆ⁄jW≠ΩŒÈg±§UTX
¸ÒnKÅ”Ì¨≠gªO·X ›ª•Æ÷ÓpV⁄kóZ\ã,ŸÂUÆ∫Üjß%mÜ≈^Âàs’Z YÆ{Y©ª‹QnØ-w∫üÀeÇ≈œ∆¬Ë8´N«≥7~¶'c$9u ¿Öqéã“rî‹déõ¶Â
’\9«y8ÓMéÎÊ∏ôL2.Äìs∏RÓ}Ó:'…¥≤d+e˚dˇXpNnê7…O+Ê)∫èî3îÎï?Ú¸zæùø• TπUM™N’cµVù≠nT_	‘Æ	¸Oê)h^–A›A“ê7áÙ«o
~Úr»°êáö°öπöfÕáZïv∂vãˆqhjË'°ˇKõ∂;¨?|L∏-¸S!PH¶j4ÕHΩ yö=·˝∞
áÑ<a•ÃAœ∑J%Yya”ÄM¡6¨He+òRë˙s¸B°•_:¬¬ÔÒogy\≥‘*Ëv\∫Ö°z%´J„Ω6èÏ&“ÂR$àÒ–œC<ıH<ç¯Ô†7ëñß!8ïí)EO)7(liLDÀƒ4ñâ!ºÅd§Ëë2…ƒñ˛‹ÔHö‚)QOâÛ(>ûÙ&?#'Ô◊˝_TÙU0 .¬+øà*^…À?ó˘åÔ™Ë§_C'kG$‰…±ﬂã;é «„@afcè·4‹∆6√Lîß£FDPVa4àÜçlA´ÿáÌS£IC{ZÍ•9•P¸.Õò%B≥≥º≥h/\.#E¡j∑N-bãTöUÕ0J«yî‡,J‰ÿ£¯«#gw›~˚£vÅ;ìä	L¿MT@	9Ù⁄J¯á[˙ˆıæÈ(Àß)æu?4¯&öΩ6üp√P[è≈ogúªPBô(æbø˛$B«üÔ]ñïS∞8zÍÿèÓ≠73EhÊ;àúçEúπ	5îf·‰ù¢K	;LUB«ïmGO]’Éè˚5–döjßè	V˛/€∫ZØæ>Ô 5∑ó‘îfõh4ÔÁ¥Ö±≈IDÖKn§
’Ï{ãH[yl≈I•p»◊°@*/TCÅi%HYT£ÚE¯“î4Lö≠z¬‡-˝É	#ı≤“}Å?ã»Êº∞ıî°ä˙—…s§J kπﬁ`¶ûføãR;b(DÍMd"ã2œQL—ÿ’ïÛÕªaTJÛ†Û}9®çõa”≤£œ≤⁄ˇùùÓmí6ãHXI)Ìd0PgMß"≤˜”x¥√Ü®oëÑ\ jßË)…ıØõºÒ‰UD∫.¨ôΩ€Ã|:MÑi˝æúb}ÊÏ≤V˙Ÿπ´gè<4i2ò:ô#wyã‰ª§NQ⁄¿”´4Ü≤)}	ΩÆ∆¸Q‘a<&#±jå(‰˛+∞ÍŸ°c’+°4V¡6XÈUî'Ñ>)øÔ©ÃHœ™˝bVÎWzZò7–7"ÚëqSÃ¬âªÖ?Ù◊ÓËµ=m«õÆ´1q#∑“ç†‚Jöÿdﬁò÷fªV£nR	'óÊ&ËÖ>öÇ+ÚM¬çıRé8 æø„‘—ΩèzØ/œ∑-Yd1?¡¶eÍπÓ+S/OﬁÖëﬁGä:Ô`:ko˚åßv≤QT"%Q.≤Ïàæy´Â‘37ïLßC^Ó{ó‹f65¶âd⁄∞Ù‚˝ÂKüﬁ≈∞#Ösß[Kc~nx?ôH√ÑÖ˝RÄ¯¥}Öﬂ˛ÁÜWï“ô’O!Ô0¨,AZÄ‚pX˝2ıEëW…NqîêE9oõê«ﬂ{∑˚WÜÀÀãÃ§°U{©@/lZC+û˝âfS3ZI«ƒ∏FÔÃ∆{–*R2£÷«lÈ‰©«kS“*ˆ∞)ŸZ®˛£ï∏ÕkŒ≥ˆf4B1éïíˇbÂú∆ÒGlGóàﬂÛΩ*mué9fj„…JFQ⁄Ã£‚B˛˘ÂÇØì∂ôY	•ûñ?ÙtÍ1Ê‘&ﬂ~û9A'b-ÎÉ•6´Àm3”.^”ÁaÉ§ûyÌ0JÂ?)§<Î´»uå¶h+%íÇv“N∞'kA¶‹ÖÉ9w1O ÂÒ∂± v`‰˝˚mâÏGﬂè‹i÷Ù˘'S.;ê¡ñ¢˝ìiªtCƒ|1üMb√.6?ïÜö©bu)œúÄ(,≈“à¢&≥/ü◊˚˘'1	cû$Ô’y'¿Ë´Aí4óu‰\ƒHï0ƒÒKK=3πë‚óHøÎ•â,z"‚•<ŒÓ)„˘R=>föñ¿ŒÿJmÑi>ë∆SP›§2fÚÙˆßr∞{@áÙ+wj‚ˆöQ¡£x	Õ˘úÊhΩƒ˙∂Ê©$°‡ZØıöÖ◊˜$)HQ>é◊‹gÄ∫†œ†Éò∫•hÍÜ’kcƒ[|—hÒ{≈∑∂•ﬁ≥˝Ç‹ˇñ◊–HªfydÔ±ºjˆJJ∆;‚+çs¢gïÎ1ù&´ME0n!õ 6≥∆—öÿ(d7Ÿëgß1ŸcEú'ÎÄç≤DÂ}¨•ãJlÁÈ±Ù?æ´<*ä3â3`˜ Kb”ìÉ=»◊ºYI‰Pƒ$´≤àò‰PD"B‘hq„ÅD<"´ÉBWV"Ææ—U|ƒ(h≤œxTO™∑æoﬂÃõÆÓÆÍ˙Í´ﬂØ~ﬂ€–'9‹Cı+/Ÿ‹üÅe0x)”d≥u∂ü'2É=äë%ƒ ó Nƒ$yá«)jål6Òê•ò9Gˇ≤ô3)fà°%ß*»õ`ô’3ê<-Å∞L4Ú Ô‰MfZ}7ôx˘MeK…!¶oá¨ùXA{ìN›X˝Z1[vì›Z!¸¿o&d+nä€LÃF?	ﬁ◊ˆÌÑ_B-:†C4˝Ö˜Ì¢§)¢≠ÿNóàväzmÌÿ%Bˇ◊ñ˛à0ÄñP+*¢Hœ∑√yFwˆ¿®Œá◊pë^YÕkRêΩ¥üë‘6,»C¬QAQ∂5v!/<?s!'<r^FÇw≤X^,÷^ÿ»rÎ©U#ﬁŸíVñ¢á$>πÆ†ª÷˝Zÿç€Õ8ˆyWeÌÖÔ›o§–∑ÊK >^≥ñÌ{1R9§·bxÓAö–a˘L.!>”„ÆFm°8'Çk∂"“πé¸ØrgªGGßH¬ÉÒ~•èåzL„1√Yô™Éc=/Iûh}õP[Æ:”‹ºÌ©Â«›œ’uﬁ∫∑ŒøDb@í€©¸P ∫ßîöëÃ2ÇOz@Ø©g˚Û£ÅG,¸JØ¥¬1x'ŒïU≤j'ÃÌîdÍ]≈_QÄN8ßÄ”5Iˆgmô¬à∂ﬁ† ¥t9@£Ù◊ı%Û¯ÅRè»ıÏZˇ(§èñTÉ÷;@Üñ‘
åîã9j≥ëJ1«Ã,ÊG≤CRJ9#è>r©’Ù±ôíÕ‘Ãµ· ÿR˙(ÑY˛ê√l£Ò2F√evfÂCNdx6æ˚ï›ŒèÌÓø≤˚ÿ.´ÛŸê
öÒÁHÇúïK`π8⁄7!pz¸ë∆∆™“K≈“”µ[ÎäjˆΩâu‡ ﬁ<|b[ªÓi]VBBŒ˙9üÍqfÁ˘	™W†÷_4<øÖA•≠≠íê∑%ª8{[∂#ÑÛ˘G6;„ü´üÃπMÚl8é ∆âYíf.5 ⁄!∂±∂6i•ﬁæEj∞âtfô¯¥£˘ÓΩéXoÔêÿ¿†êÊßíêã!X&2Q‘t’§ªz1˜¶BaËî~(!“æ°©íıFÿÅ·<-ï(´\UµÂ`YΩ"D§`P=zË0	Ω∆“‰çá°cIΩÑÅ«)¯Sµ£¯»ı1ã'ÎPıÓ≈Áœ€.ÇÍ˙˘’·Â˙ˇ»ïBRÆ·îÎr[Æ˜Ó⁄r
¥Â
›÷\-)—Fæ19¥⁄WG¬Fã<ÜÍÖ&ú	ø¡ùÌeÊ…ƒk¬¸çgÿ´éRÔ)g˘åÆöóÆCÁ?ﬂ:´7…ª˜©!ûÿx0Ê¨¡k,$¡X–4ÉpVR∂¬D—§ﬁ]˘Ù ˛etöd§≥»j¯q‡tó¢√`v∞LÀ†;√¿	á’_,Æ:ZπyÛQ	Ï’[m…–·ÑEÈ8\üNL„jÕ\L¶”!ÈÿS)\≠5Ë°tQ™EpÈ=‘q´7]–% crH¿!bjöÂ≥â[†¢ÆE2¬•i≥Ôµºµ>Aç⁄wVèÒN>¯’«tz‡q\LÀ%›Hì“˘:DÎÖáÚ:QkÇhÅƒL·î·pÄ÷– »∞Ñﬁ\˚€KßHÿB7,jRU˙⁄Ä·„„‚WJF=‘
 QrØ1‹°¨…˚Ê)◊–!‡
”H§ãlo!±ß¸t‡Ω2q˙Ü¨YÎ>2ôr$‘™7WT”ADY;∏ÈÂJWˇ{ OÎW —ö£-?˛é¬0ÉÉµ<ÇÔàw8$¯Æ≈8Nvß÷‰,)>¨g˙&R hPC\Ãñº—ˆsÛö~¬Bø‚aò◊i¥Ûõí8cæÙM˙¨ìﬁ:∂ÍTΩë∫naàRCoù¢≥IwÎ…ˆ¶CòÑÌ÷;dﬂ8ÀÏæ≤|ÑÍ*4»&ﬁ¬2U¢ê˝!K‘B√@’6~√Må(áZ(˚€2	ºÓ¬H‰ﬁ°Üµµ¨QZ+∏@’„Âın™¨Ä£P85¶ƒ⁄¿IˆsB◊ÁJhâ»22Òé›H}¨É…‰Ã+ƒ‡–0tJLnX$+«√¨â∞çñÎ	ûË	˛Ëó≠§#îZwj/~÷Ú8KBiMı'Î´ı0Q-.2dl1ËFÃKú8ÉjynÙ:ÉÎ≈¨ÎÑßZıgƒΩï0IDa«O1∞Ho¡‘Ù‡Ωfúˆ9âÁ›‹€€ÛJª7õãNü˝€öŸ;Ÿ…I˛{]X®#DåHBoÔÀI0(Wc2πÔÚ˜Ê/w_óêzÙÙI£à˘T‚ã‡‘^πF¥·Ò#˜ECâ+€äj$pRW§óÈÊÌ˘R[Ij:°Lb]FlËA%uî'vZ»ñ∑ki^∞ú|Áƒéö¥§Ó¶mtÁïöNw˙§ﬁü∫œ4T3í¬±‘ﬁ™|K§‰Y÷fπÜcGK≈ô∆ì3ª÷ÄÅM@{É™Ázà”¬R·1lé¯òcfs£IÊ¢ÿ≥IÊ*€sBˇ6”Öô±6µ{.v—å¥,s Ev—&p∏íáL‹ÖX≈A&O§Fpê√„f®"ÈN¢me;ù‡Ï*ÉAµ∆ÚG9ùÕ_‚[í√Y<+{rñpâCNÇn’Jìiï]’∆˙/çı∫GçÂ=T¿”ñAÖ)§û™¥Òˇê/‰Ç˘≠¸ÄÏg<ùoÓC'ò¡^!U7‘xõ»g¸B§xQ»™€±TÏòV¯•ÔÏ4ö/æ∫ø‚Ôeé◊à ?öånÓB$T°€ˇ~n˙ÇÇÜÙáLä°WÆ'ü~S§aETécÑ¥•ó;¡Õ‹HéÂXÖ!ˇÁçrE~NC|®%ÏâÚÑf˘âh•4'FêÂpùlMl,|q√~K¸~úø§Béî‹.Qzˆ®¡’	˛5Óæl"?/ä •Sπ¸endstreamendobj133 0 obj4370endobj8 0 obj<</Type /Font/Subtype /TrueType/Name /F1/BaseFont /Arial,Bold/FirstChar 32/LastChar 255/Widths [ 278 333 474 556 556 889 722 238 333 333 389 584 278 333 278 278 556 556 556 556 556 556 556 556 556 556 333 333 584 584 584 611 975 722 722 722 722 667 611 778 722 278 556 722 611 833 722 778 667 778 722 667 611 722 667 944 667 667 611 333 278 333 584 556 333 556 611 556 611 556 333 611 611 278 278 556 278 889 611 611 611 611 389 556 333 611 556 778 556 556 500 389 280 389 584 750 556 750 278 556 500 1000 556 556 333 1000 667 333 1000 750 611 750 750 278 278 500 500 350 556 1000 333 1000 556 333 944 750 500 667 278 333 556 556 556 556 280 556 333 737 370 556 584 333 737 552 400 549 333 333 333 576 556 278 333 333 365 556 834 834 834 611 722 722 722 722 722 722 1000 722 667 667 667 667 278 278 278 278 722 722 778 778 778 778 778 584 778 722 722 722 722 667 667 611 556 556 556 556 556 556 889 556 556 556 556 556 278 278 278 278 611 611 611 611 611 611 611 549 611 611 611 611 611 556 611 556 ]/Encoding /WinAnsiEncoding/FontDescriptor 9 0 R>>endobj9 0 obj<</Type /FontDescriptor/FontName /Arial,Bold/Flags 16416/FontBBox [ -250 -212 1148 1000 ]/MissingWidth 319/StemV 153/StemH 153/ItalicAngle 0/CapHeight 905/XHeight 453/Ascent 905/Descent -212/Leading 150/MaxWidth 957/AvgWidth 479>>endobj10 0 obj<</Type /Font/Subtype /Type1/Name /F2/BaseFont /Courier/FirstChar 32/LastChar 255/Widths [ 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 ]/Encoding /WinAnsiEncoding/FontDescriptor 11 0 R>>endobj11 0 obj<</Type /FontDescriptor/FontName /Courier/Flags 34/FontBBox [ -250 -250 720 1000 ]/MissingWidth 600/StemV 109/StemH 109/ItalicAngle 0/CapHeight 905/XHeight 686/Ascent 805/Descent -250/Leading 324/MaxWidth 600/AvgWidth 600>>endobj14 0 obj<</Type /Font/Subtype /TrueType/Name /F3/BaseFont /Arial/FirstChar 32/LastChar 255/Widths [ 278 278 355 556 556 889 667 191 333 333 389 584 278 333 278 278 556 556 556 556 556 556 556 556 556 556 278 278 584 584 584 556 1015 667 667 722 722 667 611 778 722 278 500 667 556 833 722 778 667 778 722 667 611 722 667 944 667 667 611 278 278 278 469 556 333 556 556 500 556 556 278 556 556 222 222 500 222 833 556 556 556 556 333 500 278 556 500 722 500 500 500 334 260 334 584 750 556 750 222 556 333 1000 556 556 333 1000 667 333 1000 750 611 750 750 222 222 333 333 350 556 1000 333 1000 500 333 944 750 500 667 278 333 556 556 556 556 260 556 333 737 370 556 584 333 737 552 400 549 333 333 333 576 537 278 333 333 365 556 834 834 834 611 667 667 667 667 667 667 1000 722 667 667 667 667 278 278 278 278 722 722 778 778 778 778 778 584 778 722 722 722 722 667 667 611 556 556 556 556 556 556 889 500 556 556 556 556 278 278 278 278 556 556 556 556 556 556 556 549 611 556 556 556 556 500 556 500 ]/Encoding /WinAnsiEncoding/FontDescriptor 15 0 R>>endobj15 0 obj<</Type /FontDescriptor/FontName /Arial/Flags 32/FontBBox [ -250 -212 1211 1000 ]/MissingWidth 276/StemV 80/StemH 80/ItalicAngle 0/CapHeight 905/XHeight 453/Ascent 905/Descent -212/Leading 150/MaxWidth 1009/AvgWidth 441>>endobj16 0 obj<</Type /Font/Subtype /TrueType/Name /F4/BaseFont /TimesNewRoman/FirstChar 32/LastChar 255/Widths [ 250 333 408 500 500 833 778 180 333 333 500 564 250 333 250 278 500 500 500 500 500 500 500 500 500 500 278 278 564 564 564 444 921 722 667 667 722 611 556 722 722 333 389 722 611 889 722 722 556 722 667 556 611 722 722 944 722 722 611 333 278 333 469 500 333 444 500 444 500 444 333 500 500 278 278 500 278 778 500 500 500 500 333 389 278 500 500 722 500 500 444 480 200 480 541 778 500 778 333 500 444 1000 500 500 333 1000 556 333 889 778 611 778 778 333 333 444 444 350 500 1000 333 980 389 333 722 778 444 722 250 333 500 500 500 500 200 500 333 760 276 500 564 333 760 500 400 549 300 300 333 576 453 250 333 300 310 500 750 750 750 444 722 722 722 722 722 722 889 667 611 611 611 611 333 333 333 333 722 722 722 722 722 722 722 564 722 722 722 722 722 722 556 500 444 444 444 444 444 444 667 444 444 444 444 444 278 278 278 278 500 500 500 500 500 500 500 549 500 500 500 500 500 500 500 500 ]/Encoding /WinAnsiEncoding/FontDescriptor 17 0 R>>endobj17 0 obj<</Type /FontDescriptor/FontName /TimesNewRoman/Flags 34/FontBBox [ -250 -216 1166 1000 ]/MissingWidth 324/StemV 73/StemH 73/ItalicAngle 0/CapHeight 891/XHeight 446/Ascent 891/Descent -216/Leading 149/MaxWidth 972/AvgWidth 401>>endobj21 0 obj<</Type /Font/Subtype /Type1/Name /F5/BaseFont /ZapfDingbats/FirstChar 32/LastChar 255/Widths [ 278 974 961 974 980 719 789 790 791 690 960 939 549 855 911 933 911 945 974 755 846 762 761 571 677 763 760 759 754 494 552 537 577 692 786 788 788 790 793 794 816 823 789 841 823 833 816 831 923 744 723 749 790 792 695 776 768 792 759 707 708 682 701 826 815 789 789 707 687 696 689 786 787 713 791 785 791 873 761 762 762 759 759 892 892 788 784 438 138 277 415 392 392 668 668 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 732 544 544 910 667 760 760 776 595 694 626 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 894 838 1016 458 748 924 748 918 927 928 928 834 873 828 924 924 917 930 931 463 883 836 836 867 867 696 696 874 278 874 760 946 771 865 771 888 967 888 831 873 927 970 918 278 ]/FontDescriptor 22 0 R>>endobj22 0 obj<</Type /FontDescriptor/FontName /ZapfDingbats/Flags 4/FontBBox [ -250 -143 1219 1000 ]/MissingWidth 815/StemV 127/StemH 127/ItalicAngle 0/CapHeight 1208/XHeight 1186/Ascent 857/Descent -143/Leading 308/MaxWidth 1016/AvgWidth 695>>endobj26 0 obj<</Type /Font/Subtype /TrueType/Name /F6/BaseFont /FFHDGL+MonotypeCorsiva,Italic/FirstChar 32/LastChar 255/Widths [ 220 280 220 680 440 680 780 160 260 220 420 520 220 280 220 340 440 440 440 440 440 440 440 440 440 440 260 240 520 520 520 380 700 620 600 520 700 620 580 620 680 380 400 660 580 840 700 600 540 600 600 460 500 740 640 880 560 560 620 240 480 320 520 500 220 420 420 340 440 340 320 400 440 240 220 440 240 620 460 400 440 400 300 320 320 460 440 680 420 400 440 240 520 240 520 750 440 750 180 400 280 1000 460 480 340 960 460 240 820 750 620 750 750 240 240 340 360 600 500 1000 440 1000 320 260 560 750 440 560 220 280 440 480 600 720 520 420 360 740 260 340 600 280 740 500 400 549 264 264 300 576 500 333 300 264 260 380 660 660 660 400 620 620 620 620 620 620 740 520 620 620 620 620 380 380 380 380 700 700 600 600 600 600 600 520 660 740 740 740 740 560 540 420 420 420 420 420 420 420 540 340 340 340 340 340 240 240 240 240 400 460 400 400 400 400 400 549 440 460 460 460 460 400 440 400 ]/Encoding /WinAnsiEncoding/FontDescriptor 27 0 R>>endobj27 0 obj<</Type /FontDescriptor/FontName /FFHDGL+MonotypeCorsiva,Italic/Flags 104/FontBBox [ -250 -303 1081 1000 ]/MissingWidth 288/StemV 64/StemH 64/ItalicAngle -11/CapHeight 790/XHeight 395/Ascent 790/Descent -303/Leading 122/MaxWidth 901/AvgWidth 350/FontFile2 137 0 R>>endobj137 0 obj<</Filter /FlateDecode /Length 138 0 R/Length1 140 0 R>>stream
Hâ|VXT«˛œ‹{5®4±„›≈ªvA4±!äΩÇ
íÆTë*®ÿQ¿ää5jD±EQLÏ˝©±ƒ(÷£∆-^4—ß±‰%œ˚Ë«˜Ú3ÛÕùrœÃ¸{Óˇü≥  ’ë	ÉÉº|€FEÒäô[HXú)ÒÊñi<$@◊=lRäz,:Ô'¿!ê7D&F≈içˆ é.<çäù9¬5g'‡î¥ma
?Ÿ_¥zl‰C>àÊÖÅU˙¸&œG«•§ñ9.€ Û@µîÿÑ0SÀ˛qÄ‚gJMTÙä c{5ﬁ·ˇ≥zîÁÅ∫gíSäÎOµqã ◊Ëƒ	â+ﬁ§=$+H\°l(|÷:•≠ΩáÀ{¢Gà.’tqÂ@Ã√ˇîAÅÅ ®ØÑí^˙/uCE¨
l¥›™x-@Ω{çGTèõoπ6,¸RíùCï™’ﬁs¨^£¶ì≥ã´[-˜⁄uÍ÷´ﬂ†°G#Uol¨õ4m÷ºEÀV≠Ωº€¯¥m˜˛Ì;tÏ‘Ÿ∑ã_◊n˛›{ÙÏ’ªOﬂ~˝8x»–†‡a!~4¸„#Gçc¬ÿ∞à»®Ëq1„c„‚ì&$ßLú49u ‘i”gÃúï6{NzFÊ‹yÛ,\îµx…“ÏeÀW¨\µ˙ì5k◊}∫>g√∆‹Mõ∑l›ˆŸˆy;wÂÔ˛¸ã={˜Ì?p–·#Gè?ÒèìßNyÊÏπÛ_]¯˙‚•ÇÀWÆ^ª~„õoo~wÎˆùÔÔö-V[Q1d•)ˇ“ìÃ&¸0ìf—r≤ã‚¢∞H3•ÖRñ¥I∫*; ÅÚH9T^ÊëÈÒ\≠•z®’®z´m’N™ØÍßˆTg©[’Ìjæ^—ªÍ›ıΩQﬂZ?ZøJø√ :CMÉã°ñ°û°ë°ô°Ö°Ø¡dàûNûzö–5'ÕM´£5–k-µvöØ´•i⁄|-K[°m“Úµ}⁄1ÌÑvN+–Æiw¥{F_c7cw„cò1“8˛IïßU^	ªΩúo»e¸/≈Wåˇ6„œ`¸K§-2…5‰!Úh9€#Õ„ôÍ™÷V’
¸>j«J¸[˛ÑÑ>ªø3„Økxãå!ºø˙¸É+Ògkπ⁄ŒJ¸óˇm∆ﬂ©Ñ1Ê	û‚ŸÌˆ¿Óf_î9ØsÀ‹ \À\ úKm•÷RK©π4ø‰d…–7‘, ,Z]\µ(≥ò~®VîZtäW÷9u.j]‹ŒcõR‹∞Ë©mü-◊∫⁄∫Ÿ J≥n/ﬂe”[ì¨°<Û∂ÿ¸m>ñ`Kê•ø•è•ß≈ﬂ‚gioÒ∂4≥,5ÕØÕ/ÃøôüõüîÔ2öØò/õœw”Ã˚Ô∆òÉÃÉÕÅf≥∑ŸÀ‹í#GÂTÖêNTm“õˆ◊EDãX1ıO´ÒÔ≤Øx\ﬁD»€Ÿ–ø≥˝øùÕEÀ q”ø¥p;»«d S¨«j¸ÑπXÇE»A∂¬	9:§cû·9„Ã'	V˛h∞ˇ∆Ø¯õ±qüc,¬êçp _„Æ·2Æ‡*~F$æ≈u‹¿à¬,√w(ƒMD„!ab0„áXƒ#	HB"& ëÇIòåH≈TL¡4Ã¿t¡&Ã¬LVÌl¸èqåÜR)§#™ÇRîQ0£˙vU•jÙáÃèh8}L#h$ç"G™N5®&ç¶P¸/hôh,ÖQ8EP$EQ4ç£O±GÒîÄó∏EN‰LâîD(ôR»Ö\i"M"7™EÓT?†ÑÍP]öL©TèÍSöBSiMß4ìíˆ`/5"ïcLÈ…@û‘òf”º¬k¸?íFFjBM)ù2(ìÊ“<öOh!5£Ê‘ÇZ“" ¢≈¥ÑñrÜ8N≠®5yë7Ó·>-√m„.Á@äp6Ï√~—õ:·„úËÉ8àÛòÉ3òáﬂE?¨≈/8ãmXN˝∞îàHÉ(@d‚®Xàop_íLCƒ±V¨ü*úmÂ8…õQ]Í«:˝ﬁæúü˜∏⁄À`¨ò`(Û¥[≈jŒ™gôW]ÌèÂΩÂƒ≤?I‰ú˝EÑ”ÉøÁÛªä·ˆw-bŒ`•1ìõP{t≈
J¡ ¯‚(\–ã9÷Yºø3ˆ:1”v‡w¥√ŸC&§S FqélÅËçZ‹{°#B°1ü°|‡è°à°g“D>9ïŸÏéŒË¬\]ÄïÙ@¨Tˆr’°Û=ÅÎ6∏¢6gñÊs€dÛw9"yJ–åoËƒ7öX-Ò¸U÷!èYyÄ£˜qCr`ç≥z"êoÀ™âfçÃ≈rú'fèÅr®êäÈëh-≤ƒK)û£º"◊ë£‰]  %Y…e*◊VF{>i0Ü±&Ss*´f÷c#Îv>„ﬂøãı{òUuú3a
Y/f]gVG:ÕÓ"Dlß≈yq_rñL“i9Áî˛r∞ºI>¨LR≤ïB›*›#éÅ2jÚ?ö∞ü¸–ç}<ú˝«:NfıŒÂ∫Ä#Hﬂòœj8à‹ÁhÛø∞n›©ı‚¬Í•<:BGÈ–˙ï^ã™¬[t˛"íÎxë$“òó€ƒ.±ü3]â∏/ûâÁÏ_©õ‘K&%K•“i∑tJ*ë~î `œe_π´ g ãÂ=Ú	˘ä|S~!ó)Pj(ÆäóÚæ“O	RÇï·äIIQ¶)´î„:“5‘u“˘ÎL∫£\≠~”˛Àwµ7q]·swıñ%≠d…ñëëWZK$[~!Yí-ñVÿò†NëpD%∆Ü45Ñ7°8mß≤°-S:°Id:MÀäGê°Ä”∫”$–tB$SËêŒòL”¢ô∂c¬l˜¨åËèÓjÓú{œπ{œ=ﬂπﬂπzK%WqËˇoëÔû~vP·}ä#∞ëºåª<Åı‹Ò€ÿ^Öb/Ù¿M äô˘)æÂDé—äÉ@ †≥Ò:yÓT¬~Ú’C}à:9π^düù+rœˆ'»`†Ó∑ö»nÃÈ”pçtbˆ¶ê¨T~G>DÜÓ¿ï/√9|Ø„¸˚D#ÎB6ﬁâº~Æ‡Ìq∑⁄âïÓC&>Ö(<¿ıd¨Ñ/Hf‹:‹ﬂ ®0É>#a‰àFdK˘1˘
~M~DJ†9K≤
ﬁ°Ü†ç)ÖÖ>5L◊P*˘6≤	Q≠pè˙=πÅπålÄ)yÎ∆ü…-dª‘ uµ+…:Í$ıÚ2JøÅ<|˘}rá|FŒ#7Ωâ5b!9Æ|}•‡6©¬àƒ·oXj‡}J0ü^Ñ~>–hnjl®˜’’z=K/™qª™9ßÉ≠≤/¨¥-®∞ñóYÃ•&#c–ÎJ¥µJ©êÀhäÄW‡‚iVtßEôõÎË®ï˙\2O§Eá‚O€àl∫h∆>m…£eﬂˇXÚsñ¸cK¬∞≠–ZÎeéˇ„ÿ<Yø&ÅÚ·ód≈BQ~∂(À‹≈é;Œ`kåIöƒ¯Ó˛¨êé·˜rZMîãn÷‘z!ß—¢®EIåsÉ9Ü*.Ñr®tËï∏Çã	b'ì\ióêŸ$Æ^ìb6á#YÎIt#◊+◊.<EàóQQY\Üê∂#lŒ;ûÕ3–õˆîl‚6e^Hàt&)≠aÙàÀπò∏|ˇ§µ÷õ'ß∫¢:ö'–ùÉ≥CπŒ°X,)≠fä&Üü4∑—Y¡:¿J›lvòæ&Ò§÷!µ…$~¥÷€µ6·@Ø9aîï∂±6Q‹~îX}Ë§4&msn√õ9AIoeE5◊Œıg∑¶¨Y÷Ósú]∞Çõ˝Vl∂;¡9ƒàçKfbï93d◊Ó;◊…≥ùOkjΩ9∆8ÈúﬁH(—=)l~¨+JEsIBØÁCM$è∏NLë›»¢'	N§\-R≥π≤[–ü$¡à`¸“Y&$!w·›;{0∏¬ΩßG2èF.Ê>H¢î.èSıÛ≤ËÒàKñHô¢å"¥ËŸ3≈˛“ZÔn±ãdX±C´8)Úa»	Âë<Ωÿá÷$Ê˙,Ù⁄ŒÔÛ$E*-i∆Á5ñÁ%Õ–ºÊÒÙ4áÈ|æxm∂à*˜„üÅ)+˙C")˚?ÍÕsz<>õì…]Ÿ’	w&;bsß≥£IÑ&éG1õçsl<õŒfÚ≥CΩÀpŸ\WWvPHœo)?;>b˘—d?¡†äMs—K£	⁄F%Á$ F'kÅí¸¿2Xîï‡∫ ª €X†^∫Ÿ-êﬂ¢«H¿7sóπ©m®wF6RQ|»“„y9^ÙXŸ8P≥«g+‰•≤¥C±ÒıÚ.°Gÿ&F˘¶Œ0’#{€ˆ∆(∆_ﬁa`!âú‘
f≠Vp
ì'_Òjª”l∑;e]û\9àvËÚ‰7|i«ÜÄrYm=Py¬TΩ‘ô
Á…Â≥⁄î'>^ØBÔQèERJÛÆ=O˛ƒsñéÉ°ÕI‘Zù¡π4éDµ–‡9\3Ã4∞ıÉ≤ÜKdÄÏ„KxÀjK⁄2h≤»-æÌìS©ÈI£©<h4ôIf™ ë¬◊SççÃd‰ÀBS3=…PÂ+‹eZôÇ)8,ØÛú÷◊Y=ÚÉÃƒ031°üòÄ∫∫Üzí⁄©Ì—ØûèÖRIóR¡9k‹úSÈ¯n%Ö]˜“fScyYSc¿O †PÍâ≈,Ò˚úÓ_ÖRK–àòPíy©¶⁄VÿP±d]ï≈`‹ııLa[KÄµÍ≠≠ÊËö◊E™/<hÎÓ÷ÈùVÁ‚Æ—ˇõªÌ>è]∑™vE∏fÊ^}˝!˚ÃÏ7N∏ΩAZ°—≠˙f€1¢òyÂÁß\øÚºõèﬂ(3€∂Ló±ÃŸ‘‘1‹c’i4jù˚¿”WgzK±l˛ÙÚiÔÃ˜i,f?ò˝ó\/√Î‰s	ÔoÓ"ã
EªÙ
4Ω>2ái—%X|°ˆÂÇÕ÷ﬁô©W’7˚aﬂCHI{Jë'qæ.–”‹Ï/…8)ø
·U,
Ö€⁄ÖÂ⁄ïøïYπ√Îu©≠9F}‘≈Ï˜πà+O˙x-ÿY;•;QŸ}RRÖTÅ)0ìE¥∞	ÀÉâåAﬂÙ"ÁìpF¶±ö$ºÒ7¨™+¬¡ 	¡Ñ-Éıêí PH£i3b'£,Ê≤Ú≤r;ô«»T›‘(¶¥£JOA@ËJÁ¶î*¯"hÿ≠#‘˜Jvº∆1˛‹πWá.Ã‰/ZÃ%ãÎ ™ Çª>"É=˘ªCâæ¿°o‘µE˚û3$k~¢Æ(Ul™©∂8÷/;s.˙m˙ZΩä›πì€ˇ|ˇ{3ˇq/≥1ïlï≈Rujˇiæz§/ÛéGÌkÒÉC*ö	(í«)¡Uj(ü9ˆ—…ÓFÆÏÛ◊€øÂF:öòmï˝ˇÿ∏†#G‡
U’§ØHF2{Q◊gUdX zô‹7ò…^]M~´5;™«H*}ÖûfÑ`ºÃÙT+¶>˜Dú§¨.G
KôãO!;ÌóÔJÓôÖ¸/_=s‘¿ËLØ‹ª˚„¡ª$Òn8Tq!H=\Â;¸ùf∂|˛Èùõ£÷ˆˆ¿Å…ü›"gÔÈë˜¸¬ëŸ+d≤Ûx-ﬂœ3*Ã±Pã9DìPK® /˝óÏjèm‚æ„˜ª≥œèÿ±sÁ¯øŒ±„\¸~\Ì§¯1éâ!i‰·‹í†,ù`@†∏YÀ»V(Î⁄UY∫TiÙ9m%Í¿JUFYãJHì∫∆∫•ô™auEõ6rÏw6–¥ìN˜”˝Nw“˜˜y}ø¿;≠wNÜê8Œ!8À÷UÖs°±Ä|^ 5‰UCµh L˙@¢IROTWÓÆ´ﬁW˜±](÷UÊç÷∂∞º(T ﬂ*™oA˛‹Á
¨∂$M–u—R.¸;‹ezÿêj*ZAåcÂcBüîoˇ	moN˜nn˛MÛ∑Øù‡/æ5j#kı—PÀe∞„œ@“¸€/E&æ=‰Ì◊ı{’5°TÆ!$ÿyZFÌ|äˇåøˆ|’≥¿¯˙u†zïˇ˚MÑë‘◊Æ›Ú/¿Ís¸Ø_·è?+óbA±÷Ë{à¡Z}ïöD ¿ñoä∑ä~âdêl0Ÿ6ÌB›nó´èàk"Ó"ö,TŒ1o—ÂÙcVãﬂí¥¥[,;-˚-ã••	∑˘T<Æig¡{pÄlU=>‘:€ÅkVÔò¢
®ëu∏‘:}\DxΩr{âª	ó®U.∞©Uæ˚ÈV–˙÷/àv©(pI¥~x¯j~°t˛·VÙ„eÊñ$i.,®∂d∫_„ÙÕ“£Ñπo±åƒÖK‰‡K„µ aõ,ÀˆK~ä√1Ò°ëß¯ÖS'w6Ôe|µ~ıÉ≤Ø3Í—8◊πÕ°z]ÁãÓŒª:»XìÅ-Õ?Hø˘Õ…À`˚±ﬁÔÓM2òŸÔú|Ï˛ı3oœQé"ÜqPäa‡‡ﬂ‡Ø|?2π1[p:kπ«˛t	/öMêÆ °Ôº+—ãpÃ˝úeÏ1Êf4.t˚ô∂∂YB#ì%‚3¨RhT*Ö:ù°Ïä≤'‘íh<œ@hÿ
E^•íD◊LßG<(ƒã∫ÿjäãb–“∆⁄9ìÕ∑¡‰Ño†ï≠`å”÷!ñîÇ)§ ~ÀÍ€&d
ï⁄NEôDõú≠wÌÄ¿	∂ ™NÓ◊ùü+¬ƒ\Ç0úí∆e!4af¬t÷‚R…f˝•ÂPì"ó¬*.Øï05≈ÓÜg);W¶$)æãñ{\1p‡+C‚l«1C¨e'æ˚=éi‘≈√ ∞âNgc¥œYœﬂL∑µ<=ø©´ëvË›Éï‹√[ﬁˇ¿§Ø5S°W_Ï‰∫ê˛¥˚¿ÒëûáâjRmô«ﬂ®≤∆)è7éK$ïè\rëÑˇÁdoùπﬁ@1vÚ6¯Ï8–e¶Î5µkÿGÁj´ü·èê¿ÒÈ»⁄`Ö˝˚ˆ'®X.8◊ìwäÿ%—,B!≥q±L÷g0k≥Aåúbûêqjí#Ê’rgÕ;‡ÕÃ9 Áòá.&ñU(fã’!á mú#ßˇBQH∑≈í@ n	ÎWƒ•QJ É'¬H≤	]≈*@∆HWŸí∞KUªjıj≤ﬂí_ªMmLıÔﬂ™ÿØî™®Kjò¨Ô˘ŸèE≥1Iu•Ÿ…øºõ«tX »p2Zeí»âÌ`rG´ô
ôH$T	¯"vCÙ‚áUF€É@¶
)Ü 3&Ω∆d“#>ìYèπîR%ÈrëfŒGéH|ò”õ0Ñ∑ÓÒxêy0Ä»°Ê˝%ñA'JÑ°≥[ı8±¢@!ˆ^p…ä¶™§yX#aÓˇ£L8Ñ›»t>óﬁ?15ºœ©s∏£ñzá”H≥√€ª≥ø7Í›& ;;Ÿ˜ñQ4sîøæ¸Øˇ<˙ùæò¡ÂaT’j„Nê 80Ç :Ω…£ŸË^’4zñÆÅïœÒÔ„#¢óê>‰´ü¬Oe—∂¨Õf°2äöâ0öHÑ!
®{N9d(†Ä%| ◊ä€r÷¨?ãf≥æLsjU÷ÍŒ’Â}¡\† Œ±ü‰ê˘ﬁÕ\˜Xoû·Z1˜T›	
?f≥Q&ì≈µ…`†1µy™˚7¿ÅtÇﬂ!"pqTÄï≠–&«˜¥kÅˆπ4Z°ï]Z∫µT¶‡∏s†Ñ·¶@ù‰¯-})⁄ãMÇ◊.ÌQ>ÔiX*4∫Bk¥¶Á¥â¢©F
zJ/ÄΩ+dôê⁄ªfª'Gp√+5AÃ}}óhg [	ç”ÜâZn|°}ª¯Æ¬⁄⁄˜˘âpkoGW◊Ê.°$¥z«ëÌﬂxÌp¶e]ÛVõ¥%¶‘+5b˚É¨ßÎ◊¯‡]t”æãèÙtu&kTÉÓ’LU«∫˜rØË$ûÂDÁF—åA”‘~u49√ˇÌø===Ö⁄Æk¸Ë„ß6Ú€Ú—4$[Ä\”z§¿≈Ü∆å±Œ©5yVÖ]ˇÀ_5Of[‰©}@qˇﬁù3≠Ë3§¨f∑ebô›~,‰˜yh:†B º;AK†4A;Ë Õ“Ù =JO–≤£Ù}ûæFˇÖæI„Â˜!∫ôÓ§∑–ªÈ«Èghy$ëòIg5Èt6¡ËÓ£¯ﬂPAÑJi‡ã@ Â…Nê≤Pœúñã¿qÈ4=ÔAy◊vVãœ"˘‘*.9÷4¥:üûOp)˘™©d≥’âP"çE⁄'ÄÂ†qœ lÆœÀ"ÁP…¢:(h+Ã˜èÊËc†Ä÷üde@ôQ\ÜVØ^‚ ≥‰QâEãK¬ÓÙˇ‰‚bQh∏KA0	Á%1ò†ÒOJ«Ô' ‡∏]áp‹§êÓFπì}<2∆±Ç*•Hp2!Fÿ"	6bP˛*ä¡4√ﬁÏ0û;ìciªﬁÎ1˘√Îß∆T=≤+Vc◊π-ûi†:Ω•√øX¸˘ﬁT˚>yï>õ'îa≥g}2ifö÷ùØ|π^·ˇ¡{¯;ﬂÚ⁄LuT(¡'üÓÍ€L’ÍåéÜ∆áv_›à>âÃ∂,«Å˙›ñs¸º≠n˝6Bëê…§öˇ—]-∞Múw¸˚|æ≥c«Á˜;±}∆èƒql«vúw|¡	‘Å†Öƒ1ó4Ö§	·iíb ©¬264öñµ–!4MI´Õ	PFi)è1hamëZ1Tc[ä¶"§IãΩÔÏ∞“u≥%Î¸êuﬂÔˇ˚ˇªøÖﬁÛı—o?Lﬁ@ÕÈ”‘]ºí{ê XiÖ∏®:˘ „ÀcB]Ã√Ö‹?	›”l°ô@Ñéóçól†‰∞âEm&fÚ
†6lhÎÂuóí_é_ôæm˝/ù€¸¡ûUg∑ú·ÔΩπ˚Tr◊)>π {'ü˘IÚ´ﬂ˘p,:Â.´◊˚RE‹10L–Å∆∫’≠√0nª√¡0ÜNÜπ0Ëj°k4]SCSe<&øè`L∞†Ä*”%†õVîz_‹”^/≠d*&\—≤ˇDãtŸNqÿVW‡Ú˙ËöêPXY°>!∆¨≤M÷	ÿrøóΩÉ”è£–˜ò£G3Ö•éå∑ëÆ>+F‰áx%“#ñ4ÃLW´™·”eÌâ¥†úêÜ.ùˆ~†F¨!Œ46ŒÜÏ=/jsÎó—£}{ˆKNûpUôTkﬁæ˜ûdÜRoh|ç
ÌÇÚsŸ˛ΩÌùŸ]∂ÄyT†Cπ¸t!©õ≥>yü¿Êº”Ÿ±ÒW…ôBãYe8¥˘ÎìèÁokx·ÙKXÚbcÉ<ßT)®ã•¶¬Ìú&áT¢egÒAÚ
1Ãmp6›◊zòû÷0¿‡k£Ω≥¢#—ÉQ¸öÒöÈÖ5G·É–ÉËﬂñaG£cL"îàN.ªΩºå◊ﬂr§få˘˙‡BÙ~à7v◊uE∫Z^ÆÎèºŒ"F sr`é∂»
π\QSW◊aë#W‘a5å/¡)§%Ÿ&ÜaånB7*≤Y◊
∑/a]KëçGâ8÷ŒègãrF≥µQ;ËxÒ={gáI¿K¥'‰
ïVóc¨©ãê1È)∞ƒ™´#[3øW∞iÒæ˜r¯LÏgÁ.π˜ﬂìGﬁìû}®y|›	ô™dY"©DöÛƒîêö§˘ÄÿêëÙàÅ≥bˇgŒº[ÿÕ…∞Ö¯AsK˚QH-˚ûf≥€‹–Ãπ=Ï…u÷BV˚¸êsa∑xÂ’Ô–i≠¢éùŸÚyjÀ¯H¸Õ‰çWÏ2£*‡Éë3„˜ÆO∏D ÇéUôÁıRÆ—P€{⁄O©6VZ≤¥Yú È)û∏à‰Ò‘•9˙ÇUwè\&Éh±’'o
∆˙ô˛◊n«ôeê*ç¡≈˝˚°‡Ì·°¯√2S`0y=ﬁ“T"íô5’ÎZ?{uﬁÖM¥u¿ñZ≈}Ü˚P
Ê— ÄB≠ñ"⁄ΩTª‹ã…Q$‡ﬁgÌu%‡ÂwUñΩ‚ìπ
P°	•
ﬂÂ0‘— –3•ã`W-ç˜©f‡d–e±B†ÿœftÙ9	π∏_¯Ï‹5áv6ˇ(9Ω{◊9eVë§ƒµ»3Úôﬁ¢]∫De4l:∑π:Í∑©4XAw†!rpyÒ“ÜüæQø˙“–œ;Àıí“⁄*˚ŸﬁºFØyÈs∆¬ha4±Z.¿k6∞[t(ı˛9>)⁄⁄¨≠mKQYíä<‘Ä‚s⁄±8O¿dM‘FySÇ„¢%yÚ>i^‹Q’t∆K˛ÓêN¬S àöî∆Å‡Àà•¡Zæ?wXÌı®7Z<?.üÄ1`qOß%KÚ(#Yw%wÓH2O∂e,}*´Zü¶b5‘√tMB÷ÿægmO|Øÿ?”~fæDîMªvã¨s:⁄√Â+Ví. ˝Ï Ø¬0qsµêo1£Z¢≥çB˛ÈñèvÉ:ÜY¥˚°˜k≈M≈%!g®¨LúE»J&ıZ8ü#”ræ÷l‘…Ú¨FΩ-Ø"∫ÈﬁVùL©ú≈S 	Ω≈iùøÜ∞\K˛Ú˙?¯,≤S©øœ„C†”2n¡˝8¶ ,Ñü¿8î¡3…±¸Ù∑`¬ îqx	¯9]§1@‡X197ñ%¶ ü¢t>˘∞®pKæh£.cñX˘∫/hﬂB'¯ ﬂÁf#˝z…†õÙn:]ÌΩ;(Z∞D[Q∑I{ X¿ûFïR¬á3‚/∑eP~bôåâΩ’ÒB›Œï+ö{?ﬁZ§√∏VΩ[oO>J˛‚ÏõGÌæ∑∂úoRk,z™®e§€x˜◊„…©sC{ygCæ|8÷ÈêÉÕ[;í¸„Ù°‰ø>y}Î∂„∞u˘îñ|uÆ≠“”ÛVï0ã@^?ö˙˚Î˘  ˆ”≥÷ï¢
AK4ÖF„ 0ﬂÓÃﬁDëI‰ävãQ~EW…ZßO√œuvÿyvËk ÊÚõ‰êê$≤Umæ#K‰iıà†ËHµñ†F(ÆÑ:HçQÂf÷£ƒüÊ&Z‹≤‡¥¥,»Ú1ÍQ∞`/”‰$;3 	KxÈPû<u∫:¶fÍUZ”J®Ê±ã?ì>J∞ÊŸÛ
ÛTZ…¨Í2SÃDó€,:?oi_∏™‹ËXˇ~˜¢µ"`mﬁ‡≤÷∞b-‰ÙËG=F£“ZbÔR9ï§F-÷m±ﬁï_Y	π7º6nL∏<ô¨≠‹∑ÉÂ›;©;X9∞àV∫MA”ò	;&¡¯¿¡6»‚ïãIè);Ñπòêá	¡xõ‘∂íWiJ‹,ô∫√ÍJÆ”S{h´:sHŸwoü9ªáúÎ o75Ìo›X??œ2´§ÃV‘ﬁl’ıﬁ,?ππÌ \©+Õ3⁄MÊH
º“Êœhﬁ˚S∆·É¿B‡>]:Pjó›≈
˛|ókâ¿Ø†+≥Z €ƒé¡3*º¬$ î@Ñ‹Ù°*p°ÀÎÁV:î<•π™âí‹º‹÷î„i¬s .‰ÑÍ|Ùæ±g¿Up<Ï%8~Z`tpñ∑é°1≥iEõ∂I◊JG§òD: =(ìr•öÿøπÆˆÿ&Ó;˛˚›Ÿæs«á_Á\büÌ≥cü±ÁÅ?.v¿âìê yÄìt.%ÂôDàñ†Q°⁄F†+*…÷VecR(P5XÈ§¢˛A◊Q$¥UIë:ñ¶≠“U€≥ﬂŸ	ÅŸñıÛù-YﬂÔÁ93î”≤Ù¥òÁgÑ0≤ÄZƒö‡#‘à†A`¶Û‡±”Kp) SO-B%ä?1V*|b¯àrÊåü)}•æß `RpœO’çWg3zèo›°…ßﬂSV‹–PÃU®‡·b£⁄`n∑$ˆ=WÀπjZΩ%Â◊ÀÜÏÅíeÀ/ÏﬂêÓ9áﬁ#Æû;êtôYGAÅ;È˝n˛Ì-\ôRÉµ´üÕ~:®∑◊∂U^EõzÁ·}\è78¿à@@ÄXåﬂ¡è„¸$èê%@(Eã∏+òíQµ∑ˆ–ùxA`wîÍV; c{aìÁ)Ÿ∏ìâ˝àBS>õXÖ–•Dó∞LÄÌ∞¢ıAüÖ$Lwß≈lèö–"Åò'cn:éö⁄º€ä◊∞KñÔ'ìÕ^˚8Ÿ‹≥3ÙGπ◊ÕWƒÔ˛zu≠◊fÁ|ÊÚˇzæÍﬂ|Û∆∑…h˝Kñu5…Â4˚M„⁄P–(µ7o0{{~N≤)9ˆ—	7‘†§£¶ÈáSÎp8’
Ìp‚z≥Ë˘„ HEFeŒÿé2™N)dP£Uk¥:=˙Ø ß`ë†3^6b˚å„FÃ(-°Àr˙=¶¬"ÆñÏ`8ó‹5Å(ˆ<T–BXp<^Ql„>ô≠;>∑5uYπß¸%ÒÕÊJHRŸÔO6e/ø´˜∫t¸J!”„˝x'ˇ3˜ø≈‰‘ºı≥œíÛ≤∑≥7*l¨]*Oü«˝ ‡øúˇü¿
,¿ñ ∞qË¯™|qú∞XêÛDGÃ™ç≈¨ÄÖê±dX‹ZÅ€b:œF∫ÄŸ6≤D®øP,÷
	‘Ò»ËÏÇ9É|ÌïäÔıAßX∆«`cÃ83…úaÆ0R∆óûIœri◊áë£≤3ë^˘¯;=7˝ò"Á»µêhamËY¥hjbÜ]“≠º /¿˘æû(Üò÷∂∫)‚Y&áò…ıÂõODÀ_K’ßx{ooÙçïÚœ¯Ì}á¸âjãsW≥#÷¡iáccc√æ>Ñxª˙N._w§Î≈◊G÷¨^Y›Ï‡ÀVß‡ñıÀ±]ÚßwΩ;ÏZwŒ~yeg†*\üô5ä™}©ˆÑ1ÖŒ±8(C§\°Å§G£”Î›èﬁÖ:H•ñ$ïnΩæÉf¥4Õ∏õ_3ÍÒ¯ız∫@’È'¸[∆ŸiB*üóF?<•r !%ÚÇ‘•
xL¡/Ñ¶êÂér †g‹	Ì#cdŸGÓ GHô¯6F‚rñÃ_ﬁAJÉdo(§@U`2p9p=p70ê…UbôÇÌ#ü†—üß!zö¢'Ë+¥DhH“πò24$&ì‹i-ÜÜ≈MŒLSˇ s?(ﬁÃk)⁄s± ›Õıÿ•˙Úh€ã®áaÄ~ —„IUÕ)@^ úCú¯?Ê¯bI…¡dA8ø0ûäª9∑•’ju≈∫‹L˚1?ÛKÁÀ›‰Æ¨p ÷Y CÏ‡s?_SÈêJ=≠P‚ˆˆg¬¸Ú:ÁØ~‹£≥∫B=°·Ï€ì;∞Ô]vôKxiaÍ’¨zÔ∫Äœeµ÷ù∏9¿STêEz˙õá”ÿ∏‰† npN∞∞^ü”8hNÉ¥Ösh9Œ¡l4ÛùîP˙;Õ#4¢˝ù7Öçòx.PÑÏ;`Vî^ÜwPˇ¢ìzœ9‰¯ºuV3‡òÇegÈ^Õ¨4Ä8å‚⁄π}‹8˜9˜'„r>?7?óÔ-3 ÊõâÕ7ØÈ:òÓ2»≈ñŒHô≠laﬁC∞ÚQL¨Å±¥à]0)zÅ}ö‹&dXÎåîôú°ÏIœ”ÔÑÃ÷˙ÕE§y‘ÒÍKNéùPkíx≥'·≤zcÛõ≠€”•„≠ÏõMEö=e˚=éΩ>≠÷ö—‘˛ê›+≠óéÄ8h7◊Ó¯Ól`≈Û¬ÿ*\è—--Õâ8–ÎËÄòBå˛B⁄“RÇ(Ü@˙πP¥ƒGâXêÍ/!JHXîQwí|êAÀ| ò‚ ””vG8O¥(íPq'Ÿ€Übπ	˙Ozé†Ú∑I†˙ ‡ä!8Öº	Éb$òAã"w.P0
fb¢à°ã¢Æ}âÆ≥Õ-§ªÁy∞(,ìÖA∆ m·4Í'£@\Ç¨å0ab ï∆'jOæAñ9jıQòw@ÿtÏÂæ∫µ{è÷V 9O∑Qœ÷∫…˛M´íï+ÓL∑nË^π6πÚ'BÅ¬f(uénﬁˆ˚f˜ñJ'[C|7…{?¿,ÿ˚/ÙúñRßJÊ:õΩ≤≠Œ”‹rJf]=vÍ£x‹≠/20j⁄Êµ7nﬂΩÚﬂªÍ Ω.X”S]V˛)R∂?!eª&› ¿VAc*dÂ&ñÌêjÂÚBNÇtÍº8xOPJtô‚NêàaÈ”ﬂÖbV^hb%Í)3!cƒ'ÑÑ"â}N‰mì∫Oâ¬Ååsf~f)iÂ·i_`≠FlêèìßâÂs∂ ∫Í≥¨3∫µŒΩ˜íª¬_n™ıÛºŒË´Œ§hΩkÌ∑∂Æ£>æ˝Gx·Î’/‚çfæÄ\fx„^6ù˝sëô©’˚4 ∞ÎÒ–◊ù-á'ÑkÍ[jº8⁄}6z+*!BÜ®3Ç_S]±`ç—„¬o#£© oU´©∞B!o:-@*Óà⁄HDê75u§Zµ©T+!Ip£¿FŸ0õpiU≈Ü#ë¶¶TÅÜY∏	^D·˜º⁄r3îËùJeUßéÕ˝B`7∫tÑK!ß¬°UñPTJ.JMÃ€ÊÌÛÓŒzâ†∑wÈã1U9†2∞ÜÎÜªÜYÉTÆ2@ÚtW{l˜øﬂù}>«v|w~úœØsŒˆŸ±ùúGLÍ$>ﬁ¡<íPH@´É!£D∞*UîçµIY:ˆ®x®<⁄©JË∂ñ∂ì(è2±	&PU&§ ⁄C+£Öëv”4⁄"uˇƒŸÔwv¨™•;ˇ|øü-ˇ~ﬂœ˜ÛpçÉª™ã.$jÅ(vÜ†§ U®ªFÍ∞ Ú bu)v’CswøaÖŒFÎÅj§zí÷ã^á7¨πJË∞Ø∞b—6G-§°J⁄≥ı4‡_`ès?i⁄™^’<X!£´˛æ3áÉÊåáÍDˇŒwÂX£=ﬂ·µ±π∂:«Sù˛ß¢˛FÔ‚åüèu√·¢∫˝Gh⁄ÍiÓÎVL≥º/⁄◊À“ˆÊµ©©P$∂ÂÖæd⁄øÊFy:-öcm!f^;+Êî‰Àwﬂâº≤B¸ÍMºoaÕƒñΩÚ£ÚIp{ÇÂ jﬁüô‘Ÿ j⁄†% ™*H™ÄâqRMç1√@	êbvIä3ôuJ÷Æ(Ycm6·ÆT]y∞\ §V˘¨ºSóQ=µ}:ˇ&–B@H
ÁΩÄ `vo	*5:C∞¢˚=õF˝Hˇp∆åí’)\Ø,Â•i£4 I$∫ê†¯Kï«íæ˛ë~+Ã?ô	ÊsÊuüÉtü£ïÄ¢*óîÎäæS));îaÂ°¢W‰*0†ÿkZè@ïæ"ˆy/“SÆYp<ñû˙9yúÇ<&ﬂ≥∂?;ß˛∂ˇˇÍ«k‚ÎMóæ·Ÿü≠ôIÈ≈™Ÿ‰kK$¯g˙ÚıRl@GÛΩ˘®ßÎHLÿ†∑”˛6|c{ù¨Ÿ»]‹úIÀBd¡ß◊ŸÌÛ£bËŸ∂h∂mÿ¸íCàµ≠m⁄U˛≈—ÉÔs5G=Jµ'gÓ{âÂò¶•îÍìΩ^‹R¬Ï%3ê&∫ﬂËÍÔ  qé6#A0PﬁØÊ¥UMY±™{ÂD∏EN€#Ñ2>∫yo˘ìì€∞˚ÿ´Î∆R°ñµK÷wÀﬂ¸ÈgÂ±Wø{ÛÃÌˇ˘”ﬁŸ˛}ü∆ô{eåò$Vc	,á›Uô≠G}Ô¯Œ˘~Áª·#wA]∑Tø≥¡ŸêCàã@ƒE‚µ5ëÜúnûSñ8{” áËµü^O≠°V'óÏ&ªŒ7‚ØıGDù*vL¬dËáøò‰jú\Pä‘7‰å¢¡ ¶{ôõIQqZàh–)ñƒ‚∞x\º$ﬁM"bÑë¥v-yòµ°A&ç‹ É‚¿#∫oÜivMµàôcÜYÑ¿Så⁄jæﬂ µ†ä<Rv.(~˘÷áyüE|c~ÔÍÃ“ÚÕÛÌÌÎ(o¸'ñ∑ûŸxÃ≤râ„£üX›ÒÙÓè2ÒdK1ÆËs˝ºÀ◊∫ÛçPki”øÀ+#Âs~[òÊÈ¥≈í¶˜‡_˝¡Âû>—vùiŒ…À€ïaÿ˜'`∞⁄MÏ¡BÿiUÈÊŸ9s£uzñ'∆v≥ÄE˛ÖÑ˛Öˇ6‚¯•?Ë8Â¿+0çòaäºßZáÃ¿jÃ≤9oÓ0ÎÕ∞”œ¬¨	;˛ÅjÊﬂ∑@çiÆÅ_ú#1“!Íº„`%Lü î¿h\Pï—©"j…)≠ã≈˚öÁFS’.Ó£ZjØTÕ	¥&UÇ%_oGh¶	ÿzdiF2:≠m]BÈbÜuX‚[ÜZÎ˝—»ÍBq — ,üIò\ı]¡≠[ãe˛Ÿ±¡¶à€#π˘•∑_ÜÁ≥wÊKB 
X{QÂ0/Ì≈çòP%©‡Qf>”Œp+_™\D&ÛdIêì¶)91É”Gn˜/™ë®=∏#9úƒìpˇgy·” 
ûfbÇÊ|í»ÎxË÷†uò*Vúo≈ØÈIMxPÆ(ÇG∂*àzzÆ9ø[eüJcjnKsb¯ñõÍ}6Ø;ï¨œGª>‹ˇ¬ÛâÄ7äØGnZ”_—?Jñ4x¢å∏ /◊ØÍﬁµm€ÿ¶e¡∆0_C[åu^µ?˝¸ˆÕØ!gqfÑÈòª¶f1Ωû‰›º˜zp=IQ¿«^Ê!Ùnx∑ŒÖ
`‘:fwπ0Î=>WΩ6•7·Ω˚uèò¨$Ì§ªi¬h†Öú1ı¿|ÿw÷f¢≠„‡Ô™ôƒ Æ”S.ﬁkÑa"^uv:«úÑû‚qÿ°ì˜5~G=)OWÑ*ªÜ
¬∆
_zËi`Pª¢øráy≠Ö¢[(hs·gâå!H<‚Ó9≥Ãf¿«cÌÙƒ˙zŒ.®kWJ∑7Ñ„“÷ü≥o˜ZÀˇXV>},ÁqÖSmçoöZ€É˝À‡Iöπ®”∞yÿ€*_ edduç)ÛEçV=†Ùz´3:é/RS©>ﬂàlêùV“i¬Ù>Yß8›äb&˙›nsx¥Œ¸uú≠;.≥y7ZY@±„†GÂƒÅÔåó‚ƒìq¬iëäk®®Yü"Ç=yíñÃ43öB`RÎ)‰éX‰p4éGπìkb˜R_¡Qñ¨`komÄ´¨¿˜¨ I∑«9>ƒ◊Eè˝∫<ip‘{Û©ïMµFè›Z}iTeh7˛œ=ø)vüÑ∑	r⁄Âé4/˛„Ôˇ˚CyÎD◊ˆ´"‰÷÷q4Õ'¬πçM∏◊m ÷f.OOÔ´0,Q#◊ÂÎI‹jë-hpGæì$g,`Ωßﬂ3‘D`#F å¢ ¢÷"dz‡vÜ˚Í	NÉ`M°(e•(^ƒF1∏CK/Ä/0kƒvΩhµî˘ç¸<¡üaì™Øa£p! 	ÛUgï•Ç„‡0„∫]◊¡êO|∏‡;Ù > ﬂÙ˝Ÿ’Ù„”√’á5à!w¢ÚÓ‹Ÿ;99]D12≈™6JwŸûûB"≈6Wúp%ƒBøí’àës≤∞¥O∫TØM√@Ç#û˘U†ùÔpÿ÷Ô∆ﬂcÿ∞7ﬂ5}„rœ¬EJBÃÂπ÷≈≈Á∫
·X
INf◊@yﬂiNŸÛR~©ﬂ'5•_.ïó¸πòˇ«~µGUùÒÔú{Ó›<ñÕ&l6Å¬ÑM“∞Ñ ô$ê&”Ä@Ä≈åeDÉÇ°)í—J±•LÏ(“îóÂMD‰j&HÃD–îZ#¯®@áGÂ1BÅëf–¬–C!€ﬂwˆﬁ%¶Ng⁄ÒOˆÃoæﬂ=˜‹sæÛùÔqv`∞è'o¸á’ÀƒoöèôÑºz“òN“˘“â+êò®	òŸŸÅ≤≤g*»WQA„ÇìI)Ÿ¡ä≤—/E08úäºE≤®(~xZuí"…túÛ•)’I)≤Zq1ê‰öX=:.>-^∆üwª”Üˇdt,ÂfóUÂû="ÉbDø“∏á|¢‘7Ÿ7›˜åÔüÈk_Ì./‹î∑π‰b
ïÁﬁ÷Ÿx⁄æ(Úø Æ¸πWêëÒØºÚ·VÍ?’{´ˇïisºtÅbƒÛu SãÏÎÄ%¶qÜq˛Ï}+ésGnè"¸üÇ;zO¯Û¡È|	C32ΩoH^YÚ@Ø7ê3 !PÚÛáÜñœœ/»ı{‹Ò±ÈÛª?[¸»®A9ì*kÔí„ıJNÕ™|Ó—Úó52=ßﬂåƒëûïÁ˙ôQè?›0Ò)e˘cüp˜x„\1Ó!œvüxq≤óíë50>m†79=7cd›ò‡‡Ä?!>yÃÁ/ÕÖhnïü´:ôIc∞-/!Ú£™I*?thû!K“ÈG˘˘"òüORºkÏ3V™:ä•$J+çI∞‹ki∂7;±]4∂≥£sow_°\XΩÊq«Ff.}ôÖÖôÄ(À*(» ,(PuËÀ*ô·>¯ÓºS<ó≠x<Æ¯üîE¸€˛„_\gŸ6Î´√›â∑_äÁ™ÄÎƒÍÒ\›»™ºΩöä£÷·Ì’Ëqb9Õ§?˘öÂ˝0YÇ¿È9Ê1’®ß»r´Ñ.ã	béÙ——˙ôQ%íU∂Hî!K®	rçl]∆¯#¿_Äu¿j`P‹0Í≈»˝¿*Ã≥Ft“`ïMgy†‹à°∑Õa®Æ–zuàñ‡›Gf-W]¥Hm£ã™KÊ
b‹R#èÑ9Å⁄T#=aµ”åõäoé™JZ£Â!˙–h°LE¥’Ï§+fu≈–~U˙NÎ Ê\åı'ƒõrç¡˙7ÖÆcﬂÖFtØ¢od;µB◊»ÌrE˜#/tœm¯n+lê
æ|Ê⁄Åµö°SãQÔ…£ç≤Üﬁ¿º/ßÆ	c_ÅÓ<ÔpÃ”ÅÁI¯∂MeÀWEgRÙ”˚f`ﬂºggO¨ø≠” ∫m’˙ıÄ÷Ø"∫ıÎı-àD#OlÇnu∆	z“®
}§IÇkå™ÓzËÒG¸nß¨áÂ9ÒÆö)rÕŒPá9A∏Ã]T†fRp˝≥Ã1[mƒ˙◊i4ﬁ≠54Ô&»{‡c>˙¯∆ †8≥¨˘)t™á/ÌSáƒLå{–»Î˛Û™ã‘ü˜âsüáµØ≤èFl˚X+ËŒ¥z>è˜œÀvÅ ñäN‘ sÉπlw>{™=Õ>€¸:ÃSŸ›«Å≥ÿÛúäòC˝†á◊’"∆Ñ◊ÅˇE$-“˛◊∂øµ*°ó}^ÿ˛–g|ˇ,p∆®óA¨—˚Ωy{nƒZK1Ê˚2˙±ﬂ≤Ô∞è≤ü∞èp`Ïõ¨øﬁG%mg_”∂ ÀT:Ï¯,~ ‰ ©jk8n¥Ô≤æŒ‹1ˆoG≤ü+È≤Y≈GyøÏ_é‘Îü¶'Ÿœâ‹¿Ûna˝u<>ﬁ∂Âf⁄«~Ã>ËH’$íÿNÏÉß+éåËá∏Ö\fÀS:‡£éåÿ∆ñfêfX#©÷Eµj"UüÀ®Rµ@÷“h5ú„{.¬mú9ìéD≠Cæ8-rç1¥æÛ ÷€–KÆg∏éâŸÊÙÅŒU«Dí<.F2¿ÄÃêÕ¥!b≥^∂ÌmØ;2|.Ω•Œq»3é‰s”qñoÙzﬁ πêÛÁCŒI@ì}èEl?Ôf¡ˆwÏﬁ”˛{Ÿ}Ko{˜ñúK9ü9˛(sªwF|•S˚gÁékyNV"ôûP´LÊ∫fç°´F>Ì6Ëö∫!¢Õ*:¿{â‰˛∫dl
]∑cn1€BÎå=ÎºèqNﬁ7≥Ëw<˘ﬂúNáy¨Ú˛iŒ˘Ê-z›OoÈxeù?G^ﬂãú∑ëöµG[∏œh
eá≥m¯ΩÏ§Wyˆ•cŸË¿7∑®6pNóóiß∂„˝Ë[Åº∂ãﬁ3 ∑F|bNıˆ¢BßÕ:Z©06≤Á_~è>ùÎH€xœô˝|ë¸Ç≥µñÑ÷Ym4ÔG-√ﬁÕ5¥
{˝T€Íö·ÿÀâMÿe,ÊYmŒ≈7åûˆ≤ÌËÿä}‘5èÜú÷Œ£∞Ê67“ÎÆMÙ	C≠¢´Æ«®Qm≤ié´ﬂﬁ◊ù®kP	î_£ÓÏ•µúüÿØÕB
»n‘~ßÆ¿ç*T7©@?ákO3Á/;>vËúˆπu}‰1sÈ)3˛¿Ê’Ío¥k5‚€V’âæΩÙØeL¶˘±ÆÉ≠Ïøë∫áxP≠®Gz˝6≠◊›ñ–ó*É.!^:>‹[:>m°ñ†~¸y{ ◊C◊(]èª‡◊ Ç];!+–∑yx2j%◊ÆÌÊÆ–◊Ê.π0á˜îΩ!ˆáﬂ±dÙ|˜øˆˇ?ê_†>◊j~5Ï≠‰ª•´S9˚‰|ÒêÎ£jEªk
yU-bp
’®±TlN¢bµP±§˛Q$Ü#ø4°¶t TQy6™≈ÙYﬂOŸR…'•€ıæ9¬|À⁄aÌppàäâ:u8˙_1sc≈æ˜›Õ]Ö∂´œèÈYWËΩ«{–{0æ1¡ﬂ˜_öØ:1ÌO˛{˝'˝'ìÊsK~≤ﬂ§ˇ⁄f|m››v∑›mw€w5∏gºF◊®òÊëIíº‰£QD¢K=Nø•\Y§%ˇ> ¬\êOa.…E«mnP*ù±πøisì‹"…Ê•ä¡6w—”¢îWRÊqãÕµ&bèÊñÓˇLsóÓ?ÆyîÊó4èÜB/à.õj¸“Êw´≠67®»hµπˇªÕMJVõ[T§ämÓ¬}œô'äFòï6è¶ÈÊolc¥òlK5—+mÓ¶Y—7lﬁ'ˆœ1”mÓ°*ˇ0Õcx_˛•ö«Ú^¸k5wÎ˛ﬂkÓ—ºMs/Ô≈øWÛæ‡	˛Éö˚Ùò≥ö'Íy¬˚ÚÎ˛õö˜„oì˛Õ}uáIQdÒﬂcWD#∫"¢†Ï.,iE]Yñº ª#ˆŒÙÃ6ÃL›=≥Ïä9ÁÏ)Çg÷Ûº‡eΩ‡ÂúsŒÁùóΩúπWØ™ªg6†}‹7˝uwMu’ÀÔ˜^óÒ8µ¶nåå«´5uZ˜â2û)„)≤^€°A∆+‘xÑ»\∑I∆Bø.≠∆£Ù|Q∆"›éV7ÎÜnüì∂“vh[)ØÿÎªŸÓ–ÍÏv¨’^¡{ãéµÿÛãûoáÆW∞ö,hj‡«‹F´%ó≥du`˘N‡¯e'›Xµ)pÀˆ3ñX∂˙v⁄…€˛VÀÀMºß€Mu[yª◊Íròf÷B«g·‹Çïr¸–Ê˜ñíÔi7•÷çmmÀZóÆö3<◊9ŸRŒˆˇXø<¥snjØ78¸èÂô’8{Ó^˛oµE;<¯»√FéG]Ë•—p∞ºÃwÚ≠!øHÛ”G∫fgÕs5ÔØyëÔÁk^®y≠pëÂ;‰ªè)§a…ZµÀBä)—À;’™nûµ–…oáﬂ´˘õ‚Ú˜¢Ã,æEy⁄BQ≠∞–ƒµÄüf4ç<€¬“Â¯ù–‰ü√oáﬂeë¶q/úﬁYÜ=i2œ∏≤[…
˜4ØÀãŒ[yŒCfø$Ô·.[°õ«äZ/øªdáí3+\CëV[Œï])ôQ‘ˇ∑†$ZºFQãË¨]_ÀÿK±
”HV•'÷	œ[MÈµ/;Î±\‰…	ˇ˝ﬂπA4b˚Ãbf≥?˜ü‚ˇ≥o “)#è©+YäÃªóÌa±E
ºwËj‘*{zÑoñˇØaΩ3¬S}m‡{≠ËÁÀú+ˆÍ‡gI≤_˚≠Edv+Ïo≈º2<ßiÂçç#ùCc€@÷Êd¨≠}qƒ9±a‚]€X¨˚SÂvΩ¯2ê]€≈ìEY≠t—ñÓ:ÌÒ‹÷<{D”0∂G^®jèYá%¶Â1OWPÃç≤¬Iaè„é;àû.K¶(9<JÑ§ÃXÈ“+®E\J<ŸTG™_a£Ä%Uíu·[;Ù»>Mø[ˆŸCéâ©–¯(#(EZwl«Jz⁄vEY£≥√5…à-ﬁà\⁄˙Jgm?[pX˘54º—∞:oµ¶Ö8K4µt}%ô'Ÿa	ùÌ2*
øÄüYë6≤∂ä±≤…&W∏h?v1Â0Œ˙.ŸVÒ≈üjZ∏Ë»‘_µ≤ÒJíì fYÒéS9)]çÔ
B5/˛.≈ÒZ®‡ú5±¨1)êïAÖ«=¶ò≠#¨—˚R±∂:om±R%W[bEÀ“(51dÌb_=r5≤d’—(ÒùÁj}û≠0Éü!Ø±Eı/¿fﬁÎ7Ω÷1‘’Í˝ÁR}~<≥Y,õñH¯¥3bu2:¥ÒΩò3Pç◊¨B≤6…X5øÑg:¯©rt)Wº%|≠ñŸNå∆Hπ;%kÉA±+ö◊π©≤¡ìæ¨ç<Ù⁄ê9Òãk∫ì(É4BıJNF<SÇ6IΩHp7ëGgW^÷kIl…<◊‡KîüQåÊÍ®l<◊pS8Q6—÷W¢(3Ü∂L Caµ]#ô/X‚ º¬ü7|Ò˘`ˆÚå^ûduB%A¥Å¸“”2È,Øƒ{O¥¬C÷X—™⁄Réd…¿®»9È  Çv%~vº–Ë‰∆ ˙Îy&'É
œ'æ–~™Ó"ú“ÂHUŒDuü[&HÒ’ÿÁ∆»fË§Î„’ï»üT–Ω[*'5ƒç=§5IËE59®¬◊§$+=^[êL,â≈u˝äÙ—rUFw‘âi˚''ê(‚ã°Ωiîƒ«r—}†ÁîÖ˝m<ÔòöÎôŒ≈ìæLyµ–œ>˙ü\" ∫
™.=›Kñ•≥È©¿Å◊‚˝àûŒI«‘útUé%K?jkiB”Uñ«ë«Ï~∂ŒÏì¥âïr®Ó™%rL’π˙D÷3˛∑Ï|ÃA3˜µÕ|júœÔô¸&_ñd„J~Œ·kœú¬+ö˘“ÃsÕò«ÁërG€åé˝ı®D„ÈKqß20üäÇ ∂Ÿ]6]ã∆ç(/÷”2Ûé—Õ⁄ß™}õ—Oﬁ§í*ù,yÆ‚}≤¢OÏõ6QZíß#v/Õ⁄%[˙Ã∑¿ƒU∑ë3◊lµßC"÷í”C∆–∫)=7äûÅ© Œ—P›kcÀµAÄ©"´é‹|U◊?gmìK9”g••¢E’\Q*…nçKïHÊTÌÎè	ß0ÓŸK“_ÈıœπfÆ/ﬁ6ÑfN€ áS5 ö˙ÑuéÈ€¨~ˆTuÍè¶G◊ñL…Æ¥Aœt/ÀzW$*æGRDß–ﬁä]iE)A…dWI0¨æ*Ø±Ody_jPW=Àƒ™#µo£…<=w†ÏÁIê,-®£¬Ì°DÖmŒúQ_uZÆ|w„8®øml‡äÜ⁄ ’v*0«ñHõjÚXsË„À; ˆÿˇS√´”oè#±r¨Ì8ÿ∑ı€„0~Ö—msûúfNj≈ˇ⁄	µMµ+kó÷.‚ÁÇ**WÜ¢“.›ÑÍ îˆ-<Ôf*)Üﬁ3¯x∞Áïó≤{FrFÚ∂õƒ´jPãÉ0caèäQÏô√p8é¿ë8
Gcé¡±®√qã„1'`<&`"«√$L∆âòÇìp2GÃ4Æ†ßb:G_{aW‘&Ã‚z:á´Ë<Æ®Ûπñ.ƒi8ãpŒƒY¨·Ÿ|VkÂsYü“ñqoµÇ+Ú*Æ˛Íî∑Á…≠É;Úıÿ¿ôπâªªÛp>.¿Ö∏àOáK˜ùíÃœHÖu±Öª…[† =»6∂F ŸSÊ∏⁄Œ>Í√%ÿÅKq.«∏W·j\ÉkqÆ«∏7·f‹Ç[qn«∏w·n‹É{q√˝x ;Ò va7¢<åG(√„xO‚)<ç7‡ºœ‚Mx3ﬁÇ∑‚9ºo«;NºÔ∆{<^¿{Òæaªºà‚C¯0>Çè‚c¯8>ÅO‚S¯4>Éœ‚s¯<æÄ/‚K¯2æÇØ‚k¯:æÅo‚[¯6æÉÔ‚{¯>~Är<˝?¡OÒ3ºÑü„å§øƒØk¸ø≈Ô{ºÇ?0ˇ	∆_W¸«?O¸ˇ∆∞á@µtßÉiB#ÈPE£È0:úé†#È(:ö∆–1t,’—q4ñéßqtçß	4ë,öDìÈDöB'—…4ï¶—)t*Mßzj†FöA3©âf—löCsi5”|Z@È4:ù—t&ùE-t6-¶VZBm¥îñ—rZA+i≠¶vZCkÈZG‘IÎim§Mt.ùGÁ”t!]DõÈb≤©ãRî&á2î•nrim•Â©@i˘PH%*Smß^Í£Kh]Jó—Ât]IW—’t]K◊—ıt›H7—Õt›J∑—Ìt›Iw—›t›K˜—ÎË~zÄv“É¥ãv”CÙzzò°GÈ1zúû†'È)z˙ø\WyxG◊<I+…ñß»9Ä⁄.¥@Ki¨’Õi7qb'émõTJV“X⁄xµ´Ïa;s)4î£@˘>éè8é@ij†ÂÜñ˚¶Â>JKJ€powvûUÙ}o~øŸ}Û~ÔÌŒÃéÿÿŸáÿáŸGÿGŸÕÏ˚ªÖùfgü`üdübgÿßŸgÿ≠Ï≥ëw≥€ÿYv;[cücüg_`w∞;ŸŸóÿóŸWÿWŸ◊ÿ◊Ÿ7ÿ7#7≤ªÿ›Ï[ëõÿ∑ŸwÿwŸ˜ÿ˜ŸÿŸèÿèŸOÿOŸœÿœŸ=Ï^ˆˆKˆ+ˆkˆˆ[ˆ;ˆ{ˆˆGv˚ªü=¿˛ÃŒ±Ÿ_ÿCÏaˆ;œ˛ ˛∆˛Œ˛¡˛…˛≈˛Õ˛√˛` ÖƒAÅ$!=–iËÉ`Ù√F∏ÄM∞∂¿Vx,<¡ ¡0\OÄ'¬%p)<	ûOÅÀ‡rx*\OÉ+aå@T»A
PÑî°Oág¿3·Ylxå¬\€aå√Nÿ0	ªaL¡^òÜòÖÁ¬>ÿs0œÉp5T· <^ /Ñk‡Ep4®A¿aö–√"–,Ë¿∞¡<XÇeXÅ£p^/Åó¬µpV·erxº^ØÜ◊¿k·uz8◊¡‡çp=úÑ7¡fxºﬁ7¬€·N∏)r[¥Ìe£3≠v¢—÷Í∂e¶¨%n;uÀÊJ[o4,7Ω`y∂„u∏≠[∂2V≥˘W¥ cV”2˘bB®Ï®kBiÿ·ö”JåáN<twy 0πÙ√ îV˜\Æ¶Ñá@l
ìàÿ(”‚∂)`ZxôÙöZ«r\€Í¥xj¶QëRñd >vÿcm˚≈E'Ä‰\ù7t√–ínHî9·Êü∑u≥˜¸65OJ)p,ÄÿA?˚cÿ$Lkó÷nkàs-Ójq”ömÈÿ”åNÀø⁄‡Ü´•Lãw›∞Lº‚ËÕ∂ÔÁj∂ùñﬁÁôçÌ†æ 3»õ◊-≥ë‚+uCk„ıîIØ´√îJi∫^Ã™˘≤dÂJJ≥mkŸ‡n"`^ß'@[o∂\q≥a-õÇ’,∑ï
›föXÕ·=ñÌ∂¸7´i›t1;^wu|!¸àß/i7Î\ôP’ëRNô»ñyÖl π\è’·fÕ3Óˆ÷-|>ZΩŒM71&¶cBÿªΩÆ€uØΩ`ïﬁ˙:èm˜üo›æ„·.PSï˜˝86Ωª∫"5ª"ÌÚ=öÿ$w…–IÔD◊òV◊òâöf«Zÿ(ìÆn4∏¢êòs—√\&E.∫X6ì·ä–ˆÓÓä~xù'˜»<Cí^l⁄úõÜf6ÙzrJﬁ6$ôñƒIt‹lFπŸLÃÑ	YaB3"!+Ä‰>9ŒñÔÔJ…È*xŒ/ÿıû{¢‡˘0æ∆üÒ=Q|X∞|†+˙rØvÒ£Î<éÀ°ÈÙå˘K.XU8U%Måç‘xÄΩ3¡Æ#∏µŒ„ÆÖ™Ø°sõ;∫Ùz∆¸•–îÜÀå\◊“„b˝óì„nx“
Yz¶≠˚%äŒ|ósœLõ7Ö”F›•¥bW˘+?ÿ‚;¸ıû’bÒF’‚¡ÊÛÂ‚{¥NG√Ω±]kh∞◊ÉiÆ÷°>ÃÍ—}-+æﬂﬂ$¢söósâ‚∂›é6ÎËÈ…Æ<6Ñ≤ﬂ£Q˘iﬁ]4óEÎ≤Ëå˜Ë°¢§`|¨Êó‘J
∂∞D+vÃ/…øÈ%˘¡‚ãAIÜ(…Ù`E«)‘µ[ñÏxŸx Q‹ˆ°n7øhªqÀÃÈÓ'º·ˇ“K[›Ô»Î~GΩ£`/Ãéå®9…
Yb*±ıªybbEb%beb…ä#ƒH£(5≤yäó•(Yäí•(*EQ)äJô™îüJÒT O•»*EV)ré"Á(ré"ÁË‰H#G9“»ëFé4r§ë'ç<i‰I#Oy“X.y“»ìFû4ÚÎœôFiDëFiDëFî(´ÂR¢\JîKâ"ó(râ"ó(râ"ó)rôÍ-ìFô4 §Q&ç2iîI£Le“®êFÖ4*§Q!ç
iTH£Bïı:÷£H‰ƒ≤ƒhÓé‰àÂâàâïàïâëFñ4÷s.¨◊VV4mø'Àà#÷≤8zêÀ>µ,ôRéG‚¯Àß‹wƒ√mﬁˇ&·9•ë≤q©„eExî+·Ã,fs∏p«≈Ô∑ã~¯—‚˛π®ïv[¯‹È]–ó$O;”;ÒñÂ9ºe´È‡∑•«?a6Ü€!Zsì˚wb}¯ÛI6$#Drí®í‰%)KRë§(IIíBHÚ2é*á§DAFŒ…8™º¢JU∆)»TÛ“9'”PâHuUÊì#"oÂ•DñDedU¶ö'g9/Û…S]2r^/PÅ'∏Çﬂëöa’xfı1.z∆Ç@€˚.û<¥â∆bÄ©<·y€ZÈÃ∆n¬µu≠Èu⁄aøa
4ˇÙbîn.â√≠œ¬kN[«s∑VÁx`^¢N‘ÒLeØè˘M‹È†x¨nxµxãk(—–µ6~„z€ûN*~A«ìˇ†Îùˆß®¸7–ÃQÍìUˆb„ûmùÅ…”Áá¨≥09év=Z¶G´ÉCëju∏⁄©ÆVOVï˜TOU◊™wWÔ≠û´*7üÖ©»Ìhw°›S£◊∆"ô»@¶`83<†¯üoﬁ<íòÕÃ XÕ¨¨e÷÷6≠m>ó97êI˘û4…»ñ»Võ˛-˝[á∑o›6∏m®≥•≥ı¯‡Ò°t*∏ùd∆")ëddÁŒH$r·∆‰ËDÎVv"2QaÔÈ÷EC√gÿ•∑L®C£‚y¥G–F{ÌA¥sh†›èv⁄ùhw†˘„N°ΩÌ}hÔE{⁄h'—ÆC;ÅÊ¢Ÿhá—ÆA;àVEõtØÚW∏\¿e.pÒË*‚ˇ⁄"ü◊&Ç(éøó¶y/õÿ¶Qñ≈UìtΩ-E°“€ÑπDS0´•∆zhãhïÿÉóÇB†P*#¯Î.BèSΩls™∑Ç•Éó
ûﬁDﬂ&{)Ì0Ü˘|ÛÛ∑K¯)¸>	Ö◊¬K·ÖH∏}„™ùµ≥˙ÄÙ7“oHoê^#˝îÙ*È«§í^"ΩH˙Èy∫Ã£\ÊK|Åœ≥√6ü„"xàÛl1sÜ”,èÕÄÊÏÄJ©FÄ Ï= µX6^Ñ÷Õ;f––®π¿\ÛUƒpÀT}e≤ıªÕƒW°ImDsÕ˜‚y«5≈ôÊÆ|Nµ≥Â∆„øŒVÇÌülŒ±™˙Û](°?eQÈàJ˚T˙Jq†‚uœÎ#“˚§˚ﬁ¡œu®™˚õ≠ãpbm<eø„µï¯¬ıÊCŒÃ˜«/©ú%Áoπï0∞O&zó>útªw‡;‰¸–X^`r^ ììé_∏éW2yìEB\=^q÷›npªWù}&â∆¶«¶„(ΩhHÙp9Î„∑ã€IT="O&U[émmŸLm∂LŸõ5ôXºKƒ®à≈áæàΩ7ÌÖv“€ÿ~ÊØ˘ˇæ—endstreamendobj138 0 obj20875endobj140 0 obj34001endobj139 0 obj0endobj141 0 obj0endobj28 0 obj<</Type /Font/Subtype /Type1/Name /F7/BaseFont /GFHDGL+HelveticaNeue-Condensed/FirstChar 32/LastChar 255/Widths [ 240 258 407 480 480 759 556 240 241 241 352 600 240 352 240 278 480 480 480 480 480 480 480 480 480 480 240 240 600 600 600 444 800 500 519 519 556 463 444 537 537 204 426 500 444 704 556 556 481 556 519 500 463 519 462 722 481 462 463 259 278 259 600 500 204 444 463 426 463 444 259 463 463 204 204 444 204 722 463 444 463 463 296 407 259 463 406 648 406 406 389 259 222 259 600 500 500 500 240 480 407 1000 482 482 204 1037 500 240 796 500 463 500 500 240 240 407 407 500 500 1000 204 990 407 240 722 500 389 462 240 258 480 480 480 480 222 482 204 800 289 389 600 352 800 204 400 600 312 312 204 463 556 240 204 312 289 389 721 721 721 444 500 500 500 500 500 500 722 519 463 463 463 463 204 204 204 204 556 556 556 556 556 556 556 600 556 519 519 519 519 462 481 463 444 444 444 444 444 444 667 426 444 444 444 444 204 204 204 204 444 463 444 444 444 444 444 600 444 463 463 463 463 406 463 406 ]/Encoding /WinAnsiEncoding/FontDescriptor 29 0 R>>endobj29 0 obj<</Type /FontDescriptor/FontName /GFHDGL+HelveticaNeue-Condensed/Flags 32/FontBBox [ -250 -212 1244 1000 ]/MissingWidth 556/StemV 82/StemH 82/ItalicAngle 0/CapHeight 1331/XHeight 999/Ascent 932/Descent -212/Leading 398/MaxWidth 1037/AvgWidth 450/FontFile3 142 0 R>>endobj142 0 obj<</Filter /FlateDecode /Length 143 0 R/Subtype /Type1C>>stream
HâuU{TWû!‰µmDÜÅöËÃX®T¿™PQb‰a≈ä*> 	Ñáÿ¬z¨ÑàV<XiEB[mQjk—VE •'•ï3.©∆ı±∏€CC/›≥7QªÌ{íì…Ã‹ÔﬁÔ˚Ó˜Õ–îªE”¥π8*"2⁄?Jø≈®œÕHMâ—ÁÈßÖge¶È3˙4Áê©ÚHJ÷–Ú7y¨BÌéÉÒ∆_ãVé•®“ã/¬{#·‹®è«<∑ ãR–ÙÆ˜èágeÊdº±1Wúú:Eú$Ü•em–ã	ÖÜ\˝VÉ®ÀLÕ …Œ I…’ßàbÿñ-bºsºAå◊Ù9Frıw>bÜALssR“Ù[Sr6ãYÈbtFfVna∂^ãS2”≥rƒÇ5‰m0d§e§‰dË¿œ“äøÀ˘ﬂUßLä¢…ázÅ¢T4ÂESäzô¢&P‘täöEQGR	Ó‘JöOú¢îíöLÕ•¢)#’I›ß∫ên°Øπ%π5ª*¢áÓÛ‹ÓïÓW‹ˇ£•‹§¨SﬁGa®›bF1Ø1YÃGÃQ%™`ø≈ŸVj≠
®ı±B69√‰Gá≥q∂≤ëÍ0ı“†LqLîı‚2§ÕÉtèC—„ÛÂD*m1 ±·ô€}Un‡¿∏ABlÛPR,√vÔˆ)yım2“‹+∑ŸË/Ì∞ŸÆêóÙr¯™j=ˆ˘…¶Å˛ón\;}	(ı∑€Ä%;1!´y;jŸJ†¨◊≈Ñ¶Øè_≈«≠RŒçõé_RÀ¢ã¥zı8|Ÿı=ÚÓ	%÷2º◊˝ªiDdí=¶w á;}Ë<$)° }ÉìîÑáíïx∫8â´@wÒ#%N$†;lÚ}õ◊T9f9ÿ«Ï=Ÿè80≥¨ÿO‘`’vPCÑºO*Å}|˜Ë‚ŸÇÅ∏;¶O“‡ïõpé¬Qı8÷	Ï=:û†9 ®@MË¥Ÿ¿b£€Ì`p(⁄}Ï–4Ço˜¿hH¡3ÃKºŸ√π¢˛Ê§–WñØ{Mx©,∆!œ^bÌ
86‰…ATÔpB(D˛ÊiG™á;¨q#∏YΩÏ$óÿ/¿K¡Ω√1ˇ›qÒxÊ dsQLèïJ∂u±qÛäjˇØbæ>◊p¶ûØ@¨qÒæs£∆R∑oœ~°É)€˝∂©D≥Õl©‡s—¸k±˜äÂX≈√ª8õc[__ì_p‚Bkµ•˛0‚Éû èõ<T;lqÌr∞ÇÛΩ⁄$Xkgœã,‹œ5ÉwzkC∞7VÂœù^8 n<[<[∏õà=k≠`R∂¶∂k¿Ûp/Ñyx‚Ú§ÃµÇ	vjëÍ∆+‹7Ç¬J7⁄!^R»º¸˜m0xŸÜ±G∑∞˙0∑y-ä€>?|R9àﬂA“˘£Á˛fY∂Çˇ#πOÌ∞V"‰Fr‡]€◊{ßf‹x¨*ûöﬂﬁ<úê„9-ﬁiB_$5¨÷`ˇB<ª„–3X	l{kKÀAÅòV¨ª…8ÕáVòi•õÌ:Ÿo∏Œ’2çU@Ÿ{éDƒÚôå]«}¬ S„I≤ˇƒw“'0˙·õZ¢ù3¡û}ºj©”&+ }SR‹Ùë‰Mk`jÆ©˛å?iãA≥7¶Ã¢CuΩå
G[aÑMû⁄g#íJƒˆlìs8ó∑¬YA⁄7ÅÓwIÿ˚€ŒÕAÏçHs™dMKúèI√cÒƒà*ºídÙÎ˙”5B≈"îæ/S<˚√:˝ë≥ª-¬Íj‡ÃM†z⁄a¶@¢(Á8m§…/ïmÑ#BΩù«Oˇ∏7j?å$ŸìÈ2ˇÇ˘’À∂¨À„ül!O`M˘ˇz‡’!˘vHì±A}§ß“◊mmÛÙ>Lêõ8ÌpZiN]QZR±ßîg 2“‹m˛“.∞ACï©ıóH¯]Û¬*'Ü~¥ê¨úÇ2lVö‰PÌo…ËP∑SpçÚ—*C…˘tá§ DÜí…ÚÚÛNQNª$X‡¸zèaœvπîIùûÏ~¶1:}"t\‚j˝ﬂYî˛·RÕäÑ¨UyÇ	±∑∫Ê0™g”∫¨bOˇ_Ø∆π`<Å]w¬H®‰+›`átª¢Å§˚ü¿æ']Ò◊É/âQ@ˆ≈˛<$‡-‹¨¢ èöÅ€w˚aÏQË˜™†¬ÅF¯ãM~ ÅTÚñ´í†zœ~œŸ…òœ!ù¸ôü;ºåì†¥≠=r:ÛåÑœ`®`∆jPb6nMjjâS÷C+·óDt•∑H⁄Â,:€@dÅ˝tÌƒ©˙™≤Ú<{®èaˆÌ|´¢Hªy}í¡	Ïº©eT.a^IaÃñ"$ˆ{ˆ∫¨îGr]ÂªÄ¬AöÄ–’~Xqµ‡Jû¿˛t%œZÆûøÙÕÏê¬ÀWHO+∞ñ|ﬂ A›KÍxˆ∫ÆN˜nó˙áé ˙ŒöÙH“ü]6y≤’U"“ìaÑYﬁËˇ¥n_≈Aæõ)ˇk©©P≥Æ‰<ºgÄ BÀıl»…∂MÚ+Æ¸!≥5y~Ÿ’œyiá=ôh≥„Œ]<v∂Œ˘Ã,à&ıølîÊ”U≤è} ò(7)ëﬂB•	˘……’eWDÈ˝2ØÄi–»a?‹Hﬁ=ˇÜçø‡çŒó–Dh™»ÿ)8a*$∏@8¬:§~:Û‹n˚efiQnö∆∏}O≈[Çé)ØÆ65i◊Y{jîª	hök’qOV›Q=î\ç´aB5Ç£ï˝ï√mÎÈy9’∏ˇóñsIendstreamendobj143 0 obj2101endobj30 0 obj<</Type /Font/Subtype /Type1/Name /F8/BaseFont /HFHDGL+HelveticaNeue-CondensedObl/FirstChar 32/LastChar 255/Widths [ 240 258 407 480 480 759 556 240 241 241 352 600 240 352 240 278 480 480 480 480 480 480 480 480 480 480 240 240 600 600 600 444 800 500 519 519 556 463 444 537 537 204 426 500 444 704 556 556 481 556 519 500 463 519 462 722 481 462 463 259 278 259 600 500 204 444 463 426 463 444 259 463 463 204 204 444 204 722 463 444 463 463 296 407 259 463 406 648 406 406 389 259 222 259 600 500 500 500 240 480 407 1000 482 482 204 1037 500 240 796 500 463 500 500 240 240 407 407 500 500 1000 204 990 407 240 722 500 389 462 240 258 480 480 480 480 222 482 204 800 289 389 600 352 800 204 400 600 312 312 204 463 556 240 204 312 289 389 721 721 721 444 500 500 500 500 500 500 722 519 463 463 463 463 204 204 204 204 556 556 556 556 556 556 556 600 556 519 519 519 519 462 481 463 444 444 444 444 444 444 667 426 444 444 444 444 204 204 204 204 444 463 444 444 444 444 444 600 444 463 463 463 463 406 463 406 ]/Encoding /WinAnsiEncoding/FontDescriptor 31 0 R>>endobj31 0 obj<</Type /FontDescriptor/FontName /HFHDGL+HelveticaNeue-CondensedObl/Flags 96/FontBBox [ -250 -212 1244 1000 ]/MissingWidth 556/StemV 82/StemH 82/ItalicAngle -11/CapHeight 1331/XHeight 999/Ascent 932/Descent -212/Leading 398/MaxWidth 1037/AvgWidth 450/FontFile3 147 0 R>>endobj147 0 obj<</Filter /FlateDecode /Length 148 0 R/Subtype /Type1C>>stream
HâlUPWÌûû~É|µ”£L∑† 
ÇÄ(Fw%£Æ_∆f≥»(£†ÜAQT¢—†"ÖÆøîƒUq-?Â∫âül4à¯èüÕ:ÇN¢ÀJ´£)]©Êˆx«uﬂ`V7[©Æö◊Øﬂ=Ôù{œywXFØcXñç»ï1"}Lø€ºR[I¡LÎ8€[úŸ^òg+tÿÚ∆œòÁãÆ3ZwVÎ°”¬9-Lø,PáÉ1ˇ≈“ÉyS-˚™ TÀÙÏ˝™„µ*–Œ0'Ç·aó=∫ÿª2ÀVÏ>l∂ïÃŒ/Q˙ÃåQ§¶&(iyˆ6≈RÊ(±}ËP2g⁄ããÏ≈÷[^EIõ7O…Ú≈;î,õ√V\Jøæ!™8´RRlÕ≥}h-û´ÿg)c

Ì%eE6%-]±Ê≈€ãïäu,ò·(»+∞ÿˇÉ8HyìßB-òø¿ˆv’WÜaÈ√¯Èò@éÈ¢c∫±åQ«D¶/ÀÙÁò$ì÷âÃ‰≥ÃBÜ1”Ç2:Üc˙13ômLÛ=Ûå˘7;û]ƒ^÷—Õ◊›„t\gÂÙ›Ùìıe˙ûa|&øí?ƒø"É…oà0L2,1‘û˚ô¸2˝ntÍ◊©®”%ˇPˇ˛ı˛?t	0L	¯"¿ò∏&P
ZÙ∑†6·a¢∞J∏(<ÊÇ«o-6ˆ|ﬁµ…-ÊäµMZª»sêô+Ê/6}`∏˜Á◊o[„‚†“!ŸØZ8òË…ëb1$ì1…àâß0Â1J¶$"gC/H1B¸~x¬Loq@Z∏S8F˙B íåê8R‚@2˝û4a‰ÿSå_àá ≈Aœ⁄R(jdag#;C°àŒê˛dbeB™û≥MnÆ)‰W˘*PÈbœ¿ÓTJ∞∆Ökﬁ˜Ûx"‘ñ7j≠çÏa©|R.ÅÂS»Éæﬁr»BZñc&‡–O1,2x!A¬à òAób*0d* bLBmm©∂ˇ‚x—
[ƒoØi˚%ËÁ›ﬂBƒCûÏÒÒ€’—©ÀW˘	µU.Ì¨ì=¶¬\ï”Fª$<O∂‘Ì˚Ú»¡g≠°ﬂ]?~„Â˘ “´”€íÄFìJéÆÿ[{3«õïõıæi‚˚¸–Ù¥j‘îéT‡é≤ª~ÆB°jV≈vQ”“¥œ•ÉÂé©h˝K0£kp"dõƒvΩﬁ·6ˆ!Àù2ø\Æ<GmÑ‡oµãs&»4˘f©i˚É«4¸ÒˆiiéI≤®%94…©z]Ïa≠wXÛJpõåêmçúQà∫èøßd+Ù>ùè{Ï˘π{G¸nz˚:xf9·éèßŸ«îÚ|“ 	“úáT∞nÅHÅ®r*Äè&Ü¶G`8Ü]NÄ`◊Wß˜‘»’2˚âîÊìÒsææ S≈ö•·eâq4<ÆÏ~sÛÓ˚™,>Qw'ó©‚PÁ3w71∑IÎ%Ω^¨ıÆ”ˇÏÅ7øn#1Í˛˙%5d∂û∂±+µ≠‹ 79Ÿ<,"òÕª	NÚ‰ËOŒEI’‰!>Âq.V9°∂ñ;ª^P°ÿ= M+è§vr˚ä-f‘‹1˝e$If	¶àπ˚ÙVÛÆ%’ ’Qª∫„»’´FêÎoB;QÕ“ø»ΩCπi®¥bñE7/wj?8ªûp√˜@∑ÿ&>“¢©Ÿì◊,çV∫£∞å¥¢©€Ë »b€√=£ÜTÀn Íqw1™;NõC=ûÅ{—”eÒ$úÜŒ–}ì,<©rj◊úÏ5j‹ƒ{B$
Kﬁå}–ÑÔ,¶æèï„;H@ ˚8åÑòfád,ñ—BÑıU.ÿÏÇ{AÂ.Ñh]\¯5lÜÌ.‹N≈˝´ÀÀa)≠eÎ€ZπÓ*wNº N8¸s~ôçbùXØïk[•CkWÅ≠oòt”aú,÷πŒüº¥CÆ&‚‚æçö¡ ÷„|3Î†'â]ÅQ(¸≤$&±æuﬂË·Îe7’ñzr˛L≈ììDÑ9ÂNOØÖÏÆxè^P=mwIﬁu$fŸ‘w'îΩ`:5hÇa‡âﬂ@ Dˇ≈"ÌVït˝ˆ¢™≈™‹E∫ãæö@‚K=Ø“¡£Á´_ÍÈŒÿá`§˜
_IÌ
Oß¥÷‡O{pz:¸©ÉÄ÷L°eﬁfÇ(Ô#º\{ƒ#°¡ä≥¥"˚©0<Û§7*§*NÉi¡B’»òú&õı lC#Ω˛©KËêÖ]TÖ≥‘†Nﬂ·wágÅ%Ùœ&+&UçïqÙkÎµ ;y˙Ô‰Í<
º·Ñ?vÿzëœ|Ì>Ï ¢v¸LEÃFyr’˘ß|∂4Ï9)›˙—Œ’ﬂUÄ∫˙R~√ÿç~‘ﬁÌˇÿπ˜ÆÀ¸àF‘õpâÔêvr∑n˙H4≈VMïìÈÖ{ÌÔÍP7î©f∑xSº≠M÷ˆH–≠rÏuÏ—3Ìÿ-So‚g :aéÒ∑ìßç4â˜QZuÔ{9â`l˝@x∑ÇÍ ’$ﬁÑ|ÄÅ„≠cGõL‚ÌñΩSièXO•ÎÏba<˝ÿÁÈ,AÜÀkÈ/;´wÃgÑì*¨Vπìê/at„P⁄Ìïøﬂápì∂6…ª÷müó\PﬂÓõÑuUmög![©Õ‚`xË	d–∆OPÒz|¬+öáŒÿV!⁄$*¸&œ˙Ü¸D~‘ö˘jÚî*ˇÅh
¢	∞ﬁ;•›·{í®éwdÈÑZt◊k”VkÛ9òØ$Ã¬W¥Ao8x‰?uWyLwf]wÜ“fkR÷Ã∫ı@•ävÒ@≠Ç∫¡äR´ñ**ó®x†.+¢X¥k8µR,ÎTÉàµ≈R(e,fÎ	dtWÉ°≠¡7‰G”æôUS”öÏ3ô}Ô˜Ω7Ô˚æ7™n
mÎoòœ§√=H	qá’(JΩﬂ(◊
ñXÏ`°!\ú%˝QGld0ÿT£)\zuêoJïñÉ≥LL[PA„èS5_îú.‰ÍË	≥gOÛﬂE´3∑·M(ÆˆÈÃòÛ‡*∫∞Ëb”ΩÆ+'ì«ô2ÊßqDı©ä©õï≤&j∫ß˜Ö–ûKó+.ñsH⁄îYy5¶JMiYﬁæÉ⁄&zÔû›∆,ÕzSiô.”WL›DO‹¢5G»:ñ©ãàåçXêVıCùπ¥ºê´:v=ˇã≥:O1¿
©Æ,µ3ı8Î•Ï≥¢ﬁ∑K&7¢Nıõﬁ8&s
)e€)¶ûœ•◊%4j`–w‡ﬁ00¶í·ã¢ìñ¶iç∞S/)èS@…+*Ì∞@Päú¯˚s2–®,◊_‰WHÉ{û˙.ßß¬7Oõ9"¢ø?q˘ó“∞(Ó5th‘KD˜.¢∑íŒ€ätCâ:”ﬂ'0µ‹8®∞z≤”H]HãÆà—Ôt2ï$Åâ
ò∆∫öö√í÷e⁄Âˆ√r∆Ûä≥vàƒ˜Í∑ÿ∫≤ úÏ◊ãÉBπ$⁄n`O—@g¬P\*^<‚º˜#N»“OfÇAù∏¥≈¢ΩØÊÅ≤*⁄eªª ÆÓ‚}[®≥EÊ3\µu>5i’«ì¥!ÅÜ€¥:èÑ‡bG7Ü[±®váπÎ≈dVÆh@˙?˝VPÿ‰"µÃcmd'SÃùŸF˙\VlM∏Ü^Å?<®Ä,F∫T^[§Õ¶Ûà«‹à_Y\øG´ßàßXìEN◊aºL[1YÍ§ﬂÛ<AŸÄ()ÍvÛ…⁄õ˚Á,Á˙)AD∑òû.&lm¸&ŒÒ%≠-©<qm<ö0ƒ¢ßøNÙx·â^ˆ%|
K§§J(zàC÷ê0bR≈@˝_q®6Fë"‰ÿ+ÛhPˆÖæ8ΩDm	ö‘é¶K?∑¡L}ãåOh>^›ˆEøvÎÄ´ãàYªÅkŒH<>OµÛ%õ¥FäÈhôL;JñÚ 3µo,Y'«qwKä√ÒÉxEÖÌ 
ú7‚]E<¿|™Âi˜^	8>+P&º9¥éµÏÑåpÁ¢ûª
Ωà3qN˜á='æ)°UxÈ’!”‘GÌ%~π.u"Ú´˜7•?å`{.µ¥∏6È¢¥g`*®¡?TÑ	èMH»í
{ KÖ˝;ØÉ–âyá¶Î∆Jt‡¿áÁ·Q‰ˇn)/ˆ≈N¶ôÉëÆqLCTƒüå8CFÄˆbm≈iP=6-ÒZ∞ê-	SÅ=É.Í˛ØUÁ ˆÊ‚ò/;i¶"oÁ∂‹MËöe—$PÕÌzZ%wÕı+·#&	AÇl?*Ò]∂%'úàü∆'0∆ã(Ø¶µn“2˜[7Òô3=ßÕ€∫nb˙O≠Hßà\¢Åπ=ø5Ä™◊pln˙ç°Ãp§≈ÛFS~ysQ‚lâfŸVq$/sL¥∞Hß~ä
.˝ƒv∫,/˜0◊FÁÏÿnL◊ƒgû◊¬”áº¯!.áà$ßæúÒå’cd‡¸œ‚¶ÌΩ˙-'R˙˛AtàiË._˘∫æLí◊¥‘âHSØ8#UQ ∫„ZÁ˛ÕB¥†Ë{ıœ@cÒg»∆nÍÜá›äÇ>g%h‹ª©‚\¥•G˝s%wa0¿ü
¿#5å§¸‰Î	xç¶)ÛGqP‰î0*—-I%Ü˝	´ûìU“í<*a‡A£»¬—∞P:1íÒ}û/`M…b7«™í∂gl\°IŸº/wõ÷@ÁòÕFãÊ˜2˛zâ|≈6#C÷9 „æ:ÿ™Äc] jqõ)≤ßˇ}ïÓY…vâúÍπIÀﬂ∫
Ø¥âÀ–»x»7PÍ®W.wß´µã©eÊ@«}é	#c{ﬂ‰ÅQRz]Ø#œ:Ê t‡⁄¯éìØÓ?L)k˚ˇGÍ-Êæ83â0√03'Úm˘˝áhﬁExvπâÒÏ?ïrÜ≥endstreamendobj148 0 obj3708endobj32 0 obj<</Type /Font/Subtype /TrueType/Name /F9/BaseFont /TimesNewRoman,Italic/FirstChar 32/LastChar 255/Widths [ 250 333 420 500 500 833 778 214 333 333 500 675 250 333 250 278 500 500 500 500 500 500 500 500 500 500 333 333 675 675 675 500 920 611 611 667 722 611 611 722 722 333 444 667 556 833 667 722 611 722 611 500 556 722 611 833 611 556 556 389 278 389 422 500 333 500 500 444 500 444 278 500 500 278 278 444 278 722 500 500 500 500 389 389 278 500 444 667 444 444 389 400 275 400 541 778 500 778 333 500 556 889 500 500 333 1000 500 333 944 778 556 778 778 333 333 556 556 350 500 889 333 980 389 333 667 778 389 556 250 389 500 500 500 500 275 500 333 760 276 500 675 333 760 500 400 549 300 300 333 576 523 250 333 300 310 500 750 750 750 500 611 611 611 611 611 611 889 667 611 611 611 611 333 333 333 333 722 667 722 722 722 722 722 675 722 722 722 722 722 556 611 500 500 500 500 500 500 500 667 444 444 444 444 444 278 278 278 278 500 500 500 500 500 500 500 549 500 500 500 500 500 444 500 444 ]/Encoding /WinAnsiEncoding/FontDescriptor 33 0 R>>endobj33 0 obj<</Type /FontDescriptor/FontName /TimesNewRoman,Italic/Flags 98/FontBBox [ -250 -216 1163 1000 ]/MissingWidth 377/StemV 73/StemH 73/ItalicAngle -11/CapHeight 891/XHeight 446/Ascent 891/Descent -216/Leading 149/MaxWidth 969/AvgWidth 402>>endobj41 0 obj<</Type /Font/Subtype /Type1/Name /F10/BaseFont /Courier-Bold/FirstChar 32/LastChar 255/Widths [ 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 ]/Encoding /WinAnsiEncoding/FontDescriptor 42 0 R>>endobj42 0 obj<</Type /FontDescriptor/FontName /Courier-Bold/Flags 16418/FontBBox [ -250 -250 720 1000 ]/MissingWidth 600/StemV 191/StemH 191/ItalicAngle 0/CapHeight 900/XHeight 703/Ascent 801/Descent -250/Leading 334/MaxWidth 600/AvgWidth 600>>endobj60 0 obj<</Type /Font/Subtype /TrueType/Name /F11/BaseFont /TimesNewRoman,Bold/FirstChar 32/LastChar 255/Widths [ 250 333 555 500 500 1000 833 278 333 333 500 570 250 333 250 278 500 500 500 500 500 500 500 500 500 500 333 333 570 570 570 500 930 722 667 722 722 667 611 778 778 389 500 778 667 944 722 778 611 778 722 556 667 722 722 1000 722 722 667 333 278 333 581 500 333 500 556 444 556 444 333 500 556 278 333 556 278 833 556 500 556 556 444 389 333 556 500 722 500 500 444 394 220 394 520 778 500 778 333 500 500 1000 500 500 333 1000 556 333 1000 778 667 778 778 333 333 500 500 350 500 1000 333 1000 389 333 722 778 444 722 250 333 500 500 500 500 220 500 333 747 300 500 570 333 747 500 400 549 300 300 333 576 540 250 333 300 330 500 750 750 750 500 722 722 722 722 722 722 1000 722 667 667 667 667 389 389 389 389 722 722 778 778 778 778 778 570 778 722 722 722 722 722 611 556 500 500 500 500 500 500 722 444 444 444 444 444 278 278 278 278 500 556 500 500 500 500 500 549 500 556 556 556 556 500 556 500 ]/Encoding /WinAnsiEncoding/FontDescriptor 61 0 R>>endobj61 0 obj<</Type /FontDescriptor/FontName /TimesNewRoman,Bold/Flags 16418/FontBBox [ -250 -216 1182 1000 ]/MissingWidth 328/StemV 136/StemH 136/ItalicAngle 0/CapHeight 891/XHeight 446/Ascent 891/Descent -216/Leading 149/MaxWidth 985/AvgWidth 427>>endobj98 0 obj<</Type /Font/Subtype /Type1/Name /F12/BaseFont /IFHDGL+HelveticaNeue-BoldCondObl/FirstChar 32/LastChar 255/Widths [ 240 296 463 480 480 778 593 260 296 296 390 600 240 370 240 332 480 480 480 480 480 480 480 480 480 480 240 240 600 600 600 481 800 556 556 537 574 481 463 556 556 258 463 537 463 740 574 556 519 556 556 519 480 538 519 760 537 520 481 315 332 315 600 500 222 481 500 463 500 463 296 500 500 240 240 500 240 758 500 480 500 500 333 444 296 500 444 704 462 444 426 315 222 315 600 500 500 500 260 480 463 1000 480 480 222 1093 519 241 778 500 481 500 500 260 260 463 463 500 500 1000 222 990 444 241 741 500 426 520 240 296 480 480 480 480 222 481 222 800 314 426 600 370 800 222 400 600 312 312 222 500 480 240 222 312 314 426 721 721 721 481 556 556 556 556 556 556 759 537 481 481 481 481 258 258 258 258 574 574 556 556 556 556 556 600 556 538 538 538 538 520 519 500 481 481 481 481 481 481 722 463 463 463 463 463 240 240 240 240 480 500 480 480 480 480 480 600 480 500 500 500 500 444 500 444 ]/Encoding /WinAnsiEncoding/FontDescriptor 99 0 R>>endobj99 0 obj<</Type /FontDescriptor/FontName /IFHDGL+HelveticaNeue-BoldCondObl/Flags 16480/FontBBox [ -250 -224 1312 1000 ]/MissingWidth 556/StemV 150/StemH 150/ItalicAngle -11/CapHeight 1372/XHeight 1034/Ascent 961/Descent -224/Leading 480/MaxWidth 1093/AvgWidth 473/FontFile3 152 0 R>>endobj152 0 obj<</Filter /FlateDecode /Length 153 0 R/Subtype /Type1C>>stream
HâMí}L[U∆œmÈΩ·√ŒıRh⁄qzŸ AàÄs„c1AX*_√ô≤YËuT°zK°8ÜäKdÉ≈çÈR±Lhf3E:q§Cãs∏-ljà[ö fŸ?¶{/ú%Û?œ_Á„}ﬁºøÁ9äR ä¢íKwîõ2J¯F7Ô≤◊[À¯V˛—ßÑF€v¡a3◊5Fä
§uH2P“Öî§î‚£∫‚$è∏V'W´UÿG=8å}(9ı¡⁄ˆpìÑ–´óÇ…u0øﬁø˙≥))Í‡H`ª–Ïq⁄˜5∏∏¥˙G∏«ÚÛ≥πBõP«sï—≈7â\©£^p6N´ã∑er\ac#W©π
^‰ùn˘ˆﬂ19ª»Y9ó”j„õ¨Œó8·Œdw.O3œsVá-KprvY+∂÷âvõ›Í¥Û‚ˇÙππ\Ñíã`Úë∑q2¨Ω•ïˇØ$bíÖ∂†ß—TÇv¢gP9™DªP¨ÏR %Ú†T:uñ∫ÆHRÏW®’ùaÈtX3)D)∞0a!ù˝mD≠É!∫o ≥◊!{È
d,
AÇæ0ÂyUŸ–Å”ÁÙc'?ªåŸÉßl%F¿Ô—êî$ÒdCN1íÿØwA¸^Ã˛˙˚ãgƒùz≥Uÿ[–¯˚u®3úµ˜¬ê”¶9R≥˚° µ}"ö=a&—$∫À\fÓ
A4Ü"øËVˆL‹=t¿—‡´1UM±Ÿƒ2ï™ÈO|‚>Z}™sû∏	ÒÀ‘ê‹9tJ©zµ1êøŸJ ¢'2n?…$ÑÆ¡˙71yò.Ìno®5<€ÒÕ%cÄπÂc&ﬁù	ŒºUõ´CƒÙÀ„ê2Ü≈•¨∞∆/€î:ÿ:vÆI~-˚±πáπÿb‡$Ωù§Ÿ|ÁC£√∆æ"∫™ÕZâŸ—éóè?`d≈«ªΩz¢£Ÿ—¨πàÜ≠óÆ¬F,ı3Ï!üj!ıÌ≥¡ìœëƒÏSy˘+s7∞⁄Áñ¸m∑!F3	8q2∞‰'òf≥Á¢‚êÃ#‘£ùÀízôñœiÄï√≤ßƒ<û€é`ÿ<}L`ÆΩK∂Ωa$õ´”àIé-GÆ\®ím—{™*ã.Ä"ÇúÂÜú0‹ã èˇ“YˇWH≥°B2ó≠ÖD˝r≠\ÊÓ£üÒªß†ö∫r@?Å•ÊQUÛÓ›M∏áfÔÃ£Êdò<y‰–E∫≥g«e¯Åûü˛‡º˜ùCáºtLo˜kΩ›Ü
õΩF0  ´ÛÂ⁄Áë*⁄÷Ü“…“v¯>t/»
mnqXÍ<æi,1ÚDõˆÛ‰IÀÌØ&ﬁˇr$Ú;:Ω+{º§¬Ω4[<v?ÿœÑc «ˆ∆©·ıx…§˝Ã Wendstreamendobj153 0 obj1043endobj2 0 obj[ /PDF /Text  ]endobj5 0 obj<</Kids [4 0 R 18 0 R 23 0 R 35 0 R 38 0 R 44 0 R ]/Count 6/Type /Pages/Parent 157 0 R>>endobj48 0 obj<</Kids [47 0 R 51 0 R 54 0 R 57 0 R 63 0 R 67 0 R ]/Count 6/Type /Pages/Parent 157 0 R>>endobj72 0 obj<</Kids [71 0 R 76 0 R 80 0 R 83 0 R 87 0 R 90 0 R ]/Count 6/Type /Pages/Parent 157 0 R>>endobj95 0 obj<</Kids [94 0 R 101 0 R 104 0 R 108 0 R 112 0 R 115 0 R ]/Count 6/Type /Pages/Parent 157 0 R>>endobj119 0 obj<</Kids [118 0 R 122 0 R 125 0 R 128 0 R ]/Count 4/Type /Pages/Parent 157 0 R>>endobj157 0 obj<</Kids [5 0 R 48 0 R 72 0 R 95 0 R 119 0 R ]/Count 28/Type /Pages/MediaBox [ 0 0 596 842 ]>>endobj1 0 obj<</Creator <FEFF0051007500610072006B005800500072006500730073002000280074006D00290020002D0020005B006F007600650072006C006F0061006400360031002D00660069006E0061006C002E007100780064005D>/CreationDate (D:20040527194807)/Title <FEFF006F007600650072006C006F0061006400360031002D00660069006E0061006C002E007100780064>/Author <FEFF00500069007000700061>/Producer (Acrobat PDFWriter 5.0 for Windows NT)>>endobj3 0 obj<</Pages 157 0 R/Type /Catalog>>endobjxref0 1580000000000 65535 f 0000339791 00000 n 0000339095 00000 n 0000340203 00000 n 0000004365 00000 n 0000339126 00000 n 0000288497 00000 n 0000289611 00000 n 0000294402 00000 n 0000295491 00000 n 0000295753 00000 n 0000296832 00000 n 0000000019 00000 n 0000004344 00000 n 0000297088 00000 n 0000298175 00000 n 0000298429 00000 n 0000299520 00000 n 0000015034 00000 n 0000004531 00000 n 0000015012 00000 n 0000299781 00000 n 0000300839 00000 n 0000026656 00000 n 0000015190 00000 n 0000026634 00000 n 0000301103 00000 n 0000302210 00000 n 0000323565 00000 n 0000324670 00000 n 0000327189 00000 n 0000328297 00000 n 0000332428 00000 n 0000333524 00000 n 0000026766 00000 n 0000037591 00000 n 0000026875 00000 n 0000037569 00000 n 0000048201 00000 n 0000037758 00000 n 0000048179 00000 n 0000333794 00000 n 0000334879 00000 n 0000048311 00000 n 0000056336 00000 n 0000048398 00000 n 0000056315 00000 n 0000067082 00000 n 0000339235 00000 n 0000056493 00000 n 0000067060 00000 n 0000076597 00000 n 0000067240 00000 n 0000076576 00000 n 0000088589 00000 n 0000076755 00000 n 0000088567 00000 n 0000100106 00000 n 0000088759 00000 n 0000100084 00000 n 0000335143 00000 n 0000336245 00000 n 0000100217 00000 n 0000111570 00000 n 0000100349 00000 n 0000111548 00000 n 0000111681 00000 n 0000123300 00000 n 0000111792 00000 n 0000123278 00000 n 0000123411 00000 n 0000131983 00000 n 0000339346 00000 n 0000123510 00000 n 0000131962 00000 n 0000132094 00000 n 0000142833 00000 n 0000132192 00000 n 0000142811 00000 n 0000142944 00000 n 0000150864 00000 n 0000143044 00000 n 0000150843 00000 n 0000161002 00000 n 0000151035 00000 n 0000160981 00000 n 0000161113 00000 n 0000172747 00000 n 0000161202 00000 n 0000172725 00000 n 0000184039 00000 n 0000172918 00000 n 0000184017 00000 n 0000184150 00000 n 0000196784 00000 n 0000339457 00000 n 0000184272 00000 n 0000196762 00000 n 0000336516 00000 n 0000337624 00000 n 0000196896 00000 n 0000208258 00000 n 0000197007 00000 n 0000208235 00000 n 0000221141 00000 n 0000208405 00000 n 0000221118 00000 n 0000221255 00000 n 0000234453 00000 n 0000221343 00000 n 0000234430 00000 n 0000234567 00000 n 0000245732 00000 n 0000234666 00000 n 0000245709 00000 n 0000257671 00000 n 0000245904 00000 n 0000257648 00000 n 0000265526 00000 n 0000339573 00000 n 0000257843 00000 n 0000265504 00000 n 0000272916 00000 n 0000265687 00000 n 0000272894 00000 n 0000278736 00000 n 0000273077 00000 n 0000278714 00000 n 0000288293 00000 n 0000278885 00000 n 0000288271 00000 n 0000288408 00000 n 0000289913 00000 n 0000294380 00000 n 0000000000 00000 n 0000000000 00000 n 0000000000 00000 n 0000302509 00000 n 0000323481 00000 n 0000323527 00000 n 0000323504 00000 n 0000323546 00000 n 0000324969 00000 n 0000327167 00000 n 0000000000 00000 n 0000000000 00000 n 0000000000 00000 n 0000328601 00000 n 0000332406 00000 n 0000000000 00000 n 0000000000 00000 n 0000000000 00000 n 0000337933 00000 n 0000339073 00000 n 0000000000 00000 n 0000000000 00000 n 0000000000 00000 n 0000339675 00000 n trailer<</Size 158/Root 3 0 R/Info 1 0 R/ID [<c6da4042e7d35ad49e849eabca98f02d><c6da4042e7d35ad49e849eabca98f02d>]>>startxref340254%%EOF