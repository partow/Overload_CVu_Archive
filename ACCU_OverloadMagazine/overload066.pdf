%PDF-1.2 %‚„œ”
 12 0 obj<</Length 13 0 R>>stream
BT558.6 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (3) Tj-202.8 768.6  TD /F0 12  Tf-0.0055  Tc -0.0845  Tw (Overload issue 66 april 2005) Tj-312 -52.8  TD /F1 18  Tf-0.0008  Tc 0  Tw (contents) TjETq 29.4 785.4 m 29.4 739.2 l 372 739.2 l 372 785.4 l 30 784.8 m 30 739.8 l 371.4 739.8 l 371.4 784.8 l h W* n 29.4 739.2 342.6 46.2 re fQ 0.9529 0.9529 0.9529 rg 414.6 57 152.4 727.8 re fBT419.4 757.8  TD0 0 0 rg /F1 16.2  Tf-0.2269  Tc 0.2233  Tw (credits & contacts) Tj-3 -47.4  TD /F0 7.8  Tf0.1286  Tc -0.0146  Tw (Overload Editor:) Tj6 -12.6  TD 0.1244  Tc -0.0104  Tw (Alan Griffiths) Tj0 -9.6  TD /F2 7.8  Tf0.12  Tc 0  Tw (overload@accu.org) TjT* (alan@octopull.demon.co.uk) Tj-6 -28.8  TD /F0 7.8  Tf0.1409  Tc -0.0269  Tw (Contributing Editor:) Tj6 -12.6  TD 0.1204  Tc -0.0064  Tw (Mark Radford) Tj0 -9.6  TD /F2 7.8  Tf0.12  Tc 0  Tw (mark@twonine.co.uk) Tj-6 -38.4  TD /F0 7.8  Tf0.1691  Tc -0.0551  Tw (Advisors: ) Tj6 -22.2  TD 0.1761  Tc -0.0621  Tw (Phil Bass) Tj0 -9.6  TD /F2 7.8  Tf0.12  Tc 0  Tw (phil@stoneymanor.demon.co.uk) Tj0 -19.2  TD /F0 7.8  Tf0.126  Tc -0.012  Tw (Thaddaeus Frogley) Tj0 -9.6  TD /F2 7.8  Tf0.12  Tc 0  Tw (t.frogley@ntlworld.com) Tj0 -19.2  TD /F0 7.8  Tf0.1192  Tc -0.0052  Tw (Richard Blundell) Tj0 -9.6  TD /F2 7.8  Tf-0.0735  Tc 0  Tw (richard.blundell@metapraxis.com) Tj-6 -48  TD /F0 7.8  Tf0.1291  Tc (Advertising:) Tj6 -12  TD 0.126  Tc -0.012  Tw (Thaddaeus Frogley) Tj0 -9.6  TD /F2 7.8  Tf0.12  Tc 0  Tw (ads@accu.org) Tj-6 -58.8  TD /F1 9  Tf-0.0019  Tc (Overload) Tj42 0  TD /F3 9  Tf-0.0704  Tc 0.2684  Tw (is a publication of the) Tj-42 -10.8  TD 0.058  Tc -0.2457  Tw (ACCU.  For details of the ACCU and) Tj0 -10.8  TD 0.088  Tc -0.79  Tw (other ACCU) Tj51 0  TD 0.0312  Tc -0.1332  Tw (publications and) Tj-51 -10.8  TD -0.063  Tc 0.161  Tw (activities, see the ACCU) Tj99 0  TD -0.0015  Tc 0  Tw (website.) Tj-99 -42.6  TD /F0 7.8  Tf0.1469  Tc -0.0329  Tw (ACCU Website:) Tj10.2 -11.4  TD /F2 9  Tf0  Tc 0  Tw (http://www.accu.org/) Tj-10.2 -38.4  TD /F0 7.8  Tf0.1704  Tc -0.0564  Tw (Information and Membership:) Tj0 -15  TD /F4 9  Tf0.0246  Tc 0.0054  Tw (Join on the website or contact) Tj10.2 -19.2  TD /F0 7.8  Tf0.1018  Tc 0.0122  Tw (David Hodge) Tj0 -9.6  TD /F2 7.8  Tf0.12  Tc 0  Tw (membership@accu.org) Tj-10.2 -25.2  TD /F0 7.8  Tf0.1411  Tc -0.0271  Tw (Publications Officer:) Tj10.2 -12  TD 0.0987  Tc 0.0153  Tw (John Merrells) Tj0 -9.6  TD /F2 7.8  Tf0.12  Tc 0  Tw (publications@accu.org) Tj-10.2 -25.2  TD /F0 7.8  Tf0.3399  Tc (ACCU) Tj31.2 0  TD 0.1538  Tc (Chair:) Tj-21 -12  TD 0.1346  Tc -0.0206  Tw (Ewan Milne) Tj0 -9.6  TD /F2 7.8  Tf0.12  Tc 0  Tw (chair@accu.org) TjETq 414 785.4 m 414 56.4 l 567.6 56.4 l 567.6 785.4 l 414.6 784.8 m 414.6 57 l 567 57 l 567 784.8 l h W* n 414 56.4 153.6 729 re fQ BT29.4 702.6  TD/F0 12  Tf0.0332  Tc -0.0732  Tw (Letter to the Editor) Tj331.8 0  TD -0.192  Tc 0  Tw (6) Tj-331.8 -30  TD -0.0173  Tc 0.0773  Tw (Sheep Farming For Software Development) Tj39.6 -18  TD -0.018  Tc 0  Tw (Managers) Tj141.6 0  TD 0.0406  Tc -0.2806  Tw (Pippa Hennessy) Tj150.6 0  TD -0.192  Tc 0  Tw (6) Tj-331.8 -30  TD -0.0333  Tc -0.0067  Tw (Metaprogramming Is Your Friend) Tj181.2 -18  TD -0.0076  Tc 0.3676  Tw (Thomas Guest) Tj148.2 0  TD -0.072  Tc 0  Tw (11) Tj-329.4 -30  TD 0.002  Tc -0.042  Tw (Separating Interface and Implementation) Tj39.6 -18  TD 0.0455  Tc -0.0855  Tw (in C++   Alan Griffiths &) Tj169.2 0  TD -0.0371  Tc -0.2029  Tw (Mark Radford) Tj116.4 0  TD -0.132  Tc 0  Tw (16) Tj-325.2 -30  TD -0.0855  Tc 0.4455  Tw (Overload Resolution - Selecting the) Tj39.6 -18  TD 0.069  Tc 0  Tw (Function) Tj141.6 0  TD 0.0254  Tc -0.2654  Tw (Mikael Kilpel\344inen) Tj141 0  TD -0.192  Tc 0  Tw (22) Tj-322.2 -30  TD -0.0526  Tc 0.1554  Tw (Digging a Ditch - Writing a Custom Stream) Tj181.2 -18  TD -0.3251  Tc -0.5149  Tw (Paul Grenyer) Tj141 0  TD -0.192  Tc 0  Tw (25) TjETendstreamendobj13 0 obj4032endobj4 0 obj<</Type /Page/Parent 5 0 R/Resources <</Font <</F0 6 0 R /F1 8 0 R /F2 10 0 R /F3 14 0 R /F4 16 0 R >>/ProcSet 2 0 R>>/Contents 12 0 R>>endobj19 0 obj<</Length 20 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (4) Tj0 768.6  TD /F0 12  Tf-0.0055  Tc 0.2155  Tw (Overload issue 66 april 2005) Tj28.8 -50.4  TD /F0 30  Tf0.072  Tc 0  Tw (Editorial:) Tj105 -30  TD 0.0277  Tc -0.3277  Tw (Need to Unlearn) TjETq 28.8 785.4 m 28.8 721.2 l 567.6 721.2 l 567.6 785.4 l 29.4 784.8 m 29.4 721.8 l 567 721.8 l 567 784.8 l h W* n 28.8 721.2 538.8 64.2 re fQ BT40.2 613.8  TD/F4 10.2  Tf-0.1219  Tc -0.5281  Tw (I need to use a similar strategy when I write articles and patterns.) Tj-11.4 -12  TD 0.3001  Tc 0.5999  Tw (Sometimes I draft a piece and there is a sentence or even a) Tj0 -12  TD -0.0843  Tc -0.0657  Tw (paragraph which I really like, maybe it\222s witty, sarcastic or makes) TjT* 0.2733  Tc 1.4367  Tw (a subtle side point, or maybe it\222s an excellent example of) TjT* -0.062  Tc -0.2755  Tw (something.  So, I edit my draft \226 and I should mention I do a lot of) TjT* -0.0397  Tc -0.3903  Tw (editing \226 and as I edit I keep the chosen sentence.  But over time it) TjT* -0.096  Tc -0.2386  Tw (doesn\222t connect as well with what is around it and maybe I have to) TjT* -0.1399  Tc -0.4101  Tw (rewrite some of the surrounding text to lead up to this one sentence.) Tj11.4 -12  TD 0.0995  Tc 0.3505  Tw (Eventually it becomes clear that this sentence is more of an) Tj-11.4 -12  TD -0.0646  Tc 0.0431  Tw (obstruction than a support.  It has to be chopped out so the rest of) Tj0 -12  TD 0.1054  Tc 0.3446  Tw (the text can make its point with brevity and clarity.  It may be) TjT* -0  Tc 0.4504  Tw (painful to do \226 like getting rid of those old clothes \226 but you\222re) TjT* -0.069  Tc 0.119  Tw (better off without it.) Tj11.4 -12  TD 0.0239  Tc 0.4261  Tw (\(Actually, in truth, I usually use the same trick I do with old) Tj-11.4 -12  TD -0.0963  Tc -0.0076  Tw (trousers.  Take them out of the wardrobe and put them to one side) Tj0 -12  TD -0.0659  Tc -0.2984  Tw (somewhere, usually in a box under the bed.  If you don\222t need it in) TjT* -0.146  Tc -0.204  Tw (the next six months you aren\222t ever going to need it.  So, I find files) TjT* -0.0696  Tc -0.4035  Tw (on my hard disc with little bits of articles which I never get around) TjT* 0.0016  Tc -0.1516  Tw (to using.\)) Tj11.4 -12  TD -0.1001  Tc 0.1001  Tw (The same thing is true in software.  Sometimes a piece of code) Tj-11.4 -12  TD -0.1381  Tc -0.3869  Tw (is so attractive I don\222t want to lose it \226 say it\222s a nifty bit of template) Tj0 -12  TD -0.0695  Tc 0.5195  Tw (meta-programming, or a well-formed class. No matter how nifty) TjT* -0.0707  Tc -0.4793  Tw (the code it can still restrain you, sometimes these things have to go) TjT* -0.0679  Tc -0.0821  Tw (for the greater good.) Tj11.4 -12  TD -0.0211  Tc 0.4711  Tw (And it doesn\222t end with code.  In fact, those who study these) Tj-11.4 -12  TD -0.0581  Tc 0.5081  Tw (things would consider this ) Tj110.4 0  TD /F5 10.2  Tf-0.0368  Tc 0  Tw (unlearning) Tj43.8 0  TD /F4 10.2  Tf-0.0873  Tc 0.5373  Tw (.  In the same way that we) Tj-154.2 -12  TD 0.1221  Tc 0.2279  Tw (learn something we sometimes need to ) Tj167.4 0  TD /F5 10.2  Tf0.1811  Tc 0  Tw (unlearn) Tj36 0  TD /F4 10.2  Tf0.0893  Tc 0.0607  Tw (something.  A) Tj-203.4 -12  TD -0.0984  Tc -0.3746  Tw (solution that worked well in the past doesn\222t work well now.  If we) Tj0 -12  TD -0.0813  Tc 0.5313  Tw (continue to rely on yesterday\222s solutions we stop ourselves from) TjT* -0.0822  Tc -0.0678  Tw (learning new things, like clothes our solutions come to look dated) TjT* -0.0584  Tc -0.0916  Tw (and full of holes.) Tj11.4 -12  TD -0.0797  Tc -0.0703  Tw (The software development community could benefit from a bit) Tj-11.4 -12  TD -0.0072  Tc 0.4572  Tw (more unlearning.  While we\222re pretty good at dreaming up new) Tj0 -12  TD -0.0354  Tc 0.4854  Tw (languages and methods we\222re not so good at throwing some old) TjT* 0.0177  Tc 0.4323  Tw (ideas away.  Sometimes our old ideas work to our benefit, they) TjT* 0.2048  Tc 0.2452  Tw (allow us to quickly diagnose problems and develop solutions) TjT* -0.0481  Tc -0.1019  Tw (because we\222ve seen the problem before.) Tj11.4 -12  TD -0.0767  Tc 0.4667  Tw (On other occasions these very shortcuts work against us.  We) Tj-11.4 -12  TD 0.2592  Tc 0.5241  Tw (use mental models and assumptions that aren\222t valid for the) Tj0 -12  TD -0.1645  Tc -0.5355  Tw (problem in hand.  Worst of all, we don\222t always know we\222re making) TjT* -0.0895  Tc 0.1031  Tw (these assumptions.  When I was an undergraduate I had a lecturer) TjT* 0.0326  Tc 0.4174  Tw (who always told us to \223Document your assumptions.\224 Problem) TjT* -0.0696  Tc -0.2804  Tw (was, I didn\222t realise that I was making assumptions.  That\222s one of) TjT* -0.0768  Tc -0.4065  Tw (the problems we face, unconscious assumptions, how do we know) TjT* -0.1173  Tc 0.1673  Tw (we are making them?) Tj11.4 -12  TD -0.062  Tc 0.512  Tw (Sometimes of course there are big red flags telling us to drop) Tj-11.4 -12  TD 0.2775  Tc 0.5925  Tw (our assumptions.  For example, when you change jobs, in a) Tj276.6 552  TD 0.2704  Tc 0.4046  Tw (different company with different people we need to change.) Tj0 -12  TD -0.1036  Tc -0.1964  Tw (Unfortunately it\222s too easy to keep fighting the last war, or see our) TjT* -0.1016  Tc -0.0484  Tw (last employer through rose-tinted spectacles, your new colleagues) TjT* -0.0163  Tc 0.4663  Tw (don\222t necessarily want to hear about how good \(or bad\) the last) TjT* -0.1037  Tc -0.0463  Tw (place was.) Tj11.4 -12  TD 0.2702  Tc 0.9132  Tw (Too often new people are encouraged to \223hit the ground) Tj-11.4 -12  TD 0.0109  Tc 0.4391  Tw (running\224 when they start a new job \226 especially if they are in a) Tj0 -12  TD -0.0623  Tc 0.5123  Tw (contract position.  To do this denies employees the time to learn) TjT* -0.0596  Tc -0.0358  Tw (and to jettison some of the past and make a fresh start.) Tj11.4 -12  TD -0.0443  Tc -0.6557  Tw (I\222ve been guilty of this too, my blood starts the boil the moment) Tj-11.4 -12  TD -0.0685  Tc -0.0815  Tw (I\222m introduced to a \223project manager\224, all these assumptions kick) Tj0 -12  TD -0.1423  Tc -0.1714  Tw (in: all they care about is GANTT charts, they believe estimates and) TjT* -0.0727  Tc 0.256  Tw (the waterfall model, they want to divide, rule and micro-manage.) TjT* -0.1069  Tc -0.0431  Tw (I have to fight these assumptions, ask myself \223What proof is there) TjT* -0.0936  Tc 0.0436  Tw (that this project manager is like this?\224) Tj11.4 -12  TD 0.0959  Tc 0.3541  Tw (Recognising and changing our assumptions isn\222t easy.  It is) Tj-11.4 -12  TD -0.0574  Tc -0.4619  Tw (especially hard when you try and do it on your own.  Even looking) Tj0 -12  TD -0.0886  Tc 0.3078  Tw (at data can be confusing, as we tend to see data that supports our) TjT* -0.044  Tc -0.106  Tw (point of view rather than data that refutes it.) Tj11.4 -12  TD -0.1646  Tc -0.3854  Tw (Writing in the Financial Times, Carne Ross \(2005\) described the) Tj-11.4 -12  TD -0.1338  Tc -0.2562  Tw (how the British and American Governments argued at the UN with) Tj0 -12  TD 0.202  Tc 1.7051  Tw (the French and Russian Governments about the 1991-2003) TjT* 0.0545  Tc 0.3955  Tw (sanctions against Iraq.  The two sides cited the same reports to) TjT* -0.1649  Tc -0.0351  Tw (support their case.  Ross suggests that both sides were not guilty of) TjT* -0.1379  Tc 0.2545  Tw (ignoring the contradictory evidence, merely that they failed to see) TjT* -0.1137  Tc -0.0363  Tw (it.  The assumptions each side made blinded them to contradictory) TjT* -0.1333  Tc -0.0167  Tw (data, they could read the words but their meaning was lost.) Tj11.4 -12  TD -0.1286  Tc -0.4032  Tw (We often need other people to help us see our own assumptions;) Tj-11.4 -12  TD -0.1244  Tc -0.4256  Tw (talking problems through helps us understand them and expose our) Tj0 -12  TD -0.1293  Tc -0.4873  Tw (assumptions.  Other people come with their own, possibly different) TjT* -0.1436  Tc -0.5519  Tw (assumptions and we can all help highlight one another\222s.  But, when) TjT* -0.0954  Tc 0.3454  Tw (we are locked in confrontation with others we become defensive,) TjT* 0.175  Tc 0.275  Tw (to admit an assumption, let alone change it, would be to give) TjT* -0.1209  Tc 0  Tw (ground.) Tj11.4 -12  TD -0.1104  Tc 0.0354  Tw (The problem of incorrect and unspoken assumptions affects all) Tj-11.4 -12  TD 0.1282  Tc 0.3218  Tw (aspects of software development: we think we know what the) Tj0 -12  TD -0.018  Tc 0.468  Tw (customer wants, or we think we know what the software design) TjT* 0.2599  Tc 0.1301  Tw (should be, but sometimes we\222re wrong.  The need to unlearn) TjT* -0.094  Tc -0.056  Tw (assumptions is particularly apparent when it comes to process and) TjT* -0.0884  Tc 0  Tw (literature.) Tj11.4 -12  TD -0.2215  Tc -0.2055  Tw (Although it\222s a great great book I\222m getting a bit fed up of people) Tj-11.4 -12  TD -0.1154  Tc -0.3346  Tw (citing Brooks\222 ) Tj59.4 0  TD /F5 10.2  Tf-0.0744  Tc -0.0756  Tw (Mythical Man Month) Tj85.8 0  TD /F4 10.2  Tf-0.0692  Tc 0.262  Tw (.  It was written 30 years ago) Tj-145.2 -12  TD -0.081  Tc -0.069  Tw (about a project that occurred 40 years ago.  Haven\222t we moved on) Tj0 -12  TD -0.0058  Tc -0.1442  Tw (a bit?) Tj11.4 -12  TD -0.1206  Tc -0.193  Tw (While there is some great advice in Brooks\222 work there is some) Tj-11.4 -12  TD -0.0859  Tc -0.2891  Tw (we need to unlearn.  Lets start with ) Tj139.2 0  TD /F6 10.2  Tf-0.1081  Tc -0.4399  Tw (\223Build one to throw away, you will) Tj-139.2 -12  TD -0.134  Tc 0  Tw (anyway.\224) Tj39 0  TD /F4 10.2  Tf-0.1054  Tc 0.2125  Tw (Brooks himself has changed his mind on this:) Tj-315.6 595.8  TD /F3 69  Tf0.036  Tc 0  Tw (L) TjETq 67.2 694.8 528.6 15.6 re h W n BT67.2 697.8  TD/F3 13.8  Tf0.3742  Tc 0.413  Tw (ike many men I tend to like my old clothes.  Unlike many I\222ve come up with a) TjETQ q 67.2 674.4 528.6 15.6 re h W n BT67.2 677.4  TD/F3 13.8  Tf0.1867  Tc 0.7307  Tw (strategy that helps me enjoy buying new ones: I clear out the wardrobe; rather) TjETQ BT67.2 657.6  TD/F3 13.8  Tf0.2544  Tc 0.5892  Tw (ruthlessly I throw away things and make space.  This done I know I need new) Tj-38.4 -19.8  TD 0.1333  Tc -0.1297  Tw (clothes and can enjoy buying them.) TjETendstreamendobj20 0 obj10550endobj18 0 obj<</Type /Page/Parent 5 0 R/Resources <</Font <</F0 6 0 R /F3 14 0 R /F4 16 0 R /F5 21 0 R /F6 23 0 R >>/ProcSet 2 0 R>>/Contents 19 0 R>>endobj26 0 obj<</Length 27 0 R>>stream
BT558.6 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (5) Tj-202.8 768.6  TD /F0 12  Tf-0.0055  Tc -0.0845  Tw (Overload issue 66 april 2005) Tj-309.6 -40.8  TD /F6 10.2  Tf-0.0784  Tc -0.3389  Tw (\223 \221Plan to throw one away; you will anyhow.\222  This I now perceive) Tj-11.4 -12  TD 0.1659  Tc 0.1553  Tw (to be wrong, not because it is too radical, but because it is too) Tj0 -12  TD -0.0862  Tc 0  Tw (simplistic.) Tj11.4 -12  TD -0.0656  Tc -0.0369  Tw (The biggest mistake in the \221Build one to throw away\222 concept is) Tj-11.4 -12  TD -0.0591  Tc -0.3889  Tw (that it implicitly assumes the classical sequential or waterfall model) Tj0 -12  TD -0.0696  Tc 0.0216  Tw (of software construction.\224) Tj166.8 -12  TD -0.1214  Tc 0.0734  Tw (\(Brooks, 1995, p.265\)) Tj-172.2 -24  TD /F4 10.2  Tf-0.1337  Tc 0.5837  Tw (Then there are ) Tj61.2 0  TD /F5 10.2  Tf-0.133  Tc 0.283  Tw (Chief programmer teams) Tj100.2 0  TD /F4 10.2  Tf-0.127  Tc 0.4913  Tw (.  This is the idea that we) Tj-161.4 -12  TD -0.0999  Tc 0.6699  Tw (can have a few great programmers and arrange things to support) Tj0 -12  TD -0.0842  Tc 0.2615  Tw (them, keep them working productively and all will be right.  This) TjT* -0.0916  Tc 0.8416  Tw (approach leads to teams where several lesser programmers work) TjT* -0.0859  Tc 0.9859  Tw (individually on minor pieces of functionality while the ) Tj229.8 0  TD /F5 10.2  Tf0.0193  Tc 0  Tw (Chief) Tj25.2 0  TD /F4 10.2  Tf0.2517  Tc (or) Tj-255 -12  TD /F5 10.2  Tf0.1471  Tc (super) Tj27 0  TD /F4 10.2  Tf0.136  Tc 0.9997  Tw (programmer\(s\) delivers the real value.  Consciously or) Tj-27 -12  TD -0.0063  Tc 1.142  Tw (unconsciously managers and programmers believe that Jim the) Tj0 -12  TD -0.1099  Tc 0.5599  Tw (super-programmer will deliver 70% of the project while his three) TjT* -0.062  Tc 0.992  Tw (helpers will deliver 10% each, of course they\222d like four super-) TjT* -0.032  Tc 1.322  Tw (programmers but they \223can\222t find them\224 so they settle for just) TjT* -0.1527  Tc 0.1527  Tw (reducing the load on Jim.) Tj11.4 -12  TD -0.0861  Tc 0.5361  Tw (This is quite the opposite of what many people now think and) Tj-11.4 -12  TD -0.1436  Tc 0.2936  Tw (flies in the face of what ) Tj97.2 0  TD /F5 10.2  Tf0.0136  Tc 0  Tw (Agile) Tj23.4 0  TD /F4 10.2  Tf-0.0925  Tc 0.3025  Tw (methodologies advocate.  Here \226 as) Tj-120.6 -12  TD -0.103  Tc -0.547  Tw (in much of twenty-first century modern business life \226 it is the team) Tj0 -12  TD -0.1755  Tc -0.4109  Tw (that is important.  Whether it is serving fries in McDonalds, building) TjT* 0.2591  Tc 1.7242  Tw (a Nissan or writing software, simply, the scale of modern) TjT* -0.0737  Tc 0.0237  Tw (endeavours means that it is the team that is the building block not) TjT* -0.0418  Tc -0.1082  Tw (the individual.) Tj11.4 -12  TD 0.2798  Tc 0.4102  Tw (So, it is with dismay that I hear developers and managers) Tj-11.4 -12  TD -0.1011  Tc -0.1989  Tw (proclaim, \223If we only had a few more good people\224 or \223Where can) Tj0 -12  TD -0.0545  Tc 0.5045  Tw (we get more good people?\224  It is not the lack of individuals that) TjT* -0.1634  Tc -0.5266  Tw (hold our developments back but the lack of good, productive, teams.) Tj11.4 -12  TD -0.1029  Tc -0.0471  Tw (We need to apply a bit of unlearning here. Let\222s try and unlearn) Tj-11.4 -12  TD -0.0905  Tc -0.0595  Tw (this particular mantra.) Tj11.4 -12  TD -0.0742  Tc 0.4642  Tw (Sure, maybe one in 100 engineers is more productive than the) Tj-11.4 -12  TD 0.2541  Tc 1.7231  Tw (other 100 put together but are we right to base our entire) Tj0 -12  TD -0.1012  Tc 0.4846  Tw (development process around finding this individual?  We need to) TjT* 0.048  Tc 0.402  Tw (find them, hire them, motivate them and retain this one person.) TjT* -0.0986  Tc -0.4914  Tw (Even if we can do all that is it right to base an entire strategy around) TjT* -0.0598  Tc 0.0189  Tw (this person?  And the chances are, one person isn\222t enough, we\222re) TjT* -0.0803  Tc 0.2732  Tw (going to need 10, 20, 100 more like him \(and it usually is a him.\)) TjT* -0.0846  Tc 0.5346  Tw (And how do these guys work as part of a team?  Usually not too) TjT* -0.1829  Tc 0  Tw (well.) Tj286.2 480  TD -0.077  Tc 0.2543  Tw (It could be that our one individual is actually holding the team) Tj-11.4 -12  TD -0.158  Tc -0.3193  Tw (back.  They may actually block others from dealing with a problem,) Tj0 -12  TD -0.045  Tc -0.055  Tw (or their very productivity may hide a fault with the team.  Alistair) TjT* -0.0581  Tc -0.0919  Tw (Cockburn tells the following story:) Tj16.8 -24  TD /F6 10.2  Tf-0.0881  Tc 0.4601  Tw (\223...a consultant who visited his company and said words to the) Tj-11.4 -12  TD -0.1262  Tc -0.4718  Tw (general effect of, \221If I go into a company and see one super-salesman) Tj0 -12  TD -0.0709  Tc -0.4171  Tw (who is much better than all the rest, I tell the owners to fire this man) TjT* -0.0924  Tc 0.2081  Tw (immediately. Once he is gone, all the others improve and net sales) TjT* -0.0206  Tc -0.0274  Tw (go up\222.\224) Tj162 -12  TD -0.1221  Tc 0.0741  Tw (\(Cockburn, 2003, p.27\)) Tj-167.4 -24  TD /F4 10.2  Tf-0.0988  Tc 0.0488  Tw (Fact is, the super-programmer approach doesn\222t scale.) Tj11.4 -12  TD -0.0859  Tc 0.1073  Tw (Instead, we need to hire and develop ) Tj148.8 0  TD /F5 10.2  Tf-0.1993  Tc 0  Tw (teams) Tj25.8 0  TD /F4 10.2  Tf-0.1841  Tc 0.1841  Tw (of people.  We give) Tj-186 -12  TD -0.1922  Tc -0.2348  Tw (them the tools they need to do the job, and we remove the blockages) Tj0 -12  TD -0.0014  Tc 0.3847  Tw (that stop them from working more productively.  We encourage) TjT* -0.091  Tc -0.059  Tw (them to improve themselves, their environment, processes and the) TjT* -0.1041  Tc 0.3904  Tw (company \226 and that means we aren\222t scared to change, whether it) TjT* 0.1056  Tc 0.3444  Tw (be moving desk or trying a new way of working, we reject the) TjT* -0.1083  Tc 0.1083  Tw (assumption that tomorrow will be a repeat of today.) Tj11.4 -12  TD 0.1401  Tc 0.3099  Tw (If we are to expose assumptions we need to enter into open) Tj-11.4 -12  TD -0.0862  Tc 0.5362  Tw (dialogue with others \226 not necessarily people who hold the same) Tj0 -12  TD -0.2586  Tc -0.1057  Tw (point of view.  We need to allow time for this, we need to understand) TjT* -0.0814  Tc -0.0186  Tw (our goals and share mutual goals.  Above all we must be prepared) TjT* 0.1875  Tc 0.2625  Tw (to unlearn ourselves, if we start with a position to defend and) TjT* -0.0568  Tc 0.5068  Tw (assumptions we\222re unwilling to let go of then we aren\222t going to) TjT* -0.1147  Tc -0.0353  Tw (get very far.) Tj11.4 -12  TD 0.3928  Tc 1.7822  Tw (Simple really.  Well simple to say, unfortunately, it\222s) Tj-11.4 -12  TD 0.3329  Tc 0.2971  Tw (incredibly hard to do, after our unlearning we need to learn) Tj0 -12  TD 0.1928  Tc 0  Tw (again.) Tj222.6 -12  TD /F7 10.2  Tf-0.0372  Tc 0.1932  Tw (Allan Kelly) Tj-67.2 -12  TD /F2 9  Tf0  Tc 0  Tw (allan@allankelly.net) Tj-155.4 -30  TD /F0 12  Tf-0.018  Tc (References) Tj0 -18  TD /F4 10.2  Tf0.1355  Tc 0.3145  Tw (Brooks, F. 1995 ) Tj71.4 0  TD /F5 10.2  Tf0.1586  Tc 0.2914  Tw (The mythical man month: essays on software) Tj-60 -12  TD -0.1205  Tc 0  Tw (engineering) Tj47.4 0  TD /F4 10.2  Tf-0.2159  Tc -0.5341  Tw (, Addison-Wesley.) Tj-58.8 -12  TD 0.2598  Tc 0.7902  Tw (Cockburn, A., 2003 ) Tj91.2 0  TD /F5 10.2  Tf0.2543  Tc 1.2457  Tw (People and Methodologies in Software) Tj-79.8 -12  TD -0.1468  Tc 0  Tw (Development) Tj52.8 0  TD /F4 10.2  Tf-0.0306  Tc -0.1194  Tw (. PhD. thesis, Oslo) Tj-64.2 -12  TD -0.1034  Tc 0.0734  Tw (Ross, C., 2005, War Stories, ) Tj115.8 0  TD /F5 10.2  Tf-0.1061  Tc 0.1561  Tw (Financial Times Weekend Magazine) Tj145.2 0  TD /F4 10.2  Tf-0.15  Tc 0  Tw (,) Tj-249.6 -12  TD -0.0402  Tc -0.1098  Tw (29 January 2005) TjET1 1 1 rg 29.4 56.4 538.2 109.2 re f0.902 0.902 0.902 rg 30.6 57.6 535.8 106.8 re fBT205.8 145.8  TD0 0 0 rg /F8 18  Tf-0.0916  Tc -0.0284  Tw (Copyrights and Trade marks) Tj-169.8 -12  TD /F6 9  Tf-0.0102  Tc -0.1783  Tw (Some articles and other contributions use terms that are either registered trade marks or claimed as such.  The use of such terms is not intended to support nor) Tj0 -12  TD -0.0101  Tc -0.0025  Tw (disparage any trade mark claim.  On request we will withdraw all references to a specific trademark and its owner.) Tj5.4 -12  TD -0.0106  Tc 0.0199  Tw (By default the copyright of all material published by ACCU is the exclusive property of the author. By submitting material to ACCU for publication an author is,) Tj-5.4 -12  TD -0.0012  Tc -0.0692  Tw (by default, assumed to have granted ACCU the right to publish and republish that material in any medium as they see fit. An author of an article or column \(not) Tj0 -12  TD 0.0081  Tc -0.0812  Tw (a letter or a review of software or a book\) may explicitly offer single \(first serial\) publication rights and thereby retain all other rights.) Tj7.8 -12  TD 0.0045  Tc -0.1485  Tw (Except for licences granted to 1\) Corporate Members to copy solely for internal distribution 2\) members to copy source code for use on their own computers,) Tj-7.8 -12  TD -0.0231  Tc 0.0323  Tw (no material can be copied from Overload without written permission of the copyright holder.) TjETq 29.4 165.6 m 29.4 56.4 l 567.6 56.4 l 567.6 165.6 l 30.6 164.4 m 30.6 57.6 l 566.4 57.6 l 566.4 164.4 l h W* n 29.4 56.4 538.2 109.2 re fQ 0.9529 0.9529 0.9529 rg 30 197.4 537 52.2 re fBT33.6 237  TD0 0 0 rg /F0 12  Tf-0.0369  Tc 0.3969  Tw (Copy Deadlines) Tj0 -19.2  TD /F4 10.2  Tf-0.0672  Tc 0.0172  Tw (All articles intended for publication in ) Tj156 0  TD /F5 10.2  Tf-0.0125  Tc -0.1375  Tw (Overload 67) Tj52.8 0  TD /F4 10.2  Tf-0.0666  Tc -0.0084  Tw (should be submitted to the editor by May 1) Tj173.4 3.6  TD -0.4017  Tc 0  Tw (st) Tj9 -3.6  TD -0.0884  Tc 0.3384  Tw (2005, and for ) Tj56.4 0  TD /F5 10.2  Tf-0.1325  Tc -0.0175  Tw (Overload 68) Tj52.8 0  TD /F4 10.2  Tf0.0661  Tc -0.2161  Tw (by July) Tj-500.4 -12  TD 0.3  Tc 0  Tw (1) Tj5.4 3.6  TD -0.4017  Tc (st) Tj9 -3.6  TD -0.15  Tc (2005.) TjETq 29.4 250.2 m 29.4 196.8 l 567.6 196.8 l 567.6 250.2 l 30 249.6 m 30 197.4 l 567 197.4 l 567 249.6 l h W* n 29.4 196.8 538.2 53.4 re fQ endstreamendobj27 0 obj10539endobj25 0 obj<</Type /Page/Parent 5 0 R/Resources <</Font 32 0 R/ProcSet 2 0 R>>/Contents 26 0 R>>endobj32 0 obj<</F0 6 0 R/F2 10 0 R/F4 16 0 R/F5 21 0 R/F6 23 0 R/F7 28 0 R/F8 30 0 R>>endobj34 0 obj<</Length 35 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (6) Tj0 768.6  TD /F0 12  Tf-0.0055  Tc 0.2155  Tw (Overload issue 66 april 2005) Tj14.4 -38.4  TD /F1 18  Tf-0.0277  Tc -0.1763  Tw (Sheep Farming for Software) Tj25.2 -20.4  TD 0.0186  Tc -0.2226  Tw (Development Managers) Tj-25.2 -17.4  TD /F0 13.8  Tf0.0943  Tc 0.0497  Tw (\(or Feeling a Bit Sheepish\)) Tj0 -18  TD /F0 10.2  Tf-0.1258  Tc -0.0482  Tw (by Pippa Hennessy) Tj3.6 -18.6  TD /F6 10.2  Tf-0.0644  Tc 0.0164  Tw (\223Software products are nothing like sheep \226 they\222re not soft) Tj0 -12  TD -0.146  Tc 0.098  Tw (and cuddly\224) Tj183.6 0  TD -0.1028  Tc 0.0548  Tw (Pip\222s Mother) Tj-201.6 -12  TD /F4 10.2  Tf-0.141  Tc 0.411  Tw (It is my contention \(and following discussions on the subject with) Tj0 -12  TD 0.3445  Tc 0.7055  Tw (my colleagues I use that word advisedly\) that the software) TjT* -0.185  Tc 0.3684  Tw (development process can be compared to sheep farming. You may) TjT* -0.077  Tc 1.227  Tw (find this a little hard to swallow at first \(unlike the software as) TjT* -0.1384  Tc 0.2284  Tw (pasta metaphor so ably expounded by Pete Goodliffe [1], which is) TjT* -0.1196  Tc 0.0242  Tw (much more edible\), but bear with me and I shall explain all.) Tj11.4 -12  TD 0.0396  Tc 0.4104  Tw (My mother\222s initial reaction \(see above\) was typical, but the) Tj-11.4 -12  TD -0.0828  Tc -0.298  Tw (more I thought about it and the more I talked the idea through with) Tj0 -12  TD 0.1036  Tc 0.3464  Tw (others, the more I came to the conclusion that all development) TjT* -0.0951  Tc 0.0118  Tw (processes and the products that emerge from those processes have) TjT* 0.0783  Tc 0.3717  Tw (features in common. I started this exercise more as a joke than) TjT* -0.0712  Tc -0.4538  Tw (anything serious, after all, software products really aren\222t anything) TjT* 0.1387  Tc 0.3113  Tw (like sheep.  However, I\222ve found that many of the techniques,) TjT* 0.3005  Tc 1.5745  Tw (methods, and even truisms that are applicable to software) TjT* 0.2757  Tc 0.1743  Tw (development have very strong parallels in sheep farming \226 a) TjT* -0.0919  Tc 0.1419  Tw (development process that\222s been refined over millennia.) Tj0 -18  TD /F0 12  Tf-0.0256  Tc -0.2144  Tw (Setting the Scene) TjT* /F4 10.2  Tf-0.1028  Tc 1.0982  Tw (Last summer I had a job interview. The position I\222d applied for) Tj0 -12  TD -0.1105  Tc 0.2271  Tw (was effectively an internal promotion for me, although there were) Tj275.4 324  TD -0.0827  Tc 0.3994  Tw (a few external candidates as well. The second interview involved) Tj0 -12  TD -0.1025  Tc 0.7525  Tw (the usual HR-generated \223criteria-based\224 questions, whatever that) TjT* -0.1385  Tc 0.5885  Tw (means, but an equally important part of the interview was for me) TjT* -0.0294  Tc 1.0794  Tw (to give a 30-minute presentation on what I considered the best) TjT* 0.6785  Tc 0.3715  Tw (approach to managing software development within my) TjT* 0.3253  Tc 0.9247  Tw (department.  Fair enough, I was applying for the Software) TjT* -0.1088  Tc -0.0412  Tw (Development Manager job.) Tj10.8 -12  TD 0.1389  Tc 0.3111  Tw (Now, I\222ve pretty much got the hang of answering interview) Tj-10.8 -12  TD -0.0259  Tc 0.4759  Tw (questions, I can do aptitude tests standing on my head, I always) Tj0 -12  TD -0.0982  Tc -0.4336  Tw (seem to confuse HR people who try to analyse my personality tests) TjT* -0.0999  Tc -0.2348  Tw (\(this article may go some way to explain that\), and I\222ve even had a) TjT* -0.0784  Tc 0.4618  Tw (job offer resulting from a horrendous interview where they stood) TjT* -0.1077  Tc -0.0423  Tw (me in front of a whiteboard and made me write and explain a C++) TjT* 0.0143  Tc 0.4357  Tw (program to some highly intelligent nerds. I\222ve also done lots of) TjT* 0.2834  Tc 0.8523  Tw (presentations, ranging from giving papers at conferences to) TjT* -0.0136  Tc 0.4636  Tw (demonstrating prototype software to clients. But for a couple of) TjT* 0.2535  Tc 0.4536  Tw (reasons this particular presentation wasn\222t anywhere near as) TjT* -0.1024  Tc -0.0476  Tw (straightforward as it should have been. Firstly, I didn\222t quite know) TjT* 0.2686  Tc 0.7814  Tw (how to pitch it \226 should I go for \223blue sky\224 and assume no) TjT* -0.1056  Tc 0.0156  Tw (knowledge of the workings of our department, or should I address) TjT* 0.2471  Tc 0.312  Tw (the problems and issues that I knew \(and they knew I knew\)) TjT* -0.1759  Tc -0.1541  Tw (existed? Secondly, the interview was two days before the final copy) TjT* -0.0883  Tc -0.2253  Tw (deadline for the ACCU journals \(I was the production editor at the) TjT* -0.1132  Tc -0.1568  Tw (time\), so my preparation time was drastically reduced, and I didn\222t) TjT* -0.0723  Tc 0.0937  Tw (even get time to sit down and think about it in any depth until the) TjT* -0.133  Tc -0.017  Tw (day before.) Tj10.8 -12  TD 0.032  Tc 0.618  Tw (So, perhaps understandably, I was a little worried about this) Tj-10.8 -12  TD 0.3931  Tc 0.2369  Tw (presentation. I\222d managed to jot down a few ideas in spare) Tj-275.4 -40.8  TD /F1 30  Tf-0.3371  Tc -0.0029  Tw (Letter to the Editor) Tj0 -23.4  TD /F0 12  Tf-0.036  Tc 0.196  Tw (Re: Overload, February 2005) Tj22.2 -12  TD -0.0747  Tc 0  Tw (editorial) Tj-22.2 -19.8  TD /F4 10.2  Tf0.0602  Tc -0.8102  Tw (Hi Alan,) Tj11.4 -12  TD -0.0767  Tc 0.0267  Tw (I just want to thank you for your great editorial in the February) Tj-11.4 -12  TD -0.1103  Tc -0.3397  Tw (issue of Overload \(\223\221They\222 Have Their Reasons\224\). As you write: ) Tj255 0  TD /F6 10.2  Tf-0.158  Tc 0  Tw (\223If) Tj-255 -12  TD -0.0967  Tc -0.1656  Tw (you can find and talk to them you will find that \223they\224 are normal human) Tj0 -12  TD -0.0339  Tc 0.5109  Tw (beings trying to achieve reasonable goals in reasonable ways.\224) Tj242.4 0  TD /F4 10.2  Tf-0.1305  Tc 0  Tw (Deep) Tj-242.4 -12  TD -0.1029  Tc 0.3386  Tw (inside, I know this to be true, but it\222s still good to be reminded of) Tj0 -12  TD -0.184  Tc -0.366  Tw (it, especially if you deal with someone who appears \223unreasonable\224.) TjT* -0.1023  Tc 0.1923  Tw (They are probably reasonable, from ) Tj145.8 0  TD /F5 10.2  Tf-0.0136  Tc 0  Tw (their) Tj21 0  TD /F4 10.2  Tf-0.0834  Tc -0.0666  Tw (perspective. ) Tj-155.4 -12  TD -0.0874  Tc -0.3898  Tw (What inspired me to write this is that I\222ve lately been discussing) Tj-11.4 -12  TD -0.1087  Tc -0.0413  Tw (with some people in the PHP community, and \223they\224 don\222t appear) Tj0 -12  TD -0.097  Tc -0.1196  Tw (to appreciate the value of higher abstractions \(preferring a \223simple) TjT* -0.1469  Tc -0.1831  Tw (language\224, even though this may lead to complex or verbose code\).) TjT* -0.1339  Tc -0.4961  Tw (Or even stronger type-checking, I may add. In C/C++/Java, we may) TjT* -0.0661  Tc 0.5161  Tw (write: ) Tj14.4 -24  TD 0.2 0.2 0.2 rg /F9 9  Tf0  Tc 0  Tw (void f\(int a, string b, vector c\)) Tj-14.4 -24  TD 0 0 0 rg /F4 10.2  Tf-0.086  Tc 0.236  Tw (and we know it takes an ) Tj100.2 0  TD /F2 9  Tf0  Tc 0  Tw (int) Tj16.2 0  TD /F4 10.2  Tf0.45  Tc (, ) Tj5.4 0  TD /F2 9  Tf0  Tc (string) Tj35.4 0  TD /F4 10.2  Tf-0.1096  Tc -0.0404  Tw (and ) Tj16.8 0  TD /F2 9  Tf0  Tc 0  Tw (vector) Tj32.4 0  TD /F4 10.2  Tf-0.0052  Tc -0.1448  Tw (, no more, nor) Tj-206.4 -12  TD -0.1453  Tc 0.2619  Tw (less, and returns nothing. In PHP, with the following: ) Tj14.4 -24  TD 0.2 0.2 0.2 rg /F9 9  Tf0  Tc 0  Tw (function f\($a, $b, $c\)) Tj-14.4 -24  TD 0 0 0 rg /F4 10.2  Tf-0.0837  Tc 0.861  Tw (we know hardly anything: We know that it takes \(at least\) three) Tj0 -12  TD -0.1175  Tc 0.8175  Tw (arguments \226 but it may take more \226 and we know nothing about) TjT* -0.0948  Tc 0.5994  Tw (their type, and any return type \(and it may return different types,) Tj275.4 348  TD 0.1293  Tc 1.0407  Tw (or nothing at all, depending on its run-time path through the) Tj0 -12  TD -0.1165  Tc 0.9483  Tw (function... All variables in PHP are like variants \226 they can take) TjT* -0.1397  Tc 0.9397  Tw (on any type\). I can\222t for the life of me understand how someone) TjT* 0.2129  Tc 0.9871  Tw (finds writing code like this more \223productive\224 and \223easier\224.) TjT* -0.059  Tc -0.0243  Tw (Myself, I\222ve spent way too much time chasing stupid type-related) TjT* 0.2558  Tc 0.9142  Tw (bugs in PHP, that could have trivially been checked by the) TjT* 0.2165  Tc 0.9335  Tw (compiler/runtime. Flexibility to do what? Make type-related) TjT* 0.4378  Tc 0.7045  Tw (errors? Sorry, if I really want to do that, I want to say so) TjT* -0.1142  Tc 0.1642  Tw (explicitly \226 by overriding the type-system with a cast. ) Tj10.8 -12  TD -0.0254  Tc -0.4246  Tw (My company makes web applications for other companies, and) Tj-10.8 -12  TD -0.1101  Tc -0.3672  Tw (we\222re using PHP, and I\222ve been using it professionally for a couple) Tj0 -12  TD -0.0449  Tc 0.6334  Tw (of years, so it\222s not like I\222m a PHP beginner, but still the above) TjT* -0.0586  Tc -0.3914  Tw (baffles me. I like not having to wait for compilation with PHP, but) TjT* 0.074  Tc 0.4427  Tw (if I could choose stronger type-checking, my answer would be) TjT* -0.0055  Tc -0.4112  Tw (YES. The kind of absent type-checking above tends to encourage) TjT* 0.0175  Tc 0.1325  Tw (sloppy coding, and you have to explicitly check for types inside) TjT* 0.3637  Tc 0.4863  Tw (the function, if you want to do so \(it\222s similar to having to) TjT* 0.0934  Tc 0.3566  Tw (explicitly check for return codes, which is often not done... At) TjT* -0.0554  Tc -0.5855  Tw (least PHP 5 does have exceptions\). You still can\222t enforce a certain) TjT* -0.0028  Tc 0.2728  Tw (return type, though. Really, if I wanted a particular parameter to) TjT* 0.0088  Tc -0.5742  Tw (be a \223variant\224, I\222d specify that \(and if the types it could have were) TjT* 0.3461  Tc 0.5706  Tw (known, I\222d enumerate them, and if not, use something like) TjT* /F2 9  Tf0.06  Tc 0  Tw (boost::any) Tj54.6 0  TD /F4 10.2  Tf0.0286  Tc 0.4214  Tw (\). It adds information and explicitness to the code,) Tj-54.6 -12  TD 0.3262  Tc 0.3038  Tw (and should make it easier to understand. Yet, it appears the) Tj0 -12  TD 0.0185  Tc -0.4958  Tw (majority of PHP developers don\222t want it \(from what I\222ve read on) TjT* 0.0199  Tc 0.4301  Tw (various mailing lists and newsgroups\). Why? Have you got any) TjT* 0.0156  Tc 0  Tw (idea?) Tj10.8 -12  TD -0.0719  Tc (Regards,) Tj235.8 -12  TD /F7 10.2  Tf-0.228  Tc (Terje) Tj-112.8 -12  TD /F2 9  Tf0  Tc (<tslettebo@broadpark.no>) Tj0.6 w 1 J 1 j 0 0 0 RG ET28.8 433.8 m 567.6 433.8 l S endstreamendobj35 0 obj10869endobj33 0 obj<</Type /Page/Parent 5 0 R/Resources <</Font 38 0 R/ProcSet 2 0 R>>/Contents 34 0 R>>endobj38 0 obj<</F0 6 0 R/F1 8 0 R/F2 10 0 R/F4 16 0 R/F5 21 0 R/F6 23 0 R/F7 28 0 R/F9 36 0 R>>endobj40 0 obj<</Length 41 0 R>>stream
BT559.2 42  TD0 0 0 rg /F0 10.8  Tf0.2028  Tc 0  Tw (7) Tj-203.4 768.6  TD /F0 12  Tf-0.0055  Tc -0.0845  Tw (Overload issue 66 april 2005) Tj-326.4 -40.8  TD /F4 10.2  Tf0.0197  Tc -0.5897  Tw (moments, when I wasn\222t busy eating or sleeping or breathing, but) Tj0 -12  TD 0.0546  Tc -0.2046  Tw (with two days to go before the interview I still didn\222t have much) TjT* 0.0052  Tc -0.5152  Tw (idea of what on earth I\222d talk about. I was in a dither as to whether) TjT* 0.0476  Tc -0.0476  Tw (to use my employer\222s standard Powerpoint template, or whether) TjT* 0.0957  Tc 0.4634  Tw (to even mention that I actually already work with the team I\222d) TjT* 0.351  Tc 0.249  Tw (hopefully be managing. After a long evening of typesetting) TjT* 0.3903  Tc 1.0415  Tw (Overload I fell into bed and lay awake for a while trying) TjT* 0.0549  Tc -0.2906  Tw (\(unsuccessfully\) to marshal my ideas into something resembling) TjT* -0.007  Tc -0.4661  Tw (a coherent framework. And so to sleep. An hour or so later I woke) TjT* 0.1742  Tc 0.4258  Tw (up with a brilliant idea. You know how it is, you think about) TjT* 0.0204  Tc -0.3704  Tw (something, and think, and think, and get absolutely nowhere, and) TjT* 0.0948  Tc 0.5052  Tw (then you wake up in the middle of the night with the Ultimate) TjT* 0.0776  Tc -0.4776  Tw (Solution. Then you go back to sleep again and forget all about it.) TjT* 0.0699  Tc -0.1699  Tw (I was determined that this wasn\222t going to happen this time, so I) TjT* 0.0622  Tc 0.2678  Tw (lay there in the dark for an hour or two and got it all straight in) TjT* -0.0062  Tc -0.1438  Tw (my head.) Tj11.4 -12  TD 0.3214  Tc 0.1953  Tw (What was this idea? Why, that software products are like) Tj-11.4 -12  TD 0.1163  Tc 0.2671  Tw (sheep, and the software development process is just like sheep) Tj0 -12  TD 0.1002  Tc -0.2002  Tw (farming. I have no idea where this came from. Possibly it was a) TjT* 0.1063  Tc 0.1187  Tw (subconscious association with my boss\222s surname \(same as the) TjT* 0.2625  Tc 0.3375  Tw (old bloke who has a farm and sings E-I-E-I-O\), or it may be) TjT* 0.1097  Tc 0.1767  Tw (related to my obsession with Lundy \(a large lump of granite in) TjT* 0.1085  Tc -0.1085  Tw (the Bristol Channel that\222s liberally scattered with various kinds) TjT* 0.0886  Tc -0.1295  Tw (of sheep\), but it\222s more likely something to do with my mother,) TjT* 0.152  Tc 0.4616  Tw (who has a flock of Grey-Faced Dartmoor \226 a rare and shaggy) TjT* 0.0961  Tc 0.1357  Tw (breed of sheep. Blame the parents, at least that\222s what I always) TjT* 0.0523  Tc 0.0977  Tw (tell my kids.) Tj11.4 -12  TD -0.1304  Tc -0.4196  Tw (Right, enough bleating. It\222s time to see if I can convince you that) Tj-11.4 -12  TD -0.0878  Tc -0.0622  Tw (software products are indeed soft and cuddly, just like sheep.) Tj0 -18  TD /F0 12  Tf-0.0675  Tc 0.2275  Tw (Breeds of Software Products) TjT* /F4 10.2  Tf0.0056  Tc 1.1777  Tw (One of the distinguishing features of software products is that) Tj0 -12  TD 0.0736  Tc 1.2764  Tw (they don\222t actually have many distinguishing features \226 there) TjT* 0.1863  Tc 1.1637  Tw (are big ones and little ones, simple ones and complex ones,) TjT* 0.6573  Tc 0.4927  Tw (huge monolithic desktop products and straggly internet) TjT* 0.1974  Tc 1.1254  Tw (applications.  This is in fact not so different from sheep, of) TjT* -0.0033  Tc 1.12  Tw (which there are many breeds, each with their own personality.) TjT* -0.0171  Tc 0.4071  Tw (Some have horns, some don\222t. Some have short wiry hair, some) TjT* 0.2959  Tc 1.0207  Tw (have long shaggy wool. Some are large, some small, some) TjT* -0.0185  Tc 0.4685  Tw (white and fluffy, some brown and scruffy. Some bounce around) TjT* 0.3073  Tc 0.9927  Tw (and play, others simply sit and chew the cud.  And as any) TjT* 0.0068  Tc 0.2632  Tw (shepherd will tell you, each individual sheep has its own foibles) TjT* 0.017  Tc 0.433  Tw (and eccentricities.) Tj0 -18  TD /F0 10.8  Tf0.0008  Tc 0.2032  Tw (The Ram) TjT* /F4 10.2  Tf-0.0842  Tc 1.1342  Tw (Rams don\222t actually do very much. They\222re usually bigger than) Tj0 -12  TD -0.0297  Tc 1.2433  Tw (the ewes, and assuming they get past the stage of being lambs) TjT* -0.0694  Tc 0.9394  Tw (\(when most rams are slaughtered for meat\) their one purpose in) TjT* -0.0653  Tc 0.5153  Tw (life is to father a new generation \226 for three or four weeks in the) TjT* 0.0249  Tc 1.2751  Tw (autumn they have a great time. So they can be compared to a) TjT* -0.0175  Tc 1.2675  Tw (typical large function-rich desktop software application, whose) TjT* -0.076  Tc 0.4714  Tw (main purpose is to process and pass on data to other applications) TjT* -0.06  Tc 1.21  Tw (and to users. You don\222t have to do very much with them from) TjT* 0.1599  Tc 0.8901  Tw (year to year, just make sure they\222re fit for their information-) TjT* -0.1124  Tc -0.0376  Tw (providing purpose.) Tj11.4 -12  TD -0.0532  Tc 0.176  Tw (On a fairly regular basis rams are \223rented out\224 to service other) Tj-11.4 -12  TD -0.1256  Tc -0.3244  Tw (flocks, ensuring widening of the gene pool. This may involve some) Tj0 -12  TD -0.0617  Tc 0.5117  Tw (logistics, such as timing and transport, but in general it\222s a fairly) TjT* 0.2377  Tc 0.2123  Tw (straightforward process. Similarly, your large data-providing) TjT* 0.093  Tc 0.357  Tw (application may be used to process data from other sources, or) Tj274.8 708  TD 0.2859  Tc 3.1641  Tw (provide data for a purpose outside its original business) Tj0 -12  TD -0.0863  Tc -0.6637  Tw (specification. This may involve some additional plugins or external) TjT* -0.0855  Tc -0.5009  Tw (data processing to deal with unfamiliar formats, but this tends to be) TjT* -0.0876  Tc 0.1626  Tw (standard operational procedure and as such is relatively trivial.) Tj11.4 -12  TD 0.0055  Tc -0.1555  Tw (Incidentally, did you know that when a ram is put with a flock) Tj-11.4 -12  TD 0.0587  Tc -0.0801  Tw (of ewes it has a sachet of dye tied to its midriff so the shepherds) Tj0 -12  TD 0.0161  Tc -0.3298  Tw (can tell which ewes have been serviced by the bright splodges on) TjT* -0.0072  Tc 0.6372  Tw (their backs? This may be stretching the metaphor slightly, but I) TjT* 0.012  Tc 0.5713  Tw (guess this could be considered similar to data copyright notices) TjT* 0.1156  Tc 0.4435  Tw (that have to be included in reports that are produced using the) TjT* -0.0686  Tc 0  Tw (data.) Tj0 -24  TD /F10 9  Tf-0.0662  Tc 0.2162  Tw (What can we learn?) Tj0 -12  TD /F4 10.2  Tf0.1099  Tc 1.1037  Tw (Rams are for life, not just for Christmas.  Once they\222re fully) TjT* -0.0896  Tc 0.4011  Tw (grown, they need to be healthy enough to do their job and pull in) TjT* -0.116  Tc 1.4387  Tw (the stud fees, year in year out, without too much looking after.) TjT* -0.0433  Tc -0.1067  Tw (So it pays to put the effort in to get them right in the first place.) Tj0 -18  TD /F0 10.8  Tf0.2695  Tc -0.3655  Tw (The Old Ewe) TjT* /F4 10.2  Tf-0.0936  Tc 0.2007  Tw (This old lady is quite similar to the ram, in that all she really does) Tj0 -12  TD -0.0732  Tc 0.2232  Tw (is to produce one or two healthy lambs every year, thus making a) TjT* 0.1251  Tc 1.1499  Tw (valuable contribution to the productivity of the flock. Again,) TjT* 0.0449  Tc 1.1688  Tw (she\222s like one of those big desktop products we all know and) TjT* 0.0508  Tc 0.9992  Tw (love, bringing in a steady income without too much attention.) TjT* 0.1217  Tc 1.1083  Tw (She\222ll probably need more looking after than the ram, but in) TjT* -0.0924  Tc 1.1424  Tw (return she\222ll provide spin-off products that will in turn go on to) TjT* -0.0562  Tc -0.0938  Tw (contribute to the farmer\222s income.) Tj0 -24  TD /F10 9  Tf-0.0662  Tc 0.2162  Tw (What can we learn?) Tj0 -12  TD /F4 10.2  Tf-0.0763  Tc 0.8032  Tw (Pretty much the same as the ram.  Put the time and resources in) TjT* 0.2514  Tc 0.9786  Tw (up front, and your flock will increase in size without much) TjT* -0.0902  Tc -0.0598  Tw (further input from you.) Tj0 -18  TD /F0 10.8  Tf0.1731  Tc -0.2691  Tw (The Prize Sheep) TjT* /F4 10.2  Tf-0.0779  Tc 0.2279  Tw (Farms are quite similar to IT companies in that they need to have) Tj0 -12  TD -0.0964  Tc 0.8798  Tw (a good name among other farmers and farm product consumers.) TjT* -0.0763  Tc -0.0309  Tw (There are a few ways in which a flock can make a name for itself.) TjT* -0.0869  Tc 0.1169  Tw (Lundy has a very successful business selling lamb via the internet) TjT* -0.0131  Tc 1.2812  Tw (\226 I think this has probably taken off because people who visit) TjT* 0.0563  Tc 1.1028  Tw (Lundy try the lamb while they\222re on the island and know it\222s) TjT* 0.6262  Tc 0.5738  Tw (extremely high quality \(which, I guess, is another valid) TjT* -0.0963  Tc 0.11  Tw (comparison \226 if you see how well a software product performs by) TjT* -0.0858  Tc 0.7158  Tw (trying an evaluation copy you\222re more likely to buy that product) TjT* -0.0793  Tc -0.0707  Tw (or others from the same company\).) Tj11.4 -12  TD 0.0517  Tc 0.3983  Tw (Anyway, back to the point. If one or two lambs show all the) Tj-11.4 -12  TD 0.0576  Tc -0.2676  Tw (required qualities of their particular breed they may well be kept) Tj0 -12  TD 0.0363  Tc -0.2408  Tw (for entry into agricultural shows \226 the ram escapes the chop \(and) TjT* 0.0269  Tc -0.5269  Tw (if he\222s lucky he might be kept for breeding purposes\) and the ewe) TjT* 0.0559  Tc 0.5274  Tw (doesn\222t necessarily have to produce healthy lambs year in year) TjT* 0.1943  Tc 0.3557  Tw (out to be assured of a long and happy life. Rosettes mean the) TjT* 0.0446  Tc 0.0236  Tw (flock is marked as worth considering as a source for butchers or) TjT* 0.0457  Tc -0.4139  Tw (other flocks. How many IT companies can you think of that have) TjT* 0.0965  Tc 0.3535  Tw (based their reputation and their success on one or two flagship) TjT* -0.0064  Tc 0  Tw (products?) Tj0 -24  TD /F10 9  Tf-0.0662  Tc 0.2162  Tw (What can we learn?) Tj0 -12  TD /F4 10.2  Tf0.1476  Tc 1.3024  Tw (Appearances matter too.  Sometimes it\222s not important for a) TjT* 0.2817  Tc 1.0683  Tw (sheep to bring in much actual revenue \226 if it is covered in) TjT* 0.1183  Tc 0.4317  Tw (rosettes it will draw attention to the quality of the rest of your) TjT* 0.1815  Tc 0  Tw (flock.) TjETendstreamendobj41 0 obj10566endobj39 0 obj<</Type /Page/Parent 5 0 R/Resources <</Font <</F0 6 0 R /F4 16 0 R /F10 42 0 R >>/ProcSet 2 0 R>>/Contents 40 0 R>>endobj45 0 obj<</Length 46 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (8) Tj0 768.6  TD /F0 12  Tf-0.0055  Tc 0.2155  Tw (Overload issue 66 april 2005) Tj0 -33.6  TD /F0 10.8  Tf0.0251  Tc 0.1789  Tw (Wild Sheep) Tj0 -19.2  TD /F4 10.2  Tf0.0211  Tc 1.3562  Tw (There are many flocks of wild sheep in the UK and probably) Tj0 -12  TD 0.1288  Tc 0.9962  Tw (worldwide. These are generally left to look after themselves,) TjT* 0.0358  Tc 1.0892  Tw (possibly with a little judicious tinkering where required. They) TjT* -0.0763  Tc 0.9763  Tw (tend to be hard to control as they\222re not used to interference by) TjT* -0.0879  Tc 0.1779  Tw (humans or collies, and they often go off in unexpected directions.) TjT* -0.0393  Tc 1.1984  Tw (This is not necessarily a bad thing, as they\222re hardy and tough) TjT* -0.0719  Tc 0.6419  Tw (and can deal with whatever nature throws at them. Lambing just) TjT* -0.0502  Tc 1.2387  Tw (happens, no need for a shepherd to be up at all hours ready to) TjT* -0.1057  Tc 0.1557  Tw (lend a hand or bottle-feed rejected lambs.) Tj11.4 -12  TD 0.4469  Tc 1.6531  Tw (Open source software seems to run along these lines.) Tj-11.4 -12  TD 0.2734  Tc 0.3766  Tw (Applications are developed with an initial idea in mind, and) Tj0 -12  TD 0.1176  Tc 0.3324  Tw (assuming they survive the birthing process and don\222t fall off a) TjT* 0.05  Tc -0.523  Tw (cliff they take on a life of their own, being added to and modified) TjT* 0.2379  Tc 0.6121  Tw (to deal with slightly different problem domains. I guess you) TjT* 0.1205  Tc -0.3705  Tw (could argue that this is due to a high level of external influence,) TjT* 0.091  Tc -0.4046  Tw (but I imagine that to the original programmer it would seem that) TjT* 0.1268  Tc -0.1482  Tw (their lamb has a life of its own and has taken control of its own) TjT* 0.0478  Tc 0  Tw (destiny.) Tj0 -24  TD /F10 9  Tf0.0538  Tc -0.1038  Tw (What can we learn?) Tj0 -12  TD /F4 10.2  Tf-0.0398  Tc 1.1898  Tw (Don\222t ignore a wild sheep because it has no pedigree \226 it may) TjT* -0.0955  Tc 0.2789  Tw (have evolved attributes that are needed to deal with environments) TjT* -0.046  Tc -0.104  Tw (common to all sheep \(or a significant subset\).) Tj0 -18  TD /F0 10.8  Tf0.1219  Tc 0.0821  Tw (Rare Breeds) TjT* /F4 10.2  Tf0.2319  Tc 1.0181  Tw (The sheep farming community has its equivalent of nerds \226) Tj0 -12  TD 0.0148  Tc 0.8716  Tw (those \(like my mother\) who keep flocks of rare breeds and are) TjT* 0.1543  Tc 0.9814  Tw (actively involved in ensuring these endangered species don\222t) TjT* 0.3098  Tc 0.9202  Tw (die out. Rare breed shepherds are often also very active in) TjT* -0.0033  Tc 0.3033  Tw (keeping knowledge and use of \223outdated\224 breeding and farming) TjT* 0.0228  Tc 0.7872  Tw (techniques alive along with the sheep.  In general these breeds) TjT* 0.6556  Tc 0.5658  Tw (and techniques were once commonplace, but have been) TjT* 0.0699  Tc 1.4086  Tw (superceded by more commercially viable breeds and farming) TjT* 0.0853  Tc 0  Tw (methods.) Tj11.4 -12  TD 0.177  Tc 0.498  Tw (Rare breeders can be compared to programmers who write) Tj-11.4 -12  TD 0.0323  Tc -0.5573  Tw (ZX Spectrum emulators for XBoxes, or Amstrad PCW emulators) Tj0 -12  TD 0.1009  Tc 0.0764  Tw (for PCs. Often the reason for writing these emulators is to play) TjT* 0.1104  Tc -0.1747  Tw (fondly-remembered games even after the original hardware has) TjT* 0.2237  Tc 0.3354  Tw (fallen to pieces, but a more respectable excuse is to keep old) TjT* 0.1301  Tc -0.1001  Tw (tools and techniques alive just in case they should prove useful) TjT* 0.1217  Tc 0.3829  Tw (in the future. My mother claims this holds true for rare breeds) TjT* 0.4762  Tc 0.792  Tw (as well \226 keep the good old standbys around just in case) TjT* 0.4252  Tc 0.4748  Tw (commercial breeding programmes could find a use for the) TjT* 0.0961  Tc 0.7539  Tw (particular traits embodied in breeds that have been around for) TjT* 0.0946  Tc -0.4082  Tw (generations. I\222m prepared to give her the benefit of the doubt on) TjT* 0.1445  Tc 0.4855  Tw (this one, especially as I still enjoy playing Hungry Horace on) TjT* 0.0175  Tc 0.4325  Tw (my Psion.) Tj0 -24  TD /F10 9  Tf0.0538  Tc -0.1038  Tw (What can we learn?) Tj0 -12  TD /F4 10.2  Tf-0.0866  Tc 1.1366  Tw (Don\222t write off \223old\224 breeds or farming methods, they are tried) TjT* -0.0454  Tc 1.3136  Tw (and tested and can even be better in some situations than their) TjT* -0.0873  Tc -0.0627  Tw (modern equivalents.) Tj0 -18  TD /F0 10.8  Tf0.198  Tc 0  Tw (Lambs) TjT* /F4 10.2  Tf-0.0963  Tc 1.1463  Tw (Lambs are fun. Anyone who tries to tell my mother they\222re not) Tj0 -12  TD 0.0405  Tc 1.1731  Tw (gets a Hard Stare, and I\222m sure many of you secretly number) TjT* -0.0405  Tc 1.3905  Tw (gambolling lambs among the first signs of spring. Newly-born) TjT* -0.1171  Tc 0.5125  Tw (software products are also fun \226 ask any programmer. You get to) TjT* -0.0979  Tc 0.5479  Tw (try out new ideas, see how high you can make the product jump,) Tj275.4 708  TD -0.055  Tc 1.155  Tw (see how well it plays with other products, watch it grow \226 and) Tj0 -12  TD 0.6634  Tc 0.5866  Tw (don\222t they grow quickly? Coding a new product is like) TjT* -0.0488  Tc 1.3757  Tw (bottlefeeding a lamb \226 you hang on as tight as you can to the) TjT* 0.1175  Tc 0.9925  Tw (bottle while it gulps the milk down, little tail waggling away) TjT* -0.1336  Tc 1.4563  Tw (madly, then when the bottle\222s empty, off it goes to skip around) TjT* -0.114  Tc 0.114  Tw (and see what mischief it can get into next.) Tj10.8 -12  TD 0.0272  Tc -0.1772  Tw (Of course, there is the mortality rate to consider. Mum\222s flock) Tj-10.8 -12  TD -0.0154  Tc 0.5987  Tw (usually produces around 30 lambs every year, and between one) Tj0 -12  TD -0.0263  Tc -0.1237  Tw (and four of those lambs will not survive. There are those who are) TjT* 0.0398  Tc 0.5302  Tw (stillborn \(the sales manager\222s bright idea for a program that he) TjT* 0.1793  Tc 0.2707  Tw (knows he can sell, which is technically impossible to put into) TjT* 0.351  Tc 0.2323  Tw (practice\), those who die soon after birth \(write a prototype,) TjT* 0.0703  Tc 0.5979  Tw (discover the client didn\222t want it after all, or it\222s impossible to) TjT* 0.0357  Tc -0.1857  Tw (meet the business requirements\), and those who require so much) TjT* -0.0273  Tc 0.2773  Tw (effort and money to keep going that the decision has to be made) TjT* 0.1221  Tc 0.3279  Tw (to let them die. There\222s a useful shepherd\222s adage that applies) TjT* -0.0025  Tc 0.5025  Tw (equally to young software products \226 if a lamb\222s no good, hit it) TjT* -0.0072  Tc -0.1428  Tw (on the head.) Tj0 -24  TD /F10 9  Tf-0.0262  Tc -0.0238  Tw (What can we learn?) Tj0 -12  TD /F4 10.2  Tf0.0033  Tc 1.1667  Tw (Let your shepherds and sheepdogs play with the lambs if they) TjT* -0.0454  Tc 0.6754  Tw (want \(within reason\), it keeps them happy and productive.  And) TjT* 0.4268  Tc 0.8032  Tw (be realistic \226 not all lambs will survive to become useful) TjT* -0.0893  Tc 0.1393  Tw (members of your flock.) Tj0 -18  TD /F0 12  Tf-0.0928  Tc 0.1528  Tw (Tending the Flock) TjT* /F4 10.2  Tf0.3823  Tc 0.8011  Tw (Right, hopefully by this point I\222ve persuaded you that the) Tj0 -12  TD 0.1786  Tc 0.8714  Tw (metaphor is actually worth exploring. Hey, I\222ve even almost) TjT* 0.094  Tc 1.0227  Tw (persuaded myself! Anyway, the above is an expansion of the) TjT* -0.1115  Tc 0.6538  Tw (ideas that came to me in the middle of that fateful night. I didn\222t) TjT* 0.0773  Tc 1.0327  Tw (even start to consider the peripheral issues until later. OK, so) TjT* -0.0458  Tc 1.1708  Tw (sheep are intrinsically like software products. What about their) TjT* -0.1051  Tc -0.0449  Tw (respective development processes?) Tj0 -18  TD /F0 10.8  Tf0.1259  Tc 0  Tw (Stockmen) TjT* /F4 10.2  Tf0.1223  Tc 1.3641  Tw (In general, a flock of sheep is managed by one shepherd on) Tj0 -12  TD 0.2308  Tc 1.1192  Tw (behalf of the farmer. There may be other humans who help) TjT* 0.0867  Tc 1.1433  Tw (manage the flock on a regular basis \226 farm hands, additional) TjT* 0.6519  Tc 0.741  Tw (shepherds, the farmer\222s family. There will certainly be) TjT* 0.0226  Tc 0.494  Tw (specialists who are called in occasionally \(either regularly or in) TjT* 0.4489  Tc 0.9439  Tw (response to specific situations\) \226 vets, shearers, seasonal) TjT* 0.0701  Tc 1.2466  Tw (workers. Many shepherds also keep dogs to help manage the) TjT* -0.0107  Tc 1.0607  Tw (flock \226 my mother usually enlists the help of my sister, or me) TjT* -0.0076  Tc 0.9653  Tw (and my kids if we\222re around \226 which is more or less the same) TjT* 0.0226  Tc 0.1002  Tw (thing. In addition to the farmer, there may be other humans who) TjT* 0.0368  Tc 0.5932  Tw (provide overall direction to the shepherd. There may be a farm) TjT* 0.0495  Tc 1.0671  Tw (shop, whose manager might ask for more lamb, more mutton,) TjT* -0.0074  Tc 1.3907  Tw (more wool, or even more ewe\222s milk, depending on customer) TjT* 0.0458  Tc 0  Tw (requirements.) Tj10.8 -12  TD -0.1401  Tc -0.4099  Tw (There are many \(possibly unflattering\) parallels to be drawn with) Tj-10.8 -12  TD -0.1213  Tc -0.0287  Tw (software development here. If sheep are the software products, the) Tj0 -12  TD -0.0843  Tc 0.2843  Tw (farmer is the board of directors or CEO of the company, the head) TjT* -0.0542  Tc -0.4958  Tw (shepherd is the software development manager, and the other farm) TjT* 0.0814  Tc 0.3686  Tw (employees \(human and canine\) are the programmers. Seasonal) TjT* -0.0929  Tc 0.0029  Tw (workers such as shearers would be contractors, and vets and other) TjT* -0.1268  Tc 0.3586  Tw (experts are consultants. The chap who runs the farm shop may be) TjT* -0.0774  Tc 0.5274  Tw (an account manager, product manager, or possibly the marketing) TjT* -0.2086  Tc 0  Tw (manager.) Tj10.8 -12  TD 0.1561  Tc 0.2939  Tw (Interestingly, shepherds are as reluctant to spend money on) Tj-10.8 -12  TD 0.064  Tc 0.386  Tw (outside experts as software development managers. If there\222s a) TjETendstreamendobj46 0 obj10337endobj44 0 obj<</Type /Page/Parent 5 0 R/Resources <</Font <</F0 6 0 R /F4 16 0 R /F10 42 0 R >>/ProcSet 2 0 R>>/Contents 45 0 R>>endobj49 0 obj<</Length 50 0 R>>stream
BT558.6 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (9) Tj-202.8 768.6  TD /F0 12  Tf-0.0055  Tc -0.0845  Tw (Overload issue 66 april 2005) Tj-326.4 -40.8  TD /F4 10.2  Tf-0.0105  Tc 0.4605  Tw (problem, every possible home remedy \(often passed down from) Tj0 -12  TD -0.1051  Tc 0.4884  Tw (father/mother to daughter/son through the ages\) will be tried first) TjT* -0.065  Tc -0.035  Tw (before calling in the vet. This is usually OK \226 these folklore cures) TjT* 0.0768  Tc 0.3732  Tw (have been tried and tested for centuries after all \226 but it can be) TjT* -0.0777  Tc -0.1473  Tw (counterproductive in the extreme if modern veterinary science has) TjT* -0.0901  Tc -0.1599  Tw (come up with a cheap simple solution to the problem. The mark of) TjT* -0.007  Tc 0.457  Tw (a good shepherd is one who keeps up with the times and knows) TjT* -0.0841  Tc 0.425  Tw (when to call in the experts \226 qualities also required for managing) TjT* -0.1081  Tc -0.0419  Tw (software development.) Tj0 -24  TD /F10 9  Tf-0.0262  Tc -0.0238  Tw (What can we learn?) Tj0 -12  TD /F4 10.2  Tf0.009  Tc 1.161  Tw (Shepherds do not work alone. Being an expert at dealing with) TjT* -0.0728  Tc 1.1228  Tw (sheep is not enough, a shepherd has to be able to communicate) TjT* -0.0652  Tc 0.4152  Tw (with other humans and canines to get the job done. S/he also has) TjT* -0.0786  Tc 0.7468  Tw (to be able to take in and effectively process and use information) TjT* -0.0781  Tc 0.1948  Tw (relevant to his/her work, adapting to specific and general changes) TjT* -0.0302  Tc -0.1198  Tw (in situations.) Tj0 -18  TD /F0 10.8  Tf0.0726  Tc 0.1314  Tw (Breeding a Flock) TjT* /F4 10.2  Tf0.1492  Tc 1.0644  Tw (There are many ways to develop a flock of sheep. You start) Tj0 -12  TD 0.2038  Tc 1.1735  Tw (with some ewes \226 possibly just one or two, maybe a whole) TjT* 0.2177  Tc 1.2073  Tw (existing flock, but more likely somewhere in between. You) TjT* 0.041  Tc 0.209  Tw (might buy two or three year old ewes that are already proven to) TjT* 0.0712  Tc 1.3606  Tw (be good breeders, or you might buy ewe lambs, who may or) TjT* 0.0361  Tc 0.2639  Tw (may not produce lambs in the years to come. Over the next few) TjT* 0.0324  Tc 0.3085  Tw (years you need to make decisions about which ram \(or rams\) to) TjT* 0.1375  Tc 1.0761  Tw (use to service your ewes, which lambs to keep and which to) TjT* 0.44  Tc 0.7736  Tw (sell, whether to buy in new ewes to widen the gene pool,) TjT* 0.752  Tc 0.523  Tw (whether to \223retire\224 old ewes that don\222t produce viable) TjT* 0.0571  Tc 0.9929  Tw (offspring. With the strides made in cloning technology it may) TjT* 0.0693  Tc 0.6307  Tw (even be possible at some point in the future to make copies of) TjT* 0.0839  Tc 1.2327  Tw (your best sheep \226 although there are currently problems with) TjT* 0.0748  Tc 1.2418  Tw (this process, I believe Dolly the Sheep suffered terribly from) TjT* 0.2699  Tc 1.1301  Tw (arthritis and died at an early age. All the time you have to) TjT* 0.4667  Tc 0.9262  Tw (balance the immediate profitability of your flock against) TjT* 0.0731  Tc 0.7969  Tw (investments for future prosperity \226 you may know that in five) TjT* 0.0713  Tc 0.0556  Tw (years\222 time you\222ll have the best flock in the county if you pay a) TjT* 0.3021  Tc 1.0146  Tw (fortune to have Billy the SuperRam service your ewes this) TjT* 0.0543  Tc 0.1188  Tw (autumn, but that\222s no use to you if you then can\222t afford to feed) TjT* 0.068  Tc 0.082  Tw (your sheep in the spring.) Tj11.4 -12  TD -0.0119  Tc -0.6631  Tw (Each of these options has advantages and disadvantages, which) Tj-11.4 -12  TD -0.0065  Tc 0.3475  Tw (I won\222t go into here as they\222re not particularly relevant. What is) Tj0 -12  TD -0.0946  Tc -0.1887  Tw (interesting is that there are also several almost directly comparable) TjT* -0.0242  Tc 0.1742  Tw (ways to develop a portfolio of software products. I\222d guess most) TjT* 0.0371  Tc 0.4879  Tw (software development organisations start with one or two ideas) TjT* 0.0214  Tc 0.4286  Tw (that are developed into products. These will inevitably generate) TjT* 0.3593  Tc 0.0907  Tw (offspring \226 related products which are either add-ons to the) TjT* 0.062  Tc 0.388  Tw (original software or modified versions for different markets, or) TjT* 0.0149  Tc 0.3684  Tw (new products for the existing market. As the company expands,) TjT* 0.3705  Tc 0.4395  Tw (it may buy in and take over development of other software) TjT* 0.1733  Tc 0.3767  Tw (products \(with all the pain that can entail \226 no amount of due) TjT* 0.1342  Tc 0.3158  Tw (diligence will expose all the potential time-bombs in someone) TjT* 0.3506  Tc 0.4994  Tw (else\222s code\), and it will certainly produce newer and better) TjT* 0.3503  Tc 0.2197  Tw (versions of much of its existing product set and continue to) TjT* 0.05  Tc 0.4667  Tw (develop new products. Software that is no longer profitable for) TjT* 0.2517  Tc 0.1983  Tw (whatever reason will be deprecated and eventually no longer) TjT* -0.0621  Tc -0.4879  Tw (supported. As with sheep farming, the bottom line is all-important.) TjT* -0.0354  Tc -0.3812  Tw (Developing a product portfolio is expensive, there must be money) TjT* -0.0579  Tc -0.4921  Tw (coming in from existing products to support the resources required) TjT* 0.0238  Tc 0.0262  Tw (to develop new products.) Tj274.8 708  TD /F10 9  Tf-0.0662  Tc 0.2162  Tw (What can we learn?) Tj0 -12  TD /F4 10.2  Tf-0.0937  Tc 0.5437  Tw (Planning is everything. Having a long-term strategy for the flock) TjT* 0.0034  Tc 1.2648  Tw (is essential, but the farmer must also know how he\222s going to) TjT* 0.0525  Tc 1.1475  Tw (cover the day-to-day expenses while putting that strategy into) TjT* 0.4746  Tc 0.7254  Tw (practice \(and if necessary the long-term strategy must be) TjT* -0.0905  Tc 0.0605  Tw (modified if it is not supportable\).) Tj0 -18  TD /F0 10.8  Tf0.1607  Tc 0.0433  Tw (Growth and Development) TjT* /F4 10.2  Tf-0.0167  Tc 1.1212  Tw (Sheep need grass. They don\222t actually need too much else \226 if) Tj0 -12  TD -0.0736  Tc 0.8664  Tw (you lived on a desert island with a flock of sheep and a field of) TjT* -0.1034  Tc 0.4534  Tw (grass you\222d probably be OK. Sure, you\222d be better off if you had) TjT* 0.0767  Tc 1.1369  Tw (a trusty collie, or access to a vet and modern medications, or) TjT* 0.1212  Tc 0.9834  Tw (bedding and pens, but your flock would survive as long as it) TjT* -0.0828  Tc 0.9328  Tw (could graze. In the real world, if the grass is poor quality you\222ll) TjT* 0.0581  Tc 1.0519  Tw (need to give your flock supplements \226 typically salt licks and) TjT* 0.2275  Tc 0.8825  Tw (various trace elements in some form. You may also need to) TjT* -0.092  Tc 0.842  Tw (provide more bulk in the form of hay. Conversely if the grass is) TjT* -0.0917  Tc 0.269  Tw (too rich you get interesting things happening at the other end \(the) TjT* -0.0951  Tc 1.5051  Tw (technical term is \223daggy sheep\224\) and you\222ll need to clean their) TjT* -0.0671  Tc -0.0829  Tw (bottoms regularly to avoid all sorts of nasty possibilities.) Tj11.4 -12  TD 0.2808  Tc 0.1692  Tw (Software products need a programming language, and not) Tj-11.4 -12  TD 0.0677  Tc 0.4423  Tw (much else. The equivalent of the field is the compiler/linker or) Tj0 -12  TD 0.0161  Tc 0.091  Tw (interpreter for that language, and the hardware/operating system) TjT* 0.0156  Tc -0.1156  Tw (to run it on. If it\222s a functionally sparse language you\222re likely to) TjT* 0.2727  Tc 0.4439  Tw (need to implement elements in other languages or call other) TjT* 0.3571  Tc 0.202  Tw (services \226 I vaguely remember that if you were going to do) TjT* 0.1789  Tc 0.4045  Tw (anything worth doing with ZX Spectrum Basic you\222d have to) TjT* 0.0201  Tc 0.0299  Tw (write chunks of assembler code. On the other hand, if it\222s an all-) TjT* 0.0725  Tc 0.6346  Tw (singing all-dancing language like C++, your expert developers) TjT* 0.274  Tc 0.376  Tw (will be able to produce fantastically elegant, fast and highly) TjT* 0.3903  Tc 2.2597  Tw (functional programs... but when another \(usually junior\)) TjT* -0.0161  Tc 0.3161  Tw (developer comes to de-dag the bottom end \(in order to fix a bug) TjT* 0.0113  Tc 0.1114  Tw (or extend the software\) they\222ve got an awful lot of untangling to) TjT* 0.0196  Tc -0.1696  Tw (do to work out what\222s going on.) Tj11.4 -12  TD -0.0809  Tc -0.5191  Tw (There are many other minor not-quite-requirements that a sheep) Tj-11.4 -12  TD 0.0108  Tc 0.4392  Tw (farmer has to take into account: transporting sheep to market or) Tj0 -12  TD 0.085  Tc 0.365  Tw (slaughter \(packaging up software for distribution\), tagging and) TjT* -0.0634  Tc 0.5134  Tw (numbering sheep so they can be identified \(setting up project ID) TjT* 0.2686  Tc 0.1814  Tw (codes and directory structures\), obtaining and paying for the) TjT* 0.1619  Tc 0.2881  Tw (services of experts, for example vets and shearers \(employing) TjT* -0.0869  Tc 0.5369  Tw (consultants and contractors\), providing and maintaining bedding,) TjT* -0.0506  Tc 0.0506  Tw (fences, gates, pens as required \(buying and maintaining hardware) TjT* -0.1111  Tc -0.1139  Tw (resources\), meeting health and safety regulations for meat produce) TjT* -0.071  Tc -0.559  Tw (or meeting ideal standards for shows \(QA to ensure software meets) TjT* -0.0614  Tc -0.0886  Tw (user requirements\)) Tj74.4 2.4  TD /F4 7.2  Tf0  Tc 0  Tw (1) Tj3.6 -2.4  TD /F4 10.2  Tf-0.15  Tc (.) Tj-78 -24  TD /F10 9  Tf-0.0662  Tc 0.2162  Tw (What can we learn?) Tj0 -12  TD /F4 10.2  Tf0.6706  Tc 2.2651  Tw (Decisions taken about the basic requirements for the) TjT* -0.1016  Tc 0.9266  Tw (development of your flock will have consequences and potential) TjT* 0.0902  Tc 1.0598  Tw (hidden costs \226 be aware of these as far as possible and make) TjT* -0.1076  Tc 0.3776  Tw (informed decisions. Also, it\222s not enough just to breed the perfect) TjT* -0.1048  Tc 0.8048  Tw (sheep, you need to manage its growth and keep it healthy if you) TjT* -0.099  Tc 0.049  Tw (intend to make any profit from it.) Tj0 -18  TD /F0 10.8  Tf0.1476  Tc 0  Tw (Bugs) TjT* /F4 10.2  Tf0.0579  Tc 1.1012  Tw (Sheep have bugs. Lots of them. A major part of a shepherd\222s) Tj0 -12  TD 0.1286  Tc 0.3676  Tw (job is to keep an eye on his/her flock for any signs of disease,) TjET1 1 1 rg 304.2 56.4 263.4 31.2 re f304.2 56.4 263.4 31.2 re fBT304.2 82.2  TD0 0 0 rg /F8 7.8  Tf-0.144  Tc 0  Tw (1) Tj10.8 0  TD 0.0617  Tc -0.0587  Tw (Incidentally, a general rule of thumb for the \223perfect sheep\224 is it should be like a table) Tj0 -10.2  TD 0.0817  Tc 0.1463  Tw (\226 a flat top with a leg at each corner. If only user requirements for software products) TjT* 0.1382  Tc -0.2102  Tw (were so simple!) Tj0.6 w 1 J 1 j 0 0 0 RG ET304.2 91.2 m 567.6 91.2 l S endstreamendobj50 0 obj11103endobj47 0 obj<</Type /Page/Parent 48 0 R/Resources <</Font <</F0 6 0 R /F4 16 0 R /F8 30 0 R /F10 42 0 R >>/ProcSet 2 0 R>>/Contents 49 0 R>>endobj52 0 obj<</Length 53 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.0912  Tc 0  Tw (10) Tj0 768.6  TD /F0 12  Tf-0.0055  Tc 0.2155  Tw (Overload issue 66 april 2005) Tj0 -40.8  TD /F4 10.2  Tf0.2051  Tc 1.2735  Tw (and to administer prophylactic treatments regularly to stave) Tj0 -12  TD 0.2096  Tc 1.1833  Tw (off the possibility of infestations or infections. Preventative) TjT* 0.2854  Tc 1.1247  Tw (measures such as spraying the entire flock once or twice a) TjT* 0.1005  Tc 0.2162  Tw (year with insecticide and regularly dosing for worms are taken) TjT* 0.1129  Tc 0.7371  Tw (as a matter of course, although they\222re not much fun to do. It) TjT* 0.36  Tc 0.87  Tw (is second nature for a good shepherd to spot symptoms of) TjT* 0.2507  Tc 1.1593  Tw (acute infections early on so that they can be treated before) TjT* 0.8676  Tc 0.6324  Tw (permanent damage is done to the flock \(although see) TjT* 0.5587  Tc 0.8913  Tw (comments on calling in the vet in the Stockmen section) TjT* 0.0713  Tc 0.7787  Tw (above\). Shepherds are also very conscious of what\222s going on) TjT* 0.1128  Tc 0.9372  Tw (with the neighbours \226 infestations such as lice or viruses can) TjT* 0.2322  Tc 1.2844  Tw (spread very easily between flocks in adjacent fields, and if) TjT* 0.126  Tc 0.6573  Tw (allowed to proliferate can be potentially devastating \226 look at) TjT* 0.3453  Tc 1.0865  Tw (the short and long term effects of the last foot and mouth) TjT* 0.0845  Tc 0  Tw (outbreak.) Tj11.4 -12  TD 0.2749  Tc 1.7085  Tw (As software developers we too have to deal with bugs.) Tj-11.4 -12  TD 0.2608  Tc 0.2492  Tw (\(Thankfully this task isn\222t quite as offensive or messy as the) Tj0 -12  TD 0.0458  Tc 0.3497  Tw (shepherd\222s version though.\) We all write and run unit tests as a) TjT* -0.0878  Tc -0.4122  Tw (matter of course \226 don\222t we? \226 so we spot and eliminate potentially) TjT* 0.0079  Tc 0.3821  Tw (nasty infections before they can do much damage. We have QA) TjT* -0.1186  Tc -0.3314  Tw (processes and \(usually\) a dedicated testing team to run detailed and) TjT* -0.0974  Tc -0.3026  Tw (exhaustive checks for bugs, and when they find a bug we deal with) TjT* -0.1144  Tc -0.3084  Tw (it according to its severity and impact. We also install firewalls and) TjT* -0.0622  Tc 0.1372  Tw (virus-checkers on our computers to ensure our virtual neighbours) TjT* 0.3019  Tc 0.2572  Tw (can\222t pass any nasty surprises on to us, and a good software) TjT* -0.0993  Tc -0.0507  Tw (developer will consider security issues during development of any) TjT* -0.0795  Tc -0.0705  Tw (internet product.) Tj0 -24  TD /F10 9  Tf0.0538  Tc -0.1038  Tw (What can we learn?) Tj0 -12  TD /F4 10.2  Tf-0.0076  Tc 1.1776  Tw (In general bugs are fairly apparent in both sheep and software) TjT* 0.0627  Tc 1.1373  Tw (products, and must be dealt with as a matter of urgency. It is) TjT* -0.0536  Tc 1.3436  Tw (important to spot bugs as early as possible in the development) TjT* 0.0282  Tc 1.2218  Tw (process \226 it\222s far cheaper to treat a single sheep for a maggot) TjT* -0.1017  Tc 0.1517  Tw (infestation than to treat a whole flock.) Tj0 -18  TD /F0 10.8  Tf0.155  Tc 0.049  Tw (General Cussedness) TjT* /F4 10.2  Tf-0.0697  Tc 0.9911  Tw (Sheep are stupid. If one sheep gets it into its head to run in the) Tj0 -12  TD -0.0606  Tc 0.8379  Tw (wrong direction you can guarantee that most of the rest of them) TjT* -0.0016  Tc 1.3016  Tw (will decide it\222s a good idea and follow it. And there\222s a good) TjT* -0.0686  Tc 0.5686  Tw (reason why one of the standard tests at sheepdog trials is to split) TjT* -0.1071  Tc 1.2071  Tw (off a given number of sheep from the flock \226 sheep are ) Tj237 0  TD /F5 10.2  Tf-0.0565  Tc 0  Tw (stupid) Tj24 0  TD /F4 10.2  Tf-0.15  Tc (.) Tj-261 -12  TD -0.1105  Tc 0.6605  Tw (They can also be quite vicious \226 you might introduce a new ewe) Tj0 -12  TD 0.1765  Tc 0.8735  Tw (to your flock, only to find one of your existing ewes takes a) TjT* -0.0835  Tc 1.0049  Tw (dislike to it and turns on it. I\222ve even seen a ewe push her own) TjT* -0.0466  Tc -0.0284  Tw (lamb into a crevasse to get rid of it.) Tj11.4 -12  TD 0.113  Tc -0.3721  Tw (Software can be stupid and vicious too \(well, sort of\). If your) Tj-11.4 -12  TD 0.1515  Tc 0.4785  Tw (team has always developed software one way, it is often very) Tj0 -12  TD 0.129  Tc -0.679  Tw (difficult to effectively steer the products in a different direction.) TjT* 0.1485  Tc 0.5015  Tw (One example that springs to mind is the development process) TjT* 0.4419  Tc 1.8081  Tw (itself \226 if you\222ve always used the waterfall method it\222s) TjT* 0.0385  Tc -0.3599  Tw (remarkably difficult to introduce elements of agile development.) TjT* 0.079  Tc 0.191  Tw (Or you might find that one product is developed using extreme) TjT* 0.1058  Tc 0.3442  Tw (programming, and everyone likes it so much that they race off) TjT* 0.4462  Tc 2.6038  Tw (and start using XP for everything, whether or not it\222s) TjT* 0.1011  Tc -0.1761  Tw (appropriate. Another example might be the technologies used \226) TjT* 0.3471  Tc 0.1779  Tw (we\222ve developed this product using ASP and JavaScript, so) TjT* 0.0969  Tc -0.3669  Tw (we\222ve got to develop all our internet products that way, whether) TjT* 0.2069  Tc 0.4831  Tw (or not ASP.NET and web services makes more sense. As for) TjT* 0.1141  Tc 0.2692  Tw (vicious software, I can think of countless examples of projects) TjT* 0.1086  Tc 0.5814  Tw (where it\222s seemed sensible to save some time by integrating a) Tj275.4 708  TD 0.1291  Tc 0.5391  Tw (third party component \226 it never seems to quite work out that) Tj0 -12  TD -0.3858  Tc 0  Tw (way.) Tj0 -24  TD /F10 9  Tf-0.0262  Tc -0.0238  Tw (What can we learn?) Tj0 -12  TD /F4 10.2  Tf0  Tc 1.2136  Tw (Don\222t let your sheep \(or your stockmen or collies\) be stupid \226) TjT* -0.1196  Tc 1.2242  Tw (make decisions on a case by case basis. \223We\222ve always done it) TjT* -0.1002  Tc 0.4117  Tw (that way,\224 or \223They did it that way with that sheep and it worked) TjT* 0.2715  Tc 1.0035  Tw (brilliantly,\224 are not in themselves good reasons for making) TjT* 0.3861  Tc 0.882  Tw (decisions. And be very wary of new sheep \226 they may be) TjT* -0.0915  Tc -0.0585  Tw (incompatible with your existing flock.) Tj0 -18  TD /F0 12  Tf-0.0876  Tc 0  Tw (Conclusion) TjT* /F4 10.2  Tf-0.0886  Tc 0.6719  Tw (Well, what can one possibly conclude from these slightly insane) Tj0 -12  TD -0.0645  Tc 0.1145  Tw (ramblings? Hopefully not that I shouldn\222t have got the job \226 I did) TjT* 0.6685  Tc 0.9815  Tw (forbear from expanding on the sheepy metaphor in my) TjT* -0.0918  Tc 1.1418  Tw (presentation, although I couldn\222t resist mentioning it \226 my boss) TjT* -0.0762  Tc 0.6547  Tw (was quite keen to hear about it, so I guess I\222ll have to show him) TjT* 0.5965  Tc 0.5135  Tw (this article and hope he doesn\222t demote me \(or have me) TjT* -0.127  Tc 0.177  Tw (sectioned\) on the spot.) Tj10.8 -12  TD -0.0928  Tc 0.0428  Tw (I could get into a bit of theology here \226 for example, Christians) Tj-10.8 -12  TD -0.0715  Tc 0.2643  Tw (use the sheep idea a lot. But I don\222t think I will, there are enough) Tj0 -12  TD -0.1098  Tc -0.1493  Tw (holy wars about code layout and other such important issues in the) TjT* -0.1156  Tc 0.1156  Tw (programming community as it is.) Tj10.8 -12  TD -0.1085  Tc 0.0785  Tw (My preferred conclusion is that a shepherd\222s crook, a couple of) Tj-10.8 -12  TD -0.1264  Tc -0.0903  Tw (well-trained collies, and a quad bike should be required equipment) Tj0 -12  TD -0.0562  Tc 0.5062  Tw (for a software development manager, and should be provided by) TjT* -0.1329  Tc 0.2829  Tw (every enlightened employer.) Tj10.8 -12  TD 0.1351  Tc 0.2226  Tw (I guess if I were to be serious for a moment \(it does happen) Tj-10.8 -12  TD 0.1201  Tc -0.1368  Tw (occasionally\), I\222d propose that it\222s possible to find useful ideas) Tj0 -12  TD 0.3212  Tc 0.3088  Tw (and process elements and rules of thumb in the strangest of) TjT* 0.4649  Tc 0.2518  Tw (places.  People have been farming and breeding sheep for) TjT* 0.2762  Tc 0.3988  Tw (thousands of years \226 the development process that produces) TjT* 0.1104  Tc 0.2796  Tw (sheep that are \223fit for purpose\224 has been refined and improved) TjT* 0.2853  Tc 0.5933  Tw (upon for generations, and although software products really) TjT* 0.4482  Tc 0.7518  Tw (aren\222t much like sheep the processes of developing those) TjT* 0.114  Tc 0.186  Tw (products have sometimes surprising parallels which we can all) TjT* 0.1031  Tc 0.3469  Tw (learn from.) Tj10.8 -12  TD -0.0973  Tc 0.2704  Tw (My favourite example has to be, \223If a lamb\222s no good, hit it on) Tj-10.8 -12  TD -0.0938  Tc -0.3793  Tw (the head.\224  A shepherd will do this without a second thought.  How) Tj0 -12  TD -0.0807  Tc 0.5307  Tw (many times have you been involved in trying to rescue an infant) TjT* 0.2458  Tc 0.4709  Tw (software product that is obviously too feeble to survive, and) TjT* -0.0752  Tc -0.0748  Tw (wondered why you\222re bothering?) Tj207 -12  TD /F7 10.2  Tf-0.1292  Tc 0.2852  Tw (Pippa Hennessy) Tj-30 -12  TD /F2 9  Tf0  Tc 0  Tw (pip@oldbat.co.uk) Tj-177 -30  TD /F0 12  Tf-0.0072  Tc (Acknowledgments) Tj0 -18  TD /F4 10.2  Tf0.1612  Tc 0.9638  Tw (Thanks to my mother for many entertaining and informative) Tj0 -12  TD -0.0989  Tc 0.5489  Tw (conversations about the ins and outs of sheep farming, to several) TjT* -0.0622  Tc 0.2622  Tw (of my colleagues for joining me in thinking out of the sheep pen,) TjT* 0.1862  Tc 0.8638  Tw (and to Mum, Phil Bass and Alan Griffiths for reviewing the) TjT* -0.0934  Tc 0.5434  Tw (initial draft.) Tj10.8 -12  TD 0.0403  Tc 0.5733  Tw (Any errors in my representation of the ins and outs of sheep) Tj-10.8 -12  TD 0.0135  Tc 0.2115  Tw (farming \(and software development, for that matter\) are entirely) Tj0 -12  TD 0.075  Tc -0.225  Tw (my own.) Tj0 -30  TD /F0 12  Tf-0.018  Tc 0  Tw (References) Tj0 -18  TD /F4 10.2  Tf0.2701  Tc 0.9513  Tw ([1] Pete Goodliffe, \223Professionalism in Programming #21 -) Tj10.8 -12  TD -0.0582  Tc -0.0918  Tw (Software Architecture\224, ) Tj97.8 0  TD /F5 10.2  Tf-0.3408  Tc 0.4908  Tw (C Vu 15.4) Tj39.6 0  TD /F4 10.2  Tf-0.1289  Tc -0.3211  Tw (, August 2003) TjETendstreamendobj53 0 obj10521endobj51 0 obj<</Type /Page/Parent 48 0 R/Resources <</Font 54 0 R/ProcSet 2 0 R>>/Contents 52 0 R>>endobj54 0 obj<</F0 6 0 R/F2 10 0 R/F4 16 0 R/F5 21 0 R/F7 28 0 R/F10 42 0 R>>endobj58 0 obj<</Length 59 0 R>>stream
BT555.6 42  TD0 0 0 rg /F0 10.8  Tf-0.0048  Tc 0  Tw (11) Tj-199.8 768.6  TD /F0 12  Tf-0.0055  Tc -0.0845  Tw (Overload issue 66 april 2005) Tj-312.6 -38.4  TD /F1 18  Tf-0.0586  Tc -0.1454  Tw (Metaprogramming is Your) Tj25.2 -20.4  TD -0.068  Tc 0  Tw (Friend) Tj-25.2 -12  TD /F0 10.2  Tf-0.0997  Tc -0.0743  Tw (by Thomas Guest) Tj-13.8 -23.4  TD /F0 12  Tf-0.081  Tc 0  Tw (Introduction) Tj0 -18.6  TD /F4 10.2  Tf-0.0287  Tc 1.2969  Tw (Whenever I create a new C++ file using Emacs a simple elisp) Tj0 -12  TD -0.0757  Tc -0.0743  Tw (script executes. This script:) Tj0 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0854  Tc 0.0021  Tw (places a standard header at the top of the file,) Tj-11.4 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf0.2573  Tc 0.2527  Tw (works out what year it is and adjusts the Copyright notice) Tj0 -12  TD -0.2253  Tc 0  Tw (accordingly,) Tj-11.4 -10.2  TD /F11 6  Tf0.054  Tc (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0734  Tc 0.2234  Tw (generates suitable ) Tj73.8 0  TD /F2 9  Tf0  Tc 0  Tw (#include) Tj45.6 0  TD /F4 10.2  Tf-0.112  Tc 0.162  Tw (guards \(for header files\),) Tj-130.8 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.104  Tc 0.104  Tw (inserts placeholders for Doxygen comments.) Tj-11.4 -12  TD -0.0902  Tc 0.0069  Tw (In short, the script automates some routine housekeeping for me.) Tj11.4 -12  TD -0.0718  Tc -0.1449  Tw (Nothing extraordinary is going on here. One program \(the elisp) Tj-11.4 -12  TD -0.0543  Tc 0.5043  Tw (script\) helps me write another program \(the C++ program which) Tj0 -12  TD -0.0486  Tc -0.1014  Tw (needs the new file\).) Tj11.4 -12  TD -0.1155  Tc 0.4455  Tw (By contrast, C++ template-metaprogramming is extraordinary.) Tj-11.4 -12  TD -0.0556  Tc -0.0194  Tw (It inspires cutting-edge C++ software; it fuels articles, newsgroup) Tj0 -12  TD 0.026  Tc 0.424  Tw (postings and books [Abrahams and Gurotovy]; and it may even) TjT* -0.0676  Tc 0.0033  Tw (influence the future direction of the language. ) Tj11.4 -12  TD -0.0382  Tc -0.5481  Tw (Despite \(or maybe because of\) this, this article has little more to) Tj-11.4 -12  TD -0.0846  Tc -0.5654  Tw (say about template-metaprogramming. Instead we shall investigate) Tj0 -12  TD 0.0905  Tc 0.3595  Tw (some ordinary metaprograms. For example, the elisp script \226 a) TjT* -0.1481  Tc -0.4019  Tw (program to write a program \226 is a metaprogram. There may be other) TjT* -0.0927  Tc -0.5907  Tw (metaprograms out there which, perhaps, we don\222t notice. And there) TjT* 0.0435  Tc 0.4065  Tw (may be other metaprogramming techniques which, perhaps, we) TjT* -0.0516  Tc -0.0984  Tw (should be aware of.) Tj0 -18  TD /F0 12  Tf-0.024  Tc 0.084  Tw (What is Metaprogramming?) TjT* /F4 10.2  Tf-0.0837  Tc 0.0194  Tw (I like the definition found in the [Wikipedia]:) Tj16.8 -12  TD /F6 10.2  Tf0.0894  Tc 0.9876  Tw (\223Metaprogramming is the writing of programs that write or) Tj-11.4 -12  TD -0.2378  Tc -0.4102  Tw (manipulate other programs \(or themselves\) as their data or that do part) Tj0 -12  TD -0.2382  Tc 0.1902  Tw (of the work that is otherwise done at runtime during compile time.\224) Tj-5.4 -12  TD /F4 10.2  Tf-0.0762  Tc 0.6353  Tw (Actually, it\222s the first half of this definition I like \(everything up) Tj0 -12  TD -0.0915  Tc 0.6615  Tw (to and including \223data\224\). The second seems rather to weaken the) TjT* 0.0533  Tc 1.1167  Tw (concept by being too specific, and in my opinion its presence) TjT* -0.0755  Tc 0.6112  Tw (reflects the current interest in C++ template-metaprogramming \226) TjT* -0.1115  Tc 0.0948  Tw (but a Wikipedia is bound to relect what\222s in fashion!) Tj0 -18  TD /F0 12  Tf-0.0496  Tc 0.4096  Tw (Why Metaprogram?) TjT* /F4 10.2  Tf0.3497  Tc 0.8003  Tw (Having established what metaprogramming is, the obvious) Tj0 -12  TD -0.0294  Tc 1.3365  Tw (follow-up is \223Why?\224 Writing programs to manipulate ordinary) TjT* -0.1234  Tc 0.5188  Tw (data is challenging enough for most of us, so writing programs to) TjT* -0.0817  Tc 0.3517  Tw (manipulate programs must surely be either crazy or too clever by) TjT* 0.0378  Tc 0  Tw (half.) Tj11.4 -12  TD -0.0707  Tc 0.1873  Tw (Rather than attempt to provide a theoretical answer to \223Why?\224) Tj-11.4 -12  TD -0.0972  Tc 0.0472  Tw (at this point, let\222s push the question on the stack and discuss some) Tj0 -12  TD -0.0877  Tc -0.0623  Tw (practical applications of metaprogramming.) Tj0 -18  TD /F0 12  Tf0.0263  Tc -0.2663  Tw (Editor Metaprogramming) TjT* /F4 10.2  Tf0.0058  Tc 1.4942  Tw (I\222ve already spoken about programming Emacs to create C++) Tj0 -12  TD -0.0162  Tc 1.2298  Tw (files in a standard format. We can compare this technique to a) TjT* -0.0684  Tc -0.0816  Tw (couple of common alternatives:) TjT* -0.225  Tc 0  Tw (1.) Tj11.4 0  TD -0.0914  Tc 0.1214  Tw (create an empty file then type in the standard header etc.) Tj-11.4 -12  TD -0.225  Tc 0  Tw (2.) Tj11.4 0  TD -0.0878  Tc 0.2378  Tw (copy an existing file which does something similar to what we) Tj0 -12  TD -0.1068  Tc 0.1068  Tw (want, then adapt as required.) Tj-11.4 -12  TD -0.1129  Tc 0.8399  Tw (The first option is tough on the fingers and few of us would fail) Tj0 -12  TD -0.0475  Tc 0.5437  Tw (to introduce a typo or two. The second is better but all too often) TjT* 0.0779  Tc 1.2388  Tw (is executed without due care \226 maybe because a programmer) Tj274.8 708  TD -0.0451  Tc 1.2042  Tw (prefers to concentrate on what she wants to add rather than on) Tj0 -12  TD -0.0605  Tc 0.6391  Tw (what she ought to remove \226 and all too often leads to a new file) TjT* 0.1014  Tc 0.9486  Tw (which is already slightly broken: perhaps a comment remains) TjT* 0.4211  Tc 0.7622  Tw (which only applies to the original file, perhaps there\222s an) TjT* -0.0822  Tc -0.0678  Tw (incorrect date stamp.) Tj11.4 -12  TD -0.0929  Tc -0.0571  Tw (The elisp solution is an improvement. It addresses the concerns) Tj-11.4 -12  TD -0.0871  Tc 0.1553  Tw (described above and can be tailored to fit our needs most exactly.) Tj0 -12  TD 0.1948  Tc 0.2552  Tw (All decent editors have a macro language, so the technique is) TjT* 0.0027  Tc 0  Tw (portable.) Tj11.4 -12  TD 0.1297  Tc 0.2603  Tw (Of course, there is a downside. You have to be comfortable) Tj-11.4 -12  TD -0.0911  Tc 0.1811  Tw (customising your editor. \(Or you have to know someone who can) Tj0 -12  TD -0.0842  Tc -0.0658  Tw (do it for you.\)) Tj0 -18  TD /F0 12  Tf0.033  Tc -0.273  Tw (Batch Editing) TjT* /F4 10.2  Tf-0.2401  Tc 0.4901  Tw (By \223batch editing\224 I mean the process of creating a program to edit) Tj0 -12  TD -0.2441  Tc 0.3941  Tw (a collection of source files without user intervention. This is closely) TjT* -0.2281  Tc 0.3447  Tw (related to editor metaprogramming \226 indeed, I often execute simple) TjT* -0.2518  Tc 0.9418  Tw (batch edits without leaving my editor \(though the editor itself may) TjT* -0.2374  Tc 0.0874  Tw (shell-out instructions to tools such as ) Tj144.6 0  TD /F2 10.2  Tf-0.27  Tc 0  Tw (find) Tj25.8 0  TD /F4 10.2  Tf-0.3096  Tc 0.1596  Tw (and ) Tj16.2 0  TD /F2 10.2  Tf-0.52  Tc 0  Tw (sed) Tj17.4 0  TD /F4 10.2  Tf-0.2733  Tc (\).) Tj-192.6 -12  TD -0.1362  Tc 0.4771  Tw (Very early on in my career \(we\222re talking early 80\222s\) I worked) Tj-11.4 -12  TD -0.148  Tc -0.493  Tw (with a programmer who preferred to edit source files in batch mode.) Tj0 -12  TD -0.0926  Tc -0.1074  Tw (His desk did not have a computer terminal on it. Instead, he would) TjT* -0.0943  Tc 0.011  Tw (study printouts, perhaps marking them up in pencil, perhaps using) TjT* -0.0828  Tc 0.1175  Tw (a rubber to undo these edits, before finally writing \226 by hand \226 an) TjT* -0.0674  Tc 0.2993  Tw (editor batch file to apply his changes. He then visited a computer) TjT* -0.1021  Tc 0.1235  Tw (terminal to enter and execute this batch file.) Tj11.4 -12  TD -0.1459  Tc -0.386  Tw (Even then, this was an old-fashioned way of working, yet he was) Tj-11.4 -12  TD -0.1032  Tc 0.3532  Tw (clear about its advantages:) Tj0 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F10 10.2  Tf-0.1504  Tc (Recordable:) Tj54.6 0  TD /F4 10.2  Tf-0.0803  Tc 0.3303  Tw (the batch file provides a perfect record of what it) Tj-54.6 -12  TD 0.0031  Tc -0.1531  Tw (has done.) Tj-11.4 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F10 10.2  Tf-0.0624  Tc (Reversible:) Tj51 0  TD /F4 10.2  Tf-0.0707  Tc 0.0064  Tw (its effects can therefore be undone, if required.) Tj-62.4 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F10 10.2  Tf-0.0764  Tc (Reflective:) Tj49.2 0  TD /F4 10.2  Tf-0.0449  Tc 0.4949  Tw (by working in this reflective, careful way, he was) Tj-49.2 -12  TD -0.0676  Tc 0.5176  Tw (less likely to introduce errors. When system rebuilds can only) Tj0 -12  TD -0.0854  Tc 0.1354  Tw (be run overnight, this becomes paramount. ) Tj-11.4 -12  TD 0.5338  Tc 0.5828  Tw (These days, builds are quicker and batch editing is more) Tj0 -12  TD -0.11  Tc 1.16  Tw (immediate. With a few regular expressions and a script one can) TjT* -0.0717  Tc 1.1217  Tw (alter every file in the system in less time than it takes to check) TjT* -0.0812  Tc 0.4112  Tw (your email. As an example, in another article [Guest1] I describe) TjT* -0.0993  Tc 0.3693  Tw (the development of a simple Python script to relocate source files) TjT* 0.215  Tc 1.035  Tw (into a new directory structure, taking care to adjust internal) TjT* -0.1031  Tc 0.5531  Tw (references to ) Tj54 0  TD /F2 9  Tf0  Tc 0  Tw (#include) Tj43.2 0  TD /F4 10.2  Tf-0.0021  Tc -0.1479  Tw (d files.) Tj-85.8 -12  TD -0.0905  Tc 0.5405  Tw (The benefits of using a script to perform this sort of operation) Tj-11.4 -12  TD -0.1022  Tc -0.1024  Tw (are a superset of those listed above. In addition, a scripted solution) Tj0 -12  TD -0.0521  Tc -0.0979  Tw (beats hand hacking since it is:) Tj0 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F10 10.2  Tf-0.1441  Tc (Reliable:) Tj40.8 0  TD /F4 10.2  Tf-0.1019  Tc 0.4429  Tw (the script can be shown to work by unit tests and by) Tj-40.8 -12  TD -0.0829  Tc 0.0615  Tw (system tests on small data sets. Then it can be left to do its job.) Tj-11.4 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F10 10.2  Tf-0.059  Tc (Efficient:) Tj42.6 0  TD /F4 10.2  Tf-0.0992  Tc -0.0508  Tw (editing dozens \226 perhaps hundreds \226 of files by hand) Tj-42.6 -12  TD -0.0057  Tc 0.3957  Tw (is error prone and tedious. A script can process megabytes of) Tj0 -12  TD -0.1757  Tc 0.6257  Tw (source in minutes.) Tj-11.4 -12  TD -0.0959  Tc 0.0959  Tw (Again, there is a downside. You have to invest time in writing the) Tj0 -12  TD -0.0728  Tc 1.0628  Tw (script, which may well require a larger investment in learning a) TjT* 0.1056  Tc 1.1444  Tw (new language. Many of us would regard proficiency in other) TjT* -0.0663  Tc 0.3663  Tw (languages as an upside but it may be difficult to make that initial) TjT* -0.0555  Tc -0.0945  Tw (investment under the usual project pressures.) Tj11.4 -12  TD -0.1848  Tc -0.3152  Tw (So, once again, it may end up being a team-mate who ends writes) Tj-11.4 -12  TD 0.1105  Tc 0.3395  Tw (the script for you. Indeed, many software organisations have a) Tj0 -12  TD 0.2505  Tc 1.9995  Tw (dedicated \223Tools Group\224 which specialises in writing and) TjT* -0.0649  Tc 0.1816  Tw (customising tools for internal use during the development of core) TjT* 0.2844  Tc 1.0989  Tw (products. Perhaps this team could equally well be named a) TjT* -0.119  Tc -0.031  Tw (\223Metaprogramming Group\224?) TjETendstreamendobj59 0 obj11890endobj55 0 obj<</Type /Page/Parent 48 0 R/Resources <</Font 60 0 R/ProcSet 2 0 R>>/Contents 58 0 R>>endobj60 0 obj<</F0 6 0 R/F1 8 0 R/F2 10 0 R/F4 16 0 R/F6 23 0 R/F10 42 0 R/F11 56 0 R>>endobj62 0 obj<</Length 63 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.0912  Tc 0  Tw (12) Tj0 768.6  TD /F0 12  Tf-0.0055  Tc 0.2155  Tw (Overload issue 66 april 2005) Tj0 -34.2  TD -0.0382  Tc 0  Tw (Compilation) Tj0 -18.6  TD /F4 10.2  Tf0.1806  Tc 1.0694  Tw (The compiler is the canonical example of a metaprogram: it) Tj0 -12  TD -0.0922  Tc 0.8149  Tw (translates a program written in one language \(such as C\) into an) TjT* -0.0597  Tc -0.0903  Tw (equivalent program written in another language \(object code\).) Tj11.4 -12  TD 0.2406  Tc 4.2761  Tw (Of course, when we invoke a compiler we are not) Tj-11.4 -12  TD -0.0405  Tc 0.4905  Tw (metaprogramming, we are simply using a metaprogram, but it is) Tj0 -12  TD 0.2413  Tc 0.4269  Tw (important to be aware of what\222s going on. We may prefer to) TjT* 0.017  Tc 0.433  Tw (program in higher-level languages but we should remember the) TjT* -0.1085  Tc 0.0585  Tw (compiler\222s role as our translator.  ) Tj11.4 -12  TD -0.128  Tc -0.0765  Tw (We lean on compilers: we rely on them to faithfully convert our) Tj-11.4 -12  TD -0.0587  Tc 0.5087  Tw (source code into an executable; we expect different compilers to) Tj0 -12  TD 0.0251  Tc 0.4249  Tw (produce \223the same\224 results on different platforms; and we want) TjT* -0.0634  Tc -0.0116  Tw (them to do all this while tracking language changes.) Tj11.4 -12  TD 0.2752  Tc 0.1748  Tw (In some environments these considerations are taken very) Tj-11.4 -12  TD 0.0423  Tc 0.4077  Tw (seriously. For safety critical software, a compiler will be tested) Tj0 -12  TD -0.0665  Tc 0.5165  Tw (systematically to confirm the object code produced from various) TjT* -0.0652  Tc 0.5152  Tw (test cases is correct. In such places, you cannot simply apply the) TjT* -0.1137  Tc 0.5637  Tw (latest patch or tweak optimisation flags.  You may even prefer to) TjT* 0.0238  Tc 0.4262  Tw (work in C rather than C++ since C is a smaller language which) TjT* -0.072  Tc -0.078  Tw (translates more directly to object code.) Tj11.4 -12  TD -0.0865  Tc 0.2965  Tw (In other environments we train ourselves to get along with our) Tj-11.4 -12  TD -0.1369  Tc -0.356  Tw (compilers. We accept limitations, report defects, find workarounds,) Tj0 -12  TD -0.0414  Tc 0.4914  Tw (upgrade and apply patches. Optimisation settings are fine-tuned.) TjT* -0.0516  Tc 0.5016  Tw (We prefer tried-and-tested and, above all, supported brands. We) TjT* -0.0693  Tc 0.0393  Tw (monitor newsgroups and share our experiences.) Tj11.4 -12  TD 0.2381  Tc 0.3453  Tw (One last point before leaving compilers alone: C and C++) Tj-11.4 -12  TD 0.0083  Tc 0.4417  Tw (provide a hook which allows you to embed assembler code in a) Tj0 -12  TD -0.1032  Tc 0.0532  Tw (source file \226 that\222s what the ) Tj112.8 0  TD /F2 9  Tf0  Tc 0  Tw (asm) Tj18.6 0  TD /F4 10.2  Tf-0.0848  Tc 0.0205  Tw (keyword is for. I guess this too is) Tj-131.4 -12  TD -0.1525  Tc -0.3403  Tw (metaprogramming in a rather back-to-front form. The ) Tj211.2 0  TD /F2 9  Tf0  Tc 0  Tw (asm) Tj18 0  TD /F4 10.2  Tf-0.2128  Tc (keyword) Tj-229.2 -12  TD -0.0827  Tc -0  Tw (instructs the compiler to suspend its normal operation and include) Tj0 -12  TD 0.0316  Tc 0.4184  Tw (your handwritten assembler code directly. Its exact operation is) TjT* -0.0965  Tc 0.1865  Tw (implementation dependent, and, fortunately, rarely needed.) Tj0 -18  TD /F0 12  Tf0.056  Tc 0  Tw (Scripting) TjT* /F4 10.2  Tf0.1423  Tc 1.0411  Tw (The program which follows is a short but non-trivial Python) Tj0 -12  TD -0.0995  Tc 1.2495  Tw (script. It makes use of a couple of text codecs from the Python) TjT* -0.0804  Tc 1.2637  Tw (standard library to generate a C++ function. This C++ function) TjT* -0.104  Tc 0.554  Tw (converts a single character from ISO 8859-9 encoding into UTF-) TjT* -0.0371  Tc -0.1129  Tw (8 encoded Unicode.) Tj14.4 -17.4  TD 0.2 0.2 0.2 rg /F9 7.8  Tf0.12  Tc 0  Tw (def warnGenerated\(\):) Tj9.6 -12  TD 0 0 0 rg /F2 7.8  Tf('''Return a standard 'generated code' warning.''') Tj0 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(import sys, time) TjT* (return \() Tj9.6 -12  TD ('// GENERATED CODE. DO NOT EDIT!\\n') Tj0 -12  TD ('// generated by %s, %s' %) TjT* (\(' '.join\(sys.argv\),) Tj4.8 -12  TD (time.asctime\(time.localtime\(\)\)\)) Tj-4.8 -12  TD (\)) Tj-19.2 -18.6  TD (def functionHeader\(codec\):) Tj9.6 -12  TD 0 0 0 rg /F2 7.8  Tf('''Return the decode function header.''') Tj0 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(return '''/**) Tj-9.6 -12  TD (* @brief Convert from %\(codec\)s into UTF-8) Tj0 -12  TD (* encoded Unicode) TjT* (* @param %\(codec\)s An %\(codec\)s encoded character) TjT* (* @param it Reference to an output iterator) TjT* (* @note If the input character is invalid, the) TjT* (* Unicode replacement character U+FFFD will be) TjT* (* returned.) TjT* (*/) Tj274.8 708  TD (template <typename output_iterator>) Tj0 -12  TD (void) TjT* (%\(codec\)s_to_utf8\() Tj9.6 -12  TD (unsigned char %\(codec\)s,) Tj0 -12  TD (output_iterator & it\)''' % { 'codec' : codec }) Tj-9.6 -24  TD (def convertCh\(ch, codec\):) Tj9.6 -12  TD 0 0 0 rg /F2 7.8  Tf('''Return the 'case' statement converting) Tj0 -12  TD (the input character using the supplied codec''') Tj0 -24  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(from unicodedata import name) TjT* (ucs = chr\(ch\).decode\(codec, 'replace'\)) Tj0 -12  TD (utf = ucs.encode\('utf-8'\)) TjT* (ucname = name\(ucs, 'Control code'\)) TjT* (action = '; '.join\(['*it++ = 0x%02x' % ord\(c\)) Tj96 -12  TD (for c in utf]\)) Tj-96 -24  TD (return '''case 0x%02x: // %s) Tj0 -12  TD (%s;) TjT* (break;''' % \(ch, ucname, action\)) Tj-9.6 -24  TD (def codeBlock\(prefix, body, indent = ' ' * 4\):) Tj9.6 -12  TD 0 0 0 rg /F2 7.8  Tf('''Return an indented code block.) Tj0 -12  TD (This code block will be formatted:) TjT* (prefix) TjT* ({) Tj9.6 -12  TD (body) Tj-9.6 -12  TD (}''') Tj0 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(import re) TjT* (indent_re = re.compile\('^', re.MULTILINE\)) TjT* (return '''%s) Tj-9.6 -12  TD ({) Tj0 -12  TD (%s) TjT* (}''' % \(prefix, indent_re.sub\(indent, body\)\)) Tj0 -24  TD (codec = 'iso8859_9') Tj0 -12  TD (print warnGenerated\(\)) Tj0 -24  TD (print codeBlock\() Tj9.6 -12  TD (functionHeader\(codec\),) Tj0 -12  TD (codeBlock\() Tj9.6 -12  TD ('switch\(%s\)' % codec,) Tj0 -12  TD (# iso8859-* encodings are 8-bit) TjT* ('\\n'.join\([convertCh\(ch, codec\)) Tj52.8 -12  TD (for ch in range\(0x100\)]\),) Tj-52.8 -12  TD (indent = '' # don\222t indent case: labels) Tj0 -12  TD (\)) Tj-9.6 -12  TD (\)) Tj-23.4 -24  TD 0 0 0 rg /F4 10.2  Tf0.5711  Tc 0.588  Tw (By now, it should go without saying that this script is a) Tj0 -12  TD -0.082  Tc 1.312  Tw (metaprogram. Before discussing why I think it\222s a good use of) TjT* -0.1234  Tc -0.0266  Tw (metaprogramming, some notes:) Tj0 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj10.8 -1.8  TD /F4 10.2  Tf0.0493  Tc 0.1007  Tw (The function ) Tj56.4 0  TD /F2 9  Tf0.12  Tc 0  Tw (warnGenerated\(\)) Tj86.4 0  TD /F4 10.2  Tf0.0616  Tc 0.3884  Tw (is used to place a standard) Tj-142.8 -12  TD -0.1065  Tc 0.2838  Tw (warning in front of the generated C++ function. If users of this) Tj0 -12  TD -0.0477  Tc 0.0777  Tw (C++ function edit it by hand, their changes will be overwritten) TjT* -0.0946  Tc 0.0946  Tw (next time the script is run: hence the warning.) Tj-10.8 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj10.8 -1.8  TD /F4 10.2  Tf-0.1747  Tc -0.3753  Tw (The generated code identifies the command which created it \(this) Tj0 -12  TD -0.0859  Tc 0.1759  Tw (information appears as part of the standard warning\). This is to) TjT* -0.0852  Tc 0.0352  Tw (help users regenerate the code, if required.) TjETendstreamendobj63 0 obj7814endobj61 0 obj<</Type /Page/Parent 48 0 R/Resources <</Font <</F0 6 0 R /F2 10 0 R /F4 16 0 R /F9 36 0 R /F11 56 0 R >>/ProcSet 2 0 R>>/Contents 62 0 R>>endobj65 0 obj<</Length 66 0 R>>stream
BT552.6 42  TD0 0 0 rg /F0 10.8  Tf0.0912  Tc 0  Tw (13) Tj-196.8 768.6  TD /F0 12  Tf-0.0055  Tc -0.0845  Tw (Overload issue 66 april 2005) Tj-326.4 -39  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0975  Tc -0.3798  Tw (It is very important that the Python script is both maintained and) Tj0 -12  TD 0.2573  Tc 0.3727  Tw (easy to locate. Ideally, the build system includes a rule to) TjT* -0.0786  Tc -0.1914  Tw (generate the C++ from the script, though this behaviour may be) TjT* -0.0973  Tc 0.1873  Tw (hard to integrate into some IDEs: it may prove more pragmatic) TjT* 0.1515  Tc 0.2985  Tw (to run the script by hand and keep the dependent C++ code) TjT* -0.1098  Tc 0.1098  Tw (checked directly into the repository.) Tj-11.4 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf0.0795  Tc 0.3705  Tw (Notice how Python\222s triple quoted strings allow us to create) Tj0 -12  TD -0.0967  Tc 0.3967  Tw (neatly formatted C++ code from neatly formatted Python code) TjT* -0.1019  Tc 0.0719  Tw (without needing lots of escaped characters.) Tj-11.4 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0912  Tc -0.4588  Tw (It is perhaps ironic that, according to the Python documentation,) Tj0 -12  TD 0.2244  Tc 2.4006  Tw (some of Python\222s builtin codecs are implemented in ) Tj2.7966  Tc 0  Tw (C) TjT* -0.0778  Tc 0.2278  Tw (\(presumably for reasons of speed\). I haven\222t worked out if this) TjT* -0.1197  Tc 0.1697  Tw (applies to the ones this script uses.) Tj-11.4 -12  TD -0.0537  Tc 0.2537  Tw (I like this script since it makes use of the standard Python library) Tj0 -12  TD -0.0962  Tc 0.3154  Tw (to create code we can use in a C++ program. The hard work goes) TjT* -0.1023  Tc 1.0323  Tw (on in the calls to ) Tj74.4 0  TD /F2 9  Tf0  Tc 0  Tw (encode\(\)) Tj46.8 0  TD /F4 10.2  Tf-0.1096  Tc -0.0404  Tw (and ) Tj18.6 0  TD /F2 9  Tf0  Tc 0  Tw (decode\(\)) Tj46.8 0  TD /F4 10.2  Tf-0.1437  Tc 1.5937  Tw (and we don\222t even) Tj-186.6 -12  TD -0.0696  Tc 0.7596  Tw (have to look at the implementations of these functions, let alone) Tj0 -12  TD -0.0771  Tc 0.5271  Tw (maintain them. Their speed does not affect the speed of our C++) TjT* 0.0072  Tc 1.4028  Tw (function and I am willing to trust their correctness, meaning I) TjT* -0.0894  Tc 0.0727  Tw (don\222t have to locate or purchase the ISO 8859 standards.) Tj11.4 -12  TD -0.0986  Tc 0.3849  Tw (The second big win is that all the boilerplate code is generated) Tj-11.4 -12  TD -0.0986  Tc -0.4206  Tw (without effort. If, at some point in the future, we need a fuller range) Tj0 -12  TD -0.1043  Tc 0.3543  Tw (of ISO 8859 text converters, then we tweak the script so the final) TjT* -0.0856  Tc 0.1356  Tw (section reads, for example:) Tj13.8 -24  TD 0.2 0.2 0.2 rg /F9 7.8  Tf0.12  Tc 0  Tw (codecs = ['iso8859_%d' for n in range\(1, 10\)]) Tj0 -24  TD (print warnGenerated\(\)) TjT* (for codec in codecs:) Tj9.6 -12  TD (print codeBlock\() Tj9.6 -12  TD (functionHeader\(codec\)) Tj0 -12  TD (....) TjT* (\)) Tj-33 -24  TD 0 0 0 rg /F4 10.2  Tf-0.0858  Tc 1.2358  Tw (and let it run. And should we decide on a different strategy for) Tj0 -12  TD -0.0799  Tc 0.0632  Tw (handling invalid input data, again, the metaprogram is our friend.) Tj0 -18  TD /F0 12  Tf-0.0444  Tc 0.4044  Tw (Preprocessor Metaprogramming) TjT* /F4 10.2  Tf0.1016  Tc 1.0984  Tw (As mentioned in passing, C++ has a sophisticated templating) Tj0 -12  TD -0.0359  Tc 1.3859  Tw (facility which \(amongst other things\) makes metaprogramming) TjT* -0.1356  Tc 0.3606  Tw (possible without needing to step outside the language. ) Tj11.4 -12  TD -0.0396  Tc 0.4146  Tw (C++ also inherits the C preprocessor: a rather unsophisticated) Tj-11.4 -12  TD -0.2048  Tc -0.4252  Tw (facility, but one which is equally ready for use by metaprogrammers.) Tj0 -12  TD 0.0555  Tc 0.3945  Tw (In fact, careful use of this preprocessor can allow you to create) TjT* -0.1177  Tc -0.0323  Tw (generic C algorithms and simulate lambda functions.) Tj11.4 -12  TD -0.1601  Tc 0.0101  Tw (For example:) Tj2.4 -24  TD 0.2 0.2 0.2 rg /F9 7.8  Tf0.12  Tc 0  Tw (#define ALL_ITEMS_IN_LIST\(T, first, item, ...\) \\) Tj0 -12  TD (do {                                     \\) Tj14.4 -12  TD (T * item = first;                     \\) Tj0 -12  TD (while \(item != NULL\) {                \\) Tj9.6 -12  TD (__VA_ARGS__;                        \\) Tj0 -12  TD (item = item->next;                  \\) Tj-9.6 -12  TD (}                                     \\) Tj-14.4 -12  TD (} while\(0\)) Tj0 -24  TD (#define ALL_FISH_IN_SEA\(first_fish, ...\) \\) Tj38.4 -12  TD (ALL_ITEMS_IN_LIST\(Fish, first_fish, \\) Tj86.4 -12  TD (fish, __VA_ARGS__\)) Tj136.2 708  TD 0 0 0 rg /F4 10.2  Tf-0.1095  Tc 0.3595  Tw (The first macro, ) Tj67.8 0  TD /F2 9  Tf0  Tc 0  Tw (ALL_ITEMS_IN_LIST) Tj91.8 0  TD /F4 10.2  Tf-0.0339  Tc 0.3339  Tw (, iterates through items in) Tj-159.6 -12  TD 0.1746  Tc 0.8754  Tw (a linked list and optionally performs some action on each of) Tj0 -12  TD -0.0778  Tc 1.1278  Tw (them. It requires that list nodes are connected by a next pointer) TjT* -0.0596  Tc 0.5096  Tw (called ) Tj27 0  TD /F2 9  Tf0  Tc 0  Tw (next) Tj21.6 0  TD /F4 10.2  Tf-0.136  Tc 0.586  Tw (. The second macro, ) Tj85.8 0  TD /F2 9  Tf0  Tc 0  Tw (ALL_FISH_IN_SEA) Tj81 0  TD /F4 10.2  Tf-0.0479  Tc 0.4979  Tw (, specialises) Tj-215.4 -12  TD -0.0319  Tc 0.2569  Tw (the first: the node type is set to ) Tj128.4 0  TD /F2 9  Tf0.24  Tc 0.96  Tw (Fish *) Tj36.6 0  TD /F4 10.2  Tf-0.0888  Tc 0.5388  Tw (and the list node iterator) Tj-165 -12  TD -0.0701  Tc -0.0799  Tw (is called ) Tj35.4 0  TD /F2 9  Tf0  Tc 0  Tw (fish) Tj24 0  TD /F4 10.2  Tf-0.0215  Tc 0.1715  Tw (instead of ) Tj42 0  TD /F2 9  Tf0  Tc 0  Tw (item) Tj21.6 0  TD /F4 10.2  Tf-0.15  Tc (.) Tj-111.6 -12  TD -0.1586  Tc 0.2336  Tw (Here\222s an example of how we might use it:) Tj3 -24  TD /F2 7.8  Tf0.12  Tc 0  Tw (/**) Tj4.8 -12  TD (* @brief Find Nemos) Tj0 -12  TD (* @param fishes Linked list of fish) TjT* 0.1046  Tc 0.0154  Tw (* @returns The number of fish in the list called) TjT* 0.12  Tc 0  Tw (* Nemo) TjT* (*/ ) Tj-4.8 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(int findNemo\(Fish * fishes\) {) Tj9.6 -12  TD (int count;) Tj0 -24  TD (ALL_FISH_IN_SEA\(fishes,) Tj14.4 -12  TD (if\(!strcmp\(fish->name, "Nemo"\)\) {) Tj9.6 -12  TD (printf\("Found one!\\n"\);) Tj0 -12  TD (++count;) Tj-9.6 -12  TD (}) Tj-14.4 -12  TD (\);) Tj0 -12  TD (return count;) Tj-9.6 -12  TD (}) Tj-14.4 -24  TD 0 0 0 rg /F4 10.2  Tf0.0636  Tc 1.1364  Tw (Note how simple it is to plug a code snippet into our generic) Tj0 -12  TD -0.1205  Tc 0.2432  Tw (looping construct. I have used one of C99\222s variadic macros to do) TjT* -0.1023  Tc 0.9887  Tw (this \(these are not yet part of standard C++, but some compilers) TjT* -0.0444  Tc -0.1056  Tw (may support them\).) Tj11.4 -12  TD -0.0748  Tc 0.2848  Tw (I hesitate to recommend using the preprocessor in this way for) Tj-11.4 -12  TD -0.085  Tc -0.065  Tw (all the usual reasons [Sutter]. That said:) Tj0 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1035  Tc -0.3465  Tw (This is a technique I have seen used to good effect in production) Tj0 -12  TD -0.1615  Tc 0  Tw (code.) Tj-11.4 -10.2  TD /F11 6  Tf0.054  Tc (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1015  Tc -0.1085  Tw (Techniques like these are used in highly respected C software \226) Tj0 -12  TD -0.0783  Tc 0.195  Tw (Perl and Zlib, for example. All C/C++ programmers should be) TjT* -0.07  Tc 0.22  Tw (familiar with it.) Tj-11.4 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1312  Tc -0.2855  Tw (Although the preprocessor can be dangerous, the way it operates) Tj0 -12  TD 0.0448  Tc 0.4052  Tw (is simple and transparent: use your compiler\222s ) Tj195.6 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (-E) Tj15 0  TD /F4 10.2  Tf0.1151  Tc 0.3349  Tw (option \(or) Tj-210.6 -12  TD 0.1491  Tc 0.3009  Tw (equivalent\) to see exactly what the preprocessor is up to. \(I) Tj0 -12  TD -0.1394  Tc -0.0706  Tw (sometimes wish I had an equivalent option for working out how) TjT* -0.1003  Tc 0.0703  Tw (the compiler is handling templated code\)) Tj-11.4 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1891  Tc -0.3609  Tw (Template metaprogramming experts use every preprocessor trick) Tj0 -12  TD -0.1143  Tc 0.4976  Tw (in the book. See, for example, some of Andrei Alexandrescu\222s) TjT* -0.0851  Tc 0.5351  Tw (publications [Alexandrescu], or the Boost preprocessor library) TjT* 0.0793  Tc 0.3707  Tw ([Boost]. \(This library\222s documentation includes an excellent) TjT* -0.1354  Tc -0.4432  Tw (introduction to the preprocessor\222s limitations, and techniques for) TjT* -0.1744  Tc 0.6244  Tw (working round them.\)) Tj-11.4 -12  TD 0.0023  Tc 1.0477  Tw (One final point: the ) Tj88.2 0  TD /F2 9  Tf0.1  Tc 0  Tw (inline) Tj36.6 0  TD /F4 10.2  Tf0.0487  Tc 1.4013  Tw (keyword \(intentionally\) does not) Tj-124.8 -12  TD 0.1584  Tc 0.9583  Tw (require the compiler to inline code. The preprocessor can do) Tj0 -12  TD -0.1276  Tc -0.0224  Tw (nothing but!) Tj0 -18  TD /F0 12  Tf-0.0009  Tc 0.0609  Tw (Reflection and Introspection) TjT* /F4 10.2  Tf0.2866  Tc 0.8834  Tw (Take a look at the following Python function which on my) Tj0 -12  TD -0.1258  Tc 0.1758  Tw (machine lives in ) Tj67.8 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (<PYTHONROOT>/Lib/pickle.py) Tj-53.4 -24  TD 0.2 0.2 0.2 rg /F9 7.8  Tf0.12  Tc (def encode_long\(x\):) Tj9.6 -12  TD (r"""Encode a long to a two's complement) Tj0 -12  TD (little-endian binary string.) TjT* (Note that 0L is a special case, returning) TjETendstreamendobj66 0 obj9911endobj64 0 obj<</Type /Page/Parent 48 0 R/Resources <</Font <</F0 6 0 R /F2 10 0 R /F4 16 0 R /F9 36 0 R /F11 56 0 R >>/ProcSet 2 0 R>>/Contents 65 0 R>>endobj68 0 obj<</Length 69 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.0912  Tc 0  Tw (14) Tj0 768.6  TD /F0 12  Tf-0.0055  Tc 0.2155  Tw (Overload issue 66 april 2005) Tj24 -40.8  TD 0.2 0.2 0.2 rg /F9 7.8  Tf0.12  Tc 0  Tw (an empty string, to save a byte in the) Tj0 -12  TD (LONG1 pickling context.) TjT* (>>> encode_long\(0L\)) TjT* ('') TjT* (>>> encode_long\(255L\)) TjT* ('\\xff\\x00') TjT* (>>> encode_long\(32767L\)) TjT* ('\\xff\\x7f') TjT* (>>> encode_long\(-256L\)) TjT* ('\\x00\\xff') TjT* (>>> encode_long\(-32768L\)) TjT* ('\\x00\\x80') TjT* (>>> encode_long\(-128L\)) TjT* ('\\x80') TjT* (>>> encode_long\(127L\)) TjT* ('\\x7f') TjT* (>>>) TjT* (""") TjT* (....) Tj-24 -24  TD 0 0 0 rg /F4 10.2  Tf-0.065  Tc 0.315  Tw (The triple quoted string which follows the function declaration is) Tj0 -12  TD 0.1662  Tc 0.8838  Tw (the function\222s docstring \(and the ) Tj145.8 0  TD /F2 9  Tf0  Tc 0  Tw (r) Tj9.6 0  TD /F4 10.2  Tf0.1417  Tc 1.1083  Tw (which prefixes the string) Tj-155.4 -12  TD 0.169  Tc 0.9477  Tw (makes this a raw string, ensuring that the backslashes which) Tj0 -12  TD 0.4359  Tc 0.9141  Tw (follow are not used as escape characters\). This particular) TjT* 0.0957  Tc 1.1043  Tw (docstring provides a concise description of what the function) TjT* -0.0925  Tc 1.1425  Tw (does, fleshed out with some examples of the function in action.) TjT* -0.1082  Tc 0.3332  Tw (These examples exercise special cases and boundary cases, rather) TjT* -0.0645  Tc -0.0855  Tw (like a unit test might.) Tj11.4 -12  TD -0.1839  Tc 0.0339  Tw (Python\222s ) Tj37.2 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (doctest) Tj44.4 0  TD /F4 10.2  Tf-0.0884  Tc -0.2331  Tw (module [Doctest] enables a user to test that) Tj-93 -12  TD -0.135  Tc 0.585  Tw (these examples work correctly. Here\222s how to ) Tj187.2 0  TD /F2 9  Tf0  Tc 1.2  Tw (doctest pickle) Tj-187.2 -12  TD /F4 10.2  Tf-0.0838  Tc -0.0662  Tw (in an interactive Python session:) Tj14.4 -24  TD 0.2 0.2 0.2 rg /F9 7.8  Tf0.12  Tc 0  Tw (>>> import pickle) Tj0 -12  TD (>>> import doctest) TjT* (>>> doctest.testmod\(pickle\)) TjT* (\(0, 14\)) Tj-14.4 -24  TD 0 0 0 rg /F4 10.2  Tf0.1255  Tc 0.7245  Tw (The test result, ) Tj68.4 0  TD /F2 9  Tf0.4  Tc 2  Tw (\(0, 14\)) Tj42 0  TD /F4 10.2  Tf0.1987  Tc 0.8513  Tw (, indicates 14 tests have run with 0) Tj-110.4 -12  TD 0.2295  Tc 0.9405  Tw (failures. For more details try ) Tj131.4 0  TD /F2 9  Tf0.3913  Tc 0  Tw (doctest.testmod\(pickle,) Tj-131.4 -12  TD 0  Tc (verbose=True\)) Tj70.2 0  TD /F4 10.2  Tf-0.1074  Tc 0.1974  Tw (. In case anyone is confused, 7 of the tests apply) Tj-70.2 -12  TD 0.2322  Tc -0.3822  Tw (to ) Tj12.6 0  TD /F2 9  Tf0.4364  Tc 0  Tw (encode_long) Tj67.2 0  TD /F4 10.2  Tf0.2738  Tc 1.0333  Tw (\226 and unsurprisingly the other 7 apply to) Tj-79.8 -12  TD /F2 9  Tf0  Tc 0  Tw (decode_long) Tj59.4 0  TD /F4 10.2  Tf-0.15  Tc (.) Tj-48 -12  TD -0.1138  Tc 0.5638  Tw (Incidentally, if ) Tj61.8 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (pickle.py) Tj57 0  TD /F4 10.2  Tf-0.0977  Tc 0.3977  Tw (is executed \(rather than imported) Tj-130.2 -12  TD -0.1127  Tc 0.0484  Tw (as a library\) it runs these tests directly.) Tj11.4 -12  TD 0.313  Tc 0.137  Tw (The ) Tj19.8 0  TD /F2 10.2  Tf0.3943  Tc 0  Tw (doctest) Tj48 0  TD /F4 10.2  Tf0.3031  Tc 0.1469  Tw (module is a metaprogram \226 an example of) Tj-79.2 -12  TD -0.031  Tc 0.481  Tw (Python being used to both read and execute Python. To see how) Tj0 -12  TD 0.0138  Tc 0.2726  Tw (it works I suggest taking a look at its implementation. The code) TjT* 0.019  Tc -0.469  Tw (runs to about 1500 lines of which the majority are documentation) TjT* 0.0228  Tc -0.2228  Tw (and many of the rest are to do with providing flexibility for more) TjT* 0.0449  Tc 0.4051  Tw (advanced use.) Tj11.4 -12  TD 0.1723  Tc 0.2777  Tw (In essence, note that docstrings are not comments, they are) Tj-11.4 -12  TD 0.2668  Tc 0.4499  Tw (formal object attributes. Now, Python allows you to list and) Tj0 -12  TD -0.0858  Tc 0.4758  Tw (categorise objects at runtime, so we can collect up the docstrings) TjT* -0.0995  Tc -0.0505  Tw (for classes, class methods and for the module itself. Once we have) TjT* 0.054  Tc 0.396  Tw (all these docstrings we can search them to find anything which) TjT* -0.0993  Tc 0.4293  Tw (looks like the output of an interactive session using Python\222s text) TjT* 0.1325  Tc 0.2425  Tw (parsing capabilities. The remaining twist is Python\222s ability to) TjT* -0.083  Tc 0.008  Tw (dynamically compile and execute source code using the ) Tj226.2 0  TD /F2 9  Tf0  Tc 0  Tw (compile) Tj-226.2 -12  TD /F4 10.2  Tf0.2904  Tc 0.1596  Tw (and ) Tj19.2 0  TD /F2 9  Tf0.3  Tc 0  Tw (exec) Tj27 0  TD /F4 10.2  Tf0.2641  Tc 0.9859  Tw (commands. So, we can replay the documentation) Tj-46.2 -12  TD -0.1086  Tc 0.1986  Tw (examples, capturing and checking the output.) Tj286.2 708  TD -0.087  Tc -0.063  Tw (The ) Tj18 0  TD /F2 9  Tf0  Tc 0  Tw (doctest) Tj40.2 0  TD /F4 10.2  Tf-0.0772  Tc -0.1586  Tw (module provides no more than an introduction to) Tj-69 -12  TD -0.1288  Tc 0.4454  Tw (metaprogramming in Python. Given a Python object it is possible) Tj0 -12  TD -0.1074  Tc 0.5112  Tw (to get at the object\222s class, which is itself an object which can be) TjT* -0.1003  Tc 0.0836  Tw (dynamically queried and even modified at run-time. This isn\222t the) TjT* -0.0774  Tc -0.2111  Tw (sort of trick which is often required: I haven\222t tried it myself so I\222d) TjT* -0.0799  Tc -0.4201  Tw (better keep quiet and refer you to the experts. See for example [van) TjT* -0.0726  Tc -0.0774  Tw (Rossum] or [Raymond].) Tj0 -18  TD /F0 12  Tf-0.055  Tc 0.115  Tw (Domain Specific Extensions) TjT* /F4 10.2  Tf-0.0982  Tc 0.6082  Tw (Sometimes the best way to solve a particular family of problems) Tj0 -12  TD 0.6402  Tc 1.0098  Tw (is to create a domain specific language, which may be) TjT* -0.0821  Tc 0.0178  Tw (implemented as an extension to a standard language) Tj10.8 -12  TD -0.1086  Tc -0.4778  Tw (For example \(and once again, quite early in my career\), I worked) Tj-10.8 -12  TD -0.0976  Tc -0.4888  Tw (for an organisation \226 I\222ll call it Vector Products \226 which specialised) Tj0 -12  TD -0.1477  Tc -0.3773  Tw (in solid geometry software. Vector Products developed and actively) TjT* 0.0824  Tc 0.3676  Tw (maintained a proprietary extension to C \226 I\222ll call it C-cubed \226) TjT* 0.2596  Tc 1.4904  Tw (which provided native support for various domain-specific) TjT* 0.0709  Tc 0.3791  Tw (primitives: vectors \(the sort you find in 3D mathmematics, not) TjT* /F2 9  Tf0.3818  Tc 0  Tw (std::vector) Tj63 0  TD /F4 10.2  Tf0.2864  Tc 0.7636  Tw (\), ranges, axis-aligned boxes; and for domain) Tj-63 -12  TD -0.0789  Tc -0.0711  Tw (specific operators to work with these primitives.) Tj10.8 -12  TD -0.179  Tc -0.331  Tw (I should stress that this C extension pre-dated standard C++. C++) Tj-10.8 -12  TD -0.0995  Tc -0.2305  Tw (classes and operator overloading can now handle much of what C-) Tj0 -12  TD -0.1778  Tc -0.4008  Tw (cubed provided. Nonetheless, Vector Products\222 investment paid off:) TjT* -0.0048  Tc 0.4548  Tw (C-cubed allowed programmers to write vector mathematics in a) TjT* -0.1172  Tc 0.3872  Tw (clean and legible way, thereby freeing them to concentrate on the) TjT* -0.109  Tc 0.1304  Tw (real solid geometry problems they needed to solve.) Tj10.8 -12  TD -0.0622  Tc 0.5122  Tw (I believe that the earliest incarnations of C++ were essentially) Tj-10.8 -12  TD -0.0628  Tc -0.5539  Tw (domain-specific extensions to C. For early C++, the domain would) Tj0 -12  TD -0.098  Tc -0.052  Tw (be \223Object Oriented Programming\224. [Stroustrup]) Tj10.8 -12  TD 0.2674  Tc 0.2826  Tw (This again is metaprogramming, though \(particularly with) Tj-10.8 -12  TD 0.3054  Tc 2.3446  Tw (respect to the supplied examples\) it is closely related to) Tj0 -12  TD -0.0738  Tc 0  Tw (compilation.) Tj0 -18  TD /F0 12  Tf-0.014  Tc (Metaproblems) TjT* /F4 10.2  Tf-0.094  Tc 0.124  Tw (Most of this article puts a positive spin on metaprogramming. I\222m) Tj0 -12  TD -0.0662  Tc 0.0253  Tw (happy enough to leave you with this impression, but I should also) TjT* -0.0941  Tc 0.2441  Tw (mention some problems.) Tj0 -18  TD /F0 10.8  Tf0.0377  Tc 0  Tw (Trouble-shooting) TjT* /F4 10.2  Tf0.2659  Tc 0.9841  Tw (The first problem is to do with trouble-shooting. You have) Tj0 -12  TD -0.0774  Tc 1.3674  Tw (problems with your program but the problem is actually in the) TjT* -0.0269  Tc 1.1519  Tw (metaprogram which generated your program. You are one step) TjT* -0.1154  Tc 0.3654  Tw (removed from fixing it.) Tj10.8 -12  TD 0.2029  Tc 0.59  Tw (I deliberately used the term \223trouble-shooting\224 rather than) Tj-10.8 -12  TD 0.0104  Tc -0.4938  Tw (debugging. When you think about it, debug builds and debuggers) Tj0 -12  TD -0.0136  Tc 0.4091  Tw (are there to help you solve these problems by hooking you back) TjT* 0.3512  Tc 0.8188  Tw (from machine code to source code. It gives the illusion of) TjT* 0.0453  Tc 0.5247  Tw (reversing the effect of the compiler. If you can provide similar) TjT* -0  Tc -0.1496  Tw (hooks in your metaprograms, then similarly the fix will be easier) TjT* 0.0975  Tc -0.2475  Tw (to find.) Tj0 -18  TD /F0 10.8  Tf0.1485  Tc -0.2445  Tw (Quote Escape Problems) TjT* /F4 10.2  Tf-0.1057  Tc 0.9157  Tw (The second problem I refer to as the \223quote-escape\224 problem. It) Tj0 -12  TD -0.0785  Tc 0.0921  Tw (bit me recently when I converted a regular C++ program into one) TjT* 0.1753  Tc 0.9497  Tw (which was partially generated by another C++ program. For) TjT* -0.0822  Tc -0.0678  Tw (details, I refer you to [Guest2].) Tj10.8 -12  TD 0.1705  Tc -0.3205  Tw (For the purposes of this article, look at what happened when) Tj-10.8 -12  TD 0.5187  Tc 0.3063  Tw (I needed to generate C++ code which produces formatted) Tj0 -12  TD 0.197  Tc 0  Tw (output.) Tj10.8 -12  TD -0.0864  Tc 0.0364  Tw (Here\222s the code I wanted to generate:) TjETendstreamendobj69 0 obj10212endobj67 0 obj<</Type /Page/Parent 48 0 R/Resources <</Font <</F0 6 0 R /F2 10 0 R /F4 16 0 R /F9 36 0 R >>/ProcSet 2 0 R>>/Contents 68 0 R>>endobj72 0 obj<</Length 73 0 R>>stream
BT552.6 42  TD0 0 0 rg /F0 10.8  Tf0.0912  Tc 0  Tw (15) Tj-196.8 768.6  TD /F0 12  Tf-0.0055  Tc -0.0845  Tw (Overload issue 66 april 2005) Tj-312.6 -40.8  TD 0.2 0.2 0.2 rg /F9 7.8  Tf0.12  Tc 0  Tw (context.decodeOut\(\)) Tj9.6 -12  TD (<< context.indent\(\)) Tj0 -12  TD (<< field_name << " ") TjT* (<< bitwidth) TjT* (<< " = 0x" << value << "\\n";) Tj-23.4 -24  TD 0 0 0 rg /F4 10.2  Tf-0.0906  Tc 0.0156  Tw (Here\222s the code I developed to do the generating:) Tj13.8 -24  TD 0.2 0.2 0.2 rg /F9 7.8  Tf0.12  Tc 0  Tw (cpp_file) Tj9.6 -12  TD (<< indent\(\)) Tj0 -12  TD (<< "context.decodeOut\(\) << context.indent\(\) << ") TjT* (<< quote\(field_name) Tj28.8 -12  TD (+ " ") Tj0 -12  TD (+ bitwidth ) TjT* (+ " = 0x"\)) Tj-28.8 -12  TD (<< " << context.readFieldValue\(") Tj0 -12  TD (<< quote\(field_name\) + ", ") TjT* (<< value ) TjT* (<< "\) << \\"\\\\n\\";\\n";) Tj-23.4 -24  TD 0 0 0 rg /F4 10.2  Tf-0.0445  Tc 1.0195  Tw (It looks even worse without the helper function, ) Tj205.2 0  TD /F2 9  Tf0.12  Tc 0  Tw (quote) Tj27.6 0  TD /F4 10.2  Tf0.0202  Tc 1.0298  Tw (, which) Tj-232.8 -12  TD -0.0784  Tc -0.0716  Tw (returns a double-quoted version of the input string.) Tj11.4 -12  TD -0.0627  Tc -0.0873  Tw (I was able to defuse this problem with some refactoring but the) Tj-11.4 -12  TD 0.0083  Tc 0.4417  Tw (self-referential nature of metaprogramming will always make it) Tj0 -12  TD -0.0857  Tc -0.0643  Tw (susceptible to these issues.) Tj11.4 -12  TD -0.1585  Tc -0.463  Tw (This is also part of the reason why Python is so popular as a code-) Tj-11.4 -12  TD -0.0966  Tc 0.1266  Tw (generator: as has been shown by some of the preceding examples,) Tj0 -12  TD 0.1635  Tc 0.2865  Tw (its sophisticated string support can subvert most quote-escape) TjT* -0.0349  Tc 0  Tw (problems.) Tj0 -18  TD /F0 10.8  Tf0.1284  Tc -0.2244  Tw (Build Time Complexity) TjT* /F4 10.2  Tf0.3603  Tc 0.7647  Tw (I have already mentioned the problem of integrating code-) Tj0 -12  TD 0.0707  Tc 1.1293  Tw (generators into your build system. Some IDEs don\222t integrate) TjT* 0.5211  Tc 0.6489  Tw (them very well, and even if they do, we have introduced) TjT* -0.07  Tc 1.2291  Tw (complexity into this part of the system. In general we prefer to) TjT* 0.1473  Tc 1.3227  Tw (trade complexity at build time for safety at run-time but we) TjT* -0.0737  Tc -0.0013  Tw (should always check that the gains outweigh the costs.) Tj0 -18  TD /F0 10.8  Tf0.0362  Tc 0.1678  Tw (Too Much Code) TjT* /F4 10.2  Tf-0.0843  Tc 0.5343  Tw (We\222re nearing the end of our investigation, and I hope the \223Why) Tj0 -12  TD 0.2829  Tc 0.9921  Tw (Metaprogram?\224 question I posed at the beginning has been) TjT* 0.075  Tc 0.975  Tw (addressed. The [Wikipedia] answers this question rather more) TjT* -0.0441  Tc 0  Tw (directly:) Tj16.8 -12  TD /F6 10.2  Tf-0.0999  Tc -0.291  Tw (\223[Metaprogramming] ... allows programmers to produce a larger) Tj-11.4 -12  TD -0.1115  Tc 0.2481  Tw (amount of code and get more done in the same amount of time as) Tj0 -12  TD -0.0814  Tc 0.0334  Tw (they would take to write all the code manually.\224) Tj-5.4 -12  TD /F4 10.2  Tf-0.1391  Tc 1.1346  Tw (It\222s possible to interpret this wrongly. As we all know, we want) Tj0 -12  TD -0.0252  Tc 1.2552  Tw (less code, not more \(more software can be good, though\). The) TjT* -0.1027  Tc 0.9727  Tw (important point is that the metaprogram is what we develop and) TjT* 0.0631  Tc 1.1869  Tw (maintain and the metaprogram is small: we shouldn\222t have to) TjT* -0.096  Tc -0.054  Tw (worry about the generated code\222s size.) Tj11.4 -12  TD -0.037  Tc 0.487  Tw (Unfortunately we do have to worry about the generated code,) Tj-11.4 -12  TD -0.0567  Tc -0.3333  Tw (not least because it has to fit in our system. If we turn a critical eye) Tj0 -12  TD -0.0872  Tc -0.1228  Tw (on the ISO 8859 conversion functions we discussed earlier we can) TjT* -0.1122  Tc -0.4878  Tw (see that the generated code size could be halved: values in the range) TjT* 0.2034  Tc 0  Tw (\() Tj3 0  TD /F2 9  Tf0  Tc (0) Tj6 0  TD /F4 10.2  Tf-0.15  Tc (, ) Tj5.4 0  TD /F2 9  Tf0  Tc (0x7f) Tj22.2 0  TD /F4 10.2  Tf-0.0196  Tc 0.4696  Tw (\) translate unchanged into UTF-8, and therefore do not) Tj-36.6 -12  TD -0.1434  Tc -0.4732  Tw (require 128 separate cases. Of course, the metaprogram could easily) Tj0 -12  TD -0.1233  Tc -0.4631  Tw (be modified to take advantage of this information, but the point still) TjT* -0.1253  Tc 0.2153  Tw (holds: generated code can be bloated.) Tj11.4 -12  TD -0.0706  Tc -0.0127  Tw (See [Brown] for a more thorough discussion of this issue.) Tj263.4 715.2  TD /F0 10.8  Tf0.0459  Tc 0.1581  Tw (Too Clever) Tj0 -19.2  TD /F4 10.2  Tf0.0071  Tc 1.1929  Tw (Good programmers use metaprograms because they are lazy. I) Tj0 -12  TD -0.0879  Tc 0.1687  Tw (don\222t mean lazy in the sense of \223can\222t be bothered to put the right) TjT* -0.0964  Tc 0.075  Tw (header in a source file\224, I mean lazy in the sense of \223why should I) TjT* -0.1182  Tc 0.1396  Tw (do something a machine could do for me?\224.) Tj11.4 -12  TD -0.0759  Tc 0.4059  Tw (Being lazy in this way requires a certain amount of cleverness) Tj-11.4 -12  TD -0.1077  Tc -0.3654  Tw (and \223clever\224 can be a pejorative every bit as much as \223lazy\224 can. A) Tj0 -12  TD 0.1999  Tc 0.2501  Tw (metaprogram lives at a higher conceptual level than a regular) TjT* -0.1737  Tc 0.2637  Tw (program. It has to be clever.) Tj11.4 -12  TD 0.0872  Tc -0.4622  Tw (Experienced C++ programmers are used to selecting the right) Tj-11.4 -12  TD 0.1191  Tc 0.7059  Tw (language features for a particular job. Where possible, simple) Tj0 -12  TD 0.1309  Tc -0.1009  Tw (solutions are preferred: not every class needs to derive from an) TjT* 0.4647  Tc 3.6853  Tw (interface, and not every function needs template-type) TjT* 0.2548  Tc 0.4352  Tw (parameters. Similarly, experienced metaprogrammers do not) TjT* 0.0922  Tc -0.4222  Tw (write metaprograms when they can, they do it when they choose) TjT* 0.3048  Tc 0  Tw (to.) Tj0 -18  TD /F0 12  Tf0.0027  Tc -0.2427  Tw (Concluding Thoughts) TjT* /F4 10.2  Tf0.1314  Tc 0.9786  Tw (This article has touched on metaprogramming in a few of its) Tj0 -12  TD 0.6479  Tc 0.6021  Tw (more common guises. I hope I have persuaded you that) TjT* 0.2544  Tc 0.9456  Tw (metaprogramming is both ubiquitous and useful, and that it) TjT* -0.1104  Tc -0.0396  Tw (shouldn\222t be left to a select few.) Tj11.4 -12  TD -0.0858  Tc -0.1642  Tw (At one time, the aim of computer science seemed to be to come) Tj-11.4 -12  TD -0.2007  Tc -0.2493  Tw (up with a language whose concepts were pitched at such a high level) Tj0 -12  TD -0.0421  Tc 0.4921  Tw (that software development would be simple. Simple enough that) TjT* -0.125  Tc 0.455  Tw (people could program machines as easily as they could, say, send) TjT* 0.1678  Tc 0.2822  Tw (a text message) Tj62.4 2.4  TD /F4 7.2  Tf0  Tc 0  Tw (1) Tj3.6 -2.4  TD /F4 10.2  Tf0.1438  Tc 0.3062  Tw (. Compilers would be intelligent and forgiving) Tj-66 -12  TD -0.0699  Tc 0.0199  Tw (enough to translate wishes to machine code.) Tj11.4 -12  TD 0.0274  Tc 0.4226  Tw (This aim is far from being realised. We do have higher-level) Tj-11.4 -12  TD 0.2844  Tc 0.3656  Tw (languages but their grammars remain decidedly mechanical.) Tj0 -12  TD -0.0662  Tc 0.3162  Tw (Programs written in low-level languages still perform the bulk of) TjT* -0.0808  Tc -0.0692  Tw (processing. Perhaps a more realistic aim is for a framework where) TjT* -0.0836  Tc -0.4414  Tw (languages and programs are compatible, able to communicate with) TjT* 0.0168  Tc 0.4332  Tw (humans and amongst themselves, on a single device or across a) TjT* 0.0031  Tc 0  Tw (network.) Tj11.4 -12  TD -0.0885  Tc 0.11  Tw (In such a framework, metaprogramming is your friend.) Tj202.2 -12  TD /F7 10.2  Tf-0.1047  Tc 0.2607  Tw (Thomas Guest) Tj-85.2 -12  TD /F2 9  Tf0  Tc 0  Tw (thomas.guest@ntlworld.com) Tj-128.4 -18  TD /F0 12  Tf-0.018  Tc (References) Tj0 -18  TD /F4 10.2  Tf-0.2036  Tc -0.2892  Tw ([Abrahams and Gurtovoy] David Abrahams and Aleksey Gurtovoy,) Tj11.4 -12  TD /F5 10.2  Tf0.1903  Tc 2.0597  Tw (C++ Template Metaprogramming: Concepts, Tools, and) Tj0 -12  TD -0.1662  Tc 0.1662  Tw (Techniques from Boost and Beyond) Tj-11.4 -12  TD /F4 10.2  Tf0.245  Tc 5.605  Tw ([Alexandrescu] Andrei Alexandrescu\222s homepage is at) Tj11.4 -12  TD /F2 9  Tf0  Tc 0  Tw (http://www.moderncppdesign.com/main.html) Tj-11.4 -12  TD /F4 10.2  Tf-0.0883  Tc 0.5383  Tw ([Brown] Silas S Brown, \223Automatically-Generated Nightmares\224,) Tj11.4 -12  TD /F5 10.2  Tf-0.2551  Tc 0.1051  Tw (CVu 16.6) Tj-11.4 -12  TD /F4 10.2  Tf0.2434  Tc 6.0066  Tw ([Doctest] doctest \226 Test interactive Python examples) Tj11.4 -12  TD /F2 9  Tf0  Tc 0  Tw (http://docs.python.org/lib/module-doctest.html) Tj-11.4 -12  TD /F4 10.2  Tf0.1716  Tc 0.2034  Tw ([Guest1] Thomas Guest, \223A Python Script to Relocate Source) Tj11.4 -12  TD 0.0381  Tc 0.4119  Tw (Trees\224, ) Tj33 0  TD /F5 10.2  Tf-0.1694  Tc 0.6194  Tw (CVu 16.2) Tj41.4 0  TD /F4 10.2  Tf0.0551  Tc 0.3092  Tw (\(also available re-titled \223From A to B with) Tj-74.4 -12  TD -0.0937  Tc 0.2437  Tw (Python\224 at [Homepage]) Tj-11.4 -12  TD 0.2585  Tc 1.0165  Tw ([Guest2] Thomas Guest, A Mini-Project to Decode a Mini-) Tj11.4 -12  TD -0.1085  Tc -0.5415  Tw (Language - Part 3, available at [Homepage].) Tj177 0  TD -0.0364  Tc -0.7136  Tw (\(The first two parts) Tj-177 -12  TD -0.0749  Tc -0.0751  Tw (of this article appeared in Overloads 63 and 64\).) TjET1 1 1 rg 304.2 56.4 263.4 42.6 re f304.2 56.4 263.4 42.6 re fBT304.2 93  TD0 0 0 rg /F8 7.8  Tf-0.144  Tc 0  Tw (1) Tj10.8 0  TD 0.0405  Tc 0.1875  Tw (Though maybe we aren\222t so far off. To quote Bjarne Stroustrup [Stroustrup2]: ) Tj229.2 0  TD /F6 9  Tf0.048  Tc 0.192  Tw (\223I have) Tj-229.2 -10.2  TD -0.0396  Tc 0.6654  Tw (always wished for my computer to be as easy to use as my telephone; my) Tj0 -10.2  TD 0.1056  Tc 0.9915  Tw (wish has come true because I can no longer figure out how to use my) Tj0 -9.6  TD -0.0068  Tc 0  Tw (telephone.\224) Tj0.6 w 1 J 1 j 0 0 0 RG ET304.2 103.2 m 567.6 103.2 l S 1 1 1 rg 304.2 103.8 263.4 14.4 re f304.2 103.8 263.4 14.4 re fBT414 109.8  TD0 0 0 rg /F2 7.8  Tf0.12  Tc ([concluded at foot of next page]) TjETendstreamendobj73 0 obj10592endobj70 0 obj<</Type /Page/Parent 71 0 R/Resources <</Font 74 0 R/ProcSet 2 0 R>>/Contents 72 0 R>>endobj74 0 obj<</F0 6 0 R/F2 10 0 R/F4 16 0 R/F5 21 0 R/F6 23 0 R/F7 28 0 R/F8 30 0 R/F9 36 0 R>>endobj76 0 obj<</Length 77 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.0912  Tc 0  Tw (16) Tj0 768.6  TD /F0 12  Tf-0.0055  Tc 0.2155  Tw (Overload issue 66 april 2005) Tj14.4 -38.4  TD /F1 18  Tf-0.0115  Tc 0.1075  Tw (Separating Interface and) Tj25.2 -20.4  TD -0.0654  Tc 0.4614  Tw (Implementation in C++) Tj-25.2 -12  TD /F0 10.2  Tf-0.17  Tc 0.116  Tw (by Alan Griffiths & Mark Radford) Tj-14.4 -18  TD /F4 10.2  Tf-0.0917  Tc 0.2417  Tw (This article discusses three related problems in the design of C++) Tj0 -12  TD 0.0429  Tc 1.1162  Tw (classes and surveys five of the solutions to them found in the) TjT* -0.0795  Tc 1.0438  Tw (literature. These problems and solutions are considered together) TjT* 0.1923  Tc 1.0577  Tw (because they relate to separating the design choices that are) TjT* 0.6743  Tc 0.509  Tw (manifested in the interface from those that are made in) TjT* -0.0786  Tc 0.0486  Tw (implementing the class. The problems are:) Tj0 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0776  Tc 0.0276  Tw (Reducing implementation detail exposed to the user) Tj-11.4 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.083  Tc -0.067  Tw (Reducing physical coupling) Tj-11.4 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0921  Tc -0.0579  Tw (Allowing customised implementations) Tj-11.4 -12  TD 0.1192  Tc 1.0641  Tw (These have led developers to seek ways to separate interface) Tj0 -12  TD -0.0911  Tc 1.4077  Tw (from implementation and practice has seen all of the following) TjT* -0.0847  Tc 0.5947  Tw (idioms used and documented. We will be evaluating them to see) TjT* -0.1124  Tc 0.2624  Tw (how they compare as solutions to the above problems:) Tj0 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1389  Tc 0.5889  Tw (Interface Class) Tj-11.4 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1663  Tc 0.6163  Tw (Cheshire Cat) Tj-11.4 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0958  Tc (Delegation) Tj-11.4 -10.2  TD /F11 6  Tf0.054  Tc (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1012  Tc (Envelope/Letter) Tj-11.4 -10.2  TD /F11 6  Tf0.054  Tc (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1373  Tc 0.2873  Tw (Non-Virtual Public Interface) Tj-11.4 -12  TD -0.1784  Tc 0.0284  Tw (In order to illustrate the problems and solutions we are going to use) Tj0 -12  TD -0.1163  Tc 1.1663  Tw (a telephone address book \(with very limited functionality\) as an) TjT* -0.1606  Tc 0.4106  Tw (example. For comparison purposes we have implemented this as a) TjT* -0.1866  Tc 0.6366  Tw (na\357ve implementation \(see first sidebar\) which does not attempt to) TjT* -0.1688  Tc 1.2188  Tw (address any of the stated problems. We have also refactored this) TjT* -0.1738  Tc 0.0238  Tw (example to use each of the idioms \226 the header files are reproduced) TjT* 0.2169  Tc 0.9188  Tw (in the corresponding sidebars. \(The full implementation and) TjT* -0.0908  Tc 1.2008  Tw (sample client code for all versions of the example are available) TjT* -0.1823  Tc 0.0323  Tw (with the online version of this article [WEB05].\)) Tj0 -20.4  TD /F0 12  Tf-0.0072  Tc -0.2328  Tw (Examining the Problems) Tj0 -22.2  TD /F0 10.8  Tf0.1311  Tc -0.1271  Tw (Problem 1: Reducing Implementation) Tj20.4 -12  TD 0.148  Tc -0.094  Tw (Detail Exposed to the User) Tj-20.4 -17.4  TD /F4 10.2  Tf0.2812  Tc 0.8888  Tw (Client code makes use of an object via its public interface,) Tj0 -12  TD -0.0975  Tc 0.3225  Tw (without any recourse to implementation details. Since the authors) TjT* -0.0836  Tc 1.1336  Tw (of client code have to use an object through its public interface) TjT* -0.0821  Tc 0.4121  Tw (that interface is all they need to understand. This public interface) TjT* -0.0827  Tc -0.0673  Tw (typically comprises member function declarations.) Tj11.4 -12  TD -0.0892  Tc -0.1358  Tw (C++ allows developers to separate the implementation code for) Tj-11.4 -12  TD 0.2488  Tc 1.1345  Tw (member functions from the class definition, but there is no) Tj0 -12  TD -0.1752  Tc -0.4248  Tw (comparable support for separating the member data that implements) TjT* -0.1054  Tc -0.1046  Tw (an object\222s state \(or, for that matter, for separating the declarations) TjT* -0.0247  Tc 0.4747  Tw (of private member functions\). Consequently the implementation) TjT* -0.0205  Tc 0.4705  Tw (detail exposed in a class\222s definition is still there as background) TjT* -0.0909  Tc 0.0076  Tw (noise, providing users with an added distraction. The definition of) TjT* -0.0959  Tc 0.5459  Tw (a class is typically encumbered with implementation \223noise\224 that) TjET1 1 1 rg 304.2 187.8 263.4 597.6 re f0.9529 0.9529 0.9529 rg 304.8 188.4 262.2 596.4 re fBT308.4 769.8  TD0 0 0 rg /F0 10.2  Tf-0.1837  Tc 0.6097  Tw (Na\357ve Implementation) Tj0 -12  TD /F2 7.8  Tf0.12  Tc 0  Tw (// naive.h \226 implementation hiding example.) TjT* (#ifndef INCLUDED_NAIVE_H) TjT* (#define INCLUDED_NAIVE_H) TjT* (#include <string>) TjT* (#include <utility>) TjT* (#include <map>) Tj0 -24  TD (namespace naive {) Tj0 -12  TD (/** Telephone list. Example of implementing a) TjT* (*     telephone list using a naive implementation.) TjT* (*/) TjT* (class telephone_list {) TjT* (public:) Tj9.6 -12  TD (/** Create a telephone list.) Tj0 -12  TD (* @param    name    The name of the list.) TjT* (*/) TjT* (telephone_list\(const std::string& name\);) Tj0 -24  TD (/** Get the list\222s name.) Tj0 -12  TD (* @return   the list\222s name.) TjT* (*/) TjT* (std::string get_name\(\) const;) Tj0 -24  TD (/** Get a person\222s phone number.) Tj0 -12  TD (* @param    person   Person\222s name \(exact match\)) TjT* (* @return   pair of success flag and \(if success\)) TjT* (*             number.) TjT* (*/) TjT* (std::pair<bool, std::string>) TjT* (get_number\(const std::string& person\) const;) Tj0 -24  TD (/** Add an entry. If an entry already exists for) Tj0 -12  TD (*     this person it is overwritten.) TjT* (*   @param  name    The person\222s name) TjT* (*   @param  number  The person\222s number) TjT* (*/) TjT* (telephone_list&) TjT* (add_entry\(const std::string& name, ) Tj48 -12  TD (const std::string& number\);) Tj-57.6 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(private:) Tj9.6 -12  TD /F9 7.2  Tf-0.0181  Tc 0.2981  Tw (typedef std::map<std::string, std::string> dictionary_t;) Tj0 -12  TD /F9 7.8  Tf0.12  Tc 0  Tw (std::string  name;) TjT* (dictionary_t dictionary;) TjT* (telephone_list\(const telephone_list& rhs\);) TjT* -0.096  Tc 0.216  Tw (telephone_list& operator=\(const telephone_list& rhs\);) Tj-9.6 -12  TD 0 0 0 rg /F2 7.8  Tf0.12  Tc 0  Tw (};) Tj0 -12  TD (} // namespace naive) TjT* (#endif) TjETq 304.2 785.4 m 304.2 187.8 l 567.6 187.8 l 567.6 785.4 l 304.8 784.8 m 304.8 188.4 l 567 188.4 l 567 784.8 l h W* n 304.2 187.8 263.4 597.6 re fQ BT28.8 145.8  TD/F4 10.2  Tf-0.058  Tc 0.508  Tw ([Homepage] ) Tj52.8 0  TD /F2 7.8  Tf0.12  Tc 0  Tw (http://homepage.ntlworld.com/thomas.guest) Tj-52.8 -12  TD /F4 10.2  Tf-0.0736  Tc -0.0764  Tw ([Raymond] Eric S. Raymond, ) Tj121.8 0  TD /F5 10.2  Tf-0.1122  Tc -0.0378  Tw (Why Python?) Tj53.4 0  TD /F4 10.2  Tf-0.15  Tc 0  Tw (,) Tj-163.8 -12  TD /F2 9  Tf0  Tc (http://pythonology.org/success&story=esr) Tj-11.4 -12  TD /F4 10.2  Tf0.1586  Tc 0.4914  Tw ([Stroustrup1] Bjarne Stroustrup, ) Tj141 0  TD /F5 10.2  Tf0.1696  Tc 0.2804  Tw (The Design and Evolution of) Tj-129.6 -12  TD 0.1422  Tc 0  Tw (C++) Tj-11.4 -12  TD /F4 10.2  Tf0.0586  Tc 0.3914  Tw ([Stroustrup2] Bjarne Stroustrup, ) Tj137.4 0  TD /F5 10.2  Tf0.0503  Tc 0.3997  Tw (Did you really say that?) Tj100.8 0  TD /F4 10.2  Tf0.2042  Tc 0.2458  Tw (, from) Tj-226.8 -12  TD -0.2124  Tc 0.0624  Tw (Bjarne Stroustrup\222s FAQ ) Tj99.6 0  TD /F2 7.8  Tf0.1012  Tc 0  Tw (http://www.research.att.com/~bs/) Tj-99.6 -12  TD 0.12  Tc (bs_faq.html#really-say-that) Tj264 96  TD /F4 10.2  Tf-0.1398  Tc -0.2768  Tw ([Sutter] Herb Sutter, \223What can and can\222t macros do?\224, ) Tj218.4 0  TD /F5 10.2  Tf-0.1925  Tc -0.2575  Tw (Guru of the) Tj-207.6 -12  TD -0.1805  Tc 0.3305  Tw (Week 77 ) Tj38.4 0  TD /F2 9  Tf0  Tc 0  Tw (http://www.gotw.ca/gotw/077.htm) Tj-49.2 -12  TD /F4 10.2  Tf0.2367  Tc 3.2133  Tw ([van Rossum]) Tj0  Tc 0.45  Tw ( ) Tj69 0  TD /F5 10.2  Tf0.2871  Tc 2.9629  Tw (Unifying types and classes in Python 2.2) Tj-58.2 -12  TD /F2 9  Tf0  Tc 0  Tw (http://www.python.org/2.2/descrintro.html) Tj-10.8 -12  TD /F4 10.2  Tf0.1313  Tc 0.2329  Tw ([Wikipedia] A free-content encyclopedia that anyone can edit,) Tj10.8 -12  TD /F2 9  Tf0  Tc 0  Tw (http://wikipedia.org/) Tj-10.8 -18  TD /F0 12  Tf-0.0103  Tc (Credits) Tj0 -18  TD /F4 10.2  Tf-0.0858  Tc -0.0642  Tw (Thanks to Dan Tallis for reviewing an earlier draft of this article.) TjET1 1 1 rg 28.8 154.8 264 12.6 re f28.8 154.8 264 12.6 re fBT28.8 162  TD0 0 0 rg /F2 7.8  Tf0.12  Tc 0  Tw ([continued from previous page]) Tj0.6 w 1 J 1 j 0 0 0 RG ET28.8 178.2 m 567.6 178.2 l S endstreamendobj77 0 obj9197endobj75 0 obj<</Type /Page/Parent 71 0 R/Resources <</Font 78 0 R/ProcSet 2 0 R>>/Contents 76 0 R>>endobj78 0 obj<</F0 6 0 R/F1 8 0 R/F2 10 0 R/F4 16 0 R/F5 21 0 R/F9 36 0 R/F11 56 0 R>>endobj80 0 obj<</Length 81 0 R>>stream
BT553.2 42  TD0 0 0 rg /F0 10.8  Tf0.099  Tc 0  Tw (17) Tj-197.4 768.6  TD /F0 12  Tf-0.0055  Tc -0.0845  Tw (Overload issue 66 april 2005) Tj-326.4 -40.8  TD /F4 10.2  Tf-0.0193  Tc 0.4693  Tw (is of no interest to the user and is inaccessible to the client code) Tj0 -12  TD 0.1096  Tc 0.3404  Tw (written by that user: the na\357ve implementation shows this with) TjT* /F2 9  Tf0  Tc 0  Tw (MyDict) Tj32.4 0  TD /F4 10.2  Tf-0.15  Tc (, ) Tj4.8 0  TD /F2 9  Tf0  Tc (myName) Tj34.8 0  TD /F4 10.2  Tf-0.1096  Tc -0.0404  Tw (and ) Tj16.8 0  TD /F2 9  Tf0  Tc 0  Tw (dict) Tj21.6 0  TD /F4 10.2  Tf-0.15  Tc (.) Tj-110.4 -18  TD /F0 10.8  Tf0.1636  Tc -0.2596  Tw (Problem 2: Reducing Physical Coupling) Tj0 -18  TD /F4 10.2  Tf0.4423  Tc 0.6577  Tw (The purpose of defining a class in a header file is for the) Tj0 -12  TD -0.1113  Tc 0.5067  Tw (definition of that class to be included in any translation units that) TjT* -0.0572  Tc 1.0072  Tw (define the client code for that class. If classes are designed in a) TjT* -0.0827  Tc 0.2327  Tw (na\357ve manner this leads to compilation dependencies upon details) TjT* -0.0942  Tc 0.7242  Tw (of the implementation that are not only inaccessible to the client) TjT* -0.0901  Tc -0.0099  Tw (code but also \(in most cases\) do not affect it in any way.) Tj11.4 -12  TD 0.3644  Tc 0.4856  Tw (These compilation dependencies are undesirable for two) Tj-11.4 -12  TD 0.0218  Tc 0  Tw (reasons:) Tj0 -10.2  TD /F11 6  Tf0.054  Tc (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1024  Tc -0.4476  Tw (Additional header file inclusions may be required to compile the) Tj0 -12  TD 0.2258  Tc 1.4242  Tw (class definition. This increases the size of all dependent) TjT* -0.036  Tc 0.386  Tw (translation units. The \223Na\357ve Implementation\224 example needs) TjT* /F2 9  Tf-0.12  Tc 0  Tw (<map>) Tj28.8 0  TD /F4 10.2  Tf-0.1393  Tc -0.3107  Tw (even though ) Tj49.8 0  TD /F2 9  Tf0  Tc 0  Tw (std::map) Tj45 0  TD /F4 10.2  Tf-0.1074  Tc -0.4426  Tw (is not used in the public interface) Tj-123.6 -12  TD 0.026  Tc 0.424  Tw (\226 if this were a user header with its own inclusions these too) Tj0 -12  TD -0.1229  Tc 0.5729  Tw (might be \223bloat\224.) Tj-11.4 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf0.1747  Tc 0.2753  Tw (When changes are made to implementation elements in the) Tj0 -12  TD -0.0753  Tc 0.5253  Tw (header \226 even without affecting the interface \226 the client code) TjT* -0.0744  Tc 0.1244  Tw (must be recompiled. \(When using shared libraries this can also) TjT* -0.1149  Tc -0.6351  Tw (introduce binary incompatibilities between versions.\) Should the) TjT* -0.0364  Tc 0.4007  Tw (example implementation change the choice of using ) Tj216.6 0  TD /F2 9  Tf0.1  Tc 0  Tw (MyDict) Tj33 0  TD /F4 10.2  Tf-0.15  Tc (,) Tj-249.6 -12  TD /F2 9  Tf0  Tc (myName) Tj34.8 0  TD /F4 10.2  Tf-0.0483  Tc 0.4983  Tw (or ) Tj10.8 0  TD /F2 9  Tf0  Tc 0  Tw (dict) Tj24 0  TD /F4 10.2  Tf-0.0718  Tc -0.0782  Tw (this affects all client code.) Tj-81 -12  TD 0.1879  Tc 1.0421  Tw (In a medium to large system the effect of these compilation) Tj0 -12  TD -0.0784  Tc 0.4618  Tw (dependencies can multiply to an extent that causes excessive and) TjT* -0.0886  Tc -0.0614  Tw (problematic build times.) Tj0 -18  TD /F0 10.8  Tf0.1406  Tc -0.1366  Tw (Problem 3: Allowing Customised) Tj20.4 -12  TD 0.0703  Tc 0  Tw (Implementations) Tj-20.4 -18  TD /F4 10.2  Tf-0.0896  Tc 1.1396  Tw (Library code frequently defines points of customisation for user) Tj0 -12  TD 0.2491  Tc 0.9394  Tw (code to exploit. One of the ways to do this is to specify an) TjT* -0.0978  Tc 0.3978  Tw (interface as a class and allow the user code to supply objects that) TjT* -0.0809  Tc -0.0691  Tw (conform to this interface.) Tj11.4 -12  TD 0.1688  Tc 0.2812  Tw (Such a library is typically compiled before the user code is) Tj-11.4 -12  TD -0.087  Tc 0.537  Tw (written. In this case the library contains the \223client code\224 and for) Tj0 -12  TD -0.1757  Tc -0.3493  Tw (this to have compilation dependencies on the implementation would) TjT* -0.1503  Tc 0.6003  Tw (be problematic.) Tj11.4 -12  TD 0.2314  Tc 0.5615  Tw (Clearly, the na\357ve implementation makes no provision for) Tj-11.4 -12  TD -0.0966  Tc -0.0534  Tw (alternative implementations.) Tj0 -18  TD /F0 12  Tf-0.0493  Tc 0.4093  Tw (The Idioms) TjT* /F4 10.2  Tf0.091  Tc 1.034  Tw (We present the best known idioms for implementation hiding) Tj0 -12  TD -0.0554  Tc -0.0946  Tw (along with some comments in italics.) Tj11.4 -12  TD -0.0774  Tc 0.0364  Tw (Each of these idioms can have advantages and these need to be) Tj-11.4 -12  TD -0.0997  Tc 0.0997  Tw (understood when choosing between them.) Tj0 -18  TD /F0 10.8  Tf0.0934  Tc 0.1106  Tw (Cheshire Cat) TjT* /F4 10.2  Tf-0.0927  Tc 0.076  Tw (A private \223representation\224 class is written that embodies the same) Tj0 -12  TD -0.0489  Tc 1.1656  Tw (functionality and interface as the na\357ve class \226 however, unlike) TjT* -0.0788  Tc 0.1955  Tw (the na\357ve version, this is defined and implemented entirely within) TjT* 0.4705  Tc 0.8045  Tw (the implementation file. The public interface of the class) TjT* 0.6885  Tc 1.6365  Tw (published in the header is unchanged, but the private) TjT* -0.0948  Tc 1.3698  Tw (implementation details are reduced to a single member variable) TjT* -0.0833  Tc 0.3151  Tw (that points to an instance of the \223representation\224 class, each of its) TjT* -0.0917  Tc 0.9917  Tw (member functions forwards to the corresponding function of the) TjT* -0.1009  Tc -0.0491  Tw (\223representation\224 class.) Tj11.4 -12  TD 0.1502  Tc 0.2998  Tw (The term \223Cheshire Cat\224 \(see [Murray1993]\) is an old one,) Tj-11.4 -12  TD -0.0654  Tc -0.2846  Tw (coined by John Carollan over a decade ago. Sadly it seems to have) Tj274.8 708  TD -0.0326  Tc 0.4826  Tw (disappeared from use in contemporary C++ literature. It appears) Tj0 -12  TD 0.2517  Tc 0.4554  Tw (described as a special case of the ) Tj148.8 0  TD -0.2034  Tc 0  Tw (B) Tj7.2 0  TD /F4 7.2  Tf0.6408  Tc (RIDGE) Tj27.6 0  TD /F4 10.2  Tf0.2571  Tc 0.4929  Tw (pattern in \223Design) Tj-183.6 -12  TD -0.0813  Tc -0.4687  Tw (Patterns\224 [GOF95], but the name \223Cheshire Cat\224 is not mentioned.) Tj0 -12  TD -0.135  Tc -0.435  Tw (Herb Sutter \(in [Sut00]\) discusses it under the name \223Pimpl idiom\224,) TjT* 0.0703  Tc 0.3797  Tw (but considers it only from the perspective if its use in reducing) TjT* 0.2633  Tc 0.5296  Tw (physical dependencies. It has also been called \223Compilation) TjT* -0.0875  Tc 0  Tw (Firewall\224.) Tj11.4 -12  TD /F5 10.2  Tf0.2353  Tc 1.3397  Tw (Cheshire Cat requires \223boilerplate\224 code in the form of) Tj-11.4 -12  TD -0.1031  Tc -0.4469  Tw (forwarding functions \(see \223Cheshire Cat Implementation\224 sidebar) Tj0 -12  TD -0.1488  Tc -0.4512  Tw (below\) that are tedious to write and \(if the compiler fails to optimise) TjT* -0.0848  Tc -0.4852  Tw (them away\) can introduce a slight performance hit. It also requires) TjT* -0.0679  Tc 0.027  Tw (care with the copy semantics \(although it is possible to factor this) TjT* 0.1198  Tc 0.3302  Tw (out into a smart pointer \226 see Griffiths99\). As the relationship) TjT* -0.1089  Tc -0.4011  Tw (between the public and implementation classes is not explicit it can) TjT* -0.0898  Tc -0.0602  Tw (cause maintenance issues.) Tj0 -18  TD /F0 10.8  Tf0.0632  Tc 0  Tw (Delegation) TjT* /F4 10.2  Tf-0.0592  Tc 0.0183  Tw (One or more areas of the class functionality are factored out from) Tj0 -12  TD -0.0845  Tc 1.1345  Tw (the na\357ve implementation into separate helper classes. The class) TjT* -0.0978  Tc 1.366  Tw (published in the header holds a pointer to each of these classes) TjT* -0.0529  Tc 1.5029  Tw (and delegates responsibility for the corresponding functionality) TjT* 0.0261  Tc 1.1739  Tw (by forwarding the corresponding operations. This is similar to) TjT* 0.2539  Tc 0.7961  Tw (Cheshire Cat, except that some implementation may remain) TjT* 0.0065  Tc 0.7435  Tw (exposed \(like ) Tj59.4 0  TD /F2 9  Tf0.1  Tc 0  Tw (myName) Tj36.6 0  TD /F4 10.2  Tf0.0191  Tc 1.1166  Tw (in the example\) and there may be more) Tj-96 -12  TD 0.0089  Tc 1.1611  Tw (than one helper class. \(The helper classes may be defined and) Tj0 -12  TD -0.0971  Tc 0.3289  Tw (implemented in the implementation file \226 as in the sample code \226) TjET1 1 1 rg 304.2 52.8 263.4 408 re f0.9529 0.9529 0.9529 rg 304.8 53.4 262.2 406.8 re fBT308.4 445.8  TD0 0 0 rg /F0 10.2  Tf-0.1512  Tc -0.0228  Tw (Cheshire Cat) Tj6 -24  TD /F2 7.8  Tf0.12  Tc 0  Tw (// cheshire_cat.h  Cheshire Cat \226) Tj0 -12  TD (//           implementation hiding example) Tj0 -24  TD 0.502 0.502 0.502 rg (#ifndef INCLUDED_CHESHIRE_CAT_H) Tj0 -12  TD (#define INCLUDED_CHESHIRE_CAT_H) TjT* (#include <string>) TjT* (#include <utility>) Tj0 -24  TD (namespace cheshire_cat {) Tj0 -12  TD (class telephone_list {) TjT* (public:) Tj9.6 -12  TD (telephone_list\(const std::string& name\);) Tj0 -12  TD (~telephone_list\(\);) Tj0 -24  TD (std::string get_name\(\) const;) TjT* (std::pair<bool, std::string>) Tj0 -12  TD (get_number\(const std::string& person\) const;) Tj0 -24  TD (telephone_list&) Tj0 -12  TD (add_entry\(const std::string& name, ) Tj48 -12  TD (const std::string& number\);) Tj-57.6 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(private:) Tj9.6 -12  TD (class telephone_list_implementation;) Tj0 -12  TD (telephone_list_implementation* rep;) TjT* (telephone_list\(const telephone_list& rhs\);) TjT* (telephone_list& operator=\() Tj72 -12  TD (const telephone_list& rhs\);) Tj-81.6 -12  TD 0.502 0.502 0.502 rg /F2 7.8  Tf(};) Tj0 -12  TD (} // namespace cheshire_cat) TjT* (#endif) TjETq 304.2 460.8 m 304.2 52.8 l 567.6 52.8 l 567.6 460.8 l 304.8 460.2 m 304.8 53.4 l 567 53.4 l 567 460.2 l h W* n 0 0 0 rg 304.2 52.8 263.4 408 re fQ endstreamendobj81 0 obj10109endobj79 0 obj<</Type /Page/Parent 71 0 R/Resources <</Font 82 0 R/ProcSet 2 0 R>>/Contents 80 0 R>>endobj82 0 obj<</F0 6 0 R/F2 10 0 R/F4 16 0 R/F5 21 0 R/F9 36 0 R/F11 56 0 R>>endobj84 0 obj<</Length 85 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.0912  Tc 0  Tw (18) Tj0 768.6  TD /F0 12  Tf-0.0055  Tc 0.2155  Tw (Overload issue 66 april 2005) Tj0 -40.8  TD /F4 10.2  Tf-0.0291  Tc 1.3291  Tw (or placed in a header file and made available for use by other) Tj0 -12  TD -0.1007  Tc 0  Tw (code.\)) Tj11.4 -12  TD /F5 10.2  Tf0.2471  Tc 1.0696  Tw (Delegation is attractive where there is a distinct area of) Tj-11.4 -12  TD -0.0952  Tc -0.3548  Tw (functionality that can be factored out or shared with another class.) Tj0 -12  TD -0.206  Tc -0.244  Tw (In maintenance and performance terms it is similar to Cheshire Cat.) Tj0 -18  TD /F0 10.8  Tf0.1493  Tc 0  Tw (Envelope/Letter) TjT* /F4 10.2  Tf0.6037  Tc 0.5213  Tw (As with Cheshire Cat a private \223representation\224 class is) Tj0 -12  TD 0.1149  Tc 0.2494  Tw (written which implements the same functionality and interface) TjT* 0.317  Tc 1.133  Tw (as the na\357ve class but is defined and implemented entirely) TjT* 0.1265  Tc 1.095  Tw (within the implementation file. The variations from Cheshire) TjT* -0.0082  Tc 0.4582  Tw (Cat are:) Tj0 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0879  Tc 0.1629  Tw (The \223representation\224 class is derived from the public one.) Tj-11.4 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0965  Tc -0.3868  Tw (The member functions of the public class are declared ) Tj214.8 0  TD /F2 9  Tf0  Tc 0  Tw (virtual) Tj-214.8 -12  TD /F4 10.2  Tf-0.0531  Tc -0.0969  Tw (\(and overridden in the implementation class\).) Tj-11.4 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1516  Tc -0.3257  Tw (The class published in the header holds a pointer to what appears) Tj0 -12  TD -0.0793  Tc 0.1601  Tw (to be another instance of the class but, in fact, is an instance of) TjT* -0.0771  Tc -0.0729  Tw (the derived class.) Tj-11.4 -12  TD 0.049  Tc 1.0677  Tw (This is described in some detail in Coplien\222s \223Advanced C++) Tj0 -12  TD -0.1183  Tc 0.1683  Tw (Style and Idioms\224 [Cope92].) Tj11.4 -12  TD /F5 10.2  Tf0.2409  Tc 0.8091  Tw (Frankly Envelope/Letter confuses us \226 we don\222t see what) Tj-11.4 -12  TD -0.0887  Tc -0.4976  Tw (advantage it gives over Cheshire Cat. \(Maybe it is just a misguided) Tj0 -12  TD 0.221  Tc 2.8004  Tw (attempt to represent the correspondence of interface and) TjT* -0.1049  Tc -0.1308  Tw (implementation functions explicitly?\) But please read Coplien and) Tj275.4 276  TD 0.0335  Tc 0.4165  Tw (make up your own mind! In performance terms each client call) Tj0 -12  TD -0.0909  Tc 0.1409  Tw (initiates two function calls dispatched via the v-table \226 so it is the) TjT* -0.0335  Tc 0.4835  Tw (slowest of the idioms. \(However it is rare that the overhead of a) TjT* -0.0813  Tc -0.0687  Tw (virtual function call is significant.\)) Tj0 -18  TD /F0 10.8  Tf0.1466  Tc -0.5426  Tw (Interface Class) TjT* /F4 10.2  Tf-0.0886  Tc 0.1567  Tw (All member data is removed from the na\357ve class and all member) Tj0 -12  TD 0.1434  Tc 1.0399  Tw (functions are made pure virtual. In the implementation file a) TjT* -0.0574  Tc 0.2074  Tw (derived class is defined that implements these member functions.) TjT* -0.0846  Tc 0.6983  Tw (The derived class is not used directly by client code, which sees) TjT* -0.0772  Tc -0.0728  Tw (only a pointer to the public class.) Tj10.8 -12  TD 0.2388  Tc 0.7445  Tw (This is described in some detail in Mark Radford\222s \223C++) Tj-10.8 -12  TD -0.103  Tc -0.047  Tw (Interface Classes \226 An Introduction\224 [Radford04].) Tj10.8 -12  TD /F5 10.2  Tf-0.1142  Tc 0.4975  Tw (Conceptually the Interface Class idiom is the simplest of those) Tj-10.8 -12  TD -0.1631  Tc -0.4069  Tw (we consider. However, it may be necessary to provide an additional) Tj0 -12  TD 0.0204  Tc 0.4296  Tw (component and interface in order to create instances. Interface) TjT* -0.0663  Tc 0.3527  Tw (Classes, being abstract, can not be instantiated by the client. If a) TjT* 0.2727  Tc 0.2773  Tw (derived \223implementation\224 class implements the pure virtual) TjT* -0.1196  Tc -0.0304  Tw (member functions of the Interface Class, then the client can create) TjT* 0.203  Tc 0.247  Tw (instances of that class. \(But making the implementation class) TjT* 0.2127  Tc 3.2373  Tw (publicly visible re-introduces noise.\) Alternatively, if the) TjT* 0.1554  Tc 0.2946  Tw (implementation class is provided with the Interface Class and) TjT* -0.1317  Tc -0.2849  Tw (\(presumably\) buried in an implementation file, then provision of an) TjT* -0.0496  Tc 0.4996  Tw (additional instantiation mechanism \226 e.g. a factory function \226 is) TjET1 1 1 rg 304.2 55.2 263.4 418.2 re f0.9529 0.9529 0.9529 rg 304.8 55.8 262.2 417 re fBT308.4 457.8  TD0 0 0 rg /F0 10.2  Tf-0.1057  Tc 0  Tw (Envelope/Letter) Tj5.4 -24  TD /F2 7.8  Tf0.12  Tc (// envelope_letter.h \226 Envelope/Letter) Tj0 -12  TD (//   implementation hiding example.) Tj0 -24  TD 0.502 0.502 0.502 rg (#ifndef INCLUDED_ENVELOPE_LETTER_H) Tj0 -12  TD (#define INCLUDED_ENVELOPE_LETTER_H) TjT* (#include <string>) TjT* (#include <utility>) Tj0 -24  TD (namespace envelope_letter {) Tj0 -12  TD (class telephone_list {) TjT* (public:) Tj9.6 -12  TD (telephone_list\(const std::string& name\);) Tj0 -12  TD (virtual ~telephone_list\(\);) Tj0 -24  TD (virtual std::string get_name\(\) const;) TjT* (virtual std::pair<bool, std::string>) Tj0 -12  TD (get_number\(const std::string& person\) const;) Tj0 -24  TD (virtual telephone_list&) Tj0 -12  TD (add_entry\(const std::string& name, ) Tj48 -12  TD (const std::string& number\);) Tj-57.6 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(protected:) Tj9.6 -12  TD (telephone_list\(\);) Tj-9.6 -12  TD (private:) Tj9.6 -12  TD (telephone_list* rep;) Tj0 -12  TD (telephone_list\(const telephone_list& rhs\);) TjT* (telephone_list& operator=\() Tj72 -12  TD (const telephone_list& rhs\);) Tj-81.6 -12  TD 0.502 0.502 0.502 rg /F2 7.8  Tf(};) Tj0 -12  TD (} // namespace envelope_letter) TjT* (#endif) TjETq 304.2 473.4 m 304.2 55.2 l 567.6 55.2 l 567.6 473.4 l 304.8 472.8 m 304.8 55.8 l 567 55.8 l 567 472.8 l h W* n 0 0 0 rg 304.2 55.2 263.4 418.2 re fQ 1 1 1 rg 28.8 55.2 264 418.2 re f0.9529 0.9529 0.9529 rg 29.4 55.8 262.8 417 re fBT33.6 457.8  TD0 0 0 rg /F0 10.2  Tf-0.1469  Tc (Delegation) Tj5.4 -24  TD /F2 7.8  Tf0.12  Tc (// delegation.h \226 Delegation implementation hiding) Tj0 -12  TD (//   example.) Tj0 -24  TD 0.502 0.502 0.502 rg (#ifndef INCLUDED_DELEGATION_H) Tj0 -12  TD (#define INCLUDED_DELEGATION_H) TjT* (#include <string>) TjT* (#include <utility>) Tj0 -24  TD (namespace delegation {) Tj0 -12  TD (class telephone_list {) TjT* (public:) Tj9.6 -12  TD (telephone_list\(const std::string& name\);) Tj0 -12  TD (~telephone_list\(\);) Tj0 -24  TD (std::string get_name\(\) const;) TjT* (std::pair<bool, std::string>) Tj0 -12  TD (get_number\(const std::string& person\) const;) Tj0 -24  TD (telephone_list&) Tj0 -12  TD (add_entry\(const std::string& name, ) Tj48 -12  TD (const std::string& number\);) Tj-57.6 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(private:) Tj9.6 -12  TD (std::string name;) Tj0 -12  TD (class dictionary;) TjT* (dictionary* lookup;) TjT* (telephone_list\(const telephone_list& rhs\);) TjT* (telephone_list& operator=\() Tj72 -12  TD (const telephone_list& rhs\);) Tj-81.6 -12  TD 0.502 0.502 0.502 rg /F2 7.8  Tf(};) Tj0 -12  TD (} // namespace delegation) TjT* (#endif) TjETq 28.8 473.4 m 28.8 55.2 l 292.8 55.2 l 292.8 473.4 l 29.4 472.8 m 29.4 55.8 l 292.2 55.8 l 292.2 472.8 l h W* n 0 0 0 rg 28.8 55.2 264 418.2 re fQ endstreamendobj85 0 obj7768endobj83 0 obj<</Type /Page/Parent 71 0 R/Resources <</Font 86 0 R/ProcSet 2 0 R>>/Contents 84 0 R>>endobj86 0 obj<</F0 6 0 R/F2 10 0 R/F4 16 0 R/F5 21 0 R/F9 36 0 R/F11 56 0 R>>endobj90 0 obj<</Length 91 0 R>>stream
BT552.6 42  TD0 0 0 rg /F0 10.8  Tf0.0912  Tc 0  Tw (19) Tj-196.8 768.6  TD /F0 12  Tf-0.0055  Tc -0.0845  Tw (Overload issue 66 april 2005) Tj-326.4 -40.8  TD /F5 10.2  Tf0.2637  Tc 0.5292  Tw (necessary. This is shown as a static ) Tj161.4 0  TD /F12 9  Tf0.4  Tc 0  Tw (create) Tj37.8 0  TD /F5 10.2  Tf0.2896  Tc 0.7604  Tw (function in the) Tj-199.2 -12  TD -0.1832  Tc 0.0332  Tw (corresponding sidebar.) Tj11.4 -12  TD -0.0846  Tc -0.0654  Tw (As objects are dynamically allocated and accessed via pointers) Tj-11.4 -12  TD -0.1046  Tc -0.1654  Tw (this solution requires the client code to manage the object lifetime.) Tj0 -12  TD 0.0024  Tc 0.4476  Tw (This is not a handicap where the domain understanding implies) TjT* -0.1002  Tc -0.5114  Tw (objects are to be managed by a smart pointer \(or handle\) but it may) TjT* -0.0737  Tc 0.0737  Tw (be significant in some cases.) Tj11.4 -12  TD -0.0685  Tc 0.5185  Tw (Note: Interfaces may play an additional role in design to that) Tj-11.4 -12  TD -0.0717  Tc 0.5217  Tw (addressed in this article \226 they may be used to delineate each of) Tj0 -12  TD -0.1077  Tc 0.5577  Tw (several roles supported by a concrete type. This allows for client) TjT* -0.113  Tc 0.083  Tw (code that depend only on \(the interface to\) the relevant role.) Tj0 -18  TD /F0 10.8  Tf0.133  Tc -0.229  Tw (Non-Virtual Public Interface) TjT* /F4 10.2  Tf0.0882  Tc 1.2618  Tw (All member data is removed from the na\357ve class, the public) Tj0 -12  TD -0.077  Tc 0.727  Tw (interface becomes non-virtual forwarding functions that delegate) TjT* -0.0758  Tc 0.3758  Tw (to corresponding private pure virtual functions. As with Interface) TjT* 0.4419  Tc 0.6831  Tw (Class the implementation file defines a derived class that) TjT* 0.1054  Tc 0.9446  Tw (implements these member functions. The derived class is not) TjT* 0.0939  Tc 1.0652  Tw (used directly by client code, which sees only a pointer to the) TjT* -0.0899  Tc 0.5399  Tw (public class.) Tj11.4 -12  TD -0.0344  Tc 0.4844  Tw (This is described in some detail in Sutter\222s \223Exceptional C++) Tj-11.4 -12  TD -0.1179  Tc -0.0321  Tw (Style\224 [Sut04].) Tj11.4 -12  TD /F5 10.2  Tf-0.1097  Tc 0.5597  Tw (We had thought Non-Virtual Public Interface an idea that had) Tj-11.4 -12  TD 0.0333  Tc 0.4167  Tw (been tried and discarded as introducing unjustified complexity.) Tj274.8 276  TD -0.109  Tc 0.199  Tw (While the standard library uses this idiom in the iostreams design) Tj0 -12  TD -0.0805  Tc 0.1487  Tw (we\222ve yet to see an implementation of the library that exploits the) TjT* -0.1144  Tc -0.4106  Tw (additional flexibility \(in implementing the public functions\) it offers) TjT* -0.1545  Tc -0.3555  Tw (over Interface Class. Further, there are some costs to providing this) TjT* -0.0943  Tc 0  Tw (flexibility:) Tj0 -10.2  TD /F11 6  Tf0.054  Tc (l) Tj11.4 -1.8  TD /F5 10.2  Tf-0.1304  Tc 0.0471  Tw (A class definition embodies the contract between code that uses) Tj0 -12  TD -0.1553  Tc -0.5347  Tw (and code that implements that class. By splitting the contract into) TjT* -0.1166  Tc 0.0666  Tw (\(public\) non-virtual usage and \(private\) virtual implementation) TjT* -0.1314  Tc -0.0186  Tw (parts it introduces a need to understand both and also a need to) TjT* -0.1373  Tc -0.0127  Tw (document and follow the relationship between them.) Tj-11.4 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F5 10.2  Tf0.1829  Tc 0.2671  Tw (There is a development and maintenance cost: because the) Tj0 -12  TD 0.1716  Tc 0.2784  Tw (implementation functions are private to the base class they) TjT* -0.1177  Tc 0.1391  Tw (cannot be called directly by a unit test.) Tj-11.4 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F5 10.2  Tf-0.0683  Tc -0.0217  Tw (There is a potential performance cost: if the extra function call) Tj0 -12  TD -0.1366  Tc -0.3406  Tw (is not optimised away it can use additional stack space and time.) TjET1 1 1 rg 29.4 55.8 263.4 417 re f0.9529 0.9529 0.9529 rg 30 56.4 262.2 415.8 re fBT33.6 457.8  TD0 0 0 rg /F0 10.2  Tf-0.1616  Tc -0.0124  Tw (Interface Class) Tj6 -24  TD /F2 7.8  Tf0.12  Tc 0  Tw (// interface_class.h \226 Interface Class) Tj0 -12  TD (//   implementation hiding example.) Tj0 -24  TD 0.502 0.502 0.502 rg (#ifndef INCLUDED_INTERFACE_CLASS_H) Tj0 -12  TD (#define INCLUDED_INTERFACE_CLASS_H) TjT* (#include <string>) TjT* (#include <utility>) Tj0 -24  TD (namespace interface_class {) Tj0 -12  TD (class telephone_list {) TjT* (public:) Tj9.6 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(static telephone_list*) Tj81.6 -12  TD (create\(const std::string& name\);) Tj-81.6 -12  TD 0.502 0.502 0.502 rg /F2 7.8  Tf(virtual ~telephone_list\(\)   {}) Tj0 -24  TD (virtual std::string get_name\(\) const = 0;) TjT* (virtual std::pair<bool, std::string>) Tj0 -12  TD (get_number\(const std::string& person\) const = 0;) Tj0 -24  TD (virtual telephone_list&) Tj0 -12  TD (add_entry\(const std::string& name, ) Tj48 -12  TD (const std::string& number\) = 0;) Tj-57.6 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(protected:    ) Tj9.6 -12  TD (telephone_list\(\)   {}) Tj0 -12  TD (telephone_list\(const telephone_list& rhs\) {}) Tj-9.6 -12  TD (private:) Tj9.6 -12  TD (telephone_list& operator=\() Tj72 -12  TD (const telephone_list& rhs\);) Tj-81.6 -12  TD 0.502 0.502 0.502 rg /F2 7.8  Tf(};) Tj0 -12  TD (} // namespace interface_class) TjT* (#endif) TjETq 29.4 472.8 m 29.4 55.8 l 292.8 55.8 l 292.8 472.8 l 30 472.2 m 30 56.4 l 292.2 56.4 l 292.2 472.2 l h W* n 0 0 0 rg 29.4 55.8 263.4 417 re fQ 1 1 1 rg 304.2 55.8 263.4 525.6 re f0.9529 0.9529 0.9529 rg 304.8 56.4 262.2 524.4 re fBT308.4 565.8  TD0 0 0 rg /F0 10.2  Tf-0.1462  Tc 0.2722  Tw (Non-Virtual Public Interface) Tj6 -24  TD /F2 7.8  Tf0.12  Tc 0  Tw (// non_virtual_public_interface.h \226 Non-Virtual) Tj0 -12  TD (//   Public Interface implementation hiding example) Tj0 -24  TD 0.502 0.502 0.502 rg (#ifndef INCLUDED_NONVIRTUAL_PUBLIC_INTERFACE_H) Tj0 -12  TD (#define INCLUDED_NONVIRTUAL_PUBLIC_INTERFACE_H) TjT* (#include <string>) TjT* (#include <utility>) Tj0 -24  TD (namespace non_virtual_public_interface {) Tj0 -12  TD (class telephone_list {) TjT* (public:) Tj9.6 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(static telephone_list* create\() Tj115.2 -12  TD (const std::string& name\);) Tj-115.2 -12  TD 0.502 0.502 0.502 rg /F2 7.8  Tf(virtual ~telephone_list\(\) {}) Tj0 -24  TD (std::string get_name\(\) const) Tj9.6 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf({ return do_get_name\(\); }) Tj-9.6 -24  TD 0.502 0.502 0.502 rg /F2 7.8  Tf(std::pair<bool, std::string>) Tj0 -12  TD (get_number\(const std::string& person\) const) Tj9.6 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf({ return do_get_number\(person\); }) Tj-9.6 -24  TD 0.502 0.502 0.502 rg /F2 7.8  Tf(virtual telephone_list&) Tj0 -12  TD (add_entry\(const std::string& name, ) Tj48 -12  TD (const std::string& number\)) Tj-38.4 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf({ return do_add_entry\(name, number\); }) Tj-19.2 -12  TD (protected:    ) Tj9.6 -12  TD (telephone_list\(\)    {}) Tj0 -12  TD (telephone_list\(const telephone_list& rhs\) {}) Tj-9.6 -12  TD (private:) Tj9.6 -12  TD (telephone_list& operator=\() Tj72 -12  TD (const telephone_list& rhs\);) Tj-72 -12  TD (virtual std::string do_get_name\(\) const = 0;) Tj0 -12  TD (virtual std::pair<bool, std::string>) TjT* -0.0365  Tc 0.1565  Tw (do_get_number\(const std::string& person\) const = 0;) TjT* 0.12  Tc 0  Tw (virtual telephone_list&) TjT* (do_add_entry\(const std::string& name, ) Tj62.4 -12  TD (const std::string& number\) = 0;) Tj-72 -12  TD 0.502 0.502 0.502 rg /F2 7.8  Tf(};) Tj0 -12  TD (} // namespace non_virtual_public_interface) TjT* (#endif) TjETq 304.2 581.4 m 304.2 55.8 l 567.6 55.8 l 567.6 581.4 l 304.8 580.8 m 304.8 56.4 l 567 56.4 l 567 580.8 l h W* n 0 0 0 rg 304.2 55.8 263.4 525.6 re fQ endstreamendobj91 0 obj8051endobj87 0 obj<</Type /Page/Parent 71 0 R/Resources <</Font 92 0 R/ProcSet 2 0 R>>/Contents 90 0 R>>endobj92 0 obj<</F0 6 0 R/F2 10 0 R/F4 16 0 R/F5 21 0 R/F9 36 0 R/F11 56 0 R/F12 88 0 R>>endobj94 0 obj<</Length 95 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (20) Tj0 768.6  TD /F0 12  Tf-0.0055  Tc 0.2155  Tw (Overload issue 66 april 2005) Tj0 -34.2  TD 0.0218  Tc -0.2618  Tw (Evaluating the Solutions) Tj0 -22.2  TD /F0 10.8  Tf0.1311  Tc -0.1271  Tw (Problem 1: Reducing Implementation) Tj20.4 -12  TD 0.148  Tc -0.094  Tw (Detail Exposed to the User) Tj-20.4 -20.4  TD /F4 10.2  Tf0.3325  Tc 0.8889  Tw (All the idioms considered address this problem reasonably) Tj0 -12  TD -0.1012  Tc 0.5512  Tw (successfully. The only implementation detail any of these idioms) TjT* -0.1033  Tc 0.0866  Tw (expose is the mechanism by which they support the separation:) Tj0 -22.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0883  Tc 0.2383  Tw (Interface Class declares virtual functions) Tj-11.4 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0692  Tc -0.0058  Tw (Cheshire Cat exposes a pointer to the \223real\224 implementation) Tj-11.4 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1071  Tc -0.0429  Tw (Non-Virtual Public Interface declares forwarding functions and) Tj0 -12  TD -0.0998  Tc -0.0502  Tw (virtual functions) Tj-11.4 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0779  Tc 0.5279  Tw (Envelope/Letter declares virtual functions and a pointer to the) Tj0 -12  TD -0.0991  Tc -0.0509  Tw (\223real\224 implementation) Tj-11.4 -24  TD 0.086  Tc 0.4563  Tw (Delegation is in a way the odd one out, because it does not by) Tj0 -12  TD 0.3477  Tc 1.0773  Tw (nature conceal all the implementation detail. This point is) Tj275.4 192  TD 0.7931  Tc 1.5569  Tw (illustrated in our example implementation where the) Tj0 -12  TD /F2 9  Tf0.1091  Tc 0  Tw (std::string) Tj64.8 0  TD /F4 10.2  Tf0.0291  Tc 0.4209  Tw (member ) Tj37.8 0  TD /F2 9  Tf0.1  Tc 0  Tw (myName) Tj37.2 0  TD /F4 10.2  Tf0.0242  Tc 1.3858  Tw (is visible in the definition of) Tj-139.8 -12  TD /F2 9  Tf0.5538  Tc 0  Tw (TelephoneList) Tj77.4 0  TD /F4 10.2  Tf0.4755  Tc 0.8745  Tw (. Delegation reduces the implementation) Tj-77.4 -12  TD 0.4391  Tc 1.0776  Tw (noise exposed to clients, but \226 unless all functionality is) Tj0 -12  TD 0.0972  Tc 1.171  Tw (delegated to one \(or more\) other classes \226 it leaves the class) TjT* 0.7717  Tc 0.8033  Tw (still vulnerable to the problems suffered by the na\357ve) TjT* 0.081  Tc 0  Tw (implementation.) Tj0 -18  TD /F0 10.8  Tf0.088  Tc 0.116  Tw (Problem 2: Reducing Physical) Tj19.8 -12  TD 0.2498  Tc 0  Tw (Coupling) Tj-19.8 -18  TD /F4 10.2  Tf0.635  Tc 2.0436  Tw (When the principal concern is reducing compile time) Tj0 -12  TD 0.2699  Tc 0.9515  Tw (dependencies the size \(including indirect inclusions\) of the) TjT* -0.0294  Tc 1.2128  Tw (header is more significant than that of the implementation file.) TjT* -0.1157  Tc 0.1457  Tw (However, in most cases, there is very little difference between the) TjT* 0.0138  Tc 1.0962  Tw (header files required by the different idioms \226 in our example) TjT* 0.3531  Tc 0.806  Tw (they all have the same includes and the file lengths are as) TjT* -0.0544  Tc 0  Tw (follows:) TjET1 1 1 rg 28.8 54.6 538.8 504 re f0.9529 0.9529 0.9529 rg 29.4 55.2 537.6 502.8 re fBT33.6 541.8  TD0 0 0 rg /F0 10.2  Tf-0.1434  Tc -0.0306  Tw (Cheshire Cat Implementation) Tj5.4 -24  TD /F2 7.8  Tf0.12  Tc 0  Tw (// MCheshireCat.cpp - implementation hiding example.) Tj0 -24  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(#include \223cheshire_cat.h\224) Tj0 -12  TD (#include <map>) Tj0 -24  TD (namespace cheshire_cat {) Tj0 -12  TD 0 0 0 rg /F2 7.8  Tf(// Declare the implementation class) TjT* 0.2 0.2 0.2 rg /F9 7.8  Tf0.0729  Tc 0.0471  Tw (class telephone_list::telephone_list_implementation {) TjT* 0.12  Tc 0  Tw (public:) Tj9.6 -12  TD (telephone_list_implementation\() Tj120 -12  TD (const std::string& name\);) Tj-120 -12  TD (~telephone_list_implementation\(\);) Tj0 -12  TD (std::string get_name\(\) const;) TjT* (std::pair<bool, std::string>) TjT* (get_number\(const std::string& person\) const;) TjT* (void add_entry\(const std::string& name,) Tj72 -12  TD (const std::string& number\);) Tj-81.6 -12  TD (private:) Tj9.6 -12  TD (typedef std::map<std::string, std::string>) Tj177.6 -12  TD (dictionary_t;) Tj-177.6 -12  TD (std::string  name;) Tj0 -12  TD (dictionary_t dictionary;) Tj-9.6 -12  TD (};) Tj0 -24  TD 0 0 0 rg /F2 7.8  Tf(// Implement the stubs for the wrapper class) Tj0 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(telephone_list::telephone_list\() Tj134.4 -12  TD (const std::string& name\)) Tj-120 -12  TD (: rep\(new telephone_list_implementation\(name\)\) {}) Tj-14.4 -24  TD (telephone_list::~telephone_list\(\) { delete rep; }) Tj0 -24  TD (std::string telephone_list::get_name\(\) const {) Tj9.6 -12  TD (return rep->get_name\(\);) Tj-9.6 -12  TD (}) Tj0 -24  TD (std::pair<bool, std::string> telephone_list::) Tj0 -12  TD (get_number\(const std::string& person\) const {) Tj9.6 -12  TD (return rep->get_number\(person\);) Tj-9.6 -12  TD (}) Tj270.6 456  TD (telephone_list& telephone_list::add_entry\() Tj115.2 -12  TD (const std::string& name,) Tj0 -12  TD (const std::string& number\) {) Tj-105.6 -12  TD (rep->add_entry\(name, number\);) Tj0 -12  TD (return *this;) Tj-9.6 -12  TD (}) Tj0 -24  TD 0 0 0 rg /F2 7.8  Tf(// Implement the implementation class) Tj0 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(telephone_list::telephone_list_implementation::) Tj48 -12  TD (telephone_list_implementation\() Tj86.4 -12  TD (const std::string& name\)) Tj-120 -12  TD (: name\(name\) {}) Tj-14.4 -24  TD (telephone_list::telephone_list_implementation::) Tj48 -12  TD (~telephone_list_implementation\(\) {}) Tj-48 -24  TD (std::string telephone_list::) Tj14.4 -12  TD (telephone_list_implementation::get_name\(\) const {) Tj-4.8 -12  TD (return name;) Tj-9.6 -12  TD (}) Tj0 -24  TD (std::pair<bool, std::string>) Tj0 -12  TD (telephone_list::telephone_list_implementation::) Tj33.6 -12  TD (get_number\(const std::string& person\) const {) Tj-24 -24  TD (dictionary_t::const_iterator i) Tj24 -12  TD (= dictionary.find\(person\);) Tj-24 -24  TD (return\(i != dictionary.end\(\)\) ? ) Tj19.2 -12  TD (std::make_pair\(true, \(*i\).second\) :) Tj0 -12  TD (std::make_pair\(true, std::string\(\)\);) Tj-28.8 -12  TD (}) Tj0 -24  TD (void telephone_list::telephone_list_implementation::) Tj0 -12  TD (add_entry\(const std::string& name,) Tj48 -12  TD (const std::string& number\) {) Tj-38.4 -12  TD (dictionary[name] = number;) Tj-9.6 -12  TD (}) Tj0 -12  TD (} ) Tj9.6 0  TD 0 0 0 rg /F2 7.8  Tf(// namespace cheshire_cat) TjETq 28.8 558.6 m 28.8 54.6 l 567.6 54.6 l 567.6 558.6 l 29.4 558 m 29.4 55.2 l 567 55.2 l 567 558 l h W* n 28.8 54.6 538.8 504 re fQ endstreamendobj95 0 obj6878endobj93 0 obj<</Type /Page/Parent 71 0 R/Resources <</Font <</F0 6 0 R /F2 10 0 R /F4 16 0 R /F9 36 0 R /F11 56 0 R >>/ProcSet 2 0 R>>/Contents 94 0 R>>endobj98 0 obj<</Length 99 0 R>>stream
BT552.6 42  TD0 0 0 rg /F0 10.8  Tf0.0912  Tc 0  Tw (21) Tj-196.8 768.6  TD /F0 12  Tf-0.0055  Tc -0.0845  Tw (Overload issue 66 april 2005) Tj-312.6 -40.8  TD /F2 7.8  Tf0.12  Tc 0  Tw ($ wc *.h | sort) Tj14.4 -12  TD (62    163   1580  cheshire_cat.h) Tj0 -12  TD (62    184   1677  interface_class.h) TjT* (65    162   1535  naive.h) TjT* (66    163   1554  delegation.h) TjT* (66    164   1605  envelope_letter.h) TjT* (94    285   2688  non_virtual_public_interface.h) Tj-28.2 -12  TD /F4 10.2  Tf-0.0932  Tc 1.0886  Tw (The lack of variation is not surprising: all of the examples have) Tj0 -12  TD 0.4362  Tc 0.3138  Tw (eliminated the ) Tj68.4 0  TD /F2 9  Tf0.6  Tc 0  Tw (<map>) Tj33.6 0  TD /F4 10.2  Tf0.4018  Tc 0.8882  Tw (header file and the only substantial) Tj-102 -12  TD -0.0775  Tc 1.1275  Tw (difference is that Non-Virtual Public Interface declares twice as) Tj0 -12  TD -0.0787  Tc -0.0713  Tw (many functions \(having both public and private versions of each\).) Tj0 -18  TD /F0 10.8  Tf0.1406  Tc -0.1366  Tw (Problem 3: Allowing Customised) Tj20.4 -12  TD 0.0703  Tc 0  Tw (Implementations) Tj-20.4 -18  TD /F4 10.2  Tf0.1628  Tc 0.8872  Tw (It should be noted that only Interface Class and Non-Virtual) Tj0 -12  TD -0.0783  Tc 0.3949  Tw (Public Interface allow user implementation \226 the other idioms do) TjT* -0.088  Tc -0.062  Tw (not publish an implementation interface.) Tj11.4 -12  TD 0.0209  Tc 0.4291  Tw (When our principal concern is that of simplifying the task of) Tj-11.4 -12  TD -0.1009  Tc 0.4909  Tw (implementing the class then the size of the implementation file is) Tj0 -12  TD -0.0587  Tc -0.0913  Tw (most significant:) Tj13.8 -12  TD /F2 7.8  Tf0.12  Tc 0  Tw ($ wc interface_class.cpp /) Tj86.4 -12  TD (non_virtual_public_interface.cpp) Tj-72 -12  TD (85   147  2013  interface_class.cpp) Tj0 -12  TD (89   151  2186  non_virtual_public_interface.cpp) Tj246.6 276  TD /F4 10.2  Tf0.4566  Tc 0.9362  Tw (There is no substantial difference in implementation cost) Tj0 -12  TD 0.379  Tc 0.7567  Tw (between these approaches as they contain almost identical) TjT* -0.0415  Tc 0  Tw (code.) Tj0 -18  TD /F0 12  Tf0.0324  Tc (Conclusion) TjT* /F4 10.2  Tf-0.0808  Tc 0.8308  Tw (In scenarios where customisation of implementation needs to be) Tj0 -12  TD -0.0988  Tc 0.8488  Tw (supported the choice is between Interface Class and Non-Virtual) TjT* -0.0215  Tc 1.0715  Tw (Public Interface. In this case we would prefer the simplicity of) TjT* -0.0388  Tc 0.0525  Tw (Interface Class \(unless we have a need for the public functions to) TjT* -0.0533  Tc 0.2305  Tw (do more work than forwarding \226 which leads us into the territory) TjT* -0.0483  Tc 0.4983  Tw (of ) Tj10.8 0  TD -0.2322  Tc 0  Tw (T) Tj6 0  TD /F4 7.2  Tf0.143  Tc (EMPLATE) Tj36.6 0  TD /F4 10.2  Tf-0.0678  Tc (M) Tj8.4 0  TD /F4 7.2  Tf0.2813  Tc (ETHOD) Tj28.2 0  TD /F4 10.2  Tf-0.0155  Tc ([GOF95]\).) Tj-78.6 -12  TD -0.0223  Tc 0.6056  Tw (Sometimes we wish to develop \223value based\224 classes \226 these) Tj-11.4 -12  TD 0.2991  Tc 0.6176  Tw (can, for example, be used directly with the standard library) Tj0 -12  TD 0.337  Tc 5.513  Tw (containers. Only three of the idioms \(Cheshire Cat,) TjT* -0.0221  Tc -0.4279  Tw (Envelope/Letter and Delegation\) permit this style of class. \(Using) TjT* -0.0162  Tc 0.3995  Tw (value-based classes implies that the identity of class instances is) TjT* -0.0506  Tc 0.3806  Tw (transparent \226 and that may not be appropriate\). Of these options,) TjT* 0.2359  Tc 0.2808  Tw (Cheshire Cat is most often the appropriate choice \226 although) TjT* -0.0322  Tc 0.1072  Tw (Delegation may be appropriate if it allows common functionality) TjT* 0.0397  Tc -0.1897  Tw (to be factored out.) Tj11.4 -12  TD 0.2435  Tc 2.3494  Tw (There are many occasions where user customisation of) Tj-11.4 -12  TD -0.0763  Tc -0.2537  Tw (implementation is not required, and the identity of instances of the) Tj0 -12  TD -0.0837  Tc -0.2463  Tw (class is important. In these circumstances it is reasonable to expect) TjET1 1 1 rg 29.4 54.6 538.2 426 re f0.9529 0.9529 0.9529 rg 30 55.2 537 424.8 re fBT33.6 469.2  TD0 0 0 rg /F0 10.2  Tf-0.128  Tc -0.046  Tw (Interface Class Implementation) Tj6 -23.4  TD /F2 7.8  Tf0.12  Tc 0  Tw (// MAbstractBaseClass.cpp - implementation hiding) Tj0 -12  TD (// example.) TjT* 0.2 0.2 0.2 rg /F9 7.8  Tf(#include \223interface_class.h\224) TjT* (#include <map>) Tj0 -24  TD 0 0 0 rg /F2 7.8  Tf(// Declare the implementation class) Tj0 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(namespace {) TjT* (class telephone_list_implementation) Tj14.4 -12  TD (: public interface_class::telephone_list {) Tj-14.4 -12  TD (public:) Tj9.6 -12  TD /F9 7.2  Tf-0.0068  Tc -0.1132  Tw (telephone_list_implementation\(const std::string& name\);) Tj0 -12  TD /F9 7.8  Tf0.12  Tc 0  Tw (virtual ~telephone_list_implementation\(\);) Tj-9.6 -12  TD (private:) Tj9.6 -12  TD (virtual std::string get_name\(\) const;) Tj0 -12  TD (virtual std::pair<bool, std::string>) TjT* (get_number\(const std::string& person\) const;) TjT* (virtual interface_class::telephone_list&) TjT* (add_entry\(const std::string& name,) Tj48 -12  TD (const std::string& number\);) Tj-48 -12  TD (typedef std::map<std::string, std::string>) Tj177.6 -12  TD (dictionary_t;) Tj-177.6 -12  TD (std::string name;) Tj0 -12  TD (dictionary_t dictionary;) Tj-9.6 -12  TD (};) Tj0 -12  TD (} ) Tj9.6 0  TD 0 0 0 rg (// anonymous namespace) Tj-9.6 -24  TD /F2 7.8  Tf(// Implement the stubs for the base class) Tj0 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(namespace interface_class {) TjT* (telephone_list* telephone_list::create\() Tj124.8 -12  TD (const std::string& name\) {) Tj-115.2 -12  TD (return new telephone_list_implementation\(name\);) Tj-9.6 -12  TD (}) Tj0 -12  TD (} ) Tj9.6 0  TD 0 0 0 rg (// namespace interface_class) Tj260.4 384  TD /F2 7.8  Tf(// Implement the implementation class) Tj0 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(namespace {) TjT* (telephone_list_implementation::) TjT* -0.0877  Tc 0.2077  Tw (telephone_list_implementation\(const std::string& name\)) Tj14.4 -12  TD 0.12  Tc 0  Tw (: name\(name\) {}) Tj-14.4 -24  TD (telephone_list_implementation::) Tj0 -12  TD (~telephone_list_implementation\(\) {}) Tj0 -24  TD (std::string) Tj0 -12  TD (telephone_list_implementation::get_name\(\) const) Tj9.6 -12  TD ({ return name; }) Tj-9.6 -24  TD (std::pair<bool, std::string>) Tj0 -12  TD (telephone_list_implementation::) TjT* (get_number\(const std::string& person\) const {) Tj9.6 -12  TD (std::pair<bool, std::string> rc\(false,) Tj153.6 -12  TD (std::string\(\)\);) Tj-153.6 -12  TD (dictionary_t::const_iterator i) Tj19.2 -12  TD (= dictionary.find\(person\);) Tj-19.2 -12  TD (return\(i != dictionary.end\(\)\) ? ) Tj19.2 -12  TD (std::make_pair\(true, \(*i\).second\) :) Tj0 -12  TD (std::make_pair\(true, std::string\(\)\);) Tj-28.8 -12  TD (}) Tj0 -24  TD (interface_class::telephone_list&) Tj0 -12  TD (telephone_list_implementation::) TjT* (add_entry\(const std::string& name, const) TjT* (std::string& number\) {) Tj9.6 -12  TD (dictionary[name] = number;) Tj0 -12  TD (return *this;) Tj-9.6 -12  TD (}) Tj0 -12  TD (} ) Tj9.6 0  TD 0 0 0 rg (// anonymous namespace) TjETq 29.4 480.6 m 29.4 54.6 l 567.6 54.6 l 567.6 480.6 l 30 480 m 30 55.2 l 567 55.2 l 567 480 l h W* n 29.4 54.6 538.2 426 re fQ 1 1 1 rg 304.2 487.2 263.4 14.4 re f304.2 487.2 263.4 14.4 re fBT414 493.8  TD0 0 0 rg /F2 7.8  Tf([concluded at foot of next page]) TjETendstreamendobj99 0 obj7679endobj96 0 obj<</Type /Page/Parent 97 0 R/Resources <</Font <</F0 6 0 R /F2 10 0 R /F4 16 0 R /F9 36 0 R >>/ProcSet 2 0 R>>/Contents 98 0 R>>endobj101 0 obj<</Length 102 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (22) Tj0 768.6  TD /F0 12  Tf-0.0055  Tc 0.2155  Tw (Overload issue 66 april 2005) Tj0 -592.8  TD /F4 10.2  Tf0.0412  Tc 0.4088  Tw (client code to manage object lifetime explicitly \(e.g. by using a) Tj0 -12  TD 0.251  Tc 1.999  Tw (smart pointer\). Both Interface Class and Cheshire Cat are) TjT* 0.0347  Tc 0.4153  Tw (reasonable choices here. Interface Class is simpler, but where a) TjT* 0.2194  Tc 0.2306  Tw (strong separation of interface and implementation is required) TjT* -0.0671  Tc 0.0671  Tw (Cheshire Cat may be preferred.) Tj149.4 -12  TD /F7 10.2  Tf-0.1085  Tc 0.1145  Tw (Alan Griffiths & Mark Radford) Tj-149.4 -18  TD /F0 12  Tf-0.018  Tc 0  Tw (References) Tj0 -18  TD /F4 10.2  Tf0.2489  Tc 4.4011  Tw ([WEB05]  ) Tj56.4 0  TD /F2 9  Tf0.3833  Tc 0  Tw (http://www.octopull.demon.co.uk/c++/) Tj-45 -12  TD 0  Tc (implementation_hiding.html) Tj-11.4 -12  TD /F4 10.2  Tf0.0946  Tc 0.3554  Tw ([Cope92]  J. Coplien. ) Tj93.6 0  TD /F5 10.2  Tf0.0219  Tc 0.4281  Tw (Advanced C++ Programming Styles and) Tj-82.2 -12  TD -0.1274  Tc 0  Tw (Idioms) Tj27.6 0  TD /F4 10.2  Tf-0.1727  Tc -0.2773  Tw (, Addison-Wesley, 1992) Tj-39 -12  TD 0.135  Tc 0.315  Tw ([Murray1993]  Robert B Murray, ) Tj144 0  TD /F5 10.2  Tf0.1069  Tc 0.3431  Tw (C++ Strategies and Tactics) Tj117 0  TD /F4 10.2  Tf-0.15  Tc 0  Tw (,) Tj-249.6 -12  TD -0.1727  Tc 0.0227  Tw (Addison-Wesley, 1993.) Tj264 168  TD -0.1282  Tc -0.0218  Tw ([Sut00]  Herb Sutter. ) Tj85.8 0  TD /F5 10.2  Tf-0.0642  Tc -0.0858  Tw (Exceptional C++) Tj70.2 0  TD /F4 10.2  Tf-0.1727  Tc -0.2773  Tw (, Addison-Wesley, 2000) Tj-156 -12  TD 0.1445  Tc 0.3055  Tw ([Griffiths99]  ) Tj60 0  TD /F2 9  Tf0.2667  Tc 0  Tw (http://www.octopull.demon.co.uk/c++/) Tj-49.2 -12  TD 0  Tc (TheGrin.html) Tj-10.8 -12  TD /F4 10.2  Tf0.2667  Tc 1.6833  Tw ([Radford04]  Mark Radford, \223C++ Interface Classes \226 An) Tj10.8 -12  TD 0.3066  Tc 0.1434  Tw (Introduction\224, ) Tj69 0  TD /F5 10.2  Tf0.2275  Tc 5.0225  Tw (Overload 62) Tj58.8 0  TD /F4 10.2  Tf0.2113  Tc 4.8887  Tw (, and also available from) Tj-127.8 -12  TD /F2 9  Tf0  Tc 0  Tw (http://www.twonine.co.uk/articles/) Tj0 -12  TD (CPPInterfaceClassesIntro.pdf) Tj-10.8 -12  TD /F4 10.2  Tf-0.2282  Tc -0.2218  Tw ([Sut04]  Herb Sutter. ) Tj81.6 0  TD /F5 10.2  Tf-0.1436  Tc -0.6064  Tw (Exceptional C++ Style) Tj89.4 0  TD /F4 10.2  Tf-0.2027  Tc -0.8473  Tw (, Addison-Wesley, 2004) Tj-171 -12  TD -0.116  Tc 0.4803  Tw ([GOF95]  Gamma, Helm, Johnson & Vlissides. ) Tj195.6 0  TD /F5 10.2  Tf-0.1189  Tc 0.5689  Tw (Design Patterns) Tj65.4 0  TD /F4 10.2  Tf-0.15  Tc 0  Tw (,) Tj-250.2 -12  TD -0.1739  Tc 0.0239  Tw (Addison-Wesley, 1995) Tj-10.8 -30  TD /F0 12  Tf-0.0072  Tc 0  Tw (Acknowledgments) Tj0 -18  TD /F4 10.2  Tf-0.099  Tc 0.0581  Tw (Thanks to Tim Penhey and Phil Bass for commenting on drafts of) Tj0 -12  TD -0.1149  Tc -0.0351  Tw (this article.) Tj-261 710.4  TD /F1 18  Tf-0.002  Tc -0.202  Tw (Overload Resolution) Tj25.2 -20.4  TD -0.0491  Tc 0.2451  Tw (\226 Selecting the Function) Tj-25.2 -12  TD /F0 10.2  Tf-0.1257  Tc 0.2517  Tw (by Mikael Kilpel\344inen) Tj-14.4 -18  TD /F4 10.2  Tf-0.1023  Tc 1.2856  Tw (Overloading is a form of polymorphism, however, the rules are) Tj0 -12  TD -0.0438  Tc 1.2574  Tw (quite complex in C++. This article tries to explain most of the) TjT* -0.0713  Tc 0.8213  Tw (rules and clarify concepts like the implicit conversion sequence.) TjT* -0.1  Tc 0.0885  Tw (The main aim is to explain how a function is selected from the set) TjT* 0.0221  Tc 1.1612  Tw (of possibilities. This makes it easier to understand and correct) TjT* -0.0877  Tc 0.1777  Tw (ambiguities the compilers might complain about.) Tj0 -18  TD /F0 12  Tf-0.0021  Tc -0.0379  Tw (Overview of Overloading Process) TjT* /F4 10.2  Tf-0.0881  Tc 1.2881  Tw (Declaring two or more items with the same name in a scope is) Tj0 -12  TD 0.0404  Tc 0.4096  Tw (called ) Tj28.2 0  TD /F5 10.2  Tf-0.0633  Tc 0  Tw (overloading) Tj48.6 0  TD /F4 10.2  Tf-0.0752  Tc 1.4252  Tw (. In C++ the items which can be overloaded) Tj-76.8 -12  TD -0.0952  Tc 0.5452  Tw (are free functions, member functions and constructors, which are) Tj0 -12  TD -0.0922  Tc 0.9922  Tw (collectively referred to as functions. The compiler selects which) TjT* -0.0351  Tc 1.2051  Tw (function to use at compile time according to the argument list,) TjT* -0.0848  Tc 1.0748  Tw (including the object itself in the case of member functions. The) TjT* -0.0887  Tc 1.3024  Tw (functions that have the same name and are visible in a specific) TjT* 0.2623  Tc 0.9377  Tw (context are called candidates. First the usable functions are) TjT* -0.0788  Tc 1.1288  Tw (selected from the set of ) Tj103.2 0  TD /F5 10.2  Tf-0.0397  Tc 0  Tw (candidates) Tj43.2 0  TD /F4 10.2  Tf-0.0328  Tc 1.0828  Tw (. These usable functions are) Tj-146.4 -12  TD 0.0404  Tc 0.4096  Tw (called ) Tj28.2 0  TD /F5 10.2  Tf0.0045  Tc 1.0455  Tw (viable functions) Tj65.4 0  TD /F4 10.2  Tf-0.0247  Tc 1.0747  Tw (. A function is viable if it can be called,) Tj-93.6 -12  TD -0.0926  Tc 0.1826  Tw (that is the parameter count matches the arguments and an ) Tj233.4 0  TD /F5 10.2  Tf-0.0714  Tc 0  Tw (implicit) Tj-233.4 -12  TD 0.7033  Tc 1.5467  Tw (conversion sequence) Tj104.4 0  TD /F4 10.2  Tf0.5886  Tc 2.2614  Tw (exists for every argument to the) Tj-104.4 -12  TD 0.0439  Tc 1.0061  Tw (corresponding  parameter. A function having more parameters) Tj0 -12  TD -0.0786  Tc 0.4786  Tw (than there are arguments in an argument list can also be viable if) TjT* -0.0815  Tc 0.2315  Tw (default arguments exist for all the extra parameters. In such cases) TjT* 0.3791  Tc 0.7376  Tw (the extra parameters are not considered for the purpose of) TjT* 0.1772  Tc 1.0442  Tw (overload resolution. Access control is applied after overload) TjT* -0.0813  Tc 0.598  Tw (resolution, meaning that if the function selected is not accessible) TjT* -0.0608  Tc -0.0035  Tw (in the specified context, the program is ill-formed.) Tj0 -24  TD /F10 9  Tf0.0358  Tc -0.2458  Tw (Phases of the function call process:) Tj0 -12  TD /F4 10.2  Tf0.375  Tc 0  Tw (1.) Tj11.4 0  TD -0.1093  Tc -0.0407  Tw (Name lookup) Tj-11.4 -12  TD 0.375  Tc 0  Tw (2.) Tj11.4 0  TD -0.0419  Tc -0.1081  Tw (Overload resolution) Tj-11.4 -12  TD 0.375  Tc 0  Tw (3.) Tj11.4 0  TD -0.1525  Tc 0.6025  Tw (Access control) Tj-11.4 -24  TD 0.1067  Tc 0.9433  Tw (Many different contexts of overloading exist and each has its) Tj0 -12  TD -0.0011  Tc 1.1602  Tw (own set of rules for finding the set of candidate functions and) TjT* 0.0668  Tc 1.1632  Tw (arguments. Those rules are not covered here except for a few) TjT* -0.041  Tc 1.0053  Tw (important cases which involve a user-defined conversion. After) TjT* -0.0819  Tc 1.1986  Tw (defining the candidates and the arguments for each context, the) TjT* -0.1028  Tc 0.1528  Tw (rest of the overload process is identical for all contexts.) Tj275.4 510.6  TD /F0 12  Tf-0.0528  Tc 0.0128  Tw (Ordering of Viable Functions) Tj0 -18.6  TD /F4 10.2  Tf-0.0288  Tc 1.2588  Tw (A viable function is better than another viable function if \(and) Tj0 -12  TD -0.0816  Tc 0.0952  Tw (only if\) it does not have a worse implicit conversion sequence for) TjT* -0.1168  Tc 1.2668  Tw (any of its arguments than the other function and has one of the) TjT* -0.1147  Tc -0.0353  Tw (following properties:) Tj0 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj10.8 -1.8  TD /F4 10.2  Tf0.0985  Tc 0.3515  Tw (It has at least one better conversion sequence than the other) Tj0 -12  TD -0.0607  Tc 0  Tw (function.) Tj-10.8 -10.2  TD /F11 6  Tf0.054  Tc (l) Tj10.8 -1.8  TD /F4 10.2  Tf0.2766  Tc 1.1334  Tw (It is a non-template and the other function is a template) Tj0 -12  TD -0.0719  Tc 0  Tw (specialisation.) Tj-10.8 -10.2  TD /F11 6  Tf0.054  Tc (l) Tj10.8 -1.8  TD /F4 10.2  Tf0.134  Tc 0.316  Tw (Both are templates and it is more specialised than the other) Tj0 -12  TD -0.084  Tc 0.034  Tw (function according to the partial ordering rules.) Tj-10.8 -12  TD -0.1106  Tc 0.7856  Tw (The ordering of implicit conversion sequences is explained later.) Tj0 -12  TD -0.0491  Tc 1.2491  Tw (If only one function is better than other functions in the set of) TjT* -0.0798  Tc 1.2155  Tw (viable functions then it is called the ) Tj153.6 0  TD /F5 10.2  Tf-0.022  Tc 1.072  Tw (best viable function) Tj84.6 0  TD /F4 10.2  Tf-0.2264  Tc 1.8764  Tw (and is) Tj-238.2 -12  TD 0.1374  Tc 1.0459  Tw (selected by the overload resolution. Otherwise the call is ill-) Tj0 -12  TD -0.0899  Tc -0.0601  Tw (formed and diagnostics are reported.) Tj0 -18  TD /F0 12  Tf-0.0115  Tc -0.0285  Tw (Member Functions and Built-in) Tj21.6 -12  TD -0.0055  Tc 0.3655  Tw (Operators With Overloading) Tj-21.6 -18  TD /F4 10.2  Tf0.1282  Tc 1.0932  Tw (For overload resolution, member functions are considered as) Tj0 -12  TD 0.0438  Tc 1.0729  Tw (free functions with an extra parameter taking the object itself.) TjT* 0.7226  Tc 1.3774  Tw (This is called the ) Tj92.4 0  TD /F5 10.2  Tf0.7481  Tc 1.5019  Tw (implicit object parameter) Tj125.4 0  TD /F4 10.2  Tf0.4805  Tc 2.3695  Tw (. The cv-) Tj-217.8 -12  TD 0.003  Tc 0  Tw (qualification) Tj52.2 2.4  TD /F4 7.2  Tf0  Tc (1) Tj7.2 -2.4  TD /F4 10.2  Tf0.0385  Tc 1.2115  Tw (of the implicit parameter is the same as the cv-) Tj-59.4 -12  TD 0.1225  Tc 1.0775  Tw (qualification of the specified member function. The object is) Tj0 -12  TD -0.0383  Tc 1.4216  Tw (matched to the implicit object parameter to make the overload) TjT* -0.0128  Tc 0.1628  Tw (resolution possible. This is an easy way to make the overloading) TjT* -0.049  Tc 0.8323  Tw (rules uniform for the member functions and free functions. The) TjT* -0.0457  Tc 0.6957  Tw (implicit object argument is just like other arguments, except for) TjT* 0.127  Tc 1.148  Tw (a few special rules: the related conversions cannot introduce) TjT* 0.1632  Tc 0.9725  Tw (temporaries, no user-defined conversions are allowed and an) TjT* 0.2616  Tc 0.9884  Tw (rvalue can be bound to a non-constant reference. For static) TjT* -0.0309  Tc 0.0309  Tw (member functions the implicit object parameter is not considered) TjT* -0.0277  Tc 1.1322  Tw (since there is no object to match it. Also the built-in operators) TjT* 0.4879  Tc 0.6371  Tw (are considered free functions for the purpose of overload) TjT* -0.0682  Tc 0  Tw (resolution.) Tj0 -24  TD /F10 9  Tf-0.0333  Tc (Examples:) Tj13.8 -12  TD 0.2 0.2 0.2 rg /F9 9  Tf0  Tc (struct type {) Tj10.8 -12  TD (void func\(int\) const;) Tj0 -12  TD (void other\(\);) Tj-10.8 -12  TD (};) TjET1 1 1 rg 304.2 259.8 263.4 13.2 re f304.2 259.8 263.4 13.2 re fBT304.2 267  TD0 0 0 rg /F8 7.8  Tf-0.144  Tc (1) Tj10.8 0  TD /F2 9  Tf0  Tc (const) Tj28.8 0  TD /F8 7.8  Tf0.038  Tc -0.11  Tw (and ) Tj12.6 0  TD /F2 9  Tf0  Tc 0  Tw (volatile) Tj45.6 0  TD /F8 7.8  Tf0.0268  Tc 0.2012  Tw (are the cv-qualifiers.) Tj0.6 w 1 J 1 j 0 0 0 RG ET304.2 276.6 m 567.6 276.6 l S 1 1 1 rg 28.8 229.2 264 9 re f28.8 229.2 264 9 re fBT28.8 232.8  TD0 0 0 rg /F2 7.8  Tf0.12  Tc 0  Tw ([continued from previous page]) TjET28.8 246.6 m 567.6 246.6 l S endstreamendobj102 0 obj11453endobj100 0 obj<</Type /Page/Parent 97 0 R/Resources <</Font 103 0 R/ProcSet 2 0 R>>/Contents 101 0 R>>endobj103 0 obj<</F0 6 0 R/F1 8 0 R/F2 10 0 R/F4 16 0 R/F5 21 0 R/F7 28 0 R/F8 30 0 R/F9 36 0 R/F10 42 0 R/F11 56 0 R>>endobj105 0 obj<</Length 106 0 R>>stream
BT549.6 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (23) Tj-193.8 768.6  TD /F0 12  Tf-0.0055  Tc -0.0845  Tw (Overload issue 66 april 2005) Tj-326.4 -40.8  TD /F4 10.2  Tf-0.1087  Tc 0.2587  Tw (The member functions are considered as ) Tj13.8 -24  TD 0.2 0.2 0.2 rg /F9 9  Tf0  Tc 0  Tw (void func\(type const&, int\);) Tj0 -12  TD (void other\(type&\);) Tj0 -24  TD (char* p;) Tj0 -12  TD (p[0];) Tj-13.8 -24  TD 0 0 0 rg /F4 10.2  Tf-0.0637  Tc -0.0863  Tw (The subscript operator is considered as) Tj13.8 -24  TD 0.2 0.2 0.2 rg /F9 9  Tf0  Tc 0  Tw (T& operator[]\(T*, ptrdiff_t\);) Tj-13.8 -24  TD 0 0 0 rg /F4 10.2  Tf-0.1354  Tc 0.2254  Tw (where T is a cv-\(un\)qualified type) Tj0 -30  TD /F0 12  Tf-0.1025  Tc 0  Tw (Conversions) Tj0 -18  TD /F4 10.2  Tf-0.0682  Tc 1.1182  Tw (The implicit conversion sequences are based) Tj0 -12  TD -0.0294  Tc 0.9594  Tw (on single conversions. These simple implicit) TjT* -0.0618  Tc 0.3118  Tw (conversions provide a great deal of flexibility) TjT* 0.5701  Tc 0.5466  Tw (and can be helpful if used correctly. Even though single) TjT* 0.7084  Tc 0.4273  Tw (conversions are quite easy, the interaction between the) TjT* -0.0291  Tc 0.0791  Tw (sequences of conversions and the overloading is far from simple.) TjT* -0.0208  Tc 0.6958  Tw (The standard conversions are the built-in conversions, those are) TjT* 0.0844  Tc 1.1456  Tw (categorised and ranked to form an intuitive order. This is the) TjT* 0.0523  Tc 1.2977  Tw (basis for ranking the conversion sequences consisting of only) TjT* 0.7302  Tc 1.5198  Tw (standard conversions. There are three ranks for these) TjT* 0.5338  Tc 0.6495  Tw (conversions \(see Table 1\).  In addition to those standard) TjT* -0.0217  Tc 0.7717  Tw (conversions, a derived-to-base conversion exists but only in the) TjT* -0.027  Tc 0.252  Tw (description of implicit conversion sequences. It has a conversion) TjT* -0.0551  Tc -0.0949  Tw (rank. ) Tj0 -24  TD /F10 9  Tf-0.0333  Tc 0  Tw (Examples:) Tj0 -12  TD /F2 9  Tf0  Tc (char) Tj24 0  TD /F13 10.2  Tf0.1326  Tc (\256) Tj12 0  TD /F2 9  Tf0  Tc (int) Tj19.2 0  TD /F4 10.2  Tf-0.0662  Tc -0.0838  Tw (\(integral promotion\)) Tj-55.2 -12  TD /F2 9  Tf0  Tc 0  Tw (float) Tj29.4 0  TD /F13 10.2  Tf0.1326  Tc (\256) Tj12 0  TD /F2 9  Tf0  Tc (long) Tj24.6 0  TD /F4 10.2  Tf-0.0911  Tc 0.5411  Tw (\(floating-integral conversion\)) Tj-66 -12  TD -0.1911  Tc 0.0411  Tw (type ) Tj19.8 0  TD /F13 10.2  Tf0.1326  Tc 0  Tw (\256) Tj12 0  TD /F4 10.2  Tf-0.0411  Tc 0.4911  Tw (type ) Tj19.8 0  TD /F2 9  Tf0  Tc 0  Tw (const) Tj29.4 0  TD /F4 10.2  Tf-0.0925  Tc -0.0575  Tw (\(qualification conversion\)) Tj-81 -12  TD -0.1911  Tc 0.0411  Tw (type ) Tj19.8 0  TD /F13 10.2  Tf0.1326  Tc 0  Tw (\256) Tj12 0  TD /F4 10.2  Tf-0.0536  Tc -0.0964  Tw (type \(identity conversion\)) Tj-31.8 -24  TD 0.6346  Tc 0.5154  Tw (Besides standard conversions there are the user-defined) Tj0 -12  TD 0.3514  Tc 0.8186  Tw (conversions, meaning conversion functions and converting) TjT* 0  Tc 1.0499  Tw (constructors. User-defined conversions are applied only if they) TjT* 0.2334  Tc 0.9802  Tw (are unambiguous. It is good to know that at most one user-) TjT* -0.045  Tc 0.7617  Tw (defined conversion is implicitly applied to a single value. Three) TjT* 0.0902  Tc 1.0348  Tw (forms of conversion sequences can be constructed from these) TjT* -0.0705  Tc -0.0795  Tw (different conversions:) Tj0 -22.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.077  Tc -0.073  Tw (Standard conversion sequence) Tj-11.4 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1128  Tc -0.0372  Tw (User-defined conversion sequence) Tj-11.4 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0673  Tc -0.0827  Tw (Ellipsis conversion sequence) Tj-11.4 -30  TD /F0 12  Tf0.004  Tc -0.244  Tw (Standard Conversion Sequences) Tj0 -18  TD /F4 10.2  Tf-0.0797  Tc 0.0797  Tw (The standard conversion sequence is either an identity conversion) Tj0 -12  TD 0.0246  Tc 1.2054  Tw (or consists of one to three standard conversions from the four) TjT* 0.657  Tc 0.618  Tw (categories when identity is not considered, at most one) TjT* 0.042  Tc 1.1795  Tw (conversion per category. The standard conversions are always) TjT* -0.0456  Tc 1.1706  Tw (applied in a certain order: Lvalue transformation, Promotion or) TjT* 0.6558  Tc 0.7542  Tw (Conversion and Qualification adjustment. The standard) TjT* 0.0205  Tc 1.1795  Tw (conversion sequence is ranked according to the conversions it) TjT* -0.0638  Tc 0.3338  Tw (contains, the conversion with the lowest rank dictates the rank of) TjT* -0.1015  Tc -0.0485  Tw (the whole sequence.) Tj274.8 480  TD /F10 9  Tf-0.1  Tc 0  Tw (Examples:) Tj0 -12  TD /F2 9  Tf0  Tc (bool) Tj24 0  TD /F13 10.2  Tf0.1326  Tc (\256) Tj12.6 0  TD /F2 9  Tf0  Tc (short) Tj29.4 0  TD /F4 10.2  Tf-0.1173  Tc -0.0327  Tw (\(conversion rank\)) Tj-66 -12  TD /F2 9  Tf0  Tc 0  Tw (char) Tj24 0  TD /F13 10.2  Tf0.1326  Tc (\256) Tj12.6 0  TD /F2 9  Tf0  Tc (char const) Tj56.4 0  TD /F4 10.2  Tf-0.1481  Tc 0.2981  Tw (\(exact match rank\)) Tj-93 -12  TD /F2 9  Tf0  Tc 0  Tw (char) Tj24 0  TD /F13 10.2  Tf0.1326  Tc (\256) Tj12.6 0  TD /F2 9  Tf0  Tc (int) Tj18.6 0  TD /F13 10.2  Tf0.1326  Tc (\256) Tj12.6 0  TD /F2 9  Tf-0.075  Tc 0.075  Tw (int const) Tj51 0  TD /F4 10.2  Tf-0.1348  Tc -0.0152  Tw (\(promotion rank\)) Tj-118.8 -12  TD /F2 9  Tf0  Tc 0  Tw (float[]) Tj40.2 0  TD /F13 10.2  Tf0.1326  Tc (\256) Tj12.6 0  TD /F2 9  Tf0  Tc (float*) Tj34.8 0  TD /F13 10.2  Tf0.1326  Tc (\256) Tj12 0  TD /F2 9  Tf0  Tc (float const*) Tj67.8 0  TD /F4 10.2  Tf-0.1481  Tc 0.2981  Tw (\(exact match rank\)) Tj-167.4 -28.8  TD /F0 12  Tf-0.0742  Tc 0.4342  Tw (User-Defined Conversion) Tj22.2 -12  TD 0.008  Tc 0  Tw (Sequences) Tj-22.2 -19.2  TD /F4 10.2  Tf0.0665  Tc 1.0585  Tw (A user-defined conversion sequence is a composition of three) Tj0 -12  TD -0.0807  Tc -0.0026  Tw (pieces: first an initial standard conversion sequence followed by a) TjT* -0.0155  Tc 1.0655  Tw (user-defined conversion and then followed by another standard) TjT* 0.6395  Tc 0.4962  Tw (conversion sequence. In the case when the user-defined) TjT* -0.0833  Tc 0.0083  Tw (conversion is a conversion function, the first conversion sequence) TjT* -0.0769  Tc 1.0069  Tw (converts the source type to the implicit object parameter so that) TjT* -0.0991  Tc 0.0691  Tw (the user-defined conversion can be applied.) Tj11.4 -12  TD -0.2013  Tc -0.2487  Tw (On the other hand, if the user-defined conversion is a constructor,) Tj-11.4 -12  TD -0.1177  Tc 0.3495  Tw (the source type is converted to a type required by the constructor.) Tj0 -12  TD -0.0781  Tc 0.5281  Tw (After the user-defined conversion is applied, the second standard) TjT* -0.0921  Tc -0.4179  Tw (conversion sequence converts the result to a destination type. If the) TjT* 0.1279  Tc 0.3221  Tw (user-defined conversion is a template conversion function, the) TjT* -0.1083  Tc 0.425  Tw (second standard conversion sequence is required to have an exact) TjT* -0.1283  Tc 0.0706  Tw (match rank. A conversion from a type to the same type is given an) TjT* -0.0757  Tc 0.5257  Tw (exact match rank even though a user-defined conversion is used.) TjT* -0.0892  Tc -0.0008  Tw (This is natural when passing parameters by value and hence using) TjT* -0.1881  Tc 0.3381  Tw (a copy constructor.) Tj0 -24  TD /F10 9  Tf-0.1  Tc 0  Tw (Examples:) Tj14.4 -12  TD 0.2 0.2 0.2 rg /F9 9  Tf0  Tc (struct A { operator int\(\); };) Tj0 -12  TD (long var = A\(\);) Tj-14.4 -12  TD 0 0 0 rg /F2 9  Tf(A) Tj7.8 0  TD /F13 10.2  Tf0.1326  Tc (\256) Tj12.6 0  TD /F2 9  Tf0  Tc (int) Tj18.6 0  TD /F13 10.2  Tf0.1326  Tc (\256) Tj12.6 0  TD /F2 9  Tf0  Tc (long) Tj-37.2 -12  TD 0.2 0.2 0.2 rg /F9 9  Tf(struct B { B\(float\); };) Tj0 -12  TD (void func\(B const&\);) TjT* (func\(0\);) Tj-14.4 -12  TD 0 0 0 rg /F2 9  Tf(int) Tj18.6 0  TD /F13 10.2  Tf0.1326  Tc (\256) Tj12.6 0  TD /F2 9  Tf0  Tc (float) Tj29.4 0  TD /F13 10.2  Tf0.1326  Tc (\256) Tj12.6 0  TD /F2 9  Tf0  Tc (B) Tj7.8 0  TD /F13 10.2  Tf0.1326  Tc (\256) Tj12 0  TD /F2 9  Tf0  Tc (B const) Tj-93 -30  TD /F0 12  Tf0.008  Tc -0.248  Tw (Ellipsis Conversion Sequences) Tj0 -18  TD /F4 10.2  Tf0.1367  Tc 1.0333  Tw (The last and third form of conversion sequence is an ellipsis) Tj0 -12  TD 0.6593  Tc 0.4907  Tw (conversion sequence, which happens when matching an) TjT* -0.0975  Tc -0.0525  Tw (argument to an ellipsis parameter.) TjET1 1 1 rg 230.4 581.4 337.2 204 re f231 582 336 202.8 re fBT234 772.8  TD0 0 0 rg /F10 10.2  Tf-0.0068  Tc 0  Tw (Conversion) Tj133.2 0  TD -0.1523  Tc (Category) Tj108 0  TD -0.0305  Tc (Ranking) Tj60.6 0  TD -0.2517  Tc (Rank) Tj-301.8 -18  TD /F4 10.2  Tf-0.0751  Tc 0.2251  Tw (No conversions required) Tj133.2 0  TD -0.0665  Tc 0  Tw (Identity) Tj-133.2 -17.4  TD -0.0885  Tc -0.0615  Tw (Lvalue-to-rvalue conversion) Tj0 -12  TD -0.1142  Tc 0.5642  Tw (Array-to-pointer conversion) Tj133.2 0  TD -0.0691  Tc -0.0809  Tw (Lvalue transformation) Tj108 0  TD -0.1354  Tc -0.0146  Tw (Exact match) Tj70.2 0  TD 0.3  Tc 0  Tw (1) Tj-311.4 -12  TD -0.057  Tc -0.093  Tw (Function-to-pointer conversion) Tj0 -18  TD -0.0862  Tc -0.0638  Tw (Qualification conversion) Tj133.2 0  TD -0.1388  Tc 0.5888  Tw (Qualification adjustment) Tj-133.2 -17.4  TD -0.0441  Tc -0.1059  Tw (Integral promotions) Tj133.2 0  TD -0.0527  Tc 0  Tw (Promotion) Tj108 0  TD -0.1194  Tc (Promotion) Tj70.2 0  TD 0.3  Tc (2) Tj-311.4 -12  TD -0.0804  Tc -0.0696  Tw (Floating point promotions) Tj0 -17.4  TD -0.0972  Tc -0.0528  Tw (Integral conversions) Tj0 -12  TD -0.046  Tc -0.104  Tw (Floating point conversions) TjT* -0.0532  Tc -0.0968  Tw (Floating-integral conversions) Tj133.2 0  TD -0.1432  Tc 0  Tw (Conversion) Tj108 0  TD (Conversion) Tj70.2 0  TD 0.3  Tc (3) Tj-311.4 -12  TD -0.0774  Tc 0.5274  Tw (Pointer conversions) Tj0 -12  TD -0.0982  Tc 0.3482  Tw (Pointer to member conversions) TjT* -0.0957  Tc -0.0543  Tw (Boolean conversions) TjETq 230.4 785.4 m 230.4 581.4 l 567.6 581.4 l 567.6 785.4 l 231 784.8 m 231 582 l 567 582 l 567 784.8 l h W* n 230.4 581.4 337.2 204 re fQ 0.6 w 1 J 1 j 0 0 0 RG 231 768 m 567.6 768 l S 231 750 m 471 750 l S 231 708 m 471 708 l S 231 690 m 567.6 690 l S 231 660.6 m 567.6 660.6 l S 362.4 784.8 m 362.4 582 l S 471 784.8 m 471 582 l S 531 784.8 m 531 582 l S 1 1 1 rg 230.4 559.8 337.2 16.8 re f230.4 559.8 337.2 16.8 re fBT261 565.8  TD0 0 0 rg /F10 10.2  Tf-0.1003  Tc -0.0497  Tw (Table 1: Standard Conversions \(smallest number is highest rank\)) TjETendstreamendobj106 0 obj10903endobj104 0 obj<</Type /Page/Parent 97 0 R/Resources <</Font 109 0 R/ProcSet 2 0 R>>/Contents 105 0 R>>endobj109 0 obj<</F0 6 0 R/F2 10 0 R/F4 16 0 R/F9 36 0 R/F10 42 0 R/F11 56 0 R/F13 107 0 R>>endobj111 0 obj<</Length 112 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (24) Tj0 768.6  TD /F0 12  Tf-0.0055  Tc 0.2155  Tw (Overload issue 66 april 2005) Tj0 -40.8  TD /F10 9  Tf0.0333  Tc 0  Tw (Examples:) Tj14.4 -12  TD 0.2 0.2 0.2 rg /F9 9  Tf0  Tc (void func\(...\);) Tj0 -12  TD (func\(0\); ) Tj48.6 0  TD 0 0 0 rg /F2 9  Tf(// an ellipsis conversion sequence,) Tj0 -12  TD (// int matching to an ellipsis) TjT* (// parameter.) Tj-63 -30  TD /F0 12  Tf-0.0038  Tc 0.0638  Tw (Reference and Non-Reference) Tj22.2 -12  TD 0.0036  Tc 0  Tw (Parameters) Tj-22.2 -18  TD /F4 10.2  Tf0.0286  Tc 1.2614  Tw (If a parameter type is not a reference, the implicit conversion) Tj0 -12  TD -0.0963  Tc 0.4713  Tw (sequence models a copy-initialisation. In that case any difference) TjT* -0.0099  Tc 1.2599  Tw (in top level cv-qualification is not considered as a conversion.) TjT* -0.0754  Tc 0.1754  Tw (Also the use of a copy constructor is not ranked as a user-defined) TjT* -0.1108  Tc 0.888  Tw (conversion but as an exact match and hence is not a conversion.) TjT* -0.0999  Tc 1.1499  Tw (However, if the parameter is a reference, binding to a reference) TjT* 0.1254  Tc 0.9996  Tw (occurs. The binding is considered an identity conversion and) TjT* 0.5285  Tc 0.5881  Tw (hence if the destination type binds directly to the source) TjT* -0.085  Tc 0.4888  Tw (expression, it is an exact match. An rvalue can not be bound to a) TjT* -0.1741  Tc 0  Tw (non-) Tj18.6 0  TD /F2 9  Tf0  Tc (const) Tj29.4 0  TD /F4 10.2  Tf-0.0742  Tc -0.0758  Tw (reference and a candidate requiring such is not viable.) Tj-48 -12  TD 0.5275  Tc 0.7407  Tw (If the type of the argument does not directly bind to the) Tj0 -12  TD 0.1981  Tc 1.1091  Tw (parameter, the implicit conversion sequence models a copy-) TjT* 0.4024  Tc 0.9143  Tw (initialisation of a temporary to the underlying type of the) TjT* -0.1018  Tc 0.2947  Tw (reference, similar to the case of a non-reference.) Tj0 -18  TD /F0 12  Tf0.025  Tc -0.065  Tw (Basic Ordering of Conversion) Tj22.2 -12  TD 0.008  Tc 0  Tw (Sequences) Tj-22.2 -18  TD /F4 10.2  Tf-0.0316  Tc 1.2816  Tw (The implicit conversion sequences for the n) Tj183 2.4  TD /F4 6.6  Tf-0.1674  Tc 0  Tw (th) Tj9 -2.4  TD /F4 10.2  Tf-0.1006  Tc 1.1506  Tw (parameters of the) Tj-192 -12  TD 0.2147  Tc 0.9553  Tw (viable functions need to be ordered to select the best viable) Tj0 -12  TD 0.0413  Tc 1.1887  Tw (function if one exists. The three basic forms of sequences are) TjT* -0.0792  Tc 1.4625  Tw (ordered so that the standard conversion sequence is better than) TjT* 0.342  Tc 0.908  Tw (the user-defined conversion sequence and the user-defined) TjT* 0.4498  Tc 0.6002  Tw (conversion sequence is better than the ellipsis conversion) TjT* 0.3079  Tc 0.8171  Tw (sequence. In case that two conversion sequences cannot be) TjT* -0.1022  Tc 0.7922  Tw (ordered, they are said to be indistinguishable. This is rather easy) TjT* -0.073  Tc -0.017  Tw (and intuitive ordering but there is a lot more to it.) Tj0 -18  TD /F0 12  Tf-0.0146  Tc -0.0254  Tw (Ordering of Standard Conversion) Tj22.2 -12  TD 0.008  Tc 0  Tw (Sequences) Tj-22.2 -18  TD /F4 10.2  Tf0.0268  Tc 1.2482  Tw (Standard conversion sequences are ordered by their rank. The) Tj0 -12  TD 0.1729  Tc 1.1437  Tw (higher the rank, the better the sequence.  Another important) TjT* 0.1405  Tc 1.1095  Tw (ordering is that a proper subsequence of another sequence is) TjT* 0.0107  Tc 0.5143  Tw (better than the other sequence. The comparison excludes lvalue) TjT* 0.1122  Tc 1.1628  Tw (transformations. An identity conversion is considered to be a) TjT* 0.247  Tc 1.003  Tw (subsequence of any non-identity conversion sequence. Also) TjT* 0.1594  Tc 1.024  Tw (there are other rules that apply with the standard conversion) TjT* 0.1171  Tc 1.3079  Tw (sequences: If two sequences have the same conversion rank,) TjT* 0.4231  Tc 0.8936  Tw (they are indistinguishable unless one is a conversion of a) TjT* 0.5742  Tc 0.4758  Tw (pointer to ) Tj49.8 0  TD /F2 9  Tf0.75  Tc 0  Tw (bool) Tj28.8 0  TD /F4 10.2  Tf0.5843  Tc 0.6657  Tw (which is a worse conversion than other) Tj-78.6 -12  TD 0.025  Tc 0.2068  Tw (conversions. In case of converting a type to its direct or indirect) Tj0 -12  TD 0.6978  Tc 0.6522  Tw (base class, the conversion to a base class closer in the) TjT* -0.006  Tc 0.3893  Tw (inheritance hierarchy is a better conversion than a conversion to) TjT* 0.0161  Tc 0.1612  Tw (a base class that is further away. The same applies with pointers) TjT* 0.0196  Tc 0.3104  Tw (and references, also with pointers ) Tj141 0  TD /F2 9  Tf0.12  Tc 0  Tw (void*) Tj30.6 0  TD /F4 10.2  Tf-0.001  Tc 0.151  Tw (is considered to be the) Tj-171.6 -12  TD -0.062  Tc 0.312  Tw (furthest in the hierarchy.) Tj0 -18  TD /F0 12  Tf-0.0453  Tc 0.1053  Tw (Ordering of User-Defined) Tj22.2 -12  TD 0.0101  Tc -0.2501  Tw (Conversion Sequences) Tj-22.2 -18  TD /F4 10.2  Tf0.6668  Tc 0.7432  Tw (User-defined conversion sequences are somewhat more) Tj0 -12  TD 0.4492  Tc 0.8008  Tw (difficult to order. Constructing a user-defined conversion) TjT* 0.6135  Tc 0.8115  Tw (sequence for a specific parameter means first using the) Tj275.4 708  TD 0.1076  Tc 1.0282  Tw (overload resolution to select the best user-defined conversion) Tj0 -12  TD 0.0387  Tc 0.4113  Tw (for the sequence. This works just like ordinary overloading but) TjT* 0.8134  Tc 0.3866  Tw (now the first parameter of a converting constructor is) TjT* 0.0553  Tc 0.9401  Tw (considered as a destination type and similarly in the case of a) TjT* 0.0204  Tc 0.4296  Tw (conversion function the implicit object parameter. In case there) TjT* 0.3517  Tc 1.0733  Tw (is more than one best user-defined conversion, the second) TjT* 0.8115  Tc 0.41  Tw (standard conversion sequence is used to decide which) TjT* 0.0421  Tc 0.517  Tw (conversion sequence is better than the other. If there is no best) TjT* 0.029  Tc 1.2781  Tw (conversion sequence for that specific parameter, the sequence) TjT* -0.058  Tc 0.208  Tw (is an ) Tj22.2 0  TD /F5 10.2  Tf0.0775  Tc 0.3725  Tw (ambiguous conversion sequence) Tj135 0  TD /F4 10.2  Tf0.0293  Tc 0.4207  Tw (. It is treated as any user-) Tj-157.2 -12  TD 0.0167  Tc 0.3583  Tw (defined conversion sequence because it always involves a user-) Tj0 -12  TD 0.0647  Tc 1.2425  Tw (defined conversion. The purpose of an ambiguous conversion) TjT* 0.0535  Tc 1.3965  Tw (sequence is to keep a specific function viable. Removing the) TjT* 0.2722  Tc 0.9111  Tw (function from the set of viable functions could cause some) TjT* 0.228  Tc 1.062  Tw (other function to become the best viable function even if it) TjT* 0.2376  Tc 1.1457  Tw (clearly is not. If a function using an ambiguous conversion) TjT* 0.0798  Tc 0.752  Tw (sequence is selected as the best viable function, the call is ill-) TjT* -0.0297  Tc 0  Tw (formed.) Tj0 -24  TD /F10 9  Tf-0.0333  Tc (Examples:) Tj13.8 -12  TD 0.2 0.2 0.2 rg /F9 9  Tf0  Tc (struct A;) Tj0 -12  TD (struct B {) Tj10.8 -12  TD (B\(A const&\);) Tj-10.8 -12  TD (};) Tj0 -24  TD (struct A {) Tj10.8 -12  TD (operator B\(\) const;) Tj0 -12  TD (operator int\(\) const;) Tj-10.8 -12  TD (};) Tj0 -12  TD (void func\(B\);) TjT* (void func\(int\);) Tj0 -24  TD (func\(A\(\)\);) Tj-13.8 -24  TD 0 0 0 rg /F4 10.2  Tf0.543  Tc 0.6784  Tw (The call is ambiguous, however, the parameter ) Tj224.4 0  TD /F2 9  Tf0  Tc 0  Tw (B) Tj9.6 0  TD /F4 10.2  Tf0.7549  Tc 0.2951  Tw (has an) Tj-234 -12  TD -0.0761  Tc 1.2761  Tw (ambiguous conversion sequence and if the function having this) Tj0 -12  TD -0.1116  Tc 0.695  Tw (parameter was eliminated the call would not be ambiguous. This) TjT* -0.0706  Tc -0.0127  Tw (is because there would be only one function to select.) Tj10.8 -12  TD 0.2511  Tc 0.9704  Tw (For each argument the implicit conversion sequences are) Tj-10.8 -12  TD -0.0129  Tc 0.3879  Tw (constructed. After that the sequences are compared and ordered.) Tj0 -12  TD -0.2108  Tc -0.3392  Tw (Two user-defined conversion sequences are indistinguishable unless) TjT* -0.1202  Tc -0.5098  Tw (they use the same user-defined conversion in which case the second) TjT* -0.0892  Tc -0.0608  Tw (standard conversion sequence is conclusive.) Tj0 -18  TD /F0 12  Tf-0.024  Tc -0.216  Tw (Difficulties With User-Defined) Tj21.6 -12  TD 0.0065  Tc 0  Tw (Conversions) Tj-21.6 -18  TD /F4 10.2  Tf0.0643  Tc 0.3857  Tw (There are a few oddities with user-defined conversions, mostly) Tj0 -12  TD 0.0541  Tc -0.0041  Tw (when the destination type is a reference.) Tj10.8 -12  TD 0.1362  Tc 0.3138  Tw (One such context is an initialisation by conversion function) Tj-10.8 -12  TD 0.4289  Tc 0.4711  Tw (for direct reference binding. This means that a conversion) Tj0 -12  TD -0.021  Tc -0.1956  Tw (function  converting to a type which is reference-compatible with) TjT* 0.3768  Tc 1.0065  Tw (the destination type exists. In this case the candidates for) TjT* 0.1986  Tc 0.2514  Tw (selecting the user-defined conversion are only the conversion) TjT* 0.3911  Tc 0.5089  Tw (functions returning a reference that is compatible with the) TjT* 0.0547  Tc 0.3953  Tw (destination reference.) Tj10.8 -12  TD 0.0772  Tc -0.2872  Tw (Another thing is that in the same context, the second standard) Tj-10.8 -12  TD 0.0694  Tc 0.3806  Tw (conversion sequence is considered to be an identity conversion) Tj0 -12  TD 0.0405  Tc -0.4305  Tw (if the result binds directly to the destination, or a derived-to-base) TjT* 0.0453  Tc 0.4592  Tw (conversion in the case of a base class. This means for example) TjET1 1 1 rg 304.2 56.4 263.4 14.4 re f304.2 56.4 263.4 14.4 re fBT414 61.8  TD0 0 0 rg /F2 7.8  Tf0.12  Tc 0  Tw ([concluded at foot of next page]) TjETendstreamendobj112 0 obj9914endobj110 0 obj<</Type /Page/Parent 97 0 R/Resources <</Font 113 0 R/ProcSet 2 0 R>>/Contents 111 0 R>>endobj113 0 obj<</F0 6 0 R/F2 10 0 R/F4 16 0 R/F5 21 0 R/F9 36 0 R/F10 42 0 R>>endobj115 0 obj<</Length 116 0 R>>stream
BT549.6 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (25) Tj-193.8 768.6  TD /F0 12  Tf-0.0055  Tc -0.0845  Tw (Overload issue 66 april 2005) Tj-326.4 -448.8  TD /F4 10.2  Tf0.0634  Tc -0.4801  Tw (that there is no ordering for different cv-qualifications. The rules) Tj0 -12  TD 0.1674  Tc 0.5493  Tw (concerning this might change in future standards to make the) TjT* 0.0439  Tc 0.0061  Tw (rules consistent and to meet one\222s expectations.) Tj0 -18  TD /F0 12  Tf-0.1023  Tc 0.3123  Tw (Another Way to Handle User-) Tj17.4 -12  TD 0.024  Tc -0.264  Tw (Defined Conversion Sequences) Tj-17.4 -18  TD /F4 10.2  Tf-0.0771  Tc 0.5271  Tw (Considering the overload rules for user-defined conversions, it is) Tj0 -12  TD -0.013  Tc 1.1296  Tw (easy to notice that the selection of the user-defined conversion) TjT* -0.0672  Tc 0.19  Tw (can be combined with the rest of the overload process. This leads) TjT* -0.1015  Tc 0.1515  Tw (to a few rules:) Tj11.4 -12  TD -0.0338  Tc 0.0638  Tw (If the destination parameter is the same for two sequences, the) Tj-11.4 -12  TD -0.0367  Tc 0.4867  Tw (first standard conversion sequences are used to order these user-) Tj0 -12  TD -0.061  Tc -0.089  Tw (defined conversion sequences.) Tj11.4 -12  TD -0.0413  Tc 0.4913  Tw (After that the second standard conversion sequence is used to) Tj-11.4 -12  TD -0.0754  Tc 0.0754  Tw (select the best conversion sequence.) Tj11.4 -12  TD 0.2364  Tc 0.6636  Tw (Of course one has to be careful not to mix those with the) Tj-11.4 -12  TD -0.0754  Tc -0.0746  Tw (conversion sequences that do not have the same destination.) Tj0 -18  TD /F0 12  Tf-0.0366  Tc -0.2034  Tw (Function Templates With) Tj22.2 -12  TD 0.0033  Tc 0  Tw (Overloading) Tj-22.2 -18  TD /F4 10.2  Tf0.0914  Tc 1.1986  Tw (In most cases a function template behaves just like a normal) Tj0 -12  TD 0.13  Tc 1.22  Tw (function when considering overload resolution. The template) TjT* 0.1452  Tc 1.1048  Tw (argument deduction is applied, if it succeeds, the function is) TjT* -0.0895  Tc 1.085  Tw (added to the candidates set. Such a function is handled like any) TjT* 0.1481  Tc 0.9769  Tw (other function, except when two viable functions are equally) TjT* 0.3803  Tc 1.0297  Tw (good, the non-template one is selected. In case both are a) Tj274.8 312  TD 0.0258  Tc 1.0992  Tw (specialisation of a function template, partial ordering rules are) Tj0 -12  TD 0.0264  Tc 1.1327  Tw (applied. The partial ordering rules are out of the scope of this) TjT* 0.02  Tc 0  Tw (article.) Tj0 -18  TD /F0 12  Tf0.0324  Tc (Conclusion) TjT* /F4 10.2  Tf0.1485  Tc 1.2015  Tw (This just about covers all there is to know about conversion) Tj0 -12  TD -0.0771  Tc 0.1998  Tw (sequences. However there are a lot of subjects to cover which are) TjT* 0.0256  Tc 1.079  Tw (related to the subject of this article, to mention a few: finding) TjT* -0.015  Tc 1.1507  Tw (candidate sets, overloadable declaration and partial ordering. It) TjT* -0.0481  Tc 1.4254  Tw (can be somewhat hard to remember all the rules related to the) TjT* -0.0734  Tc 0.1634  Tw (issue, however, only a subset is normally needed. The basic ideas) TjT* 0.17  Tc 0.94  Tw (are easy enough to remember and those are the ones usually) TjT* -0.0946  Tc 1.3446  Tw (needed and of course it is always possible to look up the exact) TjT* -0.1298  Tc 0  Tw (rules.) Tj195.6 -12  TD /F7 10.2  Tf-0.0424  Tc -0.4016  Tw (Mikael Kilpel\344inen) Tj-94.2 -12  TD /F2 9  Tf0  Tc 0  Tw (mikael.kilpelainen@kolumbus.fi) Tj-101.4 -30  TD /F0 12  Tf-0.0127  Tc (Acknowledgements) Tj0 -18  TD /F4 10.2  Tf-0.0876  Tc 0.6576  Tw (Thank you to Rani Sharoni, Terje Sletteb\370, Stefan de Bruijn and) Tj0 -12  TD -0.0747  Tc 0.0447  Tw (Paul Grenyer for providing important comments.) Tj0 -30  TD /F0 12  Tf-0.018  Tc 0  Tw (References) Tj0 -18  TD /F4 10.2  Tf-0.1067  Tc 0.1567  Tw ([1] ISO/IEC 14882-2003, ) Tj105 0  TD /F5 10.2  Tf-0.1084  Tc 0.1084  Tw (Standard for the C++ language) Tj-105 -12  TD /F4 10.2  Tf-0.0926  Tc 0.4569  Tw ([2] David Vandevoorde and Nicolai M. Josuttis, ) Tj198.6 0  TD /F5 10.2  Tf-0.0513  Tc 0.5013  Tw (C++ templates:) Tj-187.2 -12  TD -0.1203  Tc -0.0297  Tw (The Complete Guide) Tj82.8 0  TD /F4 10.2  Tf-0.1615  Tc -0.1885  Tw (, Addison Wesley 2002) Tj-355.2 710.4  TD /F1 18  Tf0.0766  Tc -0.2806  Tw (Digging a Ditch) Tj21 -18  TD /F0 13.8  Tf0.0989  Tc -0.0049  Tw (Writing a Custom Stream) Tj-21 -18  TD /F0 10.2  Tf-0.0788  Tc -0.0952  Tw (by Paul Grenyer) Tj-13.8 -14.4  TD /F4 10.2  Tf-0.0743  Tc 1.2443  Tw (Writing a custom stream is easy! Most people are now entirely) Tj0 -12  TD -0.1119  Tc 0.2619  Tw (comfortable using ) Tj75.6 0  TD /F2 9  Tf0  Tc 0  Tw (std::vector) Tj61.8 0  TD /F4 10.2  Tf0.0904  Tc 0.3596  Tw (and ) Tj17.4 0  TD /F2 9  Tf0  Tc 0  Tw (std::list) Tj48.6 0  TD /F4 10.2  Tf-0.0734  Tc 0.5234  Tw (, and know the) Tj-203.4 -12  TD -0.1364  Tc 0.7864  Tw (difference between a ) Tj88.2 0  TD /F2 9  Tf0  Tc 0  Tw (std::map) Tj46.2 0  TD /F4 10.2  Tf-0.1644  Tc 0.6144  Tw (and a ) Tj25.8 0  TD /F2 9  Tf0  Tc 0  Tw (std::set) Tj43.2 0  TD /F4 10.2  Tf-0.1289  Tc 1.1789  Tw (. However, the) Tj-203.4 -12  TD -0.0756  Tc 1.3056  Tw (use and extension of the C++ standard library\222s streams is still) Tj0 -12  TD -0.08  Tc 0.23  Tw (considered difficult. ) Tj11.4 -12  TD -0.0987  Tc 0.0872  Tw (In this article I am going to look at writing a logging stream. A) Tj-11.4 -12  TD -0.0619  Tc -0.4699  Tw (logging stream inserts the current date and time at the beginning of) Tj0 -12  TD -0.0949  Tc 0.1449  Tw (a buffer full of characters when it is flushed. The buffer is flushed) TjT* -0.073  Tc -0.197  Tw (to another stream which can modify the characters further or write) TjT* 0.279  Tc 0.971  Tw (them, for example, to the console \() Tj156.6 0  TD /F2 9  Tf0.4  Tc 0  Tw (std::cout) Tj51.6 0  TD /F4 10.2  Tf0.3446  Tc 0.8554  Tw (\) or to a file) Tj-208.2 -12  TD 0.2034  Tc 0  Tw (\() Tj3 0  TD /F2 9  Tf0  Tc (std::ofstream) Tj70.2 0  TD /F4 10.2  Tf0.3267  Tc (\).) Tj-61.8 -12  TD -0.0819  Tc -0.0014  Tw (In section 13.13.3 of The C++ Standard Library [Josuttis] Nico) Tj-11.4 -12  TD -0.0899  Tc -0.2101  Tw (Josuttis discusses how to write a custom stream in a fair amount of) Tj0 -12  TD -0.0617  Tc -0.2883  Tw (detail. Even though the book is widespread among developers, the) TjT* -0.0936  Tc -0.0564  Tw (section on streams does not appear to be widely read. Therefore in) TjT* -0.0044  Tc 0.4544  Tw (this article I am going to follow reasonably closely the line that) TjT* -0.0805  Tc -0.124  Tw (Josuttis takes, but will cut out a lot of the unnecessary background) TjT* -0.092  Tc -0.258  Tw (which may scare the people who, wrongly, feel it must be read and) TjT* -0.1739  Tc -0.3961  Tw (understood before embarking on a custom stream. I will also discuss) TjT* 0.2158  Tc 0.2342  Tw (and resolve a potential initialisation problem not explored by) TjT* -0.0178  Tc 0  Tw (Josuttis.) Tj0 -18  TD /F0 12  Tf-0.016  Tc -0.224  Tw (Stream Buffer) TjT* /F4 10.2  Tf-0.1074  Tc 0.2574  Tw (The heart of a stream is its buffer. Buffer is a misnomer as it does) Tj0 -12  TD 0.0467  Tc 1.1417  Tw (not have to buffer at all and can, if it so chooses, process the) TjT* -0.1132  Tc -0.0368  Tw (characters immediately. ) Tj286.2 348  TD -0.0881  Tc -0.0619  Tw (Along with buffering, if required, the stream buffer does all the) Tj-11.4 -12  TD 0.1482  Tc 0.3018  Tw (reading and writing of characters for the stream. The standard) Tj0 -12  TD 0.1652  Tc 0.2848  Tw (library provides ) Tj70.8 0  TD /F2 9  Tf0.27  Tc 0  Tw (std::basic_streambuf) Tj115.8 0  TD /F4 10.2  Tf0.1685  Tc 0.2815  Tw (as a base class for) Tj-186.6 -12  TD -0.0845  Tc -0.5564  Tw (stream buffers. Listing 1 shows a stream buffer that converts all the) Tj0 -12  TD 0.2704  Tc 0.3596  Tw (characters streamed to it to upper case and writes them with) TjT* /F2 9  Tf0  Tc 0  Tw (putchar) Tj37.8 0  TD /F4 10.2  Tf0.1644  Tc (:) Tj-23.4 -24  TD 0.2 0.2 0.2 rg /F9 7.8  Tf0.12  Tc (#include <streambuf>) Tj0 -12  TD (#include <locale>) TjT* (#include <cstdio>) Tj0 -24  TD (template<class charT,) Tj43.2 -12  TD 0.1033  Tc 0.0167  Tw (class traits = std::char_traits<charT> >) Tj-43.2 -12  TD 0.12  Tc 0  Tw (class outbuf) Tj24 -12  TD 0.1057  Tc 0.0143  Tw (: public std::basic_streambuf<charT, traits> {) Tj-24 -12  TD 0.12  Tc 0  Tw (private:) Tj9.6 -12  TD 0.0914  Tc 0.0286  Tw (typedef typename std::basic_streambuf<charT,) Tj105.6 -12  TD 0.0969  Tc 0.0231  Tw (traits>::int_type int_type;) Tj-105.6 -24  TD 0 0 0 rg /F2 7.8  Tf0.12  Tc 0  Tw (// Central output function.) Tj0 -12  TD (// - print characters in uppercase.) TjT* 0.2 0.2 0.2 rg /F9 7.8  Tf(virtual int_type overflow\(int_type c\) {) Tj9.6 -24  TD 0 0 0 rg /F2 7.8  Tf(// Check character is not EOF) Tj0 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf0.1057  Tc 0.0143  Tw (if\(!traits::eq_int_type\(c, traits::eof\(\)\)\) {) Tj9.6 -24  TD 0 0 0 rg /F2 7.8  Tf0.12  Tc 0  Tw (// Convert character to uppercase.) Tj0 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(c = std::toupper<charT>\(c,) Tj86.4 -12  TD 0.0978  Tc (std::basic_streambuf<charT,) Tj38.4 -12  TD 0.0884  Tc (traits>::getloc\(\)\);) Tj0.6 w 1 J 1 j 0 0 0 RG ET29.4 404.4 m 567.6 404.4 l S 1 1 1 rg 29.4 371.4 263.4 11.4 re f29.4 371.4 263.4 11.4 re fBT29.4 377.4  TD0 0 0 rg /F2 7.8  Tf0.12  Tc ([continued from previous page]) TjETendstreamendobj116 0 obj9587endobj114 0 obj<</Type /Page/Parent 97 0 R/Resources <</Font 117 0 R/ProcSet 2 0 R>>/Contents 115 0 R>>endobj117 0 obj<</F0 6 0 R/F1 8 0 R/F2 10 0 R/F4 16 0 R/F5 21 0 R/F7 28 0 R/F9 36 0 R>>endobj119 0 obj<</Length 120 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (26) Tj0 768.6  TD /F0 12  Tf-0.0055  Tc 0.2155  Tw (Overload issue 66 april 2005) Tj43.2 -40.8  TD /F2 7.8  Tf0.12  Tc 0  Tw (// Write character to standard output) Tj0 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(if\(putchar\(c\) == EOF\) {) Tj9.6 -12  TD (return traits::eof\(\);) Tj-9.6 -12  TD (}) Tj-9.6 -12  TD (}) Tj0 -24  TD (return traits::not_eof\(c\);) Tj-9.6 -12  TD (}) Tj-9.6 -12  TD (};) Tj46.8 -12  TD 0 0 0 rg /F10 10.2  Tf-0.0805  Tc -0.0695  Tw (Listing 1: Example stream buffer) Tj-61.2 -24  TD /F4 10.2  Tf-0.0519  Tc 0.9819  Tw (The overflow member function of ) Tj145.2 0  TD /F2 9  Tf0  Tc 0  Tw (std::basic_streambuf) Tj111.6 0  TD /F4 10.2  Tf0.1983  Tc (is) Tj-256.8 -12  TD 0.4179  Tc 0.6921  Tw (called for each character that is sent to the stream buffer.) Tj0 -12  TD -0.0921  Tc 0.9421  Tw (Overriding it allows the behaviour to be modified. The example) TjT* -0.1025  Tc 0.4925  Tw (in Listing 1 above performs the following for each character sent) TjT* -0.0721  Tc -0.0779  Tw (to overflow:) Tj0 -24  TD 0.375  Tc 0  Tw (1.) Tj11.4 0  TD -0.0844  Tc -0.2502  Tw (The character is tested to make sure it is not an indication of the) Tj0 -12  TD -0.0722  Tc -0.0778  Tw (end of a file or an error. ) Tj-11.4 -12  TD 0.375  Tc 0  Tw (2.) Tj11.4 0  TD -0.0949  Tc 0.0649  Tw (The character is converted to uppercase.) Tj-11.4 -12  TD 0.375  Tc 0  Tw (3.) Tj11.4 0  TD -0.0825  Tc -0.2856  Tw (The character is written to standard out. If an error occurs while) Tj0 -12  TD 0.2704  Tc 4.9796  Tw (writing the character this is indicated by returning) TjT* /F2 9  Tf0  Tc 0  Tw (traits::eof\(\)) Tj70.2 0  TD /F4 10.2  Tf-0.15  Tc (.) Tj-81.6 -12  TD 0.375  Tc (4.) Tj11.4 0  TD -0.0542  Tc -0.4558  Tw (An indication of whether or not the character represents the end) Tj0 -12  TD -0.0854  Tc 0.0211  Tw (of a file or an error is returned.) Tj-11.4 -24  TD 0.3448  Tc 0.8852  Tw (Traits are used throughout Listing 1 to ensure that EOF is) Tj0 -12  TD 0.0349  Tc 1.1485  Tw (detected and handled correctly. Streams can be used with any) TjT* -0.0577  Tc 0.8677  Tw (character type that has a corresponding set of character traits. A) TjT* -0.0883  Tc 0.5383  Tw (detailed knowledge of character traits is not required when using) TjT* -0.0838  Tc 0.5338  Tw (the built in character types ) Tj112.2 0  TD /F2 9  Tf0  Tc 0  Tw (char) Tj24.6 0  TD /F4 10.2  Tf-0.1096  Tc -0.0404  Tw (and ) Tj17.4 0  TD /F2 9  Tf0  Tc 0  Tw (wchar_t) Tj41.4 0  TD /F4 10.2  Tf-0.1155  Tc 0.7655  Tw (as their traits are) Tj-195.6 -12  TD -0.1075  Tc 0.5575  Tw (already part of the standard library. Character traits are discussed) Tj0 -12  TD -0.068  Tc -0.082  Tw (in 14.1.2 of Josuttis. ) Tj0 -18  TD /F0 12  Tf0.051  Tc -0.291  Tw (Output Stream) TjT* /F4 10.2  Tf-0.0869  Tc 0.9654  Tw (The easiest way to use a stream buffer is to pass it to an output) Tj0 -12  TD -0.1251  Tc 0.1751  Tw (stream as shown in Listing 2 below:) Tj14.4 -24  TD 0.2 0.2 0.2 rg /F9 7.8  Tf0.12  Tc 0  Tw (#include <streambuf>) Tj0 -12  TD (#include <ostream>) TjT* (#include <locale>) TjT* (#include <cstdio>) Tj0 -24  TD (template<class charT,) Tj43.2 -12  TD (class traits = std::char_traits<charT> >) Tj-43.2 -12  TD (class outbuf : public std::basic_streambuf<charT,) Tj201.6 -12  TD (traits> {) Tj-201.6 -12  TD (private:) Tj9.6 -12  TD (typedef typename std::basic_streambuf<charT,) Tj105.6 -12  TD (traits>::int_type int_type;) Tj-105.6 -24  TD 0 0 0 rg /F2 7.8  Tf(// Central output function.) Tj0 -12  TD (// - print characters in uppercase.) TjT* 0.2 0.2 0.2 rg /F9 7.8  Tf(virtual int_type overflow\(int_type c\) {) Tj9.6 -12  TD 0 0 0 rg /F2 7.8  Tf(// Check character is not EOF) Tj0 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(if\(!traits::eq_int_type\(c, traits::eof\(\)\)\) {) Tj9.6 -12  TD 0 0 0 rg /F2 7.8  Tf(// Convert character to uppercase.) Tj0 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(c = std::toupper<charT>\(c,) Tj86.4 -12  TD (std::basic_streambuf<charT,) Tj38.4 -12  TD (traits>::getloc\(\)\);) Tj150 708  TD 0 0 0 rg /F2 7.8  Tf(// Write character to standard output) Tj0 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(if\(putchar\(c\) == EOF\) {) Tj9.6 -12  TD (return traits::eof\(\);) Tj-9.6 -12  TD (}) Tj-9.6 -12  TD (}) Tj0 -24  TD (return traits::not_eof\(c\);) Tj-9.6 -12  TD (}) Tj-9.6 -12  TD (};) Tj0 -24  TD (int main\(\) {) Tj9.6 -12  TD (outbuf<char> ob;) Tj0 -12  TD (std::basic_ostream<char> out\(&ob\);) TjT* (out << "31 hexadecimal: ") Tj19.2 -12  TD (<< std::hex) Tj0 -12  TD (<< 31 << std::endl;) Tj-19.2 -12  TD (return 0;) Tj-9.6 -12  TD (}) Tj2.4 -12  TD 0 0 0 rg /F10 10.2  Tf-0.0953  Tc 0.0119  Tw (Listing 2: Passing a stream buffer to an output stream) Tj-16.2 -24  TD /F4 10.2  Tf-0.1212  Tc 0.1212  Tw (The output from the example in Listing 2 is:) Tj13.8 -24  TD /F2 9  Tf0  Tc 0  Tw (31 HEXADECIMAL: 1F) Tj-13.8 -24  TD /F4 10.2  Tf-0.1095  Tc 0.9795  Tw (The example in Listing 2 demonstrates a working stream, but is) Tj0 -12  TD 0.305  Tc 0.805  Tw (not an ideal solution as the stream buffer must be declared) TjT* -0.1093  Tc 0.5593  Tw (separately from the stream itself. A common solution is to create) TjT* -0.1293  Tc 0.3793  Tw (a subclass of ) Tj54.6 0  TD /F2 9  Tf0  Tc 0  Tw (std::basic_ostream) Tj100.2 0  TD /F4 10.2  Tf-0.0971  Tc 0.4271  Tw (with the stream buffer as a) Tj-154.8 -12  TD 0.195  Tc 0.855  Tw (member which can be passed to the ) Tj160.8 0  TD /F2 9  Tf0.3333  Tc 0  Tw (std::basic_ostream) Tj-160.8 -12  TD /F4 10.2  Tf-0.1378  Tc 0.2278  Tw (constructor as shown in Listing 3:) Tj13.8 -24  TD 0.2 0.2 0.2 rg /F9 7.8  Tf0.12  Tc 0  Tw (template<class charT,) Tj43.2 -12  TD (class traits = std::char_traits<charT> >) Tj-43.2 -12  TD (class ostream) Tj33.6 -12  TD (: public std::basic_ostream<charT, traits> {) Tj-33.6 -12  TD (private:) Tj9.6 -12  TD (outbuf<charT, traits> buf_;) Tj-9.6 -24  TD (public:) Tj9.6 -12  TD (ostream\(\) : std::basic_ostream<charT,) Tj115.2 -12  TD (traits>\(&buf_\), buf_\(\) {}) Tj-124.8 -12  TD (};) Tj22.2 -12  TD 0 0 0 rg /F10 10.2  Tf-0.1167  Tc 0.4167  Tw (Listing 3: Subclass of ) Tj93.6 0  TD 0.2 0.2 0.2 rg /F9 9  Tf0  Tc 0  Tw (std::basic_ostream) Tj-129.6 -24  TD 0 0 0 rg /F4 10.2  Tf0.0964  Tc 1.2202  Tw (Having the stream buffer as a member introduces a potential) Tj0 -12  TD -0.0877  Tc 1.4377  Tw (initialisation problem. The solution to the problem introduces a) TjT* 0.2275  Tc 0.9725  Tw (further problem hidden deep within the C++ standard [C++) TjT* -0.0895  Tc -0.0605  Tw (Standard]. However, this second problem is also easily fixed. ) Tj0 -18  TD /F0 10.8  Tf0.1002  Tc 0.1038  Tw (Problem 1) TjT* /F4 10.2  Tf-0.0597  Tc 0.5954  Tw (If the stream buffer is dereferenced in ) Tj159.6 0  TD /F2 9  Tf0  Tc 0  Tw (std::basic_ostream) Tj97.2 0  TD /F4 10.2  Tf-0.9822  Tc (\222s) Tj-256.8 -12  TD 0.0929  Tc 0.3571  Tw (constructor or in its destructor, undefined behaviour can occur) Tj0 -12  TD 0.169  Tc 1.1537  Tw (as the stream buffer will not have been initialised.  At least) TjT* 0.87  Tc 3.3514  Tw (one well known and widely used standard library) TjT* 0.1328  Tc 0.9172  Tw (implementation does nothing to avoid this and does not need) TjT* 0.0969  Tc 0.8674  Tw (to.  Library implementers know their stream implementations) TjT* 0.6375  Tc 0.6792  Tw (and whether or not protection is needed. We, as stream) TjT* 0.4562  Tc 0.8509  Tw (extenders writing for potentially any number of different) TjT* 0.1065  Tc 1.0102  Tw (stream implementations, do not. There is no guarantee in the) TjT* 0.0389  Tc 0.3111  Tw (C++ standard to fall back on either.) TjETendstreamendobj120 0 obj7809endobj118 0 obj<</Type /Page/Parent 97 0 R/Resources <</Font <</F0 6 0 R /F2 10 0 R /F4 16 0 R /F9 36 0 R /F10 42 0 R >>/ProcSet 2 0 R>>/Contents 119 0 R>>endobj123 0 obj<</Length 124 0 R>>stream
BT550.2 42  TD0 0 0 rg /F0 10.8  Tf0.195  Tc 0  Tw (27) Tj-194.4 768.6  TD /F0 12  Tf-0.0055  Tc -0.0845  Tw (Overload issue 66 april 2005) Tj-315 -40.8  TD /F4 10.2  Tf0.2437  Tc 0.2063  Tw (Josuttis places the buffer before ) Tj141.6 0  TD /F2 9  Tf0.3667  Tc 0  Tw (std::basic_ostream) Tj103.2 0  TD /F4 10.2  Tf0.2178  Tc (\222s) Tj-256.2 -12  TD -0.0986  Tc 0.482  Tw (constructor in the initialisation list, which makes no difference at) Tj0 -12  TD -0.1349  Tc 0.3599  Tw (all as stated in 12.6.2/5 of the C++ standard:) Tj0 -24  TD /F6 10.2  Tf-0.0715  Tc 0.0235  Tw (Initialization shall proceed in the following order:) Tj0 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F6 10.2  Tf0.2359  Tc 0.3161  Tw (First, and only for the constructor of the most derived class as) Tj0 -12  TD -0.0996  Tc 0.2316  Tw (described below, virtual base classes shall be initialized in the order) TjT* 0.077  Tc 0.3416  Tw (they appear on a depth-first left-to-right traversal of the directed) TjT* 0.0081  Tc 0.4239  Tw (acyclic graph of base classes, where \223left-to-right\224 is the order of) TjT* 0.1893  Tc 0.3027  Tw (appearance of the base class names in the derived class base-) TjT* -0.1128  Tc 0  Tw (specifier-list.) Tj-11.4 -10.2  TD /F11 6  Tf0.054  Tc (l) Tj11.4 -1.8  TD /F6 10.2  Tf-0.0453  Tc 0.2372  Tw (Then, direct base classes shall be initialized in declaration order as) Tj0 -12  TD -0.0934  Tc 0.5854  Tw (they appear in the base-specifier-list \(regardless of the order of the) TjT* -0.0844  Tc 0  Tw (mem-initializers\).) Tj-11.4 -10.2  TD /F11 6  Tf0.054  Tc (l) Tj11.4 -1.8  TD /F6 10.2  Tf-0.0542  Tc 0.6062  Tw (Then, nonstatic data members shall be initialized in the order they) Tj0 -12  TD -0.0536  Tc -0.2671  Tw (were declared in the class definition \(again regardless of the order of) TjT* -0.0958  Tc 0.0478  Tw (the mem-initializers\).) Tj-11.4 -10.2  TD /F11 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F6 10.2  Tf-0.1236  Tc 0.0756  Tw (Finally, the body of the constructor is executed.) Tj-11.4 -12  TD 0.205  Tc 0.947  Tw (Note: the declaration order is mandated to ensure that base and) Tj0 -12  TD -0.0807  Tc 0.0327  Tw (member subobjects are destroyed in the reverse order of initialization. ) Tj0 -24  TD /F4 10.2  Tf-0.0797  Tc 0.1797  Tw (The fact that the stream buffer is not initialised before it is passed) Tj0 -12  TD 0.5322  Tc 0.5178  Tw (to ) Tj12.6 0  TD /F2 9  Tf0.6667  Tc 0  Tw (std::basic_ostream) Tj109.2 0  TD /F4 10.2  Tf0.5025  Tc 0.9075  Tw (\222s constructor may not cause a) Tj-121.8 -12  TD 0.0315  Tc 1.1385  Tw (problem with your compiler and library, but why risk it when) Tj0 -12  TD -0.093  Tc 0.183  Tw (there is a simple and straightforward solution? On the other hand,) TjT* -0.0627  Tc 1.2218  Tw (it may fail in a screaming fit immediately.  Moving the stream) TjT* 0.5899  Tc 0.5268  Tw (buffer to a private base class which is initialised ) Tj234.6 0  TD /F5 10.2  Tf0.5565  Tc 0  Tw (before) Tj-234.6 -12  TD /F2 9  Tf0.8333  Tc (std::basic_ostream) Tj115.8 0  TD /F4 10.2  Tf0.6423  Tc 1.0077  Tw (solves the problem nicely. The) Tj-115.8 -12  TD 0.3475  Tc 0.7025  Tw (initialisation order of base classes ) Tj157.8 0  TD /F5 10.2  Tf0.1983  Tc 0  Tw (is) Tj10.8 0  TD /F4 10.2  Tf0.4289  Tc 0.6211  Tw (specified as stated in) Tj-168.6 -12  TD -0.0814  Tc 1.1314  Tw (12.6.2/5 above. Listing 4 shows the base class which is used to) Tj0 -12  TD 0.0964  Tc 1.1718  Tw (initialise the stream buffer and how to use it with the output) TjT* -0.1347  Tc -0.0153  Tw (stream. ) Tj13.8 -24  TD 0.2 0.2 0.2 rg /F9 7.8  Tf0.12  Tc 0  Tw (template<class charT,) Tj43.2 -12  TD (class traits = std::char_traits<charT> >) Tj-43.2 -12  TD (struct outbuf_init {) Tj0 -24  TD (private:) Tj9.6 -12  TD (outbuf<charT, traits> buf_;) Tj-9.6 -24  TD (public:) Tj9.6 -12  TD (outbuf<charT, traits>* buf\(\) {) Tj9.6 -12  TD (return &buf_;) Tj-9.6 -12  TD (}) Tj-9.6 -12  TD (};) Tj0 -24  TD (template<class charT,) Tj43.2 -12  TD (class traits = std::char_traits<charT> >) Tj-43.2 -12  TD (class ostream : private outbuf_init<charT, traits>, ) Tj43.2 -12  TD (public std::basic_ostream<charT, traits> {) Tj-43.2 -24  TD (private:) Tj9.6 -12  TD (typedef outbuf_init<charT, traits> outbuf_init;) Tj-9.6 -24  TD (public:) Tj19.2 -12  TD (ostream\(\) : outbuf_init\(\),) Tj14.4 -12  TD (std::basic_ostream<charT,) Tj67.2 -12  TD (traits>\(outbuf_init::buf\(\)\) {}) Tj-100.8 -12  TD (};) Tj34.8 -12  TD 0 0 0 rg /F10 10.2  Tf-0.1102  Tc 0.0802  Tw (Listing 4: Initialising the stream buffer) Tj226.2 715.2  TD /F0 10.8  Tf0.1242  Tc 0.0798  Tw (Problem 2) Tj0 -19.2  TD /F2 9  Tf0  Tc 0  Tw (basic_ios) Tj51.6 0  TD /F4 10.2  Tf-0.0769  Tc 0.3269  Tw (is a virtual base class of ) Tj100.2 0  TD /F2 9  Tf0  Tc 0  Tw (basic_ostream) Tj70.2 0  TD /F4 10.2  Tf-0.1029  Tc 0.2529  Tw (. The C++) Tj-222 -12  TD -0.0863  Tc 0.1363  Tw (standard \(27.4.4/2\) describes its constructor as follows:) Tj16.8 -24  TD /F14 10.2  Tf0.1018  Tc 0  Tw (Effects:) Tj33.6 0  TD /F6 10.2  Tf-0.0138  Tc 0.3258  Tw (Constructs an object of class ) Tj112.8 0  TD /F2 9  Tf0.0667  Tc 0  Tw (basic_ios) Tj52.2 0  TD /F6 10.2  Tf-0.014  Tc (\(27.4.2.7\)) Tj-210 -12  TD 0.2621  Tc 0.6649  Tw (leaving its member objects uninitialized. The object must be) Tj0 -12  TD 0.0341  Tc 0.3679  Tw (initialized by calling its ) Tj90 0  TD /F2 9  Tf0.15  Tc 0  Tw (init) Tj25.2 0  TD /F6 10.2  Tf0.0185  Tc 0.4135  Tw (member function. If it is destroyed) Tj-115.2 -12  TD -0.0684  Tc 0.0204  Tw (before it has been initialized the behavior is undefined.) Tj-5.4 -24  TD /F2 9  Tf0.28  Tc 0  Tw (basic_ios::init) Tj88.2 0  TD /F4 10.2  Tf0.1522  Tc 0.8978  Tw (is called from within ) Tj94.8 0  TD /F2 9  Tf0.2308  Tc 0  Tw (basic_ostream) Tj73.8 0  TD /F4 10.2  Tf-0.3822  Tc (\222s) Tj-256.8 -12  TD -0.1096  Tc 0.1096  Tw (constructor. This is where things get complicated. As ) Tj214.8 0  TD /F2 9  Tf0  Tc 0  Tw (basic_ios) Tj-214.8 -12  TD /F4 10.2  Tf0.1517  Tc 0.7983  Tw (is a virtual base class of ) Tj109.2 0  TD /F2 9  Tf0.1846  Tc 0  Tw (basic_ostream) Tj72.6 0  TD /F4 10.2  Tf0.1225  Tc 1.1275  Tw (, the objects which) Tj-181.8 -12  TD -0.0652  Tc 0.1152  Tw (make up an ) Tj49.8 0  TD /F2 9  Tf0  Tc 0  Tw (ostream) Tj40.8 0  TD /F4 10.2  Tf-0.0824  Tc 0.4324  Tw (object are initialised in the following order) Tj-90.6 -12  TD -0.1064  Tc -0.0436  Tw (\(see 12.6.2/5\):) Tj14.4 -24  TD /F2 9  Tf0  Tc 0  Tw (...) Tj0 -12  TD (basic_ios) TjT* (outbuf) TjT* (outbuf_init) TjT* (basic_ostream) TjT* (ostream) Tj-14.4 -24  TD /F4 10.2  Tf-0.0703  Tc 0.9703  Tw (Therefore the constructors of ) Tj123.6 0  TD /F2 9  Tf0  Tc 0  Tw (basic_ios) Tj52.2 0  TD /F4 10.2  Tf-0.1096  Tc -0.0404  Tw (and ) Tj18 0  TD /F2 9  Tf0  Tc 0  Tw (outbuf) Tj36 0  TD /F4 10.2  Tf0.0015  Tc 1.0485  Tw (are both) Tj-229.8 -12  TD -0.0307  Tc 0.9607  Tw (called before the constructor of ) Tj134.4 0  TD /F2 9  Tf0.0462  Tc 0  Tw (basic_ostream) Tj74.4 0  TD /F4 10.2  Tf0.005  Tc 1.045  Tw (and therefore) Tj-208.8 -12  TD 0.2582  Tc 0.1918  Tw (before ) Tj31.2 0  TD /F2 9  Tf0.44  Tc 0  Tw (basic_ios::init) Tj91.2 0  TD /F4 10.2  Tf0.2776  Tc 0.8724  Tw (is called. This means that if the) Tj-122.4 -12  TD /F2 9  Tf0.9  Tc 0  Tw (outbuf) Tj40.8 0  TD /F4 10.2  Tf0.6796  Tc 0.3704  Tw (constructor throws an exception, ) Tj159.6 0  TD /F2 9  Tf0.8667  Tc 0  Tw (basic_ios) Tj55.8 0  TD /F4 10.2  Tf0.2178  Tc (\222s) Tj-256.2 -12  TD -0.0749  Tc 0.5249  Tw (destructor will be called before ) Tj130.8 0  TD /F2 9  Tf0  Tc 0  Tw (basic_ios::init) Tj81 0  TD /F4 10.2  Tf-0.0726  Tc 0.8226  Tw (; resulting in) Tj-211.8 -12  TD -0.0744  Tc -0.0756  Tw (the undefined behaviour described in 27.4.4/2.) Tj11.4 -12  TD -0.0754  Tc 0.2854  Tw (The answer to this problem is contained within 12.6.2/5 and is) Tj-11.4 -12  TD -0.1654  Tc -0.1846  Tw (very simple. Making ) Tj82.8 0  TD /F2 9  Tf-0.0857  Tc 0  Tw (ostream) Tj39.6 0  TD /F4 10.2  Tf-0.2046  Tc 0.0546  Tw (inherit ) Tj27.6 0  TD /F5 10.2  Tf-0.1075  Tc 0  Tw (virtually) Tj33 0  TD /F4 10.2  Tf-0.1747  Tc -0.5753  Tw (, as well as privately,) Tj-183 -12  TD -0.0072  Tc -0.1428  Tw (from ) Tj22.8 0  TD /F2 9  Tf0.1091  Tc 0  Tw (outbuf_init) Tj63.6 0  TD /F4 10.2  Tf0.0262  Tc 0.4238  Tw (causes it to be constructed before anything) Tj-86.4 -12  TD -0.0193  Tc 0  Tw (else:) Tj14.4 -24  TD 0.2 0.2 0.2 rg /F9 7.8  Tf0.12  Tc (template<class charT,) Tj43.2 -12  TD 0.1033  Tc 0.0167  Tw (class traits = std::char_traits<charT> >) Tj-43.2 -12  TD 0.12  Tc 0  Tw (class ostream) Tj28.8 -12  TD 0.1054  Tc 0.0146  Tw (: private virtual outbuf_init<charT, traits>, ) Tj9.6 -12  TD 0.1046  Tc 0.0154  Tw (public std::basic_ostream<charT, traits> {) Tj-38.4 -24  TD 0.12  Tc 0  Tw (private:) Tj9.6 -12  TD 0.1064  Tc 0.0136  Tw (typedef outbuf_init<charT, traits> outbuf_init;) Tj-9.6 -24  TD 0.12  Tc 0  Tw (public:) Tj9.6 -12  TD (ostream\(\)) Tj19.2 -12  TD (: outbuf_init\(\),) Tj9 -12  TD (std::basic_ostream<charT,) Tj58.2 -12  TD 0.0993  Tc 0.0207  Tw (traits>\(outbuf_init::buf\(\)\) {}) Tj-96 -12  TD 0.12  Tc 0  Tw (};) Tj-14.4 -24  TD 0 0 0 rg /F4 10.2  Tf-0.1024  Tc 0.1024  Tw (The initialisation order then becomes:) Tj14.4 -24  TD /F2 9  Tf0  Tc 0  Tw (outbuf) Tj0 -12  TD (outbuf_init) TjT* (...) TjT* (basic_ios) TjT* (basic_ostream) TjT* (ostream) Tj-14.4 -24  TD /F4 10.2  Tf0.3315  Tc 0.7185  Tw (Now, if ) Tj37.8 0  TD /F2 9  Tf0.54  Tc 0  Tw (output_buf) Tj63 0  TD /F4 10.2  Tf0.4285  Tc 0.6215  Tw (does throw an exception there is no) Tj-100.8 -12  TD -0.1279  Tc 0.2779  Tw (undefined behaviour as the ) Tj110.4 0  TD /F2 9  Tf0  Tc 0  Tw (basic_ios) Tj51 0  TD /F4 10.2  Tf-0.0739  Tc -0.0761  Tw (has not yet been created.) TjETendstreamendobj124 0 obj9982endobj121 0 obj<</Type /Page/Parent 122 0 R/Resources <</Font 127 0 R/ProcSet 2 0 R>>/Contents 123 0 R>>endobj127 0 obj<</F0 6 0 R/F2 10 0 R/F4 16 0 R/F5 21 0 R/F6 23 0 R/F9 36 0 R/F10 42 0 R/F11 56 0 R/F14 125 0 R>>endobj129 0 obj<</Length 130 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (28) Tj0 768.6  TD /F0 12  Tf-0.0055  Tc 0.2155  Tw (Overload issue 66 april 2005) Tj11.4 -40.8  TD /F2 9  Tf0  Tc 0  Tw (ostream) Tj40.8 0  TD /F4 10.2  Tf-0.1059  Tc 0.2559  Tw (can be made easier to use by introducing a couple of) Tj-52.2 -12  TD -0.0814  Tc 0.0514  Tw (simple typedefs for common character types:) Tj14.4 -24  TD 0.2 0.2 0.2 rg /F9 7.8  Tf0.12  Tc 0  Tw (typedef ostream<char> costream;) Tj0 -12  TD (typedef ostream<wchar_t> wostream;) Tj0 -24  TD (int main\(\) {) Tj9.6 -12  TD (costream out;) Tj0 -12  TD (out << "31 HEXADECIMAL: " << std::hex) Tj19.2 -12  TD (<< 31 << std::endl;) Tj-19.2 -12  TD (return 0;) Tj-9.6 -12  TD (}) Tj36.6 -12  TD 0 0 0 rg /F10 10.2  Tf-0.1378  Tc 0.2278  Tw (Listing 5: Typedefs for using ) Tj124.2 0  TD 0.2 0.2 0.2 rg /F9 9  Tf0  Tc 0  Tw (ostream) Tj-175.2 -24  TD 0 0 0 rg /F4 10.2  Tf0.1431  Tc 1.3354  Tw (That completes the implementation for the simplest possible) Tj0 -12  TD -0.1239  Tc 0.2739  Tw (custom stream. ) Tj0 -18  TD /F0 12  Tf-0.0234  Tc 0.0834  Tw (Logging Stream Buffer) TjT* /F4 10.2  Tf0.4569  Tc 0.8598  Tw (The previous example of a stream buffer was very basic,) Tj0 -12  TD 0.0229  Tc 1.2842  Tw (potentially inefficient and didn\222t actually buffer the characters) TjT* -0.1203  Tc 1.1703  Tw (streamed to it. The logging stream mentioned at the start of this) TjT* -0.0885  Tc 0.8985  Tw (article requires the characters to be buffered. When the buffer is) TjT* -0.0819  Tc 0.5819  Tw (flushed the time and date are prepended before it is passed on to) TjT* -0.1123  Tc 0.2623  Tw (the next stream.) Tj11.4 -12  TD 0.2238  Tc 1.0262  Tw (Josuttis also has an example of a buffered stream buffer.) Tj-11.4 -12  TD 0.1476  Tc 0.3024  Tw (However, his example uses a fixed array for a buffer that gets) Tj0 -12  TD -0.0619  Tc 0.5119  Tw (flushed when it is full. The logging stream should only flush the) TjT* 0.0607  Tc 0.3893  Tw (buffer when instructed to do so, with a ) Tj165.6 0  TD /F2 9  Tf0.1333  Tc 0  Tw (std::endl) Tj52.8 0  TD /F4 10.2  Tf0.1011  Tc 0.3489  Tw (or a call to) Tj-218.4 -12  TD /F2 9  Tf0  Tc 0  Tw (flush) Tj27 0  TD /F4 10.2  Tf-0.0736  Tc -0.0219  Tw (. To accomplish this, the fixed array can be replaced with a) Tj-27 -12  TD /F2 9  Tf0  Tc 0  Tw (std::vector) Tj59.4 0  TD /F4 10.2  Tf-0.15  Tc (. ) Tj-48 -12  TD 0.0726  Tc 0.3774  Tw (As already mentioned the logging stream simply buffers the) Tj-11.4 -12  TD 0.0372  Tc 0.4128  Tw (characters streamed to it and passes them on to another stream,) Tj0 -12  TD -0.0733  Tc 0.5233  Tw (preceded by a time and date, when flushed. Therefore the stream) TjT* -0.1072  Tc 0.1372  Tw (buffer must contain some form of reference to the other stream.) Tj11.4 -12  TD -0.0607  Tc 0.244  Tw (Listing 6 shows a basic implementation for the logging stream) Tj-11.4 -12  TD -0.0041  Tc -0.4459  Tw (buffer. A ) Tj40.2 0  TD /F2 9  Tf0.2182  Tc 0  Tw (std::vector) Tj65.4 0  TD /F4 10.2  Tf0.1112  Tc 0.3388  Tw (based buffer has been introduced and) Tj-105.6 -12  TD -0.1027  Tc 0.5527  Tw (overflow modified to check for ) Tj129.6 0  TD /F2 9  Tf0  Tc 0  Tw (EOF) Tj19.2 0  TD /F4 10.2  Tf-0.1171  Tc 0.5671  Tw (before inserting its character) Tj-148.8 -12  TD -0.086  Tc 0.136  Tw (into the buffer. ) Tj14.4 -24  TD 0.2 0.2 0.2 rg /F9 7.8  Tf0.12  Tc 0  Tw (#include <streambuf>) Tj0 -12  TD (#include <vector>) Tj0 -24  TD (template<class charT,) Tj43.2 -12  TD (class traits = std::char_traits<charT> >) Tj-43.2 -12  TD (class logoutbuf) Tj24 -12  TD (: public std::basic_streambuf<charT, traits> {) Tj-24 -12  TD (private:) Tj9.6 -12  TD (typedef typename std::basic_streambuf<charT,) Tj105.6 -12  TD (traits>::int_type int_type;) Tj-105.6 -12  TD (typedef std::vector<charT> buffer_type;) Tj0 -12  TD (buffer_type buffer_;) Tj0 -24  TD (virtual int_type overflow\(int_type c\) {) Tj9.6 -12  TD (if\(!traits::eq_int_type\(c, traits::eof\(\)\)\) {) Tj9.6 -12  TD (buffer_.push_back\(c\);) Tj-9.6 -12  TD (}) Tj0 -12  TD (return traits::not_eof\(c\);) Tj-9.6 -12  TD (}) Tj-9.6 -12  TD (};) Tj-3 -12  TD 0 0 0 rg /F10 10.2  Tf-0.093  Tc 0.1144  Tw (Listing 6: Basic implementation of logging stream buffer) Tj264 708  TD /F4 10.2  Tf0.5903  Tc 0.8797  Tw (As it stands the stream buffer in Listing 6 only buffers) Tj0 -12  TD 0.5142  Tc 0.7358  Tw (characters. It never flushes them. A pointer to an output) TjT* 0.7049  Tc 0.7451  Tw (stream buffer, that the characters can be flushed to, is) TjT* 0.3934  Tc 0.9566  Tw (required. The initialisation and undefined behaviour fixes) TjT* 0.3444  Tc 1.1056  Tw (described in the previous section have the side effect that) TjT* /F2 9  Tf0.5333  Tc 0  Tw (logoutbuf) Tj57.6 0  TD /F4 10.2  Tf0.4001  Tc 1.1832  Tw (will be a member of a virtual base class and) Tj-57.6 -12  TD 0.3159  Tc 0.9591  Tw (therefore should have a default constructor. A virtual base) Tj0 -12  TD 0.1133  Tc 1.3117  Tw (class constructor must be called explicitly or implicitly from) TjT* 0.1103  Tc 0.6063  Tw (the constructor of the most derived class \(12.6.2/6\). A default) TjT* 0.6175  Tc 0.9325  Tw (constructor eliminates the need for explicit constructor) TjT* 0.1119  Tc 0.1199  Tw (calling. This in turn means that a reference to an output stream) TjT* 0.2339  Tc 1.0161  Tw (cannot be passed in through the constructor and therefore a) TjT* 0.1519  Tc 0.3581  Tw (pointer to the output stream buffer must be stored instead and) TjT* 0.3598  Tc 0.8235  Tw (initialised by way of an initialisation function. This is not) TjT* 0.4948  Tc 1.0052  Tw (ideal, but a trade-off to guarantee safety elsewhere. The) TjT* 0.5522  Tc 0.8728  Tw (initialisation function is also in keeping with the buffer) TjT* 0.1034  Tc 0.3466  Tw (initialisation in ) Tj66 0  TD /F2 9  Tf0.2  Tc 0  Tw (basic_ios) Tj50.4 0  TD /F4 10.2  Tf0.45  Tc (. ) Tj-102.6 -24  TD 0.2 0.2 0.2 rg /F9 7.8  Tf0.12  Tc (template<class charT,) Tj43.2 -12  TD (class traits = std::char_traits<charT> >) Tj-43.2 -12  TD (class logoutbuf) Tj24 -12  TD (: public std::basic_streambuf<charT, traits> {) Tj-24 -12  TD (private:) Tj9.6 -12  TD (typedef typename std::basic_streambuf<charT,) Tj105.6 -12  TD (traits>::int_type int_type;) Tj-105.6 -24  TD (typedef std::vector<charT> buffer_type;) Tj0 -24  TD (std::basic_streambuf<charT, traits>* out_;) Tj0 -12  TD (buffer_type buffer_;) Tj-9.6 -24  TD (public:) Tj9.6 -12  TD (logoutbuf\(\) : out_\(0\), buffer_\(\) {}) Tj0 -12  TD (void init\(std::basic_ostream<charT,) Tj139.2 -12  TD (traits>* out\) {) Tj-129.6 -12  TD (out_ = out;) Tj-9.6 -12  TD (}) Tj0 -12  TD 0 0 0 rg /F2 7.8  Tf(...) Tj-9.6 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(}; ) Tj19.2 -12  TD 0 0 0 rg /F10 10.2  Tf-0.097  Tc 0.047  Tw (Listing 7: Initialising the output stream buffer) Tj-33 -24  TD /F4 10.2  Tf0.1756  Tc 1.0744  Tw (Listing 7 shows the logoutbuf stream buffer with the output) Tj0 -12  TD 0.029  Tc 0.9353  Tw (stream buffer pointer and initialisation function. A constructor) TjT* -0.1022  Tc 1.3159  Tw (has also been added to make sure that the output stream buffer) TjT* -0.1034  Tc 0.4034  Tw (pointer is initialised to ) Tj92.4 0  TD /F2 9  Tf0  Tc 0  Tw (0) Tj5.4 0  TD /F4 10.2  Tf-0.0858  Tc 0.1608  Tw (, so that it can be reliably checked before) Tj-97.8 -12  TD -0.0538  Tc -0.0962  Tw (characters are sent to it.) Tj10.8 -12  TD -0.0894  Tc -0.0606  Tw (When ) Tj25.8 0  TD /F2 9  Tf0  Tc 0  Tw (basic_ostream::flush) Tj109.8 0  TD /F4 10.2  Tf-0.0807  Tc -0.5493  Tw (is called, either directly or via) Tj-146.4 -12  TD /F2 9  Tf-0.0667  Tc 0  Tw (std::endl) Tj48 0  TD /F4 10.2  Tf-0.0173  Tc -0.46  Tw (, it starts a chain of function calls that finally results in) Tj-48 -12  TD /F2 9  Tf-0.0286  Tc 0  Tw (basic_streambuf::sync) Tj115.2 0  TD /F4 10.2  Tf-0.0754  Tc -0.2746  Tw (being called. This is where the buffer) Tj-115.2 -12  TD 0.2346  Tc 0.3954  Tw (should be flushed. The buffer should also be flushed when a) Tj0 -12  TD /F2 9  Tf-0.0667  Tc 0  Tw (logoutbuf) Tj49.8 0  TD /F4 10.2  Tf-0.1604  Tc -0.2896  Tw (object is destroyed, so ) Tj88.2 0  TD /F2 9  Tf-0.15  Tc 0  Tw (sync) Tj23.4 0  TD /F4 10.2  Tf-0.175  Tc -0.275  Tw (should also be called from) Tj-161.4 -12  TD -0.1548  Tc 0.6048  Tw (the ) Tj14.4 0  TD /F2 9  Tf0  Tc 0  Tw (logoutbuf) Tj51 0  TD /F4 10.2  Tf-0.1218  Tc (destructor.) Tj-51.6 -24  TD 0.2 0.2 0.2 rg /F9 7.8  Tf0.12  Tc (template<class charT,) Tj43.2 -12  TD (class traits = std::char_traits<charT> >) Tj-43.2 -12  TD (class logoutbuf) Tj24 -12  TD (: public std::basic_streambuf<charT, traits> {) Tj-14.4 -12  TD 0 0 0 rg /F2 7.8  Tf(...) Tj-9.6 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(public:) Tj9.6 -12  TD 0 0 0 rg /F2 7.8  Tf(...) TjETendstreamendobj130 0 obj8931endobj128 0 obj<</Type /Page/Parent 122 0 R/Resources <</Font <</F0 6 0 R /F2 10 0 R /F4 16 0 R /F9 36 0 R /F10 42 0 R >>/ProcSet 2 0 R>>/Contents 129 0 R>>endobj132 0 obj<</Length 133 0 R>>stream
BT549.6 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (29) Tj-193.8 768.6  TD /F0 12  Tf-0.0055  Tc -0.0845  Tw (Overload issue 66 april 2005) Tj-303 -40.8  TD 0.2 0.2 0.2 rg /F9 7.8  Tf0.12  Tc 0  Tw (~logoutbuf\(\) {) Tj9.6 -12  TD (sync\(\);) Tj-9.6 -12  TD (}) Tj0 -12  TD 0 0 0 rg /F2 7.8  Tf(...) Tj-9.6 -24  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(private:) Tj9.6 -12  TD 0 0 0 rg /F2 7.8  Tf(...) Tj0 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(virtual int sync\(\) {) Tj9.6 -12  TD (if\(!buffer_.empty\(\) && out_\) {) Tj9.6 -12  TD (out_->sputn\(&buffer_[0],) Tj57.6 -12  TD (static_cast<std::streamsize>) Tj72 -12  TD (\(buffer_.size\(\)\)\);) Tj-129.6 -12  TD (buffer_.clear\(\);) Tj-9.6 -12  TD (}) Tj0 -12  TD (return 0;) Tj-9.6 -12  TD (}) Tj-9.6 -12  TD (}; ) Tj43.2 -12  TD 0 0 0 rg /F10 10.2  Tf-0.0984  Tc -0.0516  Tw (Listing 8: Synchronising the buffer) Tj-57 -24  TD /F4 10.2  Tf0.1266  Tc 1.0091  Tw (Listing 8 shows the implementation of the ) Tj189 0  TD /F2 9  Tf0.15  Tc 0  Tw (sync) Tj26.4 0  TD /F4 10.2  Tf0.0383  Tc 1.6117  Tw (function. It) Tj-215.4 -12  TD 0.127  Tc 0.123  Tw (checks the buffer to make sure there is something in it to flush) Tj0 -12  TD 0.1095  Tc 0.5205  Tw (and then checks the output stream buffer pointer to make sure) TjT* 0.1276  Tc 0.3224  Tw (the pointer is valid. The contents of the buffer are then sent to) TjT* 0.3393  Tc 0.8107  Tw (the output stream buffer, via its ) Tj148.2 0  TD /F2 9  Tf0.48  Tc 0  Tw (sputn) Tj33.6 0  TD /F4 10.2  Tf0.385  Tc 0.665  Tw (function, and then) Tj-181.8 -12  TD 0.1253  Tc -0.2753  Tw (cleared.  ) Tj11.4 -12  TD /F2 9  Tf0.32  Tc 0  Tw (basic_streambuf) Tj86.4 0  TD /F4 10.2  Tf-0.0822  Tc 0.5322  Tw (\222s ) Tj12.6 0  TD /F2 9  Tf0.36  Tc 0  Tw (sputn) Tj33.6 0  TD /F4 10.2  Tf0.253  Tc 2.297  Tw (function takes an array of) Tj-144 -12  TD -0.0703  Tc -0.4069  Tw (characters as its first parameter and the number of characters in the) Tj0 -12  TD -0.0362  Tc 0.3662  Tw (array as its second parameter. ) Tj124.8 0  TD /F2 9  Tf0.0545  Tc 0  Tw (std::vector) Tj63 0  TD /F4 10.2  Tf0.0296  Tc 0.4204  Tw (stores its elements) Tj-187.8 -12  TD -0.0969  Tc 0.5469  Tw (contiguously in memory, like an array, so the address of the first) Tj0 -12  TD 0.0488  Tc 0.4012  Tw (element in the buffer can be passed as ) Tj162.6 0  TD /F2 9  Tf0.12  Tc 0  Tw (sputn) Tj27.6 0  TD /F4 10.2  Tf0.0043  Tc 0.4457  Tw (\222s first parameter.) Tj-190.2 -12  TD /F2 9  Tf0  Tc 0  Tw (std::vector) Tj59.4 0  TD /F4 10.2  Tf-0.0993  Tc 0.3493  Tw (\222s size function is used to determine the number of) Tj-59.4 -12  TD -0.0833  Tc -0.4867  Tw (elements in the buffer and can therefore be used as ) Tj199.8 0  TD /F2 9  Tf0  Tc 0  Tw (sputn) Tj27 0  TD /F4 10.2  Tf-0.1112  Tc -0.0388  Tw (\222s second) Tj-226.8 -12  TD 0.2499  Tc 2.8001  Tw (parameter. The type of) Tj0  Tc 0.45  Tw ( ) Tj112.8 0  TD /F2 9  Tf0.48  Tc 0  Tw (sputn) Tj28.8 0  TD /F4 10.2  Tf0.2627  Tc 3.0373  Tw (\222s second argument is the) Tj-141.6 -12  TD -0.1005  Tc -0.2495  Tw (implementation defined typedef ) Tj127.8 0  TD /F2 9  Tf0  Tc 0  Tw (std::streamsize) Tj81 0  TD /F4 10.2  Tf-0.0253  Tc -0.9247  Tw (. As the return) Tj-208.8 -12  TD -0.2435  Tc 0.0935  Tw (type of ) Tj29.4 0  TD /F2 9  Tf-0.0353  Tc 0  Tw (std::vector::size) Tj93 0  TD /F4 10.2  Tf-0.0705  Tc -0.5295  Tw (is also implementation defined \(and) Tj-122.4 -12  TD -0.1145  Tc -0.0355  Tw (not necessarily the same type\), ) Tj124.2 0  TD /F2 9  Tf0  Tc 0  Tw (sputn) Tj27 0  TD /F4 10.2  Tf-0.0929  Tc -0.2071  Tw (\222s second parameter must be) Tj-151.2 -12  TD -0.0409  Tc 0.4909  Tw (cast to avoid warnings from compilers such as Microsoft Visual) Tj0 -12  TD -0.045  Tc -0.105  Tw (C++. There is a possibility that the number of characters stored in) TjT* -0.0524  Tc 0.4024  Tw (the buffer will be greater than ) Tj125.4 0  TD /F2 9  Tf0.04  Tc 0  Tw (std::streamsize) Tj84.6 0  TD /F4 10.2  Tf-0.0981  Tc 0.5481  Tw (can hold, but) Tj-210 -12  TD -0.0952  Tc -0.0548  Tw (this is highly unlikely.) Tj11.4 -12  TD /F2 9  Tf0  Tc 0  Tw (logoutbuf) Tj51 0  TD /F4 10.2  Tf-0.0735  Tc 0.1806  Tw (is now a fully functioning, buffered output stream) Tj-62.4 -12  TD -0.173  Tc -0.4056  Tw (buffer and can be plugged into a ) Tj125.4 0  TD /F2 9  Tf-0.0923  Tc 0  Tw (basic_ostream) Tj70.8 0  TD /F4 10.2  Tf-0.1503  Tc -0.5997  Tw (object and tested.) Tj-182.4 -24  TD /F2 7.8  Tf0.12  Tc 0  Tw (...) Tj0 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(int main\(\) {) Tj9.6 -12  TD (logoutbuf<char> ob;) Tj0 -12  TD (ob.init\(std::cout.rdbuf\(\)\);) Tj0 -24  TD 0 0 0 rg /F2 7.8  Tf(// Flush to std::cout) Tj0 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(std::basic_ostream<char> out\(&ob\);) TjT* (out << "31 hexadecimal: " << std::hex) Tj19.2 -12  TD (<< 31 << std::endl;) Tj-19.2 -12  TD (return 0;) Tj-9.6 -12  TD (}) Tj58.2 -12  TD 0 0 0 rg /F10 10.2  Tf-0.1604  Tc 0.4104  Tw (Listing 9: Using ) Tj70.2 0  TD 0.2 0.2 0.2 rg /F9 9  Tf0  Tc 0  Tw (logoutbuf) Tj-142.2 -24  TD 0 0 0 rg /F4 10.2  Tf-0.0907  Tc 0.5407  Tw (Listing 9 creates a ) Tj78 0  TD /F2 9  Tf0  Tc 0  Tw (logoutbuf) Tj52.2 0  TD /F4 10.2  Tf-0.0708  Tc 0.5208  Tw (object, sets ) Tj48 0  TD /F2 9  Tf0  Tc 0  Tw (std::cout) Tj48.6 0  TD /F4 10.2  Tf-0.1947  Tc 1.2447  Tw (\222s stream) Tj-226.8 -12  TD 0.542  Tc 0.7262  Tw (buffer as its output stream buffer and then passes it to a) Tj0 -12  TD /F2 9  Tf0  Tc 0  Tw (basic_ostream) Tj72.6 0  TD /F4 10.2  Tf-0.0859  Tc 0.5359  Tw (object, which then has character streamed to it.) Tj-72.6 -12  TD -0.1212  Tc 0.1212  Tw (The output from the example in Listing 9 is:) Tj289.2 708  TD /F2 9  Tf0  Tc 0  Tw (31 hexadecimal: 1f) Tj-14.4 -24  TD /F4 10.2  Tf-0.0906  Tc 0.3099  Tw (The next step is to generate the time and date that will be flushed) Tj0 -12  TD 0.692  Tc 0.658  Tw (to the output stream buffer prior to the contents of the) TjT* /F2 9  Tf0  Tc 0  Tw (logoutbuf) Tj52.2 0  TD /F4 10.2  Tf-0.0979  Tc 1.0729  Tw (buffer. The different ways of generating a date and) Tj-52.2 -12  TD -0.1012  Tc 0.5512  Tw (time string are beyond the scope of this article so I am providing) Tj0 -12  TD -0.0836  Tc 0.7051  Tw (the following implementation, which will handle both ) Tj224.4 0  TD /F2 9  Tf0  Tc 0  Tw (char) Tj24.6 0  TD /F4 10.2  Tf-0.1096  Tc (and) Tj-249 -12  TD /F2 9  Tf0.0857  Tc (wchar_t) Tj42.6 0  TD /F4 10.2  Tf0.0124  Tc 1.3376  Tw (character types, without any explanation beyond the) Tj-42.6 -12  TD -0.0903  Tc 0.1403  Tw (comments in the code:) Tj14.4 -24  TD 0.2 0.2 0.2 rg /F9 7.8  Tf0.12  Tc 0  Tw (#include <streambuf>) Tj0 -12  TD (#include <vector>) TjT* (#include <ctime>) TjT* (#include <string>) TjT* (#include <sstream>) Tj0 -24  TD 0 0 0 rg /F2 7.8  Tf(...) TjT* 0.2 0.2 0.2 rg /F9 7.8  Tf(template<class charT,) Tj43.2 -12  TD 0.1033  Tc 0.0167  Tw (class traits = std::char_traits<charT> >) Tj-43.2 -12  TD 0.12  Tc 0  Tw (class logoutbuf) Tj24 -12  TD 0.1057  Tc 0.0143  Tw (: public std::basic_streambuf<charT, traits> {) Tj-14.4 -12  TD 0 0 0 rg /F2 7.8  Tf0.12  Tc 0  Tw (...) Tj-9.6 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(private:) Tj9.6 -12  TD 0.1067  Tc 0.0133  Tw (std::basic_string<charT, traits> format_time\(\) {) Tj9.6 -12  TD 0 0 0 rg /F2 7.8  Tf0.12  Tc 0  Tw (// Get current time and date) Tj0 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(time_t ltime;) TjT* (time\(&ltime\);) Tj0 -24  TD 0 0 0 rg /F2 7.8  Tf(// Convert time and date to string) Tj0 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf0.1057  Tc 0.0143  Tw (std::basic_stringstream<charT, traits> time;) TjT* 0.12  Tc 0  Tw (time << asctime\(gmtime\(&ltime\)\);) Tj0 -24  TD 0 0 0 rg /F2 7.8  Tf(// Remove LF from time date string and) Tj0 -12  TD (// add separator) TjT* 0.2 0.2 0.2 rg /F9 7.8  Tf0.0907  Tc 0.0293  Tw (std::basic_stringstream<char_type> result;) TjT* 0.12  Tc 0  Tw (result << time.str\(\).erase\() Tj62.4 -12  TD -0.1  Tw (time.str\(\).length\(\) - 1\) << " - ";) Tj-62.4 -24  TD 0  Tw (return result.str\(\);) Tj-9.6 -12  TD (}) Tj0 -12  TD 0 0 0 rg /F2 7.8  Tf(...) Tj0 -24  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(virtual int sync\(\) {) Tj9.6 -12  TD (if\(!buffer_.empty\(\) && out_\) {) Tj9.6 -12  TD -0.2  Tw (const std::basic_string<charT, traits> time) Tj139.2 -12  TD 0.08  Tc 0.04  Tw (= format_time\(\);) Tj-139.2 -12  TD 0.12  Tc 0  Tw (out_->sputn\(time.c_str\(\),) Tj57.6 -12  TD 0.0771  Tc (static_cast<std::streamsize>) Tj76.8 -12  TD 0.0847  Tc (\(time.length\(\)\)\);) Tj-134.4 -12  TD 0.12  Tc (out_->sputn\(&buffer_[0],) Tj62.4 -12  TD 0.0986  Tc (static_cast<std::streamsize>) Tj67.2 -12  TD 0.0867  Tc (\(buffer_.size\(\)\)\);) Tj-129.6 -12  TD 0.12  Tc (buffer_.clear\(\);            ) Tj-9.6 -12  TD (}) Tj0 -12  TD (return 0;) Tj-9.6 -12  TD (}) Tj0 -12  TD 0 0 0 rg /F2 7.8  Tf(...   ) Tj-9.6 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(};) Tj47.4 -12  TD 0 0 0 rg /F10 10.2  Tf-0.0932  Tc -0.1768  Tw (Listing 10: Adding date and time) TjETendstreamendobj133 0 obj9144endobj131 0 obj<</Type /Page/Parent 122 0 R/Resources <</Font <</F0 6 0 R /F2 10 0 R /F4 16 0 R /F9 36 0 R /F10 42 0 R >>/ProcSet 2 0 R>>/Contents 132 0 R>>endobj135 0 obj<</Length 136 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (30) Tj0 768.6  TD /F0 12  Tf-0.0055  Tc 0.2155  Tw (Overload issue 66 april 2005) Tj0 -40.8  TD /F4 10.2  Tf-0.087  Tc -0.063  Tw (The ) Tj18.6 0  TD /F2 9  Tf0  Tc 0  Tw (sync) Tj24 0  TD /F4 10.2  Tf-0.1131  Tc 0.2631  Tw (function in Listing 10 now sends a date and time string) Tj-42.6 -12  TD -0.0239  Tc 1.1405  Tw (\(plus the separator\) to the output stream buffer before flushing) Tj0 -12  TD 0.0452  Tc 0.4048  Tw (the ) Tj15.6 0  TD /F2 9  Tf0  Tc 0  Tw (logoutbuf) Tj52.2 0  TD /F4 10.2  Tf-0.0839  Tc 0.9089  Tw (buffer.  The result of running the example from) Tj-67.8 -12  TD -0.1293  Tc 0.1793  Tw (Listing 9 is now:) Tj14.4 -24  TD /F2 9  Tf0  Tc 0  Tw (Fri Apr 20 16:00:00 2005 - 31 hexadecimal: 1f) Tj-14.4 -24  TD 0.6  Tc (logoutbuf) Tj57.6 0  TD /F4 10.2  Tf0.4036  Tc 0.8714  Tw (is now fully functional, but there is a further) Tj-57.6 -12  TD 0.4246  Tc 0.9588  Tw (modification that can be made for the sake of efficiency.) Tj0 -12  TD 0.5226  Tc -0.0726  Tw (Currently ) Tj48 0  TD /F2 9  Tf0.6  Tc 0  Tw (overflow) Tj52.2 0  TD /F4 10.2  Tf0.5587  Tc 0.4913  Tw (is called for ) Tj60 0  TD /F5 10.2  Tf0.4946  Tc 0.8554  Tw (every single character) Tj-160.2 -12  TD /F4 10.2  Tf-0.0835  Tc 0.9698  Tw (streamed to the stream buffer. This means that to stream the ) Tj253.2 0  TD /F2 9  Tf0  Tc 0  Tw (31) Tj-253.2 -12  TD (hexadecimal: ) Tj76.8 0  TD /F4 10.2  Tf-0.0766  Tc 1.1266  Tw (string literal to the stream buffer involves ) Tj177 0  TD /F5 10.2  Tf-0.3  Tc 0  Tw (16) Tj-253.8 -12  TD /F4 10.2  Tf-0.0817  Tc 0.9517  Tw (separate function calls. This can be reduced to a single function) Tj0 -12  TD -0.0514  Tc 0.1014  Tw (call by overriding ) Tj73.8 0  TD /F2 9  Tf0  Tc 0  Tw (xsputn) Tj32.4 0  TD /F4 10.2  Tf-0.15  Tc (.) Tj-91.8 -24  TD /F2 7.8  Tf0.12  Tc (...) Tj0 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(#include <algorithm>) Tj0 -24  TD (template<class charT,) Tj43.2 -12  TD (class traits = std::char_traits<charT> >) Tj-43.2 -12  TD (class logoutbuf) Tj24 -12  TD (: public std::basic_streambuf<charT, traits> {) Tj-14.4 -12  TD 0 0 0 rg /F2 7.8  Tf(...) Tj-9.6 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(private:) Tj9.6 -12  TD 0 0 0 rg /F2 7.8  Tf(...) Tj0 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(virtual std::streamsize xsputn\() Tj148.8 0  TD -0.0565  Tc -0.1235  Tw (const char_type* s,) Tj-19.2 -12  TD 0.12  Tc 0  Tw (std::streamsize num\) {) Tj-120 -12  TD (std::copy\(s, s + num,) Tj24 -12  TD (std::back_inserter<buffer_type>\(buffer_\)\);) Tj-24 -12  TD (return num;) Tj-9.6 -12  TD (}) Tj0 -12  TD 0 0 0 rg /F2 7.8  Tf(...) Tj-9.6 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(};) Tj52.2 -12  TD 0 0 0 rg /F10 10.2  Tf-0.1171  Tc -0.0329  Tw (Listing 11: Overriding ) Tj98.4 0  TD 0.2 0.2 0.2 rg /F9 9  Tf0  Tc 0  Tw (xsputn) Tj-165 -24  TD 0 0 0 rg /F2 9  Tf-0.3  Tc (xsputn) Tj34.2 0  TD /F4 10.2  Tf-0.2596  Tc 0.3496  Tw (takes the same parameters as ) Tj115.2 0  TD /F2 9  Tf-0.1909  Tc 0  Tw (basic_streambuf::sputn) Tj-149.4 -12  TD /F4 10.2  Tf0.4442  Tc 7.2058  Tw (and uses the) Tj0  Tc 1.05  Tw ( ) Tj79.2 0  TD /F2 9  Tf0.6  Tc 0  Tw (std::copy) Tj64.2 0  TD /F4 10.2  Tf0.4558  Tc 6.8942  Tw (algorithm together with) Tj-143.4 -12  TD /F2 9  Tf-0.2  Tc 0  Tw (std::back_inserter) Tj96.6 0  TD /F4 10.2  Tf-0.2735  Tc 1.0664  Tw (to insert the characters from the array into) Tj-96.6 -12  TD -0.2733  Tc -0.1767  Tw (the buffer. ) Tj41.4 0  TD /F2 9  Tf-0.2  Tc 0  Tw (logoutbuf) Tj48.6 0  TD /F4 10.2  Tf-0.2651  Tc -0.1849  Tw (is now complete.) Tj-78.6 -12  TD /F2 9  Tf0  Tc 0  Tw (logoutbuf) Tj51.6 0  TD /F4 10.2  Tf-0.0282  Tc 0.1782  Tw (does of course require its own ) Tj125.4 0  TD /F2 9  Tf0  Tc 0  Tw (logoutbuf_init) Tj-188.4 -12  TD /F4 10.2  Tf-0.0447  Tc -0.1053  Tw (class and ) Tj39 0  TD /F2 9  Tf0  Tc 0  Tw (basic_ostream) Tj72.6 0  TD /F4 10.2  Tf-0.1044  Tc 0.1044  Tw (subclass, with a few modifications:) Tj-97.2 -24  TD 0.2 0.2 0.2 rg /F9 7.8  Tf0.12  Tc 0  Tw (template<class charT,) Tj43.2 -12  TD (class traits = std::char_traits<charT> >) Tj-43.2 -12  TD (class logoutbuf_init {) Tj0 -12  TD (private:) Tj9.6 -12  TD (logoutbuf<charT, traits> buf_;) Tj-9.6 -24  TD (public:) Tj9.6 -12  TD (logoutbuf<charT, traits>* buf\(\) {) Tj9.6 -12  TD (return &buf_;) Tj-9.6 -12  TD (}) Tj-9.6 -12  TD (};) Tj0 -24  TD (template<class charT,) Tj43.2 -12  TD (class traits = std::char_traits<charT> >) Tj-43.2 -12  TD (class logostream) Tj33.6 -12  TD (: private virtual logoutbuf_init<charT,) Tj158.4 -12  TD (traits>,) Tj-148.8 -12  TD (public std::basic_ostream<charT, traits> {) Tj231.6 708  TD (private:) Tj9.6 -12  TD (typedef logoutbuf_init<charT, traits>) Tj163.2 -12  TD (logoutbuf_init;) Tj-172.8 -12  TD (public:) Tj9.6 -12  TD (logostream\(std::basic_ostream<charT,) Tj144 -12  TD (traits>& out\)) Tj-124.8 -12  TD (: logoutbuf_init\(\),) Tj9.6 -12  TD (std::basic_ostream<charT,) Tj52.8 -12  TD (traits>\(logoutbuf_init::buf\(\)\) {) Tj-72 -12  TD (logoutbuf_init::buf\(\)->init\(out.rdbuf\(\)\);) Tj-9.6 -12  TD (}) Tj-9.6 -12  TD (};) Tj0 -24  TD (typedef logostream<char> clogostream;) Tj0 -12  TD (typedef logostream<wchar_t> wlogostream; ) Tj-11.4 -24  TD 0 0 0 rg /F10 10.2  Tf-0.1007  Tc -0.0493  Tw (Listing 12: ) Tj48 0  TD 0.2 0.2 0.2 rg /F9 7.8  Tf0.12  Tc 0  Tw (logoutbuf_init) Tj69.6 0  TD 0 0 0 rg /F10 10.2  Tf-0.0303  Tc -0.1197  Tw (class and ) Tj41.4 0  TD 0.2 0.2 0.2 rg /F9 7.8  Tf0.12  Tc 0  Tw (basic_ostream) Tj64.2 0  TD 0 0 0 rg /F10 10.2  Tf-0.1138  Tc (subclass) Tj-225.6 -24  TD /F4 10.2  Tf-0.287  Tc 0.137  Tw (The ) Tj18 0  TD /F2 9  Tf0  Tc 0  Tw (logoutbuf_init) Tj78.6 0  TD /F4 10.2  Tf-0.0785  Tc 0.3035  Tw (class is actually the same as the one form) Tj-96.6 -12  TD 0.399  Tc 0.651  Tw (the previous section; it\222s the ) Tj134.4 0  TD /F2 9  Tf0.54  Tc 0  Tw (logostream) Tj63 0  TD /F4 10.2  Tf0.4776  Tc 0.8724  Tw (that is slightly) Tj-197.4 -12  TD -0.081  Tc 1.1976  Tw (different. The constructor takes a single parameter which is the) Tj0 -12  TD -0.0795  Tc 0.0495  Tw (output stream and its body passes its stream buffer to ) Tj214.8 0  TD /F2 9  Tf0  Tc 0  Tw (logoutbuf) Tj-214.8 -12  TD /F4 10.2  Tf-0.1548  Tc 0.6048  Tw (via ) Tj14.4 0  TD /F2 9  Tf0  Tc 0  Tw (init) Tj24 0  TD /F4 10.2  Tf-0.0976  Tc 0.0333  Tw (\(suddenly the trade off doesn\222t seem so bad\).) Tj-27.6 -12  TD -0.1052  Tc 0.1052  Tw (The final test example is shown in Listing 13:) Tj3 -24  TD /F2 7.8  Tf0.12  Tc 0  Tw (...) Tj0 -12  TD 0.2 0.2 0.2 rg /F9 7.8  Tf(int main\(\) {) Tj9.6 -12  TD (costream out\(std::cout\);) Tj0 -12  TD (out << "31 hexadecimal: " << std::hex) Tj19.2 -12  TD (<< 31 << std::endl;) Tj-19.2 -12  TD (return 0;) Tj-9.6 -12  TD (}) Tj57.6 -12  TD 0 0 0 rg /F10 10.2  Tf-0.0484  Tc -0.1016  Tw (Listing 13: Using the stream) Tj-71.4 -18  TD /F0 12  Tf-0.0876  Tc 0  Tw (Conclusion) Tj0 -18  TD /F4 10.2  Tf-0.0613  Tc 1.2203  Tw (The stream buffer is clearly the heart of an output stream. The) Tj0 -12  TD -0.0533  Tc 0.0833  Tw (potential for a stream buffer being accessed before it is initialised) TjT* 0.0155  Tc 1.2345  Tw (is easily avoided, as is the possibility of undefined behaviour,) TjT* -0.104  Tc 0.254  Tw (with the minimal of tradeoffs.) Tj10.8 -12  TD -0.0627  Tc -0.3873  Tw (The buffering of characters streamed to a stream buffer is easily) Tj-10.8 -12  TD 0.2178  Tc 0.6322  Tw (handled by a ) Tj59.4 0  TD /F2 9  Tf0.4364  Tc 0  Tw (std::vector) Tj67.2 0  TD /F4 10.2  Tf0.3053  Tc 0.5047  Tw (with no need for extra memory) Tj-126.6 -12  TD -0.1684  Tc -0.1816  Tw (handling.  Multiple characters can be added to a ) Tj187.8 0  TD /F2 9  Tf0  Tc 0  Tw (std::vector) Tj61.2 0  TD /F4 10.2  Tf-0.2347  Tc (just) Tj-249 -12  TD -0.1235  Tc -0.0932  Tw (as easily as single characters and the contiguous memory elements) Tj0 -12  TD -0.106  Tc 0.106  Tw (make it easy to flush to an output stream.) Tj10.8 -12  TD -0.0875  Tc -0.4225  Tw (Writing a custom stream is ) Tj108 0  TD /F5 10.2  Tf-0.1813  Tc 0  Tw (easy) Tj18 0  TD /F4 10.2  Tf-0.1558  Tc -0.0942  Tw (! I believe this article shows just) Tj-136.8 -12  TD -0.1055  Tc 0.0755  Tw (how easy it is, even with a minimum of background knowledge.) Tj217.2 -12  TD /F7 10.2  Tf-0.1167  Tc 0.2727  Tw (Paul Grenyer) Tj-72.6 -12  TD /F2 9  Tf0  Tc 0  Tw (paul@paulgrenyer.co.uk) Tj-144.6 -30  TD /F0 12  Tf-0.018  Tc (References) Tj0 -18  TD /F4 10.2  Tf-0.1504  Tc -0.2996  Tw ([Josuttis] Nicolai M. Josuttis, ) Tj116.4 0  TD /F5 10.2  Tf-0.2023  Tc -0.1477  Tw (The C++ Standard Library) Tj106.2 0  TD /F4 10.2  Tf-0.2349  Tc -0.5151  Tw (, Addison-) Tj-211.8 -12  TD -0.1366  Tc -0.0134  Tw (Wesley, ISBN: 0-201-37926-0.) Tj-10.8 -12  TD 0.0798  Tc 0.3702  Tw ([C++ Standard] ) Tj68.4 0  TD /F5 10.2  Tf0.0374  Tc 0.4126  Tw (The C++ Standard) Tj80.4 0  TD /F4 10.2  Tf0.1032  Tc 0.3468  Tw (, John Wiley and Sons Ltd,) Tj-138 -12  TD -0.0478  Tc -0.1022  Tw (ISBN: 0-470-84674-7) Tj-10.8 -30  TD /F0 12  Tf-0.0072  Tc 0  Tw (Acknowledgments) Tj0 -18  TD /F4 10.2  Tf0.2193  Tc 0.745  Tw (Alisdair Meredith, Alan Stokes, Jez Higgins, Alan Griffiths,) Tj0 -12  TD -0.1334  Tc -0.0166  Tw (Thaddaeus Frogley.) TjETendstreamendobj136 0 obj9429endobj134 0 obj<</Type /Page/Parent 122 0 R/Resources <</Font 137 0 R/ProcSet 2 0 R>>/Contents 135 0 R>>endobj137 0 obj<</F0 6 0 R/F2 10 0 R/F4 16 0 R/F5 21 0 R/F7 28 0 R/F9 36 0 R/F10 42 0 R>>endobj6 0 obj<</Type /Font/Subtype /Type1/Name /F0/BaseFont /JFHAHE+HelveticaNeue-BoldExt/FirstChar 32/LastChar 255/Widths [ 370 370 592 816 816 1037 926 370 444 444 464 600 370 481 370 426 816 556 816 816 816 816 816 759 816 816 370 370 600 600 600 759 800 834 889 907 907 778 722 944 926 330 685 870 722 1130 926 944 833 944 852 815 722 870 796 1148 796 778 759 444 426 444 600 500 260 741 778 741 778 758 426 778 741 296 296 722 296 1130 741 778 778 778 519 704 444 741 668 1056 722 648 648 444 222 444 600 500 500 500 370 816 592 1000 816 816 260 1167 815 370 1167 500 759 500 500 370 370 592 592 500 500 1000 260 1000 704 370 1148 500 648 778 370 370 816 816 816 816 222 816 260 800 482 611 600 481 800 260 400 600 530 530 260 741 620 370 260 361 506 611 1222 1222 1222 759 834 834 834 834 834 834 1148 907 778 778 778 778 330 330 330 330 907 926 944 944 944 944 944 600 944 870 870 870 870 778 833 759 741 741 741 741 741 741 1148 741 758 758 758 758 296 296 296 296 778 741 778 778 778 778 778 600 778 741 741 741 741 648 778 648 ]/Encoding /WinAnsiEncoding/FontDescriptor 7 0 R>>endobj7 0 obj<</Type /FontDescriptor/FontName /JFHAHE+HelveticaNeue-BoldExt/Flags 16416/FontBBox [ -250 -213 1466 1000 ]/MissingWidth 944/StemV 218/StemH 218/ItalicAngle 0/CapHeight 1405/XHeight 1055/Ascent 984/Descent -213/Leading 469/MaxWidth 1222/AvgWidth 683/FontFile3 138 0 R>>endobj138 0 obj<</Filter /FlateDecode /Length 139 0 R/Subtype /Type1C>>stream
HâLU	TSg~!…KêÁãêÑ$RZ*‚É@P(eìÕ∂Ll )Kê àkÎ¥éàûÍté#N◊2Z\@Ki∑÷•V)U´éc=ù±’SßÁ{Èç«˘=∂ÁœyÓü{ˇwøÔ~˜F∆)|8ôLöëñûúûëÓ¨¨w÷ïó⁄súãúS\ïé‘≈u√R 'dí—G
ïK£4é çäÊü+ï°˜ñf$∂‡T–~£¯¶ñìÀdÔºˇ·LWMcmyŸÇ:KxÈÛñ…”ßGYíÆß•†—]Á¨r[^©.u’÷∏jÌuNG§≈í\Yi…ˆw[Úùngm=;}ñé•‹m±[ÍjÌgïΩ∂¬‚öo…*Øv’5÷8-…/[Ï’éIÆZK9ãu/*qó; ÌµÂN˜Ø‚3’2å∆¬‡8´N«/ø#Â8[úä„|eúøË«Y8.L«≈q\äöÀ
‡~œq9Ó«]Ê∏Fß`ﬁ;∏Î≤—≤$ôS∂LˆgŸ}≥è€Á°<Z˛Æ¸ëb≤‚seúræÚ8œÒo=*N° Sı™æS=V«™+‘Ô®˚’}_ˆ]Á˚xD≈àª~*øørøC~∑¸+˝?<≤q‰†FØi—j(`r@j¿ûÄ˚ÅqÅ-Åû†î†ÉA?ißkm⁄›⁄ªB§P"lv

ùﬁyˆπ◊Ä¿Áê(e=‘~ä‹$‚EL:•CàÀ^ˇÌÚŸÜÃÑ}7?:q¯h´Y®ƒc∫#‚-û≤ëxºg{ÁÓ3!‰”∑¨¨¥†¢2Ñ"¶⁄vπ˜_zp$?AFÚ°ÄsvWvöÑN‚´„“HÆßINEÚO◊vù∫aˆ“~i©xp_k◊ûÓGÒ‹ÖŒ•¶≈-∂ΩGıØË±5»1K.ÖRæ˝\D!Fèò„à˙z‰GæIO	zJ∏BÒ`¶Èi 
Y$RX$¸‡{ÒH–#!	ÒƒÃ·ÿoIú¢(FO1s)*äÙ&5∂’£ Å2¨B†´td&; ˆ$ˆdãùåªf$ n√*ø≠ª√ØNope4™SU–µûΩäQzå"´JCP£Ï4<Ú”®·Åë<,v¬∫zœÍYìî"oja‡—„Y≠$=ØY—ùÙt≤.‰BBÆKp_D–¯ !G•Adc[Öÿÿaêâru¥¡åX∆√ÖÂÃ
¶l±sZŒpÌl´óf3ÅxWãfd–¨CÜ'É∆¬ÖRR‰Ø§»5j· ÛòØ“¨hÜQ gyúD1˙P,«F≈øwˆmÎﬁrmG0
¿ÜI≈TF˘ ßËlzmï	≈¸õÜˆnÙñÊ—ÔöΩ”ÃåO∞ÅÂP[è2jª`≈ ä)%¬◊Ï€G"t¸…Ûã“≥ÛÀ∆'M‹qg≠ô¨<ΩÚGÑfbæ'°Ü“,˚¶lt´iΩJËΩÿ“›sI~“?©ë‚(…N©&X˘œZ⁄/ÆütÂòÖkñdôh?åiCàc”Jn$
5ÏπI§Õ<6„òR8‡ÌU ëj†á¿∏§tZ®Ú{ìï4Z T=A6F|«àëŒ≥⁄ÅOEdÒ˚ˆü⁄‹cÄ¢~B¸©bs€.7ö©òßÃ˜PbG∏ÅI(qiHß¥è)ºp‚ ™WÕ€aTJs°Û~ıî7À-Ä]›«jó›Óií6äà^J	]d0P,Õ§B≤ﬂ¶)ËÇa7ãJÔ¢Ò3‚Î_+2√˝±K6úZïπ›Ãîù"¬¥vOvë>-≥4öFó|ÚÒ•æŒLöT&Ü~&ÃmûB˘6©_î÷ÒÙΩ@Y4k-S„MæuòÇ8D Bçâè
übˇ|XıÏ–±ÍS2´`¨ÙäÖ£¬êÅœ≈˚Á™Rg•WMx>Ω˝ããÁ⁄ø7Ø£"Úê⁄áf·Ë≠ÇS1Æ]˜ó;;é4]Vc⁄z*jß1CEU4≠…º>π√ˆÂBuìJ8≥® 'Z/—§ZëgÆ¨ï≤≈qˆΩΩ=›<8yqûm¡|ã˘Inå=˜ˇ;« ÿÀï [§Ëø ¡É˝ﬂ`&ˆ©òB]d£∞ä•§€1~j[œ	3˘7œ§`CnŒüŒ∫ÕlŒ§àdZWq˙Ñ˛¬ŸC∑0∫≥`ŒLkI∏ÈIÁ£âZ÷˝£Ö◊oK>¢?«^ö»‰*¥y˜*ûYöTÊ*ÕbbÔAÓAX{YÄ4KƒVpX˘6“ÙG°ó»Nì(:ù≤WõêÀﬂyÔÃ¡ØNóöIC+>†|Ω∞a-˘Â%öÕh'√ºë⁄Âûôêw¢]§:
ÏgBF≠ó	”…”9èMI+ÿ˛»¶d∂PÛLP‚Ø9…ú¡D$+&ì2˛√
ö¬ZÒøÿÇÂœÔ´*∞’9fõ©É'+Ei#è √˘ÔØÊ]èm1≥"JÁ⁄vüÎ◊#¯ÖûÁLﬁΩ<”ÇNƒ¯´ÔWÿ¨.∑ÕL€xÕP%ıLmQ"ˇY!ÂäX[MÆ√îd†ÕC
⁄J[¡v÷Ñòq¶›2ûîã£lîÂ¿ÿ{˜:0Ynç›j÷œ¶v!K[?<õ∂HWDº #¸ìÈl‹E‰%“(3U>Õ∫ÑgZˆA*P1a‘dˆÊÒö¢a¸±å¬'…œÎ<SaÙ.D¨4áı‰ÑKU0>öƒk,Ï/°ÉyG=Û÷Ω4çyOCîîÀº¥º*ÜÛ≈zÏbú√®eh•éÔÖ^©ªD$ÛˇcªZÉ¢∏≤0√ÿ=»íA”ˆd√h∑RÇ`êEÖ¨$‚†ƒÑb‹(ãàà— ‡Ãå%B¢QAEPÒ.>÷® Æ *
æ"ëàw4HA kåËÊÅfç∆”ì”˜‹UI~LMﬂÓæßø{Ó˜ùÛ]ÙÃüG47≈“Gµ@¡ ¶õˇ^ˆß√2,‚!!„>∆D#Ó« RÓ≤_R“‹é4ˇKrˇ>é{®¯™nºæã 5†
kw
∫15)˛ÿÒédZxÖÍå+Í∫
ÎÜ=»ŸS^èC≠‘h˛k’î“ºLz§D¿qÏ 8ˇ©ÛŒ‹êŒc|≤Á@p
’ÄÍÕ$oâä!µ¥öﬁhîˆWDhƒ¯ˇ%Sê4p]∞Øq∞õ«ïW°Nq∏ãÚ∑|{G_Uß(vÜ.S!≤É/=2+?ìfïkê$bö≤ù√’¨ÿãx∞®v∆–øbÁäT;òi	'( ZX‰úJ3°∞H,‰’?(‘Hsús◊Ò ÀÍZ–s˜9ô¯!ÌM&±ÒCpàÿà6eÄ2†lÅq`S®‚–ÜÅºmËﬁ)0]CjQK¶Ó]îÙ≈¥[Èr¶¢.:và`·?jX¸Jt!	h>QQEzæ.Û0≤˝>}ó/‡YÕÓÜnà7›ÿÑZÚ`˝≈59ŸÀ~Eön(3VNKù-èΩ»	6h√ìbÁ√a˜∏Ô⁄ˇ¸=ü_-D®Ì^g«çm{?íÙ˚	˜n¢P}ë·Ó"ÈöÈ´äKKx·Èπ+ÀM13≥Rd‹∆‡˚2¯ªa/(çßﬂˆ⁄∆%Â2§ÒÈ«ÓT˚‹Ã∑1;Ya⁄q∏˙ W>Õ¥ºDI›√ÎW2™P¨Ä%8ﬁÜNX"¥:∂(≈"$Á·íÉ8ÃàŸhòäaË^©–œ&Ct&◊ö&w∫Ollfà$|=6∞Ïa°åKxÃ*KD·ÿ˝g‰âıh®êÖV\wíõπua≈	ü∫ã«€€:ﬂﬁ!1Ì*-¥„P∆[F¸ßa9)6B9ØØaî¯÷J6'~¶W°TåÿÜ	äF—lÉÑvI!π®¡∫ËÙƒ…8π <oJJ0SB´Ì5VMé£Cu†:sìU€tÁ©58O©a◊z¯l}¥Ã™)ÿgï≤dë`∏R¬≥á´%Zÿ<Ú:íZ∆ÚËØî9á˛Æ°‰Í\“ÉZ∂îZ&x
aWﬁ·–FéØì+øŒÆ¡Ææ√È√¨O∆ﬁyÓ∂Ì=∑ˇ<wõÙûõ•˝	qÀ…˜\Pv¿bqd@JËÎ…áÍÍéñ]+ëóVo:^\µÁe<ZÒˆ¡ìõ[åèè[RRñØö±N∆∏<n®[äÏˇ0} %!o£≠ƒ∂ŸÊ&>ˇ–ÍcÁ|`ØÓ˚_ê'äA6∑H˙" ∫SnbÙµæÿHn#ZOÊ∂\|‹zÈ^gkºü_d|hX‰•«íêãëX.2'V£H7È∆’‹€FàÇAﬂ¸(Í{dV¢ŒJó°M<-ï™dôˆjò™uÃÖ"Dg`X4b˙é¶vüÉFìeöO√_*eú «¨2œù`DÕõWü>m∫
ö[ó≥MÚo∞RH¬j"¨ã]X;Ôπ∞ÜÖ∫∞¬'VGUÖ“Bæ.=™2¿Hn Ä<F…B=∆¡É ¢Ω•‹ﬁ ÒzìïÇøÙ^ wÕ
˛aV¡(qˆª3≥LFÙ˙k€πHŸπG…‘ ˙bnÔ|GCå˝%.HÍ&ãt;ˇ2àˇπD*‘——Ç?<ÔQtËÀŒ?}itgx‚ê*˛¸˛í£GØ_Dw›∆î9≥å8nN&ï3©∏yÇVßO¿tBÿ<…'ªS*˙9spür–A9®¡˚¡Å÷∂YËçﬁ!Y"CPs ˚0ù o√Ïà}î‘Ï r.˛(}Kõï⁄Ÿ≤ˇ y9EáÜ◊≤G˘•Ô?ÛYxSSr…¨Rsˆ∫±≤–•ºèë:}- î*ìââ“˚hç¨ËÌ‡Å∑◊|Ò˘…%l†Y9π:dËÿ§‰eR!u;¢MÆ≤ﬁ%Ã4˜%6O©¢€B»ßÃîëcÔvæ©Œ∏ÇÛwÌ0	≥8X…„¯íÍt
á§Ωïòƒ)>h“QdGFÔ∂››˝+Ù®ß2 –Æq˝Ízë~Œ√ﬂ≥Ë81ıçDÈìÃ∑N˘‡Ör!/t¥a§ZEoù¶≥Ãù∆S-ı÷I∂8Ô–∏˘wg§˜#îÍE,ºÉÔÕ¡BâB∂ˆÑ‹°j{∆h˝ãD®ÿO’VCÖÿ√®4ΩK‚ S|ó∏ÊbõSN]Ä¶…ÏÎ˚¶5N≠P(úlÅ)§é&@rè=rÓ¯}9†˘"CTƒœ:÷ºë&–dûm∆Aﬂ`‘DsÓ§ñéÆf∂ˇø	ﬂ£¿éﬂW ‹ÅDbﬁg1Ê›çÖÉF†ôå,…&<jÆ¨;&·*NBó#ã≈«&JÁ`åÉ!-Ó¨GBôì+x·‡ìÜO¿K ™*?XU)C∏N8XlÕ⁄h5õô˛⁄‘®?SÚUÀ-íZ-a‹Be˘0åQ(˝¡så0&ÔÉ∞Øß]¬){… Ô‰^›öWv–ÁíΩ¯ÏÖèWLﬂ∆N™ﬂÁOÎ¿FÀ∞4ÙÛªû}reï√}ôø;±œ¸$[D»¬#gW”±CÃß-º
û=∫V™DódÒ ?|O,Dú¸tsqïû∫¬•ôÖãå≥Ûv˝SÜMd|=—∆3á1ü· 8k/ìõ≤’@≠åÑÇºP0#>h¸¸„∑%h¢;œut⁄î”¸pÁ\m%´_8öƒ£…wƒh!œŸÀ÷+U;Í˙´^‘πºÿµ¨¨9∫[5~™—Bí‡èXœÛ¿G&±i‘‰ºUw÷‰˙)ÓF“økËÕÜÒ.Ô}—€©}:iAU<DÙÜq.„!∑cÂ áßzFs∞ú«ıpîd!ó⁄◊qÙS¿™Y·¯≥V…dI¿g8ûq¯%ÍÆˇØ2Ö5≠ºº2A∫®∞∑∑H˛∑ {Áñ≠ù[§ﬂÓ^Ä;≤∞çÈ¶»ê™AhÈè¬ñä˝x‰fˆ∂ûﬂ√*|·;”`√Ï˚ˆﬂœÔaÂ˚sˆ«˚Ô\Bj¿pfF¬‘~ºóB\†"i¡˜Møπ|H…/_¿≈üÒ˜÷Ó7ﬂc¯ÊvÔRÂÛ∆Õˇ5ˇª\7€˜e”ÔNˇÛt&˚wÆÔ.‹=<|ﬂ˜à¸º(
 o≠cendstreamendobj139 0 obj4519endobj8 0 obj<</Type /Font/Subtype /TrueType/Name /F1/BaseFont /Arial,Bold/FirstChar 32/LastChar 255/Widths [ 278 333 474 556 556 889 722 238 333 333 389 584 278 333 278 278 556 556 556 556 556 556 556 556 556 556 333 333 584 584 584 611 975 722 722 722 722 667 611 778 722 278 556 722 611 833 722 778 667 778 722 667 611 722 667 944 667 667 611 333 278 333 584 556 333 556 611 556 611 556 333 611 611 278 278 556 278 889 611 611 611 611 389 556 333 611 556 778 556 556 500 389 280 389 584 750 556 750 278 556 500 1000 556 556 333 1000 667 333 1000 750 611 750 750 278 278 500 500 350 556 1000 333 1000 556 333 944 750 500 667 278 333 556 556 556 556 280 556 333 737 370 556 584 333 737 552 400 549 333 333 333 576 556 278 333 333 365 556 834 834 834 611 722 722 722 722 722 722 1000 722 667 667 667 667 278 278 278 278 722 722 778 778 778 778 778 584 778 722 722 722 722 667 667 611 556 556 556 556 556 556 889 556 556 556 556 556 278 278 278 278 611 611 611 611 611 611 611 549 611 611 611 611 611 556 611 556 ]/Encoding /WinAnsiEncoding/FontDescriptor 9 0 R>>endobj9 0 obj<</Type /FontDescriptor/FontName /Arial,Bold/Flags 16416/FontBBox [ -250 -212 1148 1000 ]/MissingWidth 319/StemV 153/StemH 153/ItalicAngle 0/CapHeight 905/XHeight 453/Ascent 905/Descent -212/Leading 150/MaxWidth 957/AvgWidth 479>>endobj10 0 obj<</Type /Font/Subtype /Type1/Name /F2/BaseFont /Courier/FirstChar 32/LastChar 255/Widths [ 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 ]/Encoding /WinAnsiEncoding/FontDescriptor 11 0 R>>endobj11 0 obj<</Type /FontDescriptor/FontName /Courier/Flags 34/FontBBox [ -250 -250 720 1000 ]/MissingWidth 600/StemV 109/StemH 109/ItalicAngle 0/CapHeight 905/XHeight 686/Ascent 805/Descent -250/Leading 324/MaxWidth 600/AvgWidth 600>>endobj14 0 obj<</Type /Font/Subtype /TrueType/Name /F3/BaseFont /Arial/FirstChar 32/LastChar 255/Widths [ 278 278 355 556 556 889 667 191 333 333 389 584 278 333 278 278 556 556 556 556 556 556 556 556 556 556 278 278 584 584 584 556 1015 667 667 722 722 667 611 778 722 278 500 667 556 833 722 778 667 778 722 667 611 722 667 944 667 667 611 278 278 278 469 556 333 556 556 500 556 556 278 556 556 222 222 500 222 833 556 556 556 556 333 500 278 556 500 722 500 500 500 334 260 334 584 750 556 750 222 556 333 1000 556 556 333 1000 667 333 1000 750 611 750 750 222 222 333 333 350 556 1000 333 1000 500 333 944 750 500 667 278 333 556 556 556 556 260 556 333 737 370 556 584 333 737 552 400 549 333 333 333 576 537 278 333 333 365 556 834 834 834 611 667 667 667 667 667 667 1000 722 667 667 667 667 278 278 278 278 722 722 778 778 778 778 778 584 778 722 722 722 722 667 667 611 556 556 556 556 556 556 889 500 556 556 556 556 278 278 278 278 556 556 556 556 556 556 556 549 611 556 556 556 556 500 556 500 ]/Encoding /WinAnsiEncoding/FontDescriptor 15 0 R>>endobj15 0 obj<</Type /FontDescriptor/FontName /Arial/Flags 32/FontBBox [ -250 -212 1211 1000 ]/MissingWidth 276/StemV 80/StemH 80/ItalicAngle 0/CapHeight 905/XHeight 453/Ascent 905/Descent -212/Leading 150/MaxWidth 1009/AvgWidth 441>>endobj16 0 obj<</Type /Font/Subtype /TrueType/Name /F4/BaseFont /TimesNewRoman/FirstChar 32/LastChar 255/Widths [ 250 333 408 500 500 833 778 180 333 333 500 564 250 333 250 278 500 500 500 500 500 500 500 500 500 500 278 278 564 564 564 444 921 722 667 667 722 611 556 722 722 333 389 722 611 889 722 722 556 722 667 556 611 722 722 944 722 722 611 333 278 333 469 500 333 444 500 444 500 444 333 500 500 278 278 500 278 778 500 500 500 500 333 389 278 500 500 722 500 500 444 480 200 480 541 778 500 778 333 500 444 1000 500 500 333 1000 556 333 889 778 611 778 778 333 333 444 444 350 500 1000 333 980 389 333 722 778 444 722 250 333 500 500 500 500 200 500 333 760 276 500 564 333 760 500 400 549 300 300 333 576 453 250 333 300 310 500 750 750 750 444 722 722 722 722 722 722 889 667 611 611 611 611 333 333 333 333 722 722 722 722 722 722 722 564 722 722 722 722 722 722 556 500 444 444 444 444 444 444 667 444 444 444 444 444 278 278 278 278 500 500 500 500 500 500 500 549 500 500 500 500 500 500 500 500 ]/Encoding /WinAnsiEncoding/FontDescriptor 17 0 R>>endobj17 0 obj<</Type /FontDescriptor/FontName /TimesNewRoman/Flags 34/FontBBox [ -250 -216 1166 1000 ]/MissingWidth 324/StemV 73/StemH 73/ItalicAngle 0/CapHeight 891/XHeight 446/Ascent 891/Descent -216/Leading 149/MaxWidth 972/AvgWidth 401>>endobj21 0 obj<</Type /Font/Subtype /TrueType/Name /F5/BaseFont /TimesNewRoman,Italic/FirstChar 32/LastChar 255/Widths [ 250 333 420 500 500 833 778 214 333 333 500 675 250 333 250 278 500 500 500 500 500 500 500 500 500 500 333 333 675 675 675 500 920 611 611 667 722 611 611 722 722 333 444 667 556 833 667 722 611 722 611 500 556 722 611 833 611 556 556 389 278 389 422 500 333 500 500 444 500 444 278 500 500 278 278 444 278 722 500 500 500 500 389 389 278 500 444 667 444 444 389 400 275 400 541 778 500 778 333 500 556 889 500 500 333 1000 500 333 944 778 556 778 778 333 333 556 556 350 500 889 333 980 389 333 667 778 389 556 250 389 500 500 500 500 275 500 333 760 276 500 675 333 760 500 400 549 300 300 333 576 523 250 333 300 310 500 750 750 750 500 611 611 611 611 611 611 889 667 611 611 611 611 333 333 333 333 722 667 722 722 722 722 722 675 722 722 722 722 722 556 611 500 500 500 500 500 500 500 667 444 444 444 444 444 278 278 278 278 500 500 500 500 500 500 500 549 500 500 500 500 500 444 500 444 ]/Encoding /WinAnsiEncoding/FontDescriptor 22 0 R>>endobj22 0 obj<</Type /FontDescriptor/FontName /TimesNewRoman,Italic/Flags 98/FontBBox [ -250 -216 1163 1000 ]/MissingWidth 377/StemV 73/StemH 73/ItalicAngle -11/CapHeight 891/XHeight 446/Ascent 891/Descent -216/Leading 149/MaxWidth 969/AvgWidth 402>>endobj23 0 obj<</Type /Font/Subtype /Type1/Name /F6/BaseFont /KFHAHE+HelveticaNeue-CondensedObl/FirstChar 32/LastChar 255/Widths [ 240 258 407 480 480 759 556 240 241 241 352 600 240 352 240 278 480 480 480 480 480 480 480 480 480 480 240 240 600 600 600 444 800 500 519 519 556 463 444 537 537 204 426 500 444 704 556 556 481 556 519 500 463 519 462 722 481 462 463 259 278 259 600 500 204 444 463 426 463 444 259 463 463 204 204 444 204 722 463 444 463 463 296 407 259 463 406 648 406 406 389 259 222 259 600 500 500 500 240 480 407 1000 482 482 204 1037 500 240 796 500 463 500 500 240 240 407 407 500 500 1000 204 990 407 240 722 500 389 462 240 258 480 480 480 480 222 482 204 800 289 389 600 352 800 204 400 600 312 312 204 463 556 240 204 312 289 389 721 721 721 444 500 500 500 500 500 500 722 519 463 463 463 463 204 204 204 204 556 556 556 556 556 556 556 600 556 519 519 519 519 462 481 463 444 444 444 444 444 444 667 426 444 444 444 444 204 204 204 204 444 463 444 444 444 444 444 600 444 463 463 463 463 406 463 406 ]/Encoding /WinAnsiEncoding/FontDescriptor 24 0 R>>endobj24 0 obj<</Type /FontDescriptor/FontName /KFHAHE+HelveticaNeue-CondensedObl/Flags 96/FontBBox [ -250 -212 1244 1000 ]/MissingWidth 556/StemV 82/StemH 82/ItalicAngle -11/CapHeight 1331/XHeight 999/Ascent 932/Descent -212/Leading 398/MaxWidth 1037/AvgWidth 450/FontFile3 143 0 R>>endobj143 0 obj<</Filter /FlateDecode /Length 144 0 R/Subtype /Type1C>>stream
HâlU}T◊≥≥àÀäÃ‘fFP>X@QêU>åJÑ†êXdïUW	´,Ç$“T‹*QOåöÆÒà‘Éêäb?bh,´¶+ËFs(∏òÉ	Ì¡s6}`¢mOŒ¸Òfﬁ˝›;˜wÔÔæG!ÖQÂˇJrjRÍ¬ô©∆Çc±iça©qã1Lo.Ã7Zå˘È´FQâ“$˘PíØLÚìKSøSÀº˛…∂'sîúç˙… Ÿ–‘È?çΩZ’*?Ñﬁ˘ ŒOÄÅâ'|=è{!9EU=≠7o*+2≠[_,Ø	"„‚"Ñ§|Ûj£êYf)6æi“
◊òã6ôã≈∆¸pAH*(2FÒ!√h1ïê›Áâ
&ã`äã˘∆7EÛZa±©–\\∂…($•Ü¬¸YÊ"¡D|-[V[L˘&Cë…h˘/ˇòŸ¬sû!j⁄º≈¯¬:ZÑ(Ú 7Úê°â*§ï!
§–Ñ¬Â(ZÜ‚z	°$-2!dF®°DRV$Cr4≠A—Y‘éÓQ°TU'„dãd…«À_ñ7 Ú+¢5ä~•Z™LPñ)ÎîèÈpz›H˜™ê Oï™˙∆mÜõŸ≠m‹§q˙qÁ«˝”›”}ë˚6˜˜˛Ò¬x”¯Àj_ırıYı!K<v{¥jê&XS§©‘¸M£ëÚ†vÍcØì«ÿ:§!Vçö-ÙöÌ•Îﬂ‚V™∫?ŸsÛé∂gñJÉÒÏí'ﬁ•‘ô.9,ŒeC±w6é∆:-éj≈±1Àùßì `LÉX-Ã™áò˚0Ö{·tóº/føÔã:-D≠Äÿ0`π7ËûÜcµxV!éôãâüı1’·íwxˇj2T9©À∞K~™XÿÂƒªËÁj‰z<ã÷ÿ ÌRèù:-¬VQÔï≥êπÚaº\8gV‡|Å„˜„»‰1OXàÿ˛Ä Ì¡˛ƒRâ0¬® Ñ”ÿl%R}[:,Ç¬.Ê÷©ûÖô#ı]4”0úùÆbnÌä´à⁄·¶±Yù“’,¬FQ.-r≤¯Kz_ÀÒœO˛ÿ3˘€õgø§˝z30d.¶gF`-'“MÔÉ®;uiKÁØÕÀxù[ˆ∫2>%)O÷J¬¯‘^YüÿΩ≈óƒøÄ˜1Ud:+ ∫Ÿ≥¥ÿ¥bV/›ºÇgZ*ÊnÏlÁu€ÈÇ˝x.dÄo{∞è≤/Œ;»U´òf‘q¯≥Î◊~k¬¡xR∆ÏA~ﬂ∫∑ªˇÊ—Âã8ÊZ∞!+ë#°W—£å!¡!IÔI”§l5æáSÈÑZ6ˆ‚Ñ.H∏Áò'g´∆r∞C∏ìj°Xî_É.ˆŒNÂ°∆÷øˆ÷«Õ◊øçAaÂ˝úéŒ8Üyàá‡k á…¢Ôö˙∆ ≤ıÖ\Uıq0(°⁄âo=„|ﬂvØS"äzëb$)I:≈û,?áÔ‡bãÉ‡eêÕ1C0˘Ê¯¡î%Ñ˘yÀ7óÛUWÈÜZX Ó#µùÃ}ï'Ôd;˜=$áá#ìí,ë:ûëtñæ~¨Ω#NÍ¥,?-ç∞póNéÃ2¨Ú/ƒ≤ﬂ
nèËaz#xû™˘Ò’Ó∆ãn∑GÇüÒŒp¿˝—<ı£ôí<.Bª· ˆÉ80ÏÉbàÖ¿r"∫—4Ò‰Ïáß|úg.;¿Wg“Îﬁ√1Is }√πk<Qi'õXF‡aeΩùùG{EûèF%ÚDÂ–2:≠ìòºi˚LÏåm‰}≈œ∫¯ı—aÚ†ÂËÁ§øŸx4HΩ+}(◊€E_Çl%l•/‚l•ã∆ØÁ*±;}5ê≠¶‡GJ¸≠i≥:¿fá
á◊5ä\….R˘@ËgáËª◊ç!…áÛXMÎÙ,,ß!‰ªØ`∫òCg„âˆ§ˆè€€µ¿G6ásÿLãzˆ∫ª!/	Àfo_Àí‡ÂÈ{á◊yÏs≈∏òA¶_
"Ωk[ê‡É5oÉñT4Ó Y4<3¯‡XÚ‹jﬁEÉ∞sÈw8–Ál sùäSÎp&¨‚ô~à∏û‡ÛØ©±:aØäù‘5"Moi¢üÉΩpÿâìˆ|ÍQ“öm§=/0"Ù¸Ø`+Œ-˝Ÿ:ú´£5PE∂}Tõ(ÖäÚ6≤´®¶!Í©B)íeX°¨~™ HL„ÄëÎ *≤H◊ï‰S3`wrÚ˙íhph,†‘I\ÀF:ï‡AbèÙpÖ‘Øƒ4èïÖ"e©w…·ƒp˚úÍIB5rNB&9
R7@&Œ·ı
–ƒZ2#qoìEÛÖ”!DØê.:FnqçqΩˇËÄ)`¿:Î/z÷üûÜÏ˘°Y´^·˝â^ûµÁÑÔÇ2QÔbn3w•,Èì™ñ‹ƒæ>8Õå'•ÒÃm¸Ù¡8ú´M» Y»1Ωò›—}è◊—8Ùãò7-«1∑· Ó√j¯çˆNsS«‹Ì™[A$^CäÍÈ§ ùú€«á=YHuédŒáîßû‚òDÜßïRDÿ) /¿zŸ„…-|”~ú¥[7≤[dŒ
ã6}14˙I.Æïx±}∏÷N9ùr'π ≈8\;h«)Ù€øúrH#óNI|Zòƒ(Â=û
µ÷“—ª±ÅyÊJ◊…º≠:J7Ì˝„©C\ã*¶∏2%AÌRi∂ï€óµ¡√êŸΩÍ≈ƒ.–w1g¿Krgˇ†˙ÿ⁄Ì∫˙ß¬ú\Î[K∑rXiR2-…%W$jgûKˇÒBk˝˘:ÆöfJíkö¨ˆ±©˘˝æMµkÁé™
üÕ÷ˇ‘]ÌAQUqòu›sâö’Òrabùªí*…C¥-ƒ—ePAP^%Hé)Ü<Uë.ÎF·†¨Ò‘$
L-D ¬"◊t6SÊHê P9¯ªÃŸf˙›ãVN9sˇ8wŒ¸Œ˝~èÔ˚Œ≠¨“¬EÊíqòÍ®cÙZ™Ê·(› ±ÕëQqë´3Îøn6WVóÚı«Ø}RgØ.‹içh˝≠‡ü1•UÄ¯~∂õ^…=(Ë™†éTù·‰õ5x6w!≠‰∫	€b11IGöì⁄40˘KpOòòã®€⁄ò‘¯L≠ˆÍàz3Í‹›†¥(j˚aµ†yÒÓª4`®;ÿFΩq–¬Z}0ÿÂ0∑yâ»YºƒΩ ˚1_ùº¯}ex4ˇ:îıx—MBt‡X—€5PÊ:ù™s˝ºÇ2z¡ëázq5ß£{‰|fLM¨Üzf—Et"∫@U¿∂576—bŸrı›r˘aÉÊYg˙!
«∆nrLm1ÿı_/Y≈ß2˝zÓL.LG€}∞˚)x˛úîßúaÑ…ΩxgâC3ÿlbUt n'A‹<hÒÓ$g Ãß˘ÎJ≤`”k¥aA˙.F]àVqv[Ñì
∞:Ï-ÿ&¶qrF≤Ê˚ËvÅ¢ONRÀﬁÖUm\ ao-30ÁÚ‚#4tj2:Ç[H1]áäıEuSô÷¥î§˙S;4‚ƒçÂ-¥:B]Ã¿Î4`wΩÊ…,”§J*∞œ+e+¢$§´„„¶Ô.ﬂ¿€à Nf:ç)æ%1ùo£$bb]∆Ô˜¶¥ŒÌRß#¨O/:ÇpOﬁ¶a÷±©èˆaÜX«Èl≠dù1):?œt(ü_¬îîJ4øú˘=…g¨#uûÇ¨ûx.¨ó‡(°˙8–AÇj°·‘®2àA∫?–ì´Ã¢e™·Ù¥]@Â∆ÛÅîîT»N^ñ«©lKßúô–q¢·Í„ÃÛƒÎx¢Æë±„∂ÛŸ)'Vh¢◊ºµ>]k lOg 3^,È\πVl”SãÂ*«ÒwSä√¡C,äö~HÈW÷‡§RœzÍﬁ‡’ Ûƒs#8„(y%SgÍ…£˙n·ÊgèÄ=ÿóç‹(ı†ˆ‘>Àc.vãzÔÄó¨¢ˇ#HÃôò†>÷?$1”ÅÚ»Ã—¸B[8'@æâƒó7•^–Äˆ4,5¯≈Çä≤qIIyRb˜-Rbˇ>wúR=–ãÁNœrıïàƒÉé›–1?Téw§s1p,.êa{Ù¶q|˛ÿX™¢~‘˝4uÌÖ¶öÛÂ»,5’a—RÆ-ˆKR¬÷`Õ`ê‹˘°˛\uÒ¡Ç√<[“À∞5Ö{wõ≤5´ﬁx5fª™£ÔÇ—r’¶|(º"¿!Dê}B%N‚:ˆÉı—x≈zPÂïÃÀÈZˆŒÂtKÓó≈+vm»˙ˆ21“D5:Úc+®Fı«C´–ÙU˙£ù.?µUwî•,ì∫ﬂ*Œ¥»ÏƒE"⁄YZ˘zﬂßUÖ¶#¸U¶`Oæ!KìòW˙ôÓYº¿qçÀOZ∆„)_îÁõê†ïo&,>xÂ,/ùm2fúÆ/}‘R%	sf*LîqTŒPãNJv∫G¿M¨Sy[0∫∫áåk5DáahXQ<fØç”0CU&Ú´-/S¿bÄÒ«ôã3âèºûèkºJD…¸Qº/ÚJòµhk¥√˛ÄMÈ&È2Êµ0äÒC≥ËöŸ∞F˙b±åπ<Çµ0èÀâS•Êgøù¨Ÿës»¥[´g
ÃfCùÊ∑*Àı
-xãW1héŸuÚR£UújU¿ÒAeÉòÃA°l/®Ù≥ïÓa`ü»´Æ—ÿ—øΩ÷‡ÂA∂â]=OuC6ú˙é>Õ)œ¬!´¬(T¬°â‚A´‹¢˝Ç GoeﬂÉ4‚ÁÏº]ˇse+©oﬂˇo©wö«Ã4“3ÃNıŸZ3·YÿÁ(&rπ"˛endstreamendobj144 0 obj3582endobj28 0 obj<</Type /Font/Subtype /TrueType/Name /F7/BaseFont /LFHAHE+MonotypeCorsiva,Italic/FirstChar 32/LastChar 255/Widths [ 220 280 220 680 440 680 780 160 260 220 420 520 220 280 220 340 440 440 440 440 440 440 440 440 440 440 260 240 520 520 520 380 700 620 600 520 700 620 580 620 680 380 400 660 580 840 700 600 540 600 600 460 500 740 640 880 560 560 620 240 480 320 520 500 220 420 420 340 440 340 320 400 440 240 220 440 240 620 460 400 440 400 300 320 320 460 440 680 420 400 440 240 520 240 520 750 440 750 180 400 280 1000 460 480 340 960 460 240 820 750 620 750 750 240 240 340 360 600 500 1000 440 1000 320 260 560 750 440 560 220 280 440 480 600 720 520 420 360 740 260 340 600 280 740 500 400 549 264 264 300 576 500 333 300 264 260 380 660 660 660 400 620 620 620 620 620 620 740 520 620 620 620 620 380 380 380 380 700 700 600 600 600 600 600 520 660 740 740 740 740 560 540 420 420 420 420 420 420 420 540 340 340 340 340 340 240 240 240 240 400 460 400 400 400 400 400 549 440 460 460 460 460 400 440 400 ]/Encoding /WinAnsiEncoding/FontDescriptor 29 0 R>>endobj29 0 obj<</Type /FontDescriptor/FontName /LFHAHE+MonotypeCorsiva,Italic/Flags 104/FontBBox [ -250 -303 1081 1000 ]/MissingWidth 288/StemV 64/StemH 64/ItalicAngle -11/CapHeight 790/XHeight 395/Ascent 790/Descent -303/Leading 122/MaxWidth 901/AvgWidth 350/FontFile2 148 0 R>>endobj148 0 obj<</Filter /FlateDecode /Length 149 0 R/Length1 151 0 R>>stream
Hâ|VTT◊›Áæ˜5®4±„õ¡7vA4Q±ƒÜT$1ë"R;
XQKÏb!6LÏ˝´±ƒÿ5¡®q·G˝K~Ú-09†ãµÚsÔ∫ÔñwÓΩ{Œ€˚ú®ätH	‰„ó‘::öWÃ‹¬"‚MI77O·!˘∫ÆR’£1€úRy}TRtº÷“n¿ŸçÁ·—qì¢Ü∫Ø€∏$MÌ1ë¶—'zã∂@á|»1ºP-∏ROûœ·y√ò¯‘¥RÁ%[xæ®íóa
˙9¥?–£†ƒõ“íΩb˙e{5¡hØœ˜ıaPµO'%¶§’ùÏ ";Ó1I„"ìñˆΩ§Âí$ÆP>kµ“⁄QàCe=“#D	∑*:â∏à≤  Uî~¡˝ÉAP_	%£‰1^Íä8ÿ`ªU˛ZÄ {ˆè®7ﬁ.r/ m˛\¯•$+:ßJï´ºÁ\µZuW7wèû5k’ÆS∑^}Ø™ﬁ‡›P36j‹§i≥Ê-Z˙¯∂Úk›Ê˝⁄∂kÔﬂ!†c`ßŒ]∫~ÿ≠{èûΩÇz˜È€Øp»ÄÅÉBá}ÙÒêOÜ>"|§	£"FGFE«åâüêòî<.%u¸Ñâiì&Oô:m˙åÙô≥22≥fœô;o˛ÇÏÖãÁ,…]∫l˘äOWÆZΩfÌ∫ıÚ6n⁄º%ˇ≥≠€∂ÔÿY∞ÎÛ/vÔŸªoˇÅÉá9zÏ¯øNú<ıÂÈ3gœ}u˛Î/]ærı⁄ıﬂ|[xÛª[∑Ô|◊l±⁄ÏEêï∆¸KO0õtƒtöAπ‰Á≈aë¶KÛ•li£tUvñÉÂar∏ºƒ+ÀÎπZCıR™QıU[´˛jÄ®vSg®[‘≠jÅ^—ªÎ=ıΩQﬂR?Bø\øÕ :CuÉõ°Ü°é°Å°â°ô°ó¡dàÙﬁ.ﬁzö–ú5ÕC´•’”jÕµ6ZÄß•kô⁄\-[[™m‘
¥Ω⁄QÌ∏vVª§]”Óh˜å∆Œ∆Æ∆ë∆cîqÏìJO+ΩGﬂê«¯_äØˇm∆ü…¯Iõeí´…‰réW∫◊3’]≠©™Â¯˝‘ˆ¯7ˇˇP}N~W∆_€‡ıˇH√Ër¸Í;áT‡œ—Ú¥¯/2˛€åﬂø§1ˆ	û‚9éb¿··X	î∫ØÛJ=J›K›J]Kl%÷Kâπ§†¯DÒ¿7‘¥gŸWU∂g—UÏiˆìº≤“ÓjÔ`oY‘∆kõTTﬂ˛‘∂◊ñg]a›d] X∑ñÌ≤È≠…÷pû˘⁄˙€∫ÿ¸,°ñAñﬁñûñnñ.ñ@K[ãØ•â≈`©n~m~a˛Õ¸‹¸§lóπ–|≈|Ÿ|∏õnﬁw7÷<»b6˚ô}Õ>ÊÊ9Z)'ÀÖtº\hﬁ¥ø/"Fƒâ…YMxó}˘€–≤&¬ﬁŒ˛ìÌˇÌl*öWåˇ≠ÖÁ€A6#Yb-V‡'Ã∆",¿:l«∏`>Gá,≈3<«B|äπ$¡ m=v‡ø¯øav·Œ„såBr0óâØq◊pWp?#
ﬂ‚:n‡D„	ñ‡;‚&bè0±É±àGêáD$#	„êÇÒH≈Lƒ§a2&a
¶a*c#f`:´v&˛É«8Ji)§#'™ÑîR(¶0˙U¶*ÙáÃèi}BCi'g™J’®:ç†p¸/h$ôhE–hä§(ä¶C±4ñ‚(û(/qã\»ïí(ô∆Q
•íπ”xö@TÉ<©&~@1’¢⁄4ë“®’•z4â&”öJ”h:’'/Ï∆j@*«òt“ìÅº©!Õ§YxÖ◊¯7~$çå‘àSeRÕ¶94óÊ—|jBM©5ßîMi-ÊqåZPKÚ!_‹√}ZÇ€(¬]ŒÅÿq6Ï≈>—É¸qápVÙƒ~¿9Ã¬iÃ¡Ô"´Œ πÑ≈‘GdR_ÍG˝Eéà˘¯ß%…4@¨´ƒj±F·l+ØÉãº	U• ÷È˜é\~ﬁ„Í(Ö„±bÇ°‘€a+8´ûa^ur<ñ˜îÀÒT$ˇôséw1ö¸3üﬂÿï∑æ”hsp3(ùô‹à⁄¢ñR*˙  G‡ÜÓÃ±^»Ê˝2cØ£3m~G[1Ñ=dBc8Á»fhá®¡Ω⁄#3ÒZ¡]0±ÙLœ'ß1õ=—ô´Û∞åàe Œ£:Ùdæ'rÕá;jrf	c>g≤Mó√í∑‘M¯æ—ƒjI‡Ø≤€ôï˚9zﬂ7$'∆–Ä1¢Ç˘∆Q¨ö÷»l‰‚y1{¥é
©àâñ"[ºî8 +r-9Zﬁ©ÙSRî<∆°rm_¥ÂìB0ò5ô ò”X5≥∞X∑˘¯åˇN÷Ô!V’1ŒÑóP»z10Î:∞:2héabÉ8%Œâ˚í´dí¶IπúSzÀ°ÚF˘ê2A…Q
uÀuè8 ®Œˇ0hƒ~
DgˆÒˆC<Î8Ö’;õÎ<é Î¯∆V√„>Gõá¯ÖuÎI≠®;◊0Vg8mß√tÑŒ”%∫Cø“kQY¯äé¢ãà‚:V$ãtÊeæÿ)ˆq¶+˜≈3Òú} uñ∫KÉ•iº¥^⁄&ÌíNJ≈“è“CÏ£ wí˚ÀYÚBy∑|\æ"ﬂî_»•
îjäª‚£ºØ)ÉîPeàbRRï) rÂòétıu˛∫.:ìÓW´S†”Tß5]≠Am\W¯ﬁ]≠Çïêê@H¨¥H≤ëÑ2F§ï≈√.~4Hl∂äÏ8ñv¸àc:iKFê¥ÓL2©k7mßMÚ'ˆ ©àá∂§I«È˚Gfjœ$Ì`œ∏c˝…‡‰GxÙ¨0ì’jÔ=˜û≥˜ûsÓ∑ﬂΩ[@p‡ˇÔÅÔ6˛éFX·SÚó—É(/ G}ˇ H.?â–?= ÛÔpÈ0Ÿ
#ó£
@„MºÓ
™BßÒ3ƒ Ò1Ë(¸r˚å£∑Òx∑ˇ¶Eú˝ˆ"/>ò~}Ä;ΩÉ¿z"à˛Ä?Üé¿Ã◊—5∏n¬Û∞B÷l<º~Ωß«e`\Í¿z2L¸¨¬W0øı†œq◊Ò%Q ËS‹
— li∆ÁÒ=tˇ£
‡¿ªxzùò@[1è~äÀêΩKLív¢Ä:Ñ˜£sD∫O|à?ÏøÇ˜¢E*˚∆?Ò-`ª"I|⁄‹G\$˛Öˇãß… ˇ¯]¸˛ø‹Ù"ÏF¸=æË6ÆÜåÑ—øaˇ±£˜»+®Ù4Â}Õæ-ﬁÜzèªŒÂt‘nﬁd∑Yk8ãô≠6´ïz]πVS¶V1•% ‚"Ea-ßd$ÅëS‡¬qV¥≈EôçãD\RõÇé°«:‚"]·ç6"œõ±-y∞L|√í_≥‰YbÜmCm.'+p¨¯Á«fqˇŒ(»/Ö∏+ÊÚÚˆº,≥ÂJhòÕ+ËGC¨à„¨ ÜOå¶Öx∆À)Ç\Ä¬ÂDEàE âa.ï¡·vúà∞–í!PÅºª∏ê vr!…ë¥
C˚≈ﬁùQ!d0õc.ßàÉ#‹∞à∏±‘ë7A¡¸4¢<(“˘iÿ§öb3ŒπÙtñA√qGÒ~nˇ–SQëäIs®‚6.$n;Ω†w9≥¯ç=Q±0ò≈hOtu≠Nd:'B°ò4õ:ù|‹‹@¶}íïöÈÙ$+˛|gÙq≠Y*c1‘ÂÏﬁ5É◊ú0ÕJaÏäÊ#ÄA±ﬁNJ}Ròk‡©'~êπn4}0ãUô—ÆSÊ´ï]¸ÏÍÁ®K`”{¢úY∏ÿP®*£AÈ]ßÆuÚlÁFçÀôaTkôŒîî>äïèÈÚRﬁ\í¿ÎıTc…#Æ "≤#,xÂD¬⁄,öQz§Ã‡√ê—$‰/ûfZ§Ö†¨pˆN?@ .wcœ–√πïyÄ$QÇÀ#»Å~]±∂VB
Ñ•œ⁄ÛÌFóÛÑÿÕ•VÏÜî°ﬁ(<kqC Õfiïß≤<ÜÜ8±3∫÷f—∞·*‚›éòHƒ%Õ‹∫F˚mI3±ÆyÙxú8øì?6k≈€£)S^&å∂à∏¸ˇ®¨È·ıÿåå≤¶{£∂°Ùî¡OO«`i¬*¶”aéß„È°ÏÍƒ0«2\:”›ùN	Òıê≤´sSëüéçbH™Ë]ÀÜXåí"∂&2ÊBÑ‰l6eYgd∑}6®g~É≤[à∫EŒ‚8BÓï;Ãê zèYeVY°ê6≈%ñú[‚)8Ë±≤9 ≤{´«Â_√ëj«ZﬁT}§˙à1’‚ıF)RCQdù«Û§1•1S§=1û≈ﬁßúuﬁ°î<N{éêöÍ√F≥µh4Ò√B¢áËÈÔç«á[≥XÕwµ|øóËÌO$Ì¥ΩˇwÕEÊ~E≤≤U"í¢çﬁZ’QC¥GRuµŒÒÒë§ÍírLß‹]â$;.µ˜]⁄ùå’ÏÃ‚ÌW€ôéØq/./Êò≥¿,®‘~wN*ñÛ¢_Â˜´‘∫¸ç‹fYÂHwNı]…Ó ”&I˘RÂó¨u~Fdí™súeÊ'ÎÙRÖ†«è˝˛zúÕiÇñ”&Ïmhj‹b∑5niÚ6 ãÀ9ãÕn≥CU≥ﬁEóÎ uÌÿ◊T6ZÆ’Ëö6niátÂﬂóC€∆Y¿Tö¬g≥◊a;u«h›r?Ò¸πó√;û.VZ*´j~˜BÀÿ.˘˙ÃG+KKó˜˝-∂#1Âh6®Ì5•Ê†ÎZÁh	U≠Ø≤øq•Jﬂß∞oíÀY}EÕÙ◊£”âÜ⁄ë_û¸c2ë|”Ëu\v¨5ıÊ S'¶z˚ºe’ú™ä€l;1„®5û~~È˙ÃRW√±zøÎ◊ﬁ}=ÓãÁ˚Œwaã'Z¨`Ù¨«5òÅs•¢RØ®¥‘÷t¶ñoë-ŒıˆXˇçcm™ÚÌúÆæ∂ZAï…r®ucÔ°∫Ö·êpFò®˝≠„≠D$ÑOn="Sx[§îaÑ÷@‡bë†)*,√dÒ=æ–d—òLÅÆÀ‚˜Ø˘Çeˇñ/ã¸∞¥‘G?1@ÍœT]P◊4Zo◊Ø˙Huª˘aÚŸ¬Ÿ¿ ≠`~e ‚øÚú6r∂Tÿj¡ÖE RK£Ø5,BıéóÏìL=[Ô©O’ÀÍﬂ√≥·S|1ØÌ’∆µ)ÌÑñ“∫è.,J‡í@Â»-ÊP ˜ÂbC≥∏õÛzôÂÖ<x‹π;Lì[C—‰Ÿ˘…Ä%¡âôü/ôüGuuÄ§¡£hh0 ÆÁBÜcV–a –jl4±ñ¶5¨¯ö0Ú…ÈºHyÑ5Å¢ÉVÉ$	Tô¢∆`˜Ì≠®Ì´÷ñ™éπí;‘Ïcı%˙6MpÁ˜0Åkfæ⁄∫gè≤ƒ¢∑lÓûN6Ωx¬‰vòî;\]≠ˆï˚œ9” ÍÓ6ßüî+î;û‹˙
ñØ<˜ë√Ri°JzûÉØæπO 5ÜÉ>µŸ™*∑xΩë…ΩR°(T⁄Œ<µ|ce∏dØ^ÀπÚâ0&óø† .£N4œ◊∫b#Ïvõ≠_Ì◊®’~õ∫ÕƒXfM∫˝≥’&∑)`˙ñiüÈàÈúâ6ôBm Å™ø_ôh√◊Òá©‰¡Ûº™V˛?∫À>∂âÛé„˜¯ÏsÏ8±c;~O¸rvÁ‚ó¯Ì∞‚s7q‚ºê âs\Id–å∑–¿D§-#ù†@ëXÜîäé—Q®4¿ºÃIUc–ï['ÌØU¨4mkõEõVú=gS^∫Õ:˘Ò=wgŸ˙˛æüÔÔ7ÿr¥…7◊&¥∆4âg8 T%Q™\©›.§–ìH¿*≠‚∂¡Id¨E8r∞¥¸ërfô,îèï≤¿÷˜π{êyò∞oYg∂Ä'	3œ~˙ñ
H^>Ä¨ ÂîÀYìÖS>˘D,í_ÖÒÖ‡©ÑyK˚e•Ä’ÿÁïöŸ;ïœ„ÁÌz#wÔ¬πçç€Iá≈)Y,®µõ}6ππ’™+v◊(ªﬂ˛xÎÍîUm"ÍH}ÿµje„ÎÕg÷L‹Îè'∑mì®Œiûÿ˘AÓ‘Ã•4nzÀ´Æ‡’q Ü∞ØÃΩóªıC⁄≠≠r˘uÉ`¿lav˛˘#∞zVßóaòÚU<5≈RÓ∏—OB˙lGokõÂA0@í´≈"πX,í¯|S∏Qé„∆†ÑÔ§H(U,Jâ≈|_ÙHÛ–‚Ä#vNUé3>a¿h'É¢ÇÈ6ËAx5Z®bRsD?H…ä¿$íø¶Tm„ëXbƒ}d∞MH’åUm›‰Æ≥Tîù€•J'ìÖﬁõÉ2iXù¬öG¨˝†˚†œÿ5;W†˛Ω¸Úﬂ‹ø·i~-Ö˛„]}l√ºüıõå˜X-Î3r˘µ¿Ù∑°ŒF5êR‡Ö›¸Û™`UÁ≠.ÒhâÊÑüpÿºÌπØö€öN/Î	&ï’¶÷À:~¥{’ıZïEáªﬂ}{êµ“†Ë'ΩªﬂÍ[i“‚µvº-˛Í{e˙ n≥0>øtÀMP+‰ÚsˇX@∂WÎj‘8iî}æv˜ËàjuÖ%JΩú∂î Ìó”CQBmpª˜˛Ûõªû2IÁÆcC‹ü"˝»ﬂ(Ôv!¡iKïx<é„S^RÓıí“«ö.Tg8Äí:º∏£3–˙ÑFx¬oÃ@--V∫:Â®£]pô≤9ÑÄF¶ìÀôﬁ—dädZPÎdıY;n0‡^2û¿·:W(∂|≤˜W¿ÑtÉﬂ"\p-ˆà3@O+¬c°≠ù
†8ÉFd°977?óéu$4ﬂîn≤æèÕ´XØJ≤ı¨±Ï¿ÛÏ∑±H≠s!L¥Ô¢'k.	 %Û9-S<6„ìúÜâ
„≥˚OÙg#äç=ü“f£„£ƒB{[I¯&∆ñº‘ˇ¨ß%Ÿ’”≥ºßRZ"U®L˚◊øxr_º©µÒ%CQìøDU"ÁS∂ûÛÿ@á“∑l«µ-Iµ≤Z´ØÂ†7Bñuµ˛Ü>°‰€Vñåw/ÂN©Âıùw6Ößr˜ˇ›◊◊ÁIå ˙Mü¸È„…•π·îØÇ„|æ¡%ã∂1pK‘äk™Õ
≠≠¡≥˜≥TÓén"±ØR»/*·,A›_Yò·+∏ê.°Ü„˛xGØuÁÁP¬%F <∫Aìp)a"\Etƒ&bú#“ƒ‚˜ƒ_àØ¨p›M4›ƒ*bÑxï8DΩ¡‡TsBﬁ‹úpπ‹Ì˝ÑKø◊ù@6™%.∑^pπb∂ƒ b∆«ñV0^ÃâiGîÇ87R
Ï(íä50·—˙¡H™y:»ƒÑì·«Cï›¡f‘ÎRº*˜h∂XÄÂä¿{ôC 	éñµÚˇì4qd85Á(¿ »>Ç(êÃ1ÖÜuîØ¢Ÿ9v˜‰Cxv6õe¡Çb&3o,ﬂ‡Mç=!`òÕÉ0ÃÀä´èQœCÖﬂb MœîJf“M≤[2©¶q1¿ƒ‡πÉàaSC—3]ö}ÈöFï›¶uz⁄'G≈üÔﬂÏØ0*≠ï∂#@|qUEC_Œ˛l{¨sá∞Lï{Ç%ù≠=\Ám$Î€ÎÃ]'ˆ¸ºÜÎÕ˝=gÀ-¨µ¥’≈≈∏îÄª_lÓﬂX≥(5¶⁄–íë;ÎÅ¥ü/0<*Ô …áMós7rÜÍˆa©((…~‹◊ZÈØØÊ>ÖUsx·o	˜4“åLS˛Œ¯¶¯≠¯gÒáqû>Óåá„(#j(Í@Å£üä»)*°å>c≈¬–∞mó|ëõÒ§\Éæ‘¢z&4Ì†f`÷†‡•+4r`[Ü∑áäDããÎC ≥“‚ãtáe¨C*úŸ|ÿv	?öüáa<œBÄU2…ŸπB ó:à"•Wyıê¨X»˜B®R— ûÙSKC~ª+aïO·ˇ¢ €H…
IŒŸ"zÛ{Íä÷‘‰ËõáOÂfŒ:BuEh√/ÓÅÒCÔ3Ø-L©<ùruG0æT‘·˜ÆÓrâ÷V˘MìBçîè^≤ój^ÿúªè°/úZ≥ıdÓ_„a∆n6)*èÌ¸¸˝˘ƒÓˆUó^Fs7:€e∫EÂ≈B•ØÃ`ù”[S&Q≥‰æíªâÌ·¶ëï†ëFÜô·w!ªﬁF˙¯.˙ }îÊ›÷ﬂ6‹6¢}4x}@ˇu˙.}ö…D3ÙÃäÎÙÔV∑ıüàúf~	7Æ”˜£¸f∞.∂6π∂{l[Ú√OÍ†”ùÙÀ‰rôLâ≈˙ìå<ôddÚä0û«NIDÜaÙœ¿ŒΩ!Q'õÒ¡elZ»E<K°ÉE)ëò)ù¥HMkX°u‡∆yÎPàßµè(-¸;<L&W®5:}$ñ,5ãK]Ñy§°°∆âÈ<±£˚0ÈÃ¬|/¥c˘1lˆª CÊÁµèˆ•«·/aíŸ˙¸‰WΩ˛ÃºñØXÎ¬◊2¬lËˇ—ô_®ñ¬$∆VÎ`∂>∞ßM[;˘iN˙?≤é}N`‚‹›„™®ç£k"Z€µNº¡Ë÷Ó”®-%kﬁ…⁄\∆±ÙÅ‘[πO‹nïÍ˛ˇ)ê¸ =˚áiGI9±Ê˚]ˇaªÍcõ8œ¯˚ﬁ˘„lÁ‚≥œˆŸÁ8ÁÛŸ>€ƒ˘¿Œá/ †™‡ê‚XSh	…¶ÅmRà(’h√6µP¶%åïUB⁄E®udCõ‘?Ë
c‚H∑eL”öÖVÈ™n≥≥˜Œ	ÅjˆÈÙﬁßÏﬂ«Û¸û\èì*•Ìv˛¯ﬁùóﬁk‡Íº:á´Àœiç´JµZfuô3¸"ﬂKõÕ0Ω˛Ö{˙…ÉπÉßˇ4îkÊÀMV.≥Â‡®ˇÂ±£Cw ∑ª´G
∑á∫≤5§Ÿcoÿﬂ}˜Ì∂ﬂ≤#◊ÅsãˇTˇQ›ä~B‚2--]F
u&cHãí⁄–⁄ù¯êVü”]myN´wOa1â
–LÅ°P˝ÅLd®Ê≥êÈ¸dP‚≥á–Îtz£)”BT∫é1ïßÃ˜ºâ◊“W· ∆ÛäÖ©Ö¢ÖˇJÕŒR≈Øú⁄äåöÃÀº=ƒº–	k–∫8Ë<UbóÎoUÂRJ[∫à(T™->S∫&⁄π>ΩkOÈÓvD[[~ıﬁK¬ÎAÒâıüÇƒØ∫nû»dX«ΩérÒ‹ıñM˙™lUMs§9ï2Í4ÊΩõÈá1≥k?›…±ÊÄès˙µœz¯
k∂Z≠ï÷8Ωﬂ∆}Ô«Öüﬂ˛ú  ßˇÇˇÔAPŒH¬˛’P5ö{»b∑á äëíQ@R§õLê#‰IRÉÿ˚R=rDív¬Ÿ-jEòÃ∫."KCm PSb≥;Ç!ôËNêê|oﬂœÛcºä‚'¯IÁ„πî†å3‘\*ì7•22ÆJH Áî•rÈ ‹Ç\ w.E»åF>PÍbj¥ÀöWŒhöÂÈÔljãlJhHπ›R⁄ÔeY"∞ı¿˙˙4∏˛¬Êa7ø´⁄◊uÏ;1ﬂöqﬁUö?us/«Y}5bü-b-µ3Fˆ¯Ûb¡öm{†ÍNÖ_5hË-,é¥‘ΩuB∆ÔÃ‚ßÍÕÍêÕ‡o“Í·5Pœƒƒf0Ë+É±Xáæ“¢G+c≠£F'·4ºg‡<\Ñ )ËÜ#PePk’ÜXE•™æz∑Ukı‘gK•	µß◊ü-Kd’e@m Ù&àn!∏4ü”‡òÛ@~—V)Èπÿx$›=∆An
ñHñ&∏√‘o3·îiÿ4aö4©L˙¡πE„πY9o(P  ≤ƒ#sÄzÃÇL:Ä)ò+í·cV‡óí>Çær∏êI¬ó(√WHQä~±ÏXcW•Ω‹ <+U≠ª1ﬂkãƒ∑ü‹HD¸éñáPeßRo:\fªg∞ùo9P#Ñ™7Eù±[˛_“i2âá^›ûÎz\“ﬁ∏|§5‰ÊDΩ>‹˝"ˇÓ^¡O“Xª˘Ö¬'˚ìçæög*n ¶Œ/>ƒmx`ÅÜ%Fƒ2¡˛‡pp"8TÉQ	B5"bF*«ù£f3ÓÈ—3Y\Ø≈`> ÕNŒ“ß·∫ëZØPö	¶ëÛÖP+¶6H9™°SÕùíIÇÌ∞ÓGÙûDåœCÊ∂ÂÊd¸Äå‡R[_™”ä∏tƒbhóá3≠ª∆9Ÿ⁄v‰áµ∂u}7}]W5Õ¸tsM‘Î‚Óÿ"ÔŸs˜ŒÁ≠çØ¥[´WµÆf∏GÎûMß¬…2_€> ˜Û™ó‘Gë√Kg√Úla63Lá∞àb¿l†1Ä€‹4∞O†fΩFwØ˜¨1´Ü,J‹f⁄bµ°{Çb
ñJÜ1◊¥qM∏0óldEB≤Çä!'_G’…∫Z)ìØ’)	áN6`O…√y-èc‡…àä⁄õÒ|ÌÈÖÎBag¬âì
HPÖ/«◊¶?Ã4FC÷‡Z©∑+˙—<N¸{·ç_∞Íˆ˝?¥ÊèÓÓ¨Úr>µ.wO(s‰‚,˛Ùﬂ%òí≤cM0I¶	ùÅÜDÑ∂⁄l·HƒN¶”i!2l≥u0¨Öaÿ0ÎM–£ëH¬fcÙ∆lBõ®˜ˆ≤Â`-õÄ°Záf¢^∂ÓÍr®6¿q4G¸YZüÊê}Ié®ò8ë!û!v˝ƒ0°ëwcÆ„à‚È~Bù"∫”i≤o,	ç……‰tÚVr&9ü‘ËåIH$ß`ªƒÍŒ2Ë«3mÄ°ò≥ÃØï0ê`‚›πÓ‹¿ ⁄ÁïUI-eœÕRˇ*j2%_,zŸ;ÉÿIQ≈∫?[Muø©ËCüß›Æ(≥(L-. Ææ¡®_Ëπ*Ç∆œnﬂŸ¬¸&è'îÈl	≥Ìo%ÿéﬁ~>\±*d˜oÂcinˇÅ[*ƒA&É¡ﬁ‰ª„˚v]pum‡ùˇ∂zBÈÆÙ`·›…~Ï»•È¡ê€TólxΩ`~yk2Úxj|∑/HQ)˘¸‹‚,6°˙
@\ñx.èb¥»4“º ZAdwªÉYJ*ª@ütA‚Ôä[*È•ÂŒˆ•’|‹Ü≤i¯ ∏`0†≠HΩ,Í˙)xÔ}∫OúÇ˛˜ônz
VJ4$£ÑvaDò>	A∂≈‹B^Ihô¯\&ﬂ∂•Û"`∑}∆¢Í∫≤Fcπƒ.·= +ß˛j(6¿"†K≈ìY™∑¥¬ÑÎ‰ı˛Ú@∫0Ÿu>Ìˆ4Ó)%‹£‚ÎØÑ‡€Z≥%©˙*Ëé4á<—L~èg_ÆÃÓ∫W¯…˙R˙∞ˇ’uÒe¯ê1[‹ [tÂ∞
j	p^‚„ì”_[ø©i˘B°b≤â!úãg©íQ%0îñª  ºÑp—’à™¨à“eäÜÙ5¨
î°∆$ñ<–!Sréh'{»≥‰ER#G
	™äÁë*RnNHy≥≥˘¡Ö9%ƒ)%êe‰\∂òó"¡ˇ≈	ˇÊÃKõ3pi4ÍE`˘∏@m·«Õ*õÀ˝ãÏ'o¨meïuÓjûojâØµêZÒ	ÃæﬁæœieˇGvŸ«6qﬁq¸yÓlüœØg«ˆŸ±}Áúø≈é˚c¸v$‰ÕqﬁÄêf≈â!¢…†å§B⁄QRöäv´–}Y6m¥LlJCª≠tÎ&êêh—Vâ∂@i2˛È2ÿÜTM*fœŸNÄUQúã[πﬂÛ˝}øüÔéª/ˇ0ﬂ»ôπj&“ ïPw¸õîVÆ	‡tqètït/h9â‡ﬂ›º;áç∑ÓfzpFÁr]-Õ¿d` b1˙Ki.'v¥ﬁ_∂xMÛtKã*≤+aïCÕ®~PÓ+ƒÂ ^3øòfÄôËZO2›‹íS∂CÂµˆ·^2œ4Õ¡1ÅÅPÄ3,p
•≈9ﬁ◊UŒR»Sã t?Ê3bH°'EßéáP3È ïö…í!hí“§¸CMî ‰kúU˙á√]Ô/ªå`0xKe‰!¿u{ _±•VK¿ŒCœç$÷Ó9„£ıŒ¿ê›ƒ∆Í<ÌÖ±ûˆHÎµÖÓCmk€€÷5
•ÀlÛNoŸˆ´Æ∫≠/€$ﬂ¥›g˛#V˝Ó©B‘[cÛjeÅ…ì≈s€ÅÆ¯÷c2ÆÊÿ˘ÊÊ:ì∆\≠ß]¡⁄éâÔÌn˚ÔŒD}–õæ”ËÆøå2·î	§œ7x\®bT,…∞Ï ©2ê§ )Aˇ.ºúp^PKå£ñA-êàÒèú˝s¡¬í*ÜïËÁÑ@Ãäò ¶ú(!uì-E·‚›≈˚ÏT^Ï⁄•’E.VQÎR{ßâïI	Î·z˛÷ z”è'ºÈ˘gÍ¬ıL,ÏÛÌ°∆—,mÚØ˝óÎëÉ!_ﬂ7ùˆ?˝ÇœÓ)‰:ÛÎÛ≈|ÒœG5/ÊﬁqD•è‚9–◊ÉÁW¿üÙWÙ∏%=î˛n˙JZB¨4ßΩ)¸Çˆ\÷ë~Ux3u6}Vê
d∑^O%ïJ≤Û∏ ©dr %R)ÅÏÏ»v≤ŸnB“‚ú. ÖπJ‡ßx6ôJuvf"ﬁ≤pûE8˚.º
zK3î[’j~–Ëú.ΩC`7˚çÑ_IR…î–-À
_QTñM:Ïé∑oâxpx9≥=◊öYÛ%ÛuÛ-≥î‘ö°‹<of*Œ
Yºêù»NeùΩùEaúÖÚl9Kqà 4)Ê!˙π∏∫¢è$E·£À< B™D+K•„·@Ãó=Äx%
—^Å|æjŸldD%ÓñŒì¿æ]QLM·¨™–ùxÊŒ≤ç_`FOFçFä&oÔ≠·ò'éÖ¸ıÜLØ≠JüH◊Wˆ1+ΩLΩmuî±¯◊£ÀñöóQî÷dªg&#z6Í÷SÜ¯∫Ü;.èÛì£·≥Ê„‚›ßÚß]∫∆=ó‡√œﬁx”≈Y¯.~ÚÎ7∞—f•Û∑?ˇBÒºzIO#’ºuoARÖTìÜµBL`XÄ:?ÌV(»®Öß€opª˝d4:¿«<#5±@u˘‘C0üÜÔ°Ó(û|ùºIÂÉöQ	3Xäu∞aˆ+eE	®™7;yÖÑpñâÈÛS1vñ…iMF˘òÑßáCÓåª◊=‚ﬁÓﬁÎñâ3nÑMÓÚ”€›“8˙G∆µ®—ºØª§ªÆª•Cƒ§ÉrùHL4≈;xÅ?«ƒK˚¯?¡OÒ∑y)™aRâíDQ F*cR¶$à=‘Ûí8¨?!“2M.A ü%êè-sS’ˇaSÂ◊ã‹‘´MF≥4¯ÿÎk=íZ-®îˆt `Ÿ0öÒπ˝€πZof8„µˆÚ≥CR≈§±ÁS}zI_ò‹çÑXœ™O/∂+ºúÎ±¥7ñÇõû1≤˛Ù∫¶ù≈ü~~üVXç>1•N‹õ«˜·ù@Ö˙OÉ`Ÿzmò∫  dJjú4è˜‚?CëêDµUƒ≈J£YŒZP©,4án±ÆH ÿÏ¶}≈Û'∂>∑Îïóé4∏íÎZÈ«;ﬂ¯·µ‚ëóv_>yµÎ?üÏÎäçÔ?x
q∆|‡xÄ∏!ËfRáÌø¥ü±`ˇÿ.€ârm~&0¶†)òÁAäÛ‘iû`B“h
πiÉî$Vá$Êê84;”8®!4íP¡†4HÏ”åÜqNs%x.†Æ«†O”
Ìt{|¡…÷]sáQúÉ/˙∏7¡Mq?ÂŒq_pJNãË ¢FêD"•Y$3®ÎïæEuàíâà≠ãã}gŸÓ„H#qÛBæTz<ÀŒ∞§4E^ Mà>Ä≤†¢à*4R˝rı#~ÔyÙt≥≈ÆÊ^[1‹m+^~ß£c@n´˚Å˙gF^QÁZçoG-Åûﬁµªﬁé÷Öì˘'ãı{∑ç[Ãˆ‘ØπRÖçˇ.Ê<≈3LU-e°"juDæz˚˙ØÊÍªG{·ŒìÒD®≥ÉüB{ |˛4pÅﬂ
¸z˙†·†Ò«ÙlçT/„åF–Ø◊CΩ»/2ƒ/2ÓÀi„/åÿ„oåò—®Ö iÍÖÛÇvØ
jU¨*§ ®zUR⁄ÙS®=¢çø%®,oi	®PŒ¢øA/¸˝å»åúƒ6s®OBXÄ\pXâ—;yq%Ôî61ü_,µÒ• ÑÛ˚ÂIÕá8AhR1XÒÌuD5'‡ÿ°∂®õ4i”˝l·˝®ﬁ®Æ€º7Âcºûûl~{ ’9Pö}˝Œ±1ùZΩ‚‘ë…&Oµ’]mi;∞ıOh>˚Ó›ƒY<"`è@e√H`ÉrÊ1ØnÖÆCá£[π)–ûê,#Îï·≤ex
&@òîubO∏"ê∏Ê¿Dx*åÖ—˝ü≤∞ü:ÁêÀ™Kî≈a	[n[$DkÓ‰Àù°Ãkyj°<b#ªOº•∂ÖlÜæO¿˜)/fâ∂J$Üm⁄Ë≥WŸ™¬æå∑˚Èóü‹pÿº¥YCMkÍÎ∫∆gÒlk–Í’q´2!_˜˙ù[∂ŸÿÓ¨Øµ((5YC”µ]µÆéµ;∂n˙ëHü°vıâÿ¿E!§Rô•⁄b∆lVL*ìÀ°]À°∑ôÅó˛èÛjäÍ:„ﬂπ˜‹›ÂΩ.ÔÖ@w	ÚXŸ≈	ƒ’¯†Ck–†)ƒP≠uH⁄ò”ââ6£%1RåH–Dj:VEMúâÌ$NÍ#§—4c|î2NGv˚˚Ó>$dÚGÀÃèÔÓ9ÁûÛùÔ¸æﬂwèUöD¢U&ê0	2ÕK†òÑäZmÓüªì£LZòí§Y∑&%â∞(É9Œ¸§Y1öÖâtáïãQ} :Ã’#˛È7êP§fJHL¡cÚ!w‹‹∏ñ85QcGÜ^Ω°Î;Á§cÿWÿQŸu÷ò@õ(¸i¯¶¡˜Ñv‚ÑÇõn±…\l*÷Ø.µ¿òÆﬁ◊Ó‡«Z∫´@új)=k>;?3>&≈˝„GÌ7Áÿ≤Ïœ¥Zv™_ñxæûÈy∑Ò°§[˛√πªg9KJ7ãı3©vÔeiQK…	ùKŒ+ZY¥°®•HRtÙ<)b§2⁄©f≈€™Ì\ÕiOg
™Œ4Ü≠¶ps∏¬È„ç,(èØ6>f?åK®ü†·ŸU/¶ä‘‘<kxsÿîPÒ¬å‚ç6í‚"N»Ê≥\à(±˜Å≥‚sqEôÀ‚∏º⁄E÷>køıñU∫≠s≠ã¨-÷£˛ìfÂk¿Q´ïêh√¿ æïÜ¯æÄØ®!ÒÚëøôπ<Í∑
:Íı°@UÓó=_‰’œıù¸ÙáŸÈRÀ÷W˝»6&˛ÅäN/LÕâ[Rπ;˝¡êà¬Gb,œŒ~˘µ¨Ñq•Ó$s—_S’\œ.Oﬂ¯Ëò®¯J€π¸úâÂãÁ‰N»»ô|‰v^≤mf˙≥”m”=w˛ï;ÓOœìˆ™o´sh¢òÓŒËsÙÂ)Qé~ËwÙÁºb~Rm“JßJ´CÑLÇ≈ ëRPÁ„l’ôS‚å)Q˘|ã2ô”®ô0îxË‚•QÆí‚Üf§E7GΩÓH\ò∏?QM‹ìÜwo¢f4ãTëá€Ÿ\ø∆Ω.và.˛Ω¸Ô®Ë˝‚ñ0|ÎGøÄ≈◊á@É¯æ˜£Õ#ª_Ù7Ü≤æ÷=[U…ˇü≠∫zu∏í/â–ôAŒ>k_—‰gô‰˚éˆ]Îµ„“e5>Œ•±åºÍÖ
∫Ë›`ê¬*µ7u÷œ≥cc£Áø†¸qå≈ñúûı¸πﬁÚ©èLÃN{hr|…¥ eOÃ≤çœW~Îò0+6<aπgÕªÒ·:dü<c‹Xªs¬*œJœÙï˘i„≤""fØ^'^~¶–Î•F|—úïıäù¶ÅˆZ_BEU»=#;Ñ,I£…ÖÖ"´∞êqH=¶æ!Î)å‚)≈j1ÑøIKQKb{D[∑∫$ƒ1ÏπAËo1ˆ;·æÆj#ûïªÀeƒÃß3√Ót z¥e8Ö”ÓkCÊ„{kA”gÂoãÖQ≈ˇ¶$ÒﬂÓyød€]˚uü'v¯˜!”çs]¶ège%CŸf*65¢˜v»t±ûjhƒüÚC`ËqîÑΩW‰hubÅ⁄@ù∞≥%t]îä:%Üã^ÔrµB$»LaΩdSJ®vã“„ΩéÒÁÄøç¿f`– ‹Uƒxÿì¿&Ã≥EP∫Ã§+<0[•ZìPÂêw´<CØ¢ÔÑ÷DÎÂ≠ëªËö™VGY∑V- °ïR∑l£üzh∆-¿;Áem—Ì:Æví]µjtCK°Û∆P:)ÎΩ∑pZß0Á+XïzAº£l†©XˇÆ$Ô ˆÌR+‡{›Tz®æ6¡ÓV6x.´ﬁk¯›ç˜ZÉ±x>àÁcòk/÷ÍÄOùjÿS@€ï≈¥Û˛∏àævå›ﬂyﬁ<Ã”ãﬂ≥n∑ÃTﬁ^Xë®ÔõÅ}Ûû{bˇ˝>}≠U˜otˇF Ë€h∞_ﬂÇàUD3|´W/–œ‘
Ô	yFA%†≈jÖß~|¿ Ôˆ)ãEüÚÖ8$kÑCˆj•¬®$ß¨°!‡⁄kµ^±Dn«˙É4}YÜ-îãæR%ã°èÄõM¿ô5aÕ”©\:&œàå{B-ÙcóºFVﬁ'Œ}÷æÕ∆
Ò1l†s8”.¯π˝+ïÒK¯∂V@Ω Ãëw>{™˜˛Ç9àÿ|V»Lœß¿Ï˘Iúí®£D¯a6vä©æu¿ø†•5:ˇF¿œ∑ÛÜ2¯Â?Ø 8˛ß‹ø\Vî,¨—Å¯˝Ÿà=∑a≠µsëπå∂5Ã[Êsîy¬·<¿ÿwÿ}e¥õπ¶«*SÃW∆“‡=Äœ‚A +[}y£só˝Ãé1øñy.I§)J6Ê8œ˚e~¨æ˛%j
‰#Û,`°<ÔNˆ_œﬁ«ø›A«ò«Ã¡ÄïÌ"û„ƒ‰<Â\	ÿ†»[ÿu~{Qœp4`É±Ò[-ãû2—R√$Z*HeÍi`ï…Nÿ•4E˛œúﬂ•(]Ω"\Ω""ï:gjÑ^\u*Ìw«z€FŸ≠„'bâvîéÍZıâàW>E<?kS:h[0f£b;:^˜≠Ô\F[]„†3ÀÁ¶Á±œÓıªïµêıàıê5	h˜üEU0ˆ5Ë´EÏÔ«}d¸∑èä˚Œ—ÒmYKYœ|Tû}AÆË¸lbM‡ºVæP êè©Z§∑Kâ6Ì0›1L•€j!ΩßYËéº+B¥
:≈{	jˇb˙Jmˆ˙sÓéÖÓ3ˆ¨Î>∆t_À†øÎy«c†ˇ⁄"Í„}∞o–˝K¨˘⁄=j—f–~=_ŸÁ≥–ı#–ºÌ‘°«5⁄…mjª◊Æ~ËÌ„ÿpø2@oÒÏKœeµÔ‹#b…öÆ\ß}zC€Ë⁄A˙≥∫
⁄öé¸ƒúÚ}ÏEz/iıÙÜƒÿ‡Z¨ø‹è6]Î¢]ºgpÊ$üEP_p∂ÜWΩçÜn “C-√ﬁµ-¥	{=≠«Í'ÙT ^Å‹D\¶aûÕ⁄sxá12^˛8b≈5Æ†Ò<ß°îu±¬‹⁄vj16”Gπân´®MÓ 2©ŒÿÜwıƒÍ5®Ñ>VæA›9Bo≤>1Ø5˝@Ò†ˆÍ
¯®.&ó¸9ıﬂæ⁄”¡˙ÂœèΩ∫¶ΩO·z}‰1œ—2-|Ûj˘%Ì¬Zmx∑K†Ì-„µ‘πî£|®◊¡.Êo∞Ó!dÍQØæ~∑Ó◊›Noø¥—W»◊èmú6†ñ†~¸∫ùÃı–8IØ«C‡u2@àÎ Ï¥mÉœE≠‰⁄µ[;Ë˝F;®º‰C‡y§q“◊«ñ1≤Ômˇ_ˆ´<Hé™åˇfgˆ»f7lÆ]I4õ›ú$ª!Ê 	Ià…fâä&Ω3=≥ùùãÈûŸÏ/º£RàƒRTDƒH ¢^cƒì†(Ò,™ê*™‘*  ‚˜~ÔıÙÃ	Iˇ∞2Ø∫˚õ◊ÔªœÆyZ˙Û ·ß§á=â}j∂¨>≤@.+xäû™^ÏïÎ≤Üyë€"’˜¢%6 9ÿãdl5V‘n¿äÿ!π&aE›<\–Ä»©/˜HOyæffdì<OàçÑ¸úë+“s&´¶7\—Y±…j’6◊6◊ÕÂz°ÓÖÜ≤oMH™’xE„ÉóN\⁄‘Ÿt§95È™Iœ;⁄r®ÂﬂìO><e«î„SΩiãıö>Î´˚ø∞ÚÁ÷πunù[c-DdŒÿè`Qã¥`∫Ä»ã±ùà™∑Ë¨ÈÊS˝ìK√¥ ?◊†«≈L<c‡ò¿'\ã¶HõÅÎ032À¿ı»FÆVúbQ°”9@òíDÆ„˛¬ı‹?F∏Å≥Ñ'à@7G^4pÌ—íÅkd∂∫À¿QtGÔ7pL‡ø∏Á«f∏›±Æóy/†”ÄEµ[<ªjo1pcÙ@Ì_<…	˚‹Ñ˛	ˇ2pÛƒ'wxnhÌ ‹®ÙjΩïD•KÎmÑõ∏7·IÑ ‹¢ti}ÑTÅß¥%<çgéûN:ZØVÓü <C·∂’æPùiõFx¶:”¶uøò¬≥y^€a>·
n†Ãm;ì~[B¡Mz?OòÚ∑Ì]Ì¶\ﬂvV¬ˆm+ûÀ‹TøoıÙ;÷¶\6ÁÂkUÆêœlﬂÕe≠Ö]]ÁÀmiáµ2ù∂x⁄≥
éÁJN¢£
…sKˆΩñÎY∂ÂÏÑì±V.9>Ò¡~7ﬁoeÏ!´œö)◊ÛùÇÁf≠∏SmyÓ.\/·∆’yØc„⁄u+◊≠ô3<∑:©b⁄.å˝≤}Ωoß›¯I_ˆ:ÚO‰Y‘±xÈI˛oµ≈f‰P@6“ıa(“ªë≈srÖÔ∂¡óg	πêàﬁ=˝NÙQπéäﬁá’pëíÀókX($`Ò¨¬≤Jy	¶:’/ªz‰È»sìºSú|yüÁŒ*ÚÕÛnì¢:aa°T®.πœ7–Rt»ÓJë.-œê∂«é<yñ(M«I8yÇYÇ}…•≤„[…Ïì{BŒe®ÛÄÏÂê<#…√+Ù¨®…≥èJŒπ˙îV[Œ%Vú; Ç˙ˇn©•'gµÄæ'⁄mƒZ¨[¨√Ã%YïûÿJûE±ö“Ît0€±ûÚ§…ˇÃ1{©ôW∂œ"—`±¯ÛÃ)˛?˚v¥,=ÑrB]…íﬁCbK,í‹Ò1¥ö8É‰õíˇ◊âﬁIÚToÁÀµÖ˙∏Á“^€‰^dˆkø≠§ÃnÖ˝≠2Ø§ÏiZc„@gﬂÿ÷„Ÿ4amı‡çCo§i√–ª∂±X±ÏOï€ÌÙ•G¨=Ùdûßï.⁄“}§–§ÁFÒ§¶~ŸR’≥$"ãB+'<]V1ã•»I’ûBπÓ∏cËÈädäí#˚>#$n`•À´Rqqz2∞©é‘BÖç<ëTI÷od»7K;O”Ô'ûÕrLL˘∆GIV˘ “˙Àv¨§ßmóÁùÆÒHí¥ﬂ£\⁄˙Jgm?õuX˘’7º=jXù∑Z”l9K4µD}%YéŸaëŒByÚÛ‰û¢¥ÅµUåïL6π‰¢˝ÿ'î˝r÷˜«Ø‚Á”ü
?AÆyStdÍ∑äZ…x%ÃIe≥Ω„TDN\˜F„ª,©fËÔb9^≥úS&ñuMÚx“´xN(∆©uPk4^º¨≠Œ[õV™‰j3V¥,Ïâæh◊çNYÉ\"YuçË`|g‰Ñ:ü+t ›ó36µPˇ<Ï\GﬁÈ≥é°ÆNü9óÍË+îwv“≤	F@»g≥T¨©kÂZ%®‡ÎdWU≤µÃXµøFv∂…]ÂË5“Ò÷»⁄ƒ›4£ëW≥÷≥v˚:7U6‰x¢¿≥Åá^^e˝‚öÈ$» ]°Üòìœ8´Mÿ/¬∫ £≥+√ÛZõôÁö˙‰g£SuT6æﬁpSu¢d¢≠Ø‹âÇÃﬂ29˙&¬t’vçd÷ó˚™˛u£@üèeØú—+«¨©Ñm4øÑ©i™2È,Ø¨˜9j1éá¨‘™⁄R≥dtTåÊN%Vª¢‹˚LΩ–’…aç;:îı∑ÀNöΩ
œáæ–~™ûÇ:•kî√Æú4˝‘>∑L,f+*U¿W◊>∑\ŸÏQìt{˘teÂ;Ë…-ïfqÀ“öÑÙÇûÏU’◊∞Ñ'sr6ÀL,“‚∫˙hπ*£;òƒ¥˝√/ê ‚∆ä°ìi∆«zÍ>⁄s ¬ä˛ç≤Ôòûõ3ìKésôÚjvÑ
˘ÂP÷]PMÈ	ËY≤ƒ…f∞¢ºÔÙtN:¶Á$™r,úXF˙Q[Kk‡õ©b¨<<fè∞uÚ¥§≠<öCı‘P-ëc∫û/›'†∞]ÍˇJŸ]é%X&sÌ2˘j\.œÚÅ,ãŸx≠‹ó»ö+;ØíÀ‰;dôÏ-√ÂÚ=“≈+†∏÷Ë8Rè jT˙byRùOyV €`óÃ‘¢ÎFêéËiô}«ËfùVWﬁuéê7Ï§J'ã˜çrbò'ÜiﬂÑâ“"ÔÌ^4ömf∂õwûâ´~#g≤‹≥Œ6F¨≈Øá§°·ôÍ¶Ùºûzz¶É8gECum)[6œ™Ì±Ã°¨:r3UÛ›»úµM.•Õúï`G∫π¢T$∂ÆKïïÃ©¬YBN~yf/ræ“ÌåGˆ\≥7\∆X|≥ßmUÄS5gÀö˙#ò3∑Y#Ï©˙‘?ÕåÆ-'V¬TÉúô0û„yózÔ)ÇØ–°
¨Ñâ¢8´dàUdkØ +áˆ	,_`Ú ]œ2±Í∞˜]o2OÔù-˚9¶éÑï,¡‘Q·éà
üQaõoŒ`.&-óÔ›ré÷ﬂ66p©°∂rµr5«f§Õ1y¨9À ù{ú˘W√©Èo.Gb%¨Ì8÷ª?ç¿q§~˘¶¢€Ê{jlöiˆ˛äˇ±ãbc◊∆Æâ])˜Æ**W∆£≤ô”Ñö îˆ+eø¿ö©§gl∏xÈÔœ¶^jîå„W≥_n9Eµ®C=0A<2M‚ôI8-òå)òäiòéV¥·|Ã¿∏Ø¿L\Ñã%.¡•òÖŸx%.ìàô+Ù’ò'—7_º–)u!I?]"]ÙrÈ®À•óv„
¨¿ïxÆ¬’¢·kÂ[mµ|ó≠ïØ¥u2[mêéºQ∫ø˙ €Ç◊…ó€6ô»∑£W2sáLwo¿qﬁÑ7À◊·.Nﬂqf~í÷≈nô&”bÅ,gê≈≥ß$qµG|4å∑`/ﬁä∑·&‹å∑„x'n¡ªnºÔ≈˚p+ﬁè‡É¯>åè‡£ÿáè·„¯nã‘‡v|w‡S∏˚ÒÈHü¡gq>áœ„∏_ƒ=¯Ó≈óqæÇ¯*Ó«A<ÄØ·Î¯æâÒ∆!|ﬂÆπè‡Q<ÜÔ‚{¯>~Ä‚q¸áÒc¡Op?≈¯~é_‡ó¯~ç'qO·7¯-û∆Ô{<É„¯˛(ÒÙg¸ˇ·≤*†„∂≤®ÓÚÿ„¶iSfÊ÷£·≤õ8∂«NcªNRîg‰≈i¢ël'efÜ¥ÕÓvôô©ÀÃÃº•-∑[∆˝Çˇ<›9gtØÙﬂø˜=}˝'=†<®<§<¨<":È£ c „  ì S ” 3 ≥¢?ß<Øº†º®º§º¨º¢º™º¶ºÆº°º	q$êD
]H£=»†;`	vƒRÏÑù±ª`WÏÜ›±ˆƒ^ÿ˚`_Ïá˝q ƒA8á‡PÜ√qéƒQ8«‡Xá>d°"á<
(¢Ñ2*8'‡DúÑìq
NE?N√r¨¿ VbC∆*¨∆÷`cXã”±„ò¿$Œ¿÷c6‚LúÖ≥qŒ≈y–0ç*j–1É:0∞	≥0—Ñ-lÜÉ6\xò√<∞[q>.¿Ö∏„\äÀp9Æ¿ï∏
W„\ãÎp=n¿ç∏	7„‹ä€p;Ó¿ù∏€p7Ó¡Ωÿé∑·ÌxÓ√;Ò.ºÔ¡{Ò>º¿Ò!|¡GÒ1|ü¿'Ò)|ü¡gÒ9|_¿Ò%|_¡Wï˚p?æÜØ„¯&æÖo„;¯.æáÔ„¯!~Ñ„'¯)~¶l√œÒ¸RŸé_·◊¯~ãﬂ·˜¯˛à?·œ¯˛äø·Ô¯˛â·ﬂx ‚!<åG<ä«8û¿ìx
O„<ãˇ‚9<è"^¬ÀxØ‚5ºé7&)"äQúî§uQö∫©á2‘K;–⁄ëñ“N¥3-£]hW⁄çvß=hO⁄ãˆ¶}h_⁄èˆßË@:à¶CËP:åß#ËH:äé¶cËX:é˙(K*Â(O*Râ T°„È:ëN¢ìÈ:ï˙È4ZN+hÄV“ —0≠¢’4Bkhî∆h-ùNÎhú&híŒ†)ZOh#ùIg—ŸtùKÁëF”T•È4CujêAõhñLjíE6µh39‘&ó<ö£yZ†-¥ïŒßËB∫à.¶KËR∫å.ß+ËJ∫äÆ¶kËZ∫éÆßËF∫ân¶[ËV∫çnß;ËN∫ã∂—›t›K€ï˚cM/k4Sµ¶Vul+mœÈNªj;z≤i‘j∂õô±=ßÌµt«∞ùdˇ¥£œÈI-ÄTø]∑-}6•Öò\Q’ÑD≤¬ä∂©µ©Å(HèÇ¬Q= ^E∆¶‰àVı\=iÜ0FòƒGDqSí£·∞¬he–ci-ªÌ:v´°ß«j”°R⁄ñ,π.':Á:!åá€tMTıöaöZóë‰DÊêòt´û¸czíù<v⁄¬÷ ‚˝Ï∑äC ≤µfS8—–]-aŸkÜ8”ÃV√øZ”MWK[∂ﬁj¶mâ+m£ﬁÙ„\Õ«V√Ëı¨Z¥:¬N,ê‰≠Wm´ñ÷™¶÷◊”/WKo´¥6c≈¨ö/KVÆ§5«±ÁM}∆MÃkuËıÜ÷Ïy+d”∂€HGa5+√l∫≠w€é€WV33ÜÂäÏÙ™kà—7{∆úfÍVUO©j_)ó ñ˘
Ÿ rπnª•[”ûiÍnO’˜G´VuÀMıáècJ±gy’p™^s∆‘z™ã<æ‹øøUˇ˛D3Ùì·£™„tqËÏP™w(˙uqËîO@="=CssÜ¶5'ﬁá‰∞kò5=iêér1¢\Ü√\åp€G;¬±gUá˙¶EﬁµZÊ1ëÃl›—uÀ‘¨öQÌë√¶$£íXâXıòn’ScQBvî–Xòê@◊:9œëèw§‘Ó(x¬/ÿıûˆ¬Ç'#}/“üıΩ∞‡…®`/*x™C}æÉoË‡[yBlázªªﬂﬂr¡Æè™§©˛Å5=¿û±†ÎÑ‹^‰	◊™∑fËéﬁ6⁄¡Ywøøıö÷ƒ6”M›–2·˛.w∏—¯∞±ÃX”KO&;Çª«öz=Zjà∑x%Ø¯i˛Œ˙@bÖøﬂSë[|£à	∑D–‚æ]bµ÷ji¢76ßk≠Òh‘£ıF*ÚßµFl]√Nå˚M"6°y©(óòh+±Â‚ø∂mdÜ;ÚX»ÛnçÀœËùEÎ≤hCΩÃ{Î‘∞§`~|⁄/©î¥∞T§ﬂÍó‰∫AIæXb6(…K≤<Z0ƒ#‘sv2ËxŸD 1—ˆRëoL4øXU¸≈i¬ˆos¶Û/˘øÙ2vÁyùkdÛΩ0€◊ßÊ$+dô©ÃGÛÃ
ÃäÃJÃ Ã*í˚ò±GQzdÛ¨óeï,´dYEeïUTŒTÂ¸T÷S9?ïïUVVY9« 9VŒ±réÔAé=rÏëcè{‰ÿ#«yˆ»≥Gû=ÚÏëgè≈˚ígè<{‰Ÿ#øxüyFëgyFëgyFâ≥*q.%Œ•ƒπîXπƒ %V.±râïÀ¨\ÊzÀÏQfè2{îŸ£Ãeˆ(≥Gô=*ÏQaè
{Tÿ£¬ˆ®∞Ge±éEÈ!8≥,3~v˚rÃÚÃ
ÃäÃJÃ Ãÿ#Àã9k+'ßÍé&ﬁ'Û!LÖüXÛ·ß◊î‹ˆÈy…í¬¿-:˛ˆ)˜nˆDõ˜ﬂI‚;•ñvD©äoîÖ0¢\âûÃb6':Äﬁv≈˚€q‚••˚ﬂEçå€/‡ê∑{få9…3m°iE'âÜÌµı^ac⁄uﬂ@º[∫˝è#ëçÈ∂òNª]„+E}‚ÁìlD˙ò‰$Q%…KRñ§"IQíí$Öà‰•é*ß§EA*Á§é*Ø®2Fï:ôj^Ád*ÈÆ |rL‰P^ZdŸT*´2’<KÂºÃ'œuIÂºú^‡Y'∏"ﬁ#”¶]ùMâoVˇkªl~õ8¬0˛Œ∆ﬁ;&,a◊lÍ‚›`z†. %ï@`A©ñ"”P5CQj'q∞ãì∏^—KíVäÑ†”™_á˙)qc ìJ‘ïZ	©U€ˇ†\@B®m
4∑™}˜¢ñÛÃ˚ºcèΩ…œUm:–F3¨õò¶ Q§Sß|çMc"¬º=w&Ãòpi≥Q-ùl’mÑı‘l†µi’K/µr¨:{:∑ﬁ,Ù‹ô*ÊÓ“dÛÈáEó€öUß1º÷ oà∫u‹<2YkMD+Ân1U-Õ‡\˜LÀUπÁë9&Õø?x$F'º#˙‡n`ÉFV˛a}PEÜ[çπ∂Ú‚ z⁄öª¶Å‰]§K9íKÛ¥\„6ØÛE.∏˙óº√Â7¯W/]S√∑»/»o ·‹|t04]3l›6TØ&v“ﬁ≤KﬂeÙÇQ‘ã∆¢æhtÙé—Iv∂¨ÈkÜÛV*˛¿¿Ñ>≈4SÎ≥Mªo =`’ÕzﬂBz¡Jƒ¸6#@ƒàÄﬁM,7R˘Ü,√*/≠T∂Zvõ<sed≈ π®Î»ﬂ»}‰Ú≤Ü¸Å¸é‹A~@æGº◊I‰+‰‰s‰S‰}D Áêe§â4ê7êq‰8¬ëW¸}ü∂.êgŸ»ˆ@˙sã®wë?ë€»-‰k‰K‰=‰‰mdyud0K∆ƒOT¸H≈Tú•¢E≈õTÃQ1K≈)*NR1A≈ÎTú†€Ÿ6f≥4{ö=≈Lñd:ÎeÎa	gå©,¬b3 rsó£8£y‚»Œ$8∂\Õ¥I¸ËqÕ‰âÏu¿9ñó/dù6ÉóÂP÷ë±¬kcó	π¿•r∂M‡ÿXõtºz)%{å]≈ghÈ| ”óŒs…ÏìÛ±ä8Ö∑ÆÇE≤π8µnRÎ:µæ£^√E_¯æ∏I≈u*ﬂ$W
0‰îñã[·â˜&ˇ≥ﬂ„Ü´ﬁ.å]fêÁN∫¢t«ÒÛS˝<ü‘Í{˝/≥ÒÁΩ—‘*¸”u∫≥\∆3yŸù…√æ}fV€C‘ÑT—¢à∑zwø9üZç πËØN†Ω!lÌ‹øsø◊äÄﬂÍA{cÿ2Áw˜ßV…≈∞•°Ω	/=He∏“&Wdnπ(ÌÃA©z∆G°±åO£M>ŒÑqw‹ü.qõŸVˆ?®ïâÚendstreamendobj149 0 obj19053endobj151 0 obj31875endobj150 0 obj0endobj152 0 obj0endobj30 0 obj<</Type /Font/Subtype /Type1/Name /F8/BaseFont /MFHAHE+HelveticaNeue-Condensed/FirstChar 32/LastChar 255/Widths [ 240 258 407 480 480 759 556 240 241 241 352 600 240 352 240 278 480 480 480 480 480 480 480 480 480 480 240 240 600 600 600 444 800 500 519 519 556 463 444 537 537 204 426 500 444 704 556 556 481 556 519 500 463 519 462 722 481 462 463 259 278 259 600 500 204 444 463 426 463 444 259 463 463 204 204 444 204 722 463 444 463 463 296 407 259 463 406 648 406 406 389 259 222 259 600 500 500 500 240 480 407 1000 482 482 204 1037 500 240 796 500 463 500 500 240 240 407 407 500 500 1000 204 990 407 240 722 500 389 462 240 258 480 480 480 480 222 482 204 800 289 389 600 352 800 204 400 600 312 312 204 463 556 240 204 312 289 389 721 721 721 444 500 500 500 500 500 500 722 519 463 463 463 463 204 204 204 204 556 556 556 556 556 556 556 600 556 519 519 519 519 462 481 463 444 444 444 444 444 444 667 426 444 444 444 444 204 204 204 204 444 463 444 444 444 444 444 600 444 463 463 463 463 406 463 406 ]/Encoding /WinAnsiEncoding/FontDescriptor 31 0 R>>endobj31 0 obj<</Type /FontDescriptor/FontName /MFHAHE+HelveticaNeue-Condensed/Flags 32/FontBBox [ -250 -212 1244 1000 ]/MissingWidth 556/StemV 82/StemH 82/ItalicAngle 0/CapHeight 1331/XHeight 999/Ascent 932/Descent -212/Leading 398/MaxWidth 1037/AvgWidth 450/FontFile3 153 0 R>>endobj153 0 obj<</Filter /FlateDecode /Length 154 0 R/Subtype /Type1C>>stream
HâtTPgﬁM».Xç\ñïö‡Ó:*úbE.†¢RàÉ †ÇB8Q˛ƒbãuTbäZZˇ@¥JQÈâràzVîb9¢v"'π≠FOmÒÆrÔ“ÁÓ‘üŒÙfvfg˜˝ﬁ˜}ûÁ{üó$údIí¸¢∞àêàﬁ˙u˙º¨Ù¥(}æ˛ù–úÏ}vÆ>√qdä4öê4§‰!ì∆…•±N(≠˛π¯Á@≈8Çÿru◊w“„≠,!'…mOÑÊ¨/2d˝quû˚Ù…¬¥† ?!$#gï^à+ Õ”øó+Ë≤”sÎsiy˙AY∑NàuúœbıπzC˛˚
èêï+§	yÜ¥˝{iÜµBN¶ôïùìW¥^/ÑÑiŸæ9!ÁÊÊØ Õ »J3dÈsﬂ»–
ØËº˛Î†I$ÊG8ƒ(°"	AL â)1É$fƒÇxw±ú ≤"á 
	b*ñåê
¬áà'Ú	#±ü∏J≤§ñ¨ ˚d2ŸŸvŸŸ%yòºJnsöÈ¥”Èúb™"MQ¢hV<U¸óJ†vS]¥/m§[ú':':Ôunt~Ó‡Ú°À^´†î”MOz•c¶B’?ÏL=≥¯GàbGm‘AÈò¬óbˆºHqIÿü¯RJAJÖÚÒ˝™N;ì TwJœÒπ∆\*˝£¬’õ∏d˙˛—OnﬁQ?•ïÇ©üÏ¥À;«¸ft≠‰(ï_#•VTJΩŒ¿≠˙q+[] ’∂E√|dãÃ≠R-ﬁÉµ"≈‘$D”Ã≠^A%”∑;„ì&´‘b!m∞÷&óZYtç™h˛‚œgÎ˙º}˜f”5 ‘ﬂl –§8?§ÊlT√.P yßFúôªúãYÆò2Ω≠ñÑ!,–Ï`ÈŒ§vJŸaHLı‡.ßóËÊô,PmÜã™’{òùyûà}NuµÎ'á≠çÙ·—H ?îÖeLÓ˘&Ÿ2n¯WÛe4#uTùÌËP?≠—áC9î-î˝ë∫_üÇd⁄è2yOGıÕÈ±Eu¡ˆ ;Ûåy$ya©fî{	§|‘AÒK…3œæ?6≥å∑S ÏàÍAûî∏≈°QÉ‚`%œ<øØ¿4{y%öP]0êRH∂⁄‰≠cl)˛∏Ÿ;√ÕN⁄f€°»jgn3]“RÈ8Ó∆E7ëáÈrêªégn£–.(E=wi‚éyàÿÌ˜ªy
MΩ ≥û¡®f‚ò€∞ı¢ë∞B}ß±°ìc∫ƒö¯yº7vµímì√Æ,DX„Ç!¸Ö´çR˙£HÛ@πô¥ZÂV…B∏Ÿs†¸ôÖø˝€*›@
ã¬uœ^î{Í «ûn6«¥¡?@fV’⁄Êâ*2ï4Ç›CWôÓ€Øû»NL1mä⁄»!EñÇi+X?OÌ}>∫Ô“Â⁄5\≈ÑÌn0ù“TŸ˝Ò'|]∫cª±D≥¡T}ÑáÀÙU”Hã‹‚ó"%ü°ı,”ºdYÚíÿçgÆ4ÔØÆ9ƒù9⁄Y~≤ŒYπŸ”*Z ∞P’"¬
s_M5˚SeØıprC Bˇ‡iE} „ò‚Ÿ®öÌ¶òãÊ2:˝”ÊÙV∏˛‹¡úä`ö¥4!{≈Fﬁ[µîÚÓf3<. πô<eÉXQ.qí˚çh‰âÇ6 _§Fë-~8Y}ËÔ8-Û˛‹Pœù |	_ø¸∑Í≈Ò‹õ‡˛dÉ"7É∑√=÷ﬁ Òê≤ÿﬂ'∏∞‹88#≈≤Z¥’HùﬂòPõ§AﬁEhrB¡êò÷ÊÜÜOy,Z±Æõvà´Ã0√L÷€`æU7Ëb”ß*Ä∞uVÕèÊ≤iõé˝í∫&`Î˝
ØÁó0ˆ∆õ^¢ù5—Æ=ú“˚}ç(Ÿ- ª«à“ªŸ∑ù™Ø‹ö;kâ¢fÆNõ…GÎ¨¥èå∞HSZc,ò“ª"ñÜπ$;ƒGV‡ß˝ »CyÊ1D∑≤≥(Ên∏ë>Wí‹£Ahö4ø%bo\™i™‰ÀPôª¡1_©Ø∫∏É◊RHΩXSùàŒVò·ò`…‡êëƒwºHî∑`åeΩ~¢ÈŒÆàU‹ %JÆtªÈ?àKZºne>7|Ö«IuÖˇz¢j›€pJùñb¸z"üÖQ§e¿„ó8LîÍXÌ`ïhJèﬂRRˆÒ.îﬁπoüqüÊ˚˙Fœ¯î„L≠∑àá®.,w¿ë√!x¿ÇRì)¥ôF)X˚"EuKÑ…®RÒı ¸m¢H¡Ì•∑§:∂ã0œÒ∏y0€áòâ◊??{Î%3ä˛’Á0—ÒKíÙ…π‹ıMôü/“ƒ«Â,œÁçsØ}≠|YvH*¶Èˇj5~(ç√i]é4<T“|3YkÉLõºO)Ú>É‹¡|ŒYƒ[Óxå|2ê;ÚÊ ≠c6ıÅ38Wˆ}◊{»9#Á"ØÈx—˘¿,R‡/∞%ÔYîlèûÅ∏¬ Ï…˛ü∏ŸÉãY∂îQ+™ö≤/hÄ?s@	˛I†@LLrzzâÉ÷S3∆˜fŸa3›É\vB—¯iq0è‹£˛xclwî≈y…≥hÊûŒH7œìÑ»yûFû¿_h™=_Ö=•L¿äe~ª@‹ÊX!L-Ï‘√õgŒ’TîÓ‹À1˚zh¶v˜÷À6i¢◊¶&‰: ]Ô÷“ ∂!…T«ƒfäÛ≈°ı≠êF≥Ì;∑Å¸4>¡I^H~ccG>œ<Ï»7á™Á.˙`}P—◊ÿÅK êˆ›nEøÓË¬#x_ÎéË>kˇﬂ§Æü¥Ïƒ‹4w`ŒlΩ¸C„,8[ì'0˛acs]ê˛h›¬˛ﬁirÿªö;+•„Êlìˇ˛Ê≈YΩÔ@gÅKù¢rX¯°NŸll∂~πqˆÁ∂»˝`3ˇ#¿Ó”≠]qˇ·Â{ÇJ„
`¡r¨˚Îßr∆©?ƒòøÎãΩf˚Æ˙c∞¢˛«âµìM˝á+®˛=ÿ˝ˆ˚ã∑åSr0ó{ÀˆÙák/€À?^¨¿zP®¡òÕ»Èd3Jh∞ÄŸ¶@6∞∆;ˆ€ÂÏO)®6¢’1¨yçU%)“e’=ΩıÚûÏ]3gvÆë˛∞Ï’˘Úﬂı\ ⁄®∂]b˚Ò	_øO6òn=?Û\xá∞«˜;?Nõ	ÒãŸ6Oôøné‹.v”íVw{)ìÁÏ¬øø‚êVæﬂ{.3vˇË`˛ﬁ√Ú£„Úü∞È‡FÿÏ·	ﬂÔ ´=}Eå∂îÇﬂÜè∞KÒ’Œ¸7Ûw»ÃÔ*3Ÿæ/ùÙh“üCìŸœr›Á˛ë,Ú˝Ω( ¨eõendstreamendobj154 0 obj2512endobj36 0 obj<</Type /Font/Subtype /Type1/Name /F9/BaseFont /Courier-Bold/FirstChar 32/LastChar 255/Widths [ 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 ]/Encoding /WinAnsiEncoding/FontDescriptor 37 0 R>>endobj37 0 obj<</Type /FontDescriptor/FontName /Courier-Bold/Flags 16418/FontBBox [ -250 -250 720 1000 ]/MissingWidth 600/StemV 191/StemH 191/ItalicAngle 0/CapHeight 900/XHeight 703/Ascent 801/Descent -250/Leading 334/MaxWidth 600/AvgWidth 600>>endobj42 0 obj<</Type /Font/Subtype /TrueType/Name /F10/BaseFont /TimesNewRoman,Bold/FirstChar 32/LastChar 255/Widths [ 250 333 555 500 500 1000 833 278 333 333 500 570 250 333 250 278 500 500 500 500 500 500 500 500 500 500 333 333 570 570 570 500 930 722 667 722 722 667 611 778 778 389 500 778 667 944 722 778 611 778 722 556 667 722 722 1000 722 722 667 333 278 333 581 500 333 500 556 444 556 444 333 500 556 278 333 556 278 833 556 500 556 556 444 389 333 556 500 722 500 500 444 394 220 394 520 778 500 778 333 500 500 1000 500 500 333 1000 556 333 1000 778 667 778 778 333 333 500 500 350 500 1000 333 1000 389 333 722 778 444 722 250 333 500 500 500 500 220 500 333 747 300 500 570 333 747 500 400 549 300 300 333 576 540 250 333 300 330 500 750 750 750 500 722 722 722 722 722 722 1000 722 667 667 667 667 389 389 389 389 722 722 778 778 778 778 778 570 778 722 722 722 722 722 611 556 500 500 500 500 500 500 722 444 444 444 444 444 278 278 278 278 500 556 500 500 500 500 500 549 500 556 556 556 556 500 556 500 ]/Encoding /WinAnsiEncoding/FontDescriptor 43 0 R>>endobj43 0 obj<</Type /FontDescriptor/FontName /TimesNewRoman,Bold/Flags 16418/FontBBox [ -250 -216 1182 1000 ]/MissingWidth 328/StemV 136/StemH 136/ItalicAngle 0/CapHeight 891/XHeight 446/Ascent 891/Descent -216/Leading 149/MaxWidth 985/AvgWidth 427>>endobj56 0 obj<</Type /Font/Subtype /Type1/Name /F11/BaseFont /ZapfDingbats/FirstChar 32/LastChar 255/Widths [ 278 974 961 974 980 719 789 790 791 690 960 939 549 855 911 933 911 945 974 755 846 762 761 571 677 763 760 759 754 494 552 537 577 692 786 788 788 790 793 794 816 823 789 841 823 833 816 831 923 744 723 749 790 792 695 776 768 792 759 707 708 682 701 826 815 789 789 707 687 696 689 786 787 713 791 785 791 873 761 762 762 759 759 892 892 788 784 438 138 277 415 392 392 668 668 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 732 544 544 910 667 760 760 776 595 694 626 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 894 838 1016 458 748 924 748 918 927 928 928 834 873 828 924 924 917 930 931 463 883 836 836 867 867 696 696 874 278 874 760 946 771 865 771 888 967 888 831 873 927 970 918 278 ]/FontDescriptor 57 0 R>>endobj57 0 obj<</Type /FontDescriptor/FontName /ZapfDingbats/Flags 4/FontBBox [ -250 -143 1219 1000 ]/MissingWidth 815/StemV 127/StemH 127/ItalicAngle 0/CapHeight 1208/XHeight 1186/Ascent 857/Descent -143/Leading 308/MaxWidth 1016/AvgWidth 695>>endobj88 0 obj<</Type /Font/Subtype /Type1/Name /F12/BaseFont /Courier-Oblique/FirstChar 32/LastChar 255/Widths [ 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 ]/Encoding /WinAnsiEncoding/FontDescriptor 89 0 R>>endobj89 0 obj<</Type /FontDescriptor/FontName /Courier-Oblique/Flags 98/FontBBox [ -250 -250 720 1000 ]/MissingWidth 600/StemV 109/StemH 109/ItalicAngle -11/CapHeight 905/XHeight 686/Ascent 805/Descent -250/Leading 324/MaxWidth 600/AvgWidth 600>>endobj107 0 obj<</Type /Font/Subtype /TrueType/Name /F13/BaseFont /Symbol/FirstChar 30/LastChar 255/Widths [ 600 600 250 333 713 500 549 833 778 439 333 333 500 549 250 549 250 278 500 500 500 500 500 500 500 500 500 500 278 278 549 549 549 444 549 722 667 722 612 611 763 603 722 333 631 722 686 889 722 722 768 741 556 592 611 690 439 768 645 795 611 333 863 333 658 500 500 631 549 549 494 439 521 411 603 329 603 549 549 576 521 549 549 521 549 603 439 576 713 686 493 686 494 480 200 480 549 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 620 247 549 167 713 500 753 753 753 753 1042 987 603 987 603 400 549 411 549 549 713 494 460 549 549 549 549 1000 603 1000 658 823 686 795 987 768 768 823 768 768 713 713 713 713 713 713 713 768 713 790 790 890 823 549 250 713 603 603 1042 987 603 987 603 494 329 790 790 786 713 384 384 384 384 384 384 494 494 494 494 600 329 274 686 686 686 384 384 384 384 384 384 494 494 494 600 ]/FontDescriptor 108 0 R>>endobj108 0 obj<</Type /FontDescriptor/FontName /Symbol/Flags 6/FontBBox [ -250 -220 1254 1005 ]/MissingWidth 334/StemV 109/StemH 109/ItalicAngle 0/CapHeight 1005/XHeight 503/Ascent 1005/Descent -220/Leading 225/MaxWidth 1045/AvgWidth 600>>endobj125 0 obj<</Type /Font/Subtype /Type1/Name /F14/BaseFont /NFHAHE+HelveticaNeue-BoldCondObl/FirstChar 32/LastChar 255/Widths [ 240 296 463 480 480 778 593 260 296 296 390 600 240 370 240 332 480 480 480 480 480 480 480 480 480 480 240 240 600 600 600 481 800 556 556 537 574 481 463 556 556 258 463 537 463 740 574 556 519 556 556 519 480 538 519 760 537 520 481 315 332 315 600 500 222 481 500 463 500 463 296 500 500 240 240 500 240 758 500 480 500 500 333 444 296 500 444 704 462 444 426 315 222 315 600 500 500 500 260 480 463 1000 480 480 222 1093 519 241 778 500 481 500 500 260 260 463 463 500 500 1000 222 990 444 241 741 500 426 520 240 296 480 480 480 480 222 481 222 800 314 426 600 370 800 222 400 600 312 312 222 500 480 240 222 312 314 426 721 721 721 481 556 556 556 556 556 556 759 537 481 481 481 481 258 258 258 258 574 574 556 556 556 556 556 600 556 538 538 538 538 520 519 500 481 481 481 481 481 481 722 463 463 463 463 463 240 240 240 240 480 500 480 480 480 480 480 600 480 500 500 500 500 444 500 444 ]/Encoding /WinAnsiEncoding/FontDescriptor 126 0 R>>endobj126 0 obj<</Type /FontDescriptor/FontName /NFHAHE+HelveticaNeue-BoldCondObl/Flags 16480/FontBBox [ -250 -224 1312 1000 ]/MissingWidth 556/StemV 150/StemH 150/ItalicAngle -11/CapHeight 1372/XHeight 1034/Ascent 961/Descent -224/Leading 480/MaxWidth 1093/AvgWidth 473/FontFile3 158 0 R>>endobj158 0 obj<</Filter /FlateDecode /Length 159 0 R/Subtype /Type1C>>stream
HâMPmHQ}„Íél€§;Æô[œg®}°mQòÑˆ°Bô¯Å˝Pqu^9πÌ¨3Î¢ÖÙe\ìH+6ã6¡4))ç¿"ì¨(¬_ˆIıc…∞?qG_Q≥’É«ΩÔ›sÁEG!é„Rãv‰ÏXS@›~ÍìÎ\E¥âfÊ)niõ‚ëˆ‘∫#†≠˙"§;8}iîæÃ§'D±F±MÃ7oæ<á∏üB©È?∑+ø°cœ¬ΩE<~hnÿÜLwr`dõ‚mQÂ˝ı>≤≤nYóì„$πíRKIiãÊ£5RË©STØ¢∫|T "$◊Ì&%ºFJ®FUøÒ˚W&ë5‚">’%—É.µÅ(˚».Ÿ£¯Zºî‰ÊóGZ´®D6vµ¶ZMñdó*SÌø˝ÏlqI"6©G£1Ã çMÙ$2ée†Ìh' Ge®≈π°(¥U†ÙïKÁ∫∏)! N†‡¥=Ä§≈bËA¢A8YíY¨˝˜%º
Ä åª,‹§ô∆Ê™Ì?™ıL∞∞K∆†Õ®m∆∞,º0Ÿ÷cgπ>¿ê
I&ΩfÏ æe"ùªY#sø(0fè^C*6ÿ7¯•™›G∆a	ƒùõ|qˇliép¿ñwê˛ü¶√>»CŒ~@l#+RX2Kc…],*!qr
‚Ocg.<—\_Âÿ{Ë…”î˛]tàÎôü8[ï”âÚÎ≈·O≥‹4`”t"`Ω¯MxÛ]Û`¸pww†Ω·O©ZáÍX_÷∞:•hGÊ/‹2‹a[/ƒ1´áÌO?ˆ¬v{3ü6ík!ˆ˝Cày€0∫a ã/7ı«T]hΩ“ó|Û⁄Â°;=ﬁrqWÃ3≈Y<[^ö∑~ÎpÂ¥ãgÍcÆÎ=\ü\£¯]ïÍ‡]|â»…ŸºàHõ!QÙNÎCvC{lo0ÓÚ@◊˚;;Ø·œ|˚Ò£ÌGu«/ﬁNÅQ√d1Ã≠¡πÍ +	¬Ú†˙Œ|8Û}ºãˇfº†√*@[Çæ¬˛dÖe'endstreamendobj159 0 obj768endobj2 0 obj[ /PDF /Text  ]endobj5 0 obj<</Kids [4 0 R 18 0 R 25 0 R 33 0 R 39 0 R 44 0 R ]/Count 6/Type /Pages/Parent 163 0 R>>endobj48 0 obj<</Kids [47 0 R 51 0 R 55 0 R 61 0 R 64 0 R 67 0 R ]/Count 6/Type /Pages/Parent 163 0 R>>endobj71 0 obj<</Kids [70 0 R 75 0 R 79 0 R 83 0 R 87 0 R 93 0 R ]/Count 6/Type /Pages/Parent 163 0 R>>endobj97 0 obj<</Kids [96 0 R 100 0 R 104 0 R 110 0 R 114 0 R 118 0 R ]/Count 6/Type /Pages/Parent 163 0 R>>endobj122 0 obj<</Kids [121 0 R 128 0 R 131 0 R 134 0 R ]/Count 4/Type /Pages/Parent 163 0 R>>endobj163 0 obj<</Kids [5 0 R 48 0 R 71 0 R 97 0 R 122 0 R ]/Count 28/Type /Pages/MediaBox [ 0 0 596 842 ]>>endobj1 0 obj<</Creator <FEFF0051007500610072006B005800500072006500730073002000280074006D00290020002D0020005B006F007600650072006C006F0061006400360036002D00460049004E0041004C002E007100780064005D>/CreationDate (D:20050327201944)/Title <FEFF006F007600650072006C006F0061006400360036002D00460049004E0041004C002E007100780064>/Author <FEFF00500069007000700061>/Producer (Acrobat PDFWriter 5.0 for Windows NT)>>endobj3 0 obj<</Pages 163 0 R/Type /Catalog>>endobjxref0 1640000000000 65535 f 0000325603 00000 n 0000324907 00000 n 0000326015 00000 n 0000004127 00000 n 0000324938 00000 n 0000273288 00000 n 0000274402 00000 n 0000279342 00000 n 0000280431 00000 n 0000280693 00000 n 0000281772 00000 n 0000000019 00000 n 0000004106 00000 n 0000282028 00000 n 0000283115 00000 n 0000283369 00000 n 0000284460 00000 n 0000014920 00000 n 0000004293 00000 n 0000014898 00000 n 0000284721 00000 n 0000285817 00000 n 0000286087 00000 n 0000287195 00000 n 0000025704 00000 n 0000015088 00000 n 0000025682 00000 n 0000291200 00000 n 0000292307 00000 n 0000311840 00000 n 0000312945 00000 n 0000025814 00000 n 0000036858 00000 n 0000025912 00000 n 0000036836 00000 n 0000315875 00000 n 0000316959 00000 n 0000036968 00000 n 0000047719 00000 n 0000037076 00000 n 0000047697 00000 n 0000317223 00000 n 0000318325 00000 n 0000058278 00000 n 0000047864 00000 n 0000058256 00000 n 0000069603 00000 n 0000325047 00000 n 0000058423 00000 n 0000069581 00000 n 0000080359 00000 n 0000069761 00000 n 0000080337 00000 n 0000080470 00000 n 0000092525 00000 n 0000318596 00000 n 0000319655 00000 n 0000080558 00000 n 0000092503 00000 n 0000092636 00000 n 0000100625 00000 n 0000092735 00000 n 0000100604 00000 n 0000110782 00000 n 0000100795 00000 n 0000110761 00000 n 0000121241 00000 n 0000110952 00000 n 0000121219 00000 n 0000132067 00000 n 0000325158 00000 n 0000121398 00000 n 0000132045 00000 n 0000132178 00000 n 0000141560 00000 n 0000132287 00000 n 0000141539 00000 n 0000141671 00000 n 0000151955 00000 n 0000141769 00000 n 0000151933 00000 n 0000152066 00000 n 0000159998 00000 n 0000152154 00000 n 0000159977 00000 n 0000160109 00000 n 0000168324 00000 n 0000319919 00000 n 0000321007 00000 n 0000160197 00000 n 0000168303 00000 n 0000168435 00000 n 0000175489 00000 n 0000168535 00000 n 0000175468 00000 n 0000183414 00000 n 0000325269 00000 n 0000175659 00000 n 0000183393 00000 n 0000195104 00000 n 0000183571 00000 n 0000195081 00000 n 0000195218 00000 n 0000206334 00000 n 0000195351 00000 n 0000206311 00000 n 0000321273 00000 n 0000322342 00000 n 0000206448 00000 n 0000216544 00000 n 0000206551 00000 n 0000216522 00000 n 0000216658 00000 n 0000226413 00000 n 0000216747 00000 n 0000226391 00000 n 0000226527 00000 n 0000234513 00000 n 0000226625 00000 n 0000234491 00000 n 0000244746 00000 n 0000325385 00000 n 0000234685 00000 n 0000244724 00000 n 0000322601 00000 n 0000323711 00000 n 0000244861 00000 n 0000253996 00000 n 0000244986 00000 n 0000253974 00000 n 0000263392 00000 n 0000254169 00000 n 0000263370 00000 n 0000273073 00000 n 0000263565 00000 n 0000273051 00000 n 0000273188 00000 n 0000274704 00000 n 0000279320 00000 n 0000000000 00000 n 0000000000 00000 n 0000000000 00000 n 0000287499 00000 n 0000291178 00000 n 0000000000 00000 n 0000000000 00000 n 0000000000 00000 n 0000292606 00000 n 0000311756 00000 n 0000311802 00000 n 0000311779 00000 n 0000311821 00000 n 0000313244 00000 n 0000315853 00000 n 0000000000 00000 n 0000000000 00000 n 0000000000 00000 n 0000324021 00000 n 0000324886 00000 n 0000000000 00000 n 0000000000 00000 n 0000000000 00000 n 0000325487 00000 n trailer<</Size 164/Root 3 0 R/Info 1 0 R/ID [<880271662fc9d67caf9a41575ce98bcb><880271662fc9d67caf9a41575ce98bcb>]>>startxref326066%%EOF