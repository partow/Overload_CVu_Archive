%PDF-1.2 %‚„œ”
 12 0 obj<</Length 13 0 R>>stream
BT558.6 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (3) Tj-246 768.6  TD /F0 12  Tf-0  Tc -0.0896  Tw (Overload issue 64 december 2004) Tj-268.8 -52.8  TD /F1 18  Tf-0.0008  Tc 0  Tw (contents) TjETq 29.4 785.4 m 29.4 739.2 l 372 739.2 l 372 785.4 l 30 784.8 m 30 739.8 l 371.4 739.8 l 371.4 784.8 l h W* n 29.4 739.2 342.6 46.2 re fQ 0.9529 0.9529 0.9529 rg 414.6 57 152.4 727.8 re fBT419.4 757.8  TD0 0 0 rg /F1 16.2  Tf-0.2269  Tc 0.2233  Tw (credits & contacts) Tj-3 -47.4  TD /F0 7.8  Tf0.1286  Tc -0.0146  Tw (Overload Editor:) Tj6 -12.6  TD 0.1244  Tc -0.0104  Tw (Alan Griffiths) Tj0 -9.6  TD /F2 7.8  Tf0.12  Tc 0  Tw (overload@accu.org) TjT* (alan@octopull.demon.co.uk) Tj-6 -28.8  TD /F0 7.8  Tf0.1409  Tc -0.0269  Tw (Contributing Editor:) Tj6 -12.6  TD 0.1204  Tc -0.0064  Tw (Mark Radford) Tj0 -9.6  TD /F2 7.8  Tf0.12  Tc 0  Tw (mark@twonine.co.uk) Tj-6 -38.4  TD /F0 7.8  Tf0.1691  Tc -0.0551  Tw (Advisors: ) Tj6 -22.2  TD 0.1761  Tc -0.0621  Tw (Phil Bass) Tj0 -9.6  TD /F2 7.8  Tf0.12  Tc 0  Tw (phil@stoneymanor.demon.co.uk) Tj0 -19.2  TD /F0 7.8  Tf0.126  Tc -0.012  Tw (Thaddaeus Frogley) Tj0 -9.6  TD /F2 7.8  Tf0.12  Tc 0  Tw (t.frogley@ntlworld.com) Tj0 -19.2  TD /F0 7.8  Tf0.1192  Tc -0.0052  Tw (Richard Blundell) Tj0 -9.6  TD /F2 7.8  Tf-0.0735  Tc 0  Tw (richard.blundell@metapraxis.com) Tj-6 -48  TD /F0 7.8  Tf0.1291  Tc (Advertising:) Tj6 -12  TD 0.1165  Tc -0.0025  Tw (Chris Lowe) Tj0 -9.6  TD /F2 7.8  Tf0.12  Tc 0  Tw (ads@accu.org) Tj-6 -58.8  TD /F1 9  Tf-0.0019  Tc (Overload) Tj42 0  TD /F3 9  Tf-0.0704  Tc 0.2684  Tw (is a publication of the) Tj-42 -10.8  TD 0.058  Tc -0.2457  Tw (ACCU.  For details of the ACCU and) Tj0 -10.8  TD 0.088  Tc -0.79  Tw (other ACCU) Tj51 0  TD 0.0312  Tc -0.1332  Tw (publications and) Tj-51 -10.8  TD -0.063  Tc 0.161  Tw (activities, see the ACCU) Tj99 0  TD -0.0015  Tc 0  Tw (website.) Tj-99 -42.6  TD /F0 7.8  Tf0.1469  Tc -0.0329  Tw (ACCU Website:) Tj10.2 -11.4  TD /F2 9  Tf0  Tc 0  Tw (http://www.accu.org/) Tj-10.2 -38.4  TD /F0 7.8  Tf0.1704  Tc -0.0564  Tw (Information and Membership:) Tj0 -15  TD /F4 9  Tf0.0246  Tc 0.0054  Tw (Join on the website or contact) Tj10.2 -19.2  TD /F0 7.8  Tf0.1018  Tc 0.0122  Tw (David Hodge) Tj0 -9.6  TD /F2 7.8  Tf0.12  Tc 0  Tw (membership@accu.org) Tj-10.2 -25.2  TD /F0 7.8  Tf0.1411  Tc -0.0271  Tw (Publications Officer:) Tj10.2 -12  TD 0.0987  Tc 0.0153  Tw (John Merrells) Tj0 -9.6  TD /F2 7.8  Tf0.12  Tc 0  Tw (publications@accu.org) Tj-10.2 -25.2  TD /F0 7.8  Tf0.3399  Tc (ACCU) Tj31.2 0  TD 0.1538  Tc (Chair:) Tj-21 -12  TD 0.1346  Tc -0.0206  Tw (Ewan Milne) Tj0 -9.6  TD /F2 7.8  Tf0.12  Tc 0  Tw (chair@accu.org) TjETq 414 785.4 m 414 56.4 l 567.6 56.4 l 567.6 785.4 l 414.6 784.8 m 414.6 57 l 567 57 l 567 784.8 l h W* n 414 56.4 153.6 729 re fQ BT29.4 702.6  TD/F0 12  Tf-0.0186  Tc -0.0714  Tw (Evolution of the Observer Pattern) Tj181.2 -18  TD -0.081  Tc 0.441  Tw (Phil Bass) Tj150.6 0  TD -0.192  Tc 0  Tw (6) Tj-331.8 -30  TD -0.0156  Tc 0.1356  Tw (An Experience Report on Implementing a) Tj39.6 -18  TD 0.0147  Tc 0.0453  Tw (Custom Agile Methodology) Tj22.2 -18  TD 0.072  Tc 0  Tw (G) Tj16.2 0  TD -0.072  Tc -0.168  Tw (Asproni, A) Tj78.6 0  TD -0.064  Tc -0.176  Tw (Fedotov, R) Tj82.2 0  TD -0.008  Tc 0  Tw (Fernandez) Tj94.2 0  TD -0.192  Tc (9) Tj-333 -30  TD -0.0212  Tc -0.0688  Tw (Yet Another Hierarchical State Machine) Tj181.2 -18  TD 0.0424  Tc -0.2824  Tw (Stefan Heinzmann) Tj145.2 0  TD -0.132  Tc 0  Tw (14) Tj-326.4 -30  TD -0.0136  Tc -0.0764  Tw (A Mini-project to Decode a) Tj44.4 -18  TD 0.0295  Tc 0  Tw (Mini-language) Tj136.8 0  TD -0.0076  Tc 0.3676  Tw (Thomas Guest) Tj144 0  TD 0.468  Tc 0  Tw (21) TjETendstreamendobj13 0 obj3808endobj4 0 obj<</Type /Page/Parent 5 0 R/Resources <</Font <</F0 6 0 R /F1 8 0 R /F2 10 0 R /F3 14 0 R /F4 16 0 R >>/ProcSet 2 0 R>>/Contents 12 0 R>>endobj19 0 obj<</Length 20 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (4) Tj0 768.6  TD /F0 12  Tf-0.0449  Tc 0.2549  Tw (Overload issue 64 december 2004) Tj28.8 -50.4  TD /F0 30  Tf0.0012  Tc 0.0988  Tw (Editorial: A Glimpse Behind) Tj187.8 -30  TD -0.0667  Tc 0.3667  Tw (the Scenes) TjETq 28.8 785.4 m 28.8 721.2 l 567.6 721.2 l 567.6 785.4 l 29.4 784.8 m 29.4 721.8 l 567 721.8 l 567 784.8 l h W* n 28.8 721.2 538.8 64.2 re fQ BT40.2 565.8  TD/F4 10.2  Tf-0.2938  Tc -0.238  Tw (While we were debating where we\222d missed the path a voice came) Tj-11.4 -12  TD 0.1037  Tc 0.3463  Tw (from the mists hiding the top of a near vertical rock face \223you) Tj0 -12  TD -0.1231  Tc 0.4346  Tw (shouldn\222t be down there \226 the path is up here\224. While that gave a) TjT* -0.243  Tc -0.457  Tw (point of reference, it didn\222t solve the problem of how to proceed from) TjT* -0.1875  Tc 0.5285  Tw (where we had arrived. We had gone wrong, but we had company:) TjT* -0.0132  Tc 0.3541  Tw (another group of people arrived and by all sharing the results of) TjT* -0.2738  Tc -0.4162  Tw (exploration we found a way forward that eventually rejoined the path.) Tj11.4 -12  TD 0.2676  Tc 1.6824  Tw (This story does have relevance to Overload but, before) Tj-11.4 -12  TD 0.2687  Tc 0.1813  Tw (explaining the connection, I\222m going discuss a little of what) Tj0 -12  TD -0.0582  Tc -0.0318  Tw (happens behind the scenes to produce the copies of Overload that) TjT* -0.0771  Tc -0.0729  Tw (arrive for you to read every couple of months. You have probably) TjT* -0.0543  Tc -0.0557  Tw (guessed a part of it, but the issue that I want to address is one that) TjT* -0.0609  Tc -0.0141  Tw (rarely makes an explicit appearance in the journal: ) Tj0 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1216  Tc -0.4484  Tw (people write articles \(volunteers to do this are always welcome\); ) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0632  Tc 0.3332  Tw (the articles are reviewed by the panel of advisors \(this usually) Tj0 -12  TD -0.0695  Tc -0.0138  Tw (leads the authors to revise the articles\); and,  ) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0963  Tc 0.0963  Tw (the editor chooses the articles to accept, pass to C Vu or which) Tj0 -12  TD -0.151  Tc 0.001  Tw (to reject completely.) Tj-11.4 -12  TD 0.3549  Tc 0.9201  Tw (Usually the review by the advisors is uncontroversial, but) Tj0 -12  TD -0.0935  Tc 1.3149  Tw (occasionally an article generates real debate. When considering) TjT* 0.0362  Tc 1.0138  Tw (Jeff Daudel\222s article \223A Unified Singleton System\224 \(Overload) TjT* -0.0967  Tc 0.8967  Tw (56\) there was such a concern over the content of the article that) TjT* -0.0593  Tc 0.1493  Tw (the editor \(then John Merrells\) was moved to include an editorial) TjT* 0.21  Tc 0.84  Tw (comment. And, in the next issue, one of the advisors \(Mark) TjT* 0.4174  Tc 0.6326  Tw (Radford\) wrote a balancing article \223Singleton - The Anti-) TjT* -0.06  Tc 0.21  Tw (Pattern!\224 \(Overload 56\).) Tj11.4 -12  TD -0.1089  Tc -0.4011  Tw (Such debate is rare, most articles present material that the whole) Tj-11.4 -12  TD -0.0774  Tc -0.0726  Tw (editorial team is happy with. However, it has happened again \(but) Tj0 -12  TD 0.0084  Tc 0.4416  Tw (on a lesser scale\). One of the articles published in the last issue) TjT* -0.0929  Tc 0.1065  Tw (moved one of the advisors, Phil Bass, to email me re-iterating the) TjT* -0.1014  Tc 0.418  Tw (concerns that he expressed about the article when first presented.) TjT* -0.0897  Tc -0.4967  Tw (I could have relegated this to the \223letters\224 page but, by implication,) TjT* -0.0676  Tc 0.0267  Tw (it raises issues of editorial policy that I feel should be discussed.) Tj11.4 -12  TD -0.124  Tc 0.199  Tw (First here is what Phil Bass has to say:) Tj-11.4 493.2  TD /F3 69  Tf-0.159  Tc 0  Tw (T) TjETq 70.8 699.6 525 15.6 re h W n BT70.8 702.6  TD/F3 13.8  Tf0.1042  Tc 0.6594  Tw (his summer I went walking in the Lake District with my girlfriend, and on one of) TjETQ q 70.8 679.8 525 15.6 re h W n BT70.8 682.8  TD/F3 13.8  Tf-0.0759  Tc -0.5297  Tw (the days we found ourselves walking through a mist that reduced visibility to around) TjETQ q 70.8 660 525 15.6 re h W n BT70.8 663  TD/F3 13.8  Tf0.083  Tc 0.0806  Tw (10 metres. Unable to use other mountains as reference points \(or, indeed, much) TjETQ q 28.8 639.6 567 15.6 re h W n BT28.8 642.6  TD/F3 13.8  Tf0.1039  Tc -0.6603  Tw (of the mountain we were on\) we were reliant on a compass and dead reckoning. Despite) TjETQ q 28.8 619.8 567 15.6 re h W n BT28.8 622.8  TD/F3 13.8  Tf0.111  Tc 0.3276  Tw (our best efforts we eventually found ourselves on a scree slope with no sign of a path.) TjETQ q 28.8 600 567 15.6 re h W n BT28.8 603  TD/F3 13.8  Tf0.4505  Tc 0.4331  Tw (We were not exactly lost \226 we had a bearing to follow and would eventually reach) TjETQ q 28.8 579.6 567 15.6 re h W n BT28.8 582.6  TD/F3 13.8  Tf0.0739  Tc -0.1503  Tw (landmarks and a path leading us to our destination, but the going was slow and difficult.) TjETQ 1 1 1 rg 28.8 56.4 264 98.4 re f0.902 0.902 0.902 rg 28.8 56.4 264 98.4 re fBT28.8 145.8  TD0 0 0 rg /F4 10.2  Tf0.0694  Tc 0.9806  Tw (When Allan Kelly\222s article entitled \223The Encapsulate Context) Tj0 -12  TD 0.2323  Tc 1.1605  Tw (Pattern\224 was circulated for review I expressed considerable) TjT* -0.1017  Tc 0.0063  Tw (disquiet. This is what I said in an email on 23rd August:) Tj17.4 -12  TD /F6 10.2  Tf-0.0595  Tc 0.4479  Tw (\223It actually presents an Anti-Pattern as if it were a real Pattern) Tj-11.4 -12  TD -0.0872  Tc -0.1408  Tw (giving the impression that it represents good practice when, in fact,) Tj0 -12  TD -0.044  Tc -0.004  Tw (the opposite is true.) Tj11.4 -12  TD -0.1458  Tc 0.6978  Tw (Also, I believe the mention of Kevlin Henney, Frank Buschmann) Tj-11.4 -12  TD -0.1051  Tc 0.0571  Tw (and EuroPLoP gives the article an unwarranted air of authority.) TjET1 1 1 rg 304.2 56.4 263.4 519 re f0.902 0.902 0.902 rg 304.2 56.4 263.4 519 re fBT321 565.8  TD0 0 0 rg -0.0617  Tc 0.0136  Tw (I would prefer this not to be published. If it is published I think it) Tj-11.4 -12  TD 0.0564  Tc 0.4206  Tw (should be accompanied by further discussion so that dissenting) Tj0 -12  TD -0.1251  Tc 0.0771  Tw (views can be expressed.) Tj11.4 -12  TD -0.1442  Tc -0.1038  Tw (You were not convinced by my argument, no-one else expressed) Tj-11.4 -12  TD -0.1082  Tc -0.2065  Tw (any reservations and the article was published without comment. In) Tj0 -12  TD -0.0366  Tc 0.3705  Tw (spite of that I remain convinced that publication of this article did) TjT* 0.1079  Tc 0.2041  Tw (more harm than good and I would appreciate the opportunity to) TjT* -0.0825  Tc 0.0345  Tw (argue my case in the pages of Overload.\224) Tj-5.4 -12  TD /F4 10.2  Tf-0.1011  Tc 0.6511  Tw (I will come back to Encapsulate Context in a moment, but first I) Tj0 -12  TD -0.1115  Tc 0.2015  Tw (would like to make an analogy:) Tj0 -24  TD /F7 10.2  Tf-0.106  Tc -0.044  Tw (Pattern 24 - Swap Colours) Tj0 -12  TD -0.2225  Tc 0  Tw (Context) Tj40.8 0  TD /F4 10.2  Tf-0.1296  Tc 0.1796  Tw (You are playing chess.) Tj-40.8 -12  TD /F7 10.2  Tf-0.199  Tc 0  Tw (Problem) Tj43.8 0  TD /F4 10.2  Tf-0.1002  Tc 0.1139  Tw (You are down to one bishop and it\222s on a black square.) Tj-33 -12  TD -0.0116  Tc 0.4616  Tw (Unfortunately, your opponent\222s major pieces are all on white) Tj0 -12  TD -0.0797  Tc -0.0037  Tw (squares and you are struggling to create an effective attack.) Tj-10.8 -12  TD /F7 10.2  Tf-0.2144  Tc 0  Tw (Forces) Tj10.8 -12  TD /F4 10.2  Tf-0.095  Tc -0.005  Tw (1. The Bishop is a useful piece. You don\222t want to lose it.) Tj0 -12  TD -0.0952  Tc -0.4548  Tw (2. The Bishop needs to be defended, but you would prefer to use) TjT* -0.0617  Tc -0.0883  Tw (your pieces to attack your opponent\222s position.) Tj-10.8 -12  TD /F7 10.2  Tf-0.0352  Tc 0  Tw (Solution) Tj43.8 0  TD /F4 10.2  Tf-0.0828  Tc 0.4661  Tw (Change the colours of the squares on the board. Black) Tj-33 -12  TD -0.08  Tc 0.455  Tw (squares become white and white squares becomes black. Now) Tj0 -12  TD -0.0916  Tc 0.0273  Tw (you have a bishop on a white square.) Tj-10.8 -24  TD -0.1159  Tc 0.4568  Tw (I won\222t try to push the analogy any further because this \223pattern\224) Tj0 -12  TD 0.1118  Tc 1.2382  Tw (is quite obviously complete nonsense. It describes a genuine) TjT* -0.0979  Tc 0.8812  Tw (problem and presents a false solution. Ignoring, for the moment,) TjT* -0.0287  Tc 1.2969  Tw (that changing the colours of the squares is against the rules, it) TjT* -0.0976  Tc 0.0676  Tw (actually doesn\222t address the real problem.) Tj10.8 -12  TD -0.0657  Tc -0.151  Tw (I believe \223Encapsulate Context\224 has all the hallmarks of \223Swap) Tj-10.8 -12  TD 0.2638  Tc 0.1862  Tw (Colours\224. In my opinion, it describes a genuine problem and) Tj0 -12  TD -0.1003  Tc 0.017  Tw (presents a false solution. I will try to explain why...) Tj10.8 -12  TD -0.0748  Tc -0.4352  Tw (I think it is fair to summarise \223Encapsulate Context\224 as follows:) Tj-10.8 -24  TD /F7 10.2  Tf-0.0796  Tc -0.0704  Tw (Encapsulate Context) Tj0 -12  TD 0.2061  Tc 0  Tw (Context) Tj45.6 0  TD /F4 10.2  Tf0.2819  Tc 0.2539  Tw (Many systems contain data that must be generally) Tj-34.8 -12  TD -0.0854  Tc 0.0354  Tw (available to divergent parts of the system.) Tj-10.8 -12  TD /F7 10.2  Tf-0.2201  Tc 0  Tw (Problems) Tj47.4 0  TD /F4 10.2  Tf-0.0475  Tc -0.1025  Tw (Using global data is poor engineering practice.) Tj-36.6 -12  TD -0.0673  Tc 0.3537  Tw (Using long parameter lists in order to avoid global data has an) Tj0 -12  TD -0.0963  Tc -0.0537  Tw (adverse effect on maintainability and object substitutability.) Tj-10.8 -12  TD /F7 10.2  Tf0.1148  Tc 0  Tw (Solution) Tj46.8 0  TD /F4 10.2  Tf0.2604  Tc 0.1896  Tw (Long parameter lists can be avoided by collecting) Tj-36 -12  TD -0.0714  Tc -0.0186  Tw (common data together into a Context object and passing that in) Tj0 -12  TD -0.0648  Tc -0.0852  Tw (parameter lists.) TjETendstreamendobj20 0 obj10413endobj18 0 obj<</Type /Page/Parent 5 0 R/Resources <</Font 27 0 R/ProcSet 2 0 R>>/Contents 19 0 R>>endobj27 0 obj<</F0 6 0 R/F3 14 0 R/F4 16 0 R/F5 21 0 R/F6 23 0 R/F7 25 0 R>>endobj29 0 obj<</Length 30 0 R>>stream
BT558.6 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (5) Tj-246 768.6  TD /F0 12  Tf-0  Tc -0.0896  Tw (Overload issue 64 december 2004) Tj-271.8 -508.8  TD /F4 10.2  Tf-0.0053  Tc 0.3953  Tw (OK, here we can see real concerns being expressed about the) Tj-11.4 -12  TD -0.286  Tc -0.464  Tw (article. So why then did I choose to publish it without comment? Well,) Tj0 -12  TD -0.2358  Tc 0.0258  Tw (partly because the other advisors and I don\222t share these concerns.) Tj11.4 -12  TD -0.0826  Tc -0.4174  Tw (While we agree with Phil that it would be better to have avoided) Tj-11.4 -12  TD -0.1186  Tc -0.4314  Tw (arriving at the problem, people do get to this point and don\222t always) Tj0 -12  TD 0.2664  Tc 0.4086  Tw (have the opportunity for a \223fundamental restructuring of the) Tj274.8 528  TD -0.1008  Tc -0.5158  Tw (system\224. It is more helpful to facilitate the communication between) Tj0 -12  TD -0.0582  Tc 0.5082  Tw (such people than to take the part of the anonymous voice saying) TjT* -0.0773  Tc -0.1727  Tw (\223you shouldn\222t be down there\224. It may serve as a warning to avoid) TjT* -0.0936  Tc -0.3291  Tw (retracing the steps that lead to the situation, but doesn\222t address the) TjT* -0.0754  Tc -0.0746  Tw (tactical problem of dealing with it.) Tj11.4 -12  TD -0.0891  Tc 0.5391  Tw (Maybe I was wrong. I can imagine that some Overload reader) Tj-11.4 -12  TD -0.0907  Tc -0.1259  Tw (somewhere is facing the problems described by Allan Kelly. They) Tj0 -12  TD -0.0234  Tc 0.4734  Tw (probably know they have problems, but upon reading the article) TjT* -0.0878  Tc 0.1178  Tw (they may get the impression that the solution presented solves the) TjT* -0.0725  Tc -0.1375  Tw (underlying problem and not only the symptomatic one. This too is) TjT* -0.1251  Tc -0.5159  Tw (a pattern \223Shifting The Burden\224 \226 described by Peter Senge in \223The) TjT* -0.1043  Tc 0.5543  Tw (Fifth Discipline\224 \(an excellent book on organisational problems\).) TjT* -0.0262  Tc 0.4095  Tw (\223Shifting The Burden\224 is a bad practice or \223anti-pattern\224 largely) TjT* 0.1116  Tc 0.3384  Tw (because by failing to address the true causes of a problem, but) TjT* 0.0474  Tc 0.4026  Tw (giving the appearance of fixing it, it encourages the problem to) TjT* -0.0956  Tc 0.0956  Tw (grow to proportions that make an eventual solution problematic.) Tj11.4 -12  TD -0.0884  Tc 0.0584  Tw (Maybe I was right. I\222ve used \223Encapsulate Context\224 in the past) Tj-11.4 -12  TD -0.0673  Tc 0.5173  Tw (\226 albeit long before reading the article. I took an application that) Tj0 -12  TD 0  Tc 0.45  Tw (had, scattered throughout its code, snippets of code that went to) TjT* -0.0393  Tc 0.4893  Tw (various sources of configuration data \(the Windows registry, the) TjT* -0.0824  Tc 0.5324  Tw (command line, several databases, configuration files\) and moved) TjT* -0.053  Tc -0.147  Tw (all of these snippets into a context object. This made it far simpler) TjT* -0.1438  Tc -0.5601  Tw (to test components \(we didn\222t need to set up copies of all the sources) TjT* -0.0891  Tc -0.2859  Tw (of configuration data for each test\). When additional configuration) TjT* -0.073  Tc 0.0153  Tw (data was required by some new code, it was clear how to obtain it) TjT* -0.0581  Tc -0.4192  Tw (\226 from the context object. And the difference between live and test) TjT* -0.0815  Tc -0.6018  Tw (configurations became easy to parameterise. Even the author of the) TjT* -0.0264  Tc 0.4764  Tw (original code was impressed by the changes. That system is still) TjT* -0.0553  Tc 0.1553  Tw (running and being developed and \226 as of the last report \226 without) TjT* -0.0689  Tc -0.0061  Tw (suffering the high maintenance/low testability problems that are a) TjT* -0.0595  Tc -0.0905  Tw (risk of such highly-coupled approaches.) Tj11.4 -12  TD -0.0958  Tc 0.2887  Tw (There is a fine line to be drawn here and, while I think that we) Tj-11.4 -12  TD 0.0961  Tc 0.3078  Tw (got this one right, it is necessary to be vigilant. The role of the) Tj0 -12  TD -0.0419  Tc 0.4919  Tw (Overload team is to help the author present tools and techniques) TjT* -0.0652  Tc 0.2352  Tw (that may be of use to the reader and let the reader be the judge of) TjT* -0.0799  Tc -0.0101  Tw (when they are appropriate. I expect readers to use their judgement) TjT* -0.083  Tc -0.487  Tw (when considering the application of such ideas \226 they should know) TjT* -0.1261  Tc -0.5039  Tw (that there are always trade-offs. Knives and forks can be dangerous,) TjT* -0.0762  Tc 0.0595  Tw (but I don\222t insist my children eat with blunt sticks.) Tj11.4 -12  TD -0.076  Tc 0.0351  Tw (And the lesson I take from my experience in the Lake District?) Tj-11.4 -12  TD 0.1545  Tc 0.2955  Tw (While it is good to know where one should be it is also worth) Tj0 -12  TD 0.2635  Tc 1.2531  Tw (listening to the people solving the same problem you have) TjT* -0.1335  Tc 0.3835  Tw (encountered where you are.) Tj213 -12  TD /F8 10.2  Tf-0.0748  Tc -0.3692  Tw (Alan Griffiths) Tj-41.4 -12  TD /F2 9  Tf0  Tc 0  Tw (overload@accu.org) TjET1 1 1 rg 29.4 56.4 538.2 109.2 re f0.902 0.902 0.902 rg 30.6 57.6 535.8 106.8 re fBT205.8 145.8  TD0 0 0 rg /F9 18  Tf-0.0916  Tc -0.0284  Tw (Copyrights and Trade marks) Tj-169.8 -12  TD /F6 9  Tf-0.0102  Tc -0.1783  Tw (Some articles and other contributions use terms that are either registered trade marks or claimed as such.  The use of such terms is not intended to support nor) Tj0 -12  TD -0.0101  Tc -0.0025  Tw (disparage any trade mark claim.  On request we will withdraw all references to a specific trademark and its owner.) Tj5.4 -12  TD -0.0106  Tc 0.0199  Tw (By default the copyright of all material published by ACCU is the exclusive property of the author. By submitting material to ACCU for publication an author is,) Tj-5.4 -12  TD -0.0012  Tc -0.0692  Tw (by default, assumed to have granted ACCU the right to publish and republish that material in any medium as they see fit. An author of an article or column \(not) Tj0 -12  TD 0.0081  Tc -0.0812  Tw (a letter or a review of software or a book\) may explicitly offer single \(first serial\) publication rights and thereby retain all other rights.) Tj7.8 -12  TD 0.0045  Tc -0.1485  Tw (Except for licences granted to 1\) Corporate Members to copy solely for internal distribution 2\) members to copy source code for use on their own computers,) Tj-7.8 -12  TD -0.0231  Tc 0.0323  Tw (no material can be copied from Overload without written permission of the copyright holder.) TjETq 29.4 165.6 m 29.4 56.4 l 567.6 56.4 l 567.6 165.6 l 30.6 164.4 m 30.6 57.6 l 566.4 57.6 l 566.4 164.4 l h W* n 29.4 56.4 538.2 109.2 re fQ 0.9529 0.9529 0.9529 rg 30 174 537 52.2 re fBT33.6 213.6  TD0 0 0 rg /F0 12  Tf-0.0369  Tc 0.3969  Tw (Copy Deadlines) Tj0 -19.8  TD /F4 10.2  Tf-0.05  Tc 0.1  Tw (All articles intended for publication in ) Tj157.8 0  TD /F10 10.2  Tf-0.1325  Tc 0.5825  Tw (Overload 65) Tj53.4 0  TD /F4 10.2  Tf-0.0866  Tc 0.3866  Tw (should be submitted to the editor by January 1) Tj188.4 3.6  TD -0.4017  Tc 0  Tw (st) Tj9.6 -3.6  TD -0.1429  Tc 0.3929  Tw (2005, and for ) Tj57 0  TD /F10 10.2  Tf-0.1325  Tc 0.5825  Tw (Overload 66) Tj53.4 0  TD /F4 10.2  Tf0.3  Tc 0  Tw (by) Tj-519.6 -12  TD -0.087  Tc -0.063  Tw (March 1) Tj33.6 3.6  TD 0.1983  Tc 0  Tw (st) Tj9 -3.6  TD 0.09  Tc (2005.) TjETq 29.4 226.8 m 29.4 173.4 l 567.6 173.4 l 567.6 226.8 l 30 226.2 m 30 174 l 567 174 l 567 226.2 l h W* n 29.4 173.4 538.2 53.4 re fQ 1 1 1 rg 29.4 322.2 263.4 456.6 re f0.902 0.902 0.902 rg 29.4 322.2 263.4 456.6 re fBT29.4 769.8  TD0 0 0 rg /F7 10.2  Tf-0.3205  Tc 0.1705  Tw (Resulting Context) Tj79.2 0  TD /F4 10.2  Tf-0.3157  Tc -0.1943  Tw (Using a Context object improves substitutability,) Tj-67.8 -12  TD -0.2662  Tc -0.4838  Tw (encapsulation and coupling, and reduces the need for copying data.) Tj-11.4 -24  TD 0.1391  Tc 0.9609  Tw (First of all I am not at all convinced that the pattern context) Tj0 -12  TD -0.1056  Tc 0.8556  Tw (occurs in well-designed systems. Allan presents an example that) TjT* -0.1245  Tc 0.8245  Tw (purports to illustrate how the context arises, but I don\222t find it at) TjT* -0.008  Tc 1.298  Tw (all convincing. Personally, I would not be tempted to design a) TjT* -0.0678  Tc 0.5778  Tw (stock exchange trading system like that example, so it looks like) TjT* -0.1022  Tc 1.1022  Tw (a straw man to me. However, let\222s give Allan the benefit of the) TjT* -0.0756  Tc -0.0144  Tw (doubt and work on the assumption that such systems do exist.) Tj11.4 -12  TD -0.0776  Tc 0.1584  Tw (I agree that global data is a Bad Thing. And I agree that overly) Tj-11.4 -12  TD -0.0296  Tc 0.4796  Tw (long parameter lists are a sign of a problem. But long parameter) Tj0 -12  TD -0.0871  Tc 0.2371  Tw (lists are only a symptom of a deeper problem. Coalescing several) TjT* -0.0652  Tc -0.5757  Tw (parameters into one changes the interface in only a trivial way. The) TjT* -0.092  Tc -0.1126  Tw (same information is passed from the client code to the function, so) TjT* -0.0843  Tc -0.0657  Tw (coupling and cohesion are not significantly different.) Tj11.4 -12  TD -0.1185  Tc -0.4815  Tw (Now, if we consider many different functions spread throughout) Tj-11.4 -12  TD 0.301  Tc 0.509  Tw (the system and a Context object that contains all the global) Tj0 -12  TD 0.3092  Tc 1.1158  Tw (information that any of those functions might need, things) TjT* -0.1455  Tc -0.3045  Tw (definitely get worse. Where a function actually needs only one item) TjT* 0.3049  Tc 0.9088  Tw (of global data we provide it with all the global data items,) TjT* 0.3155  Tc 0.6345  Tw (introducing unnecessary coupling. And where that function) TjT* -0.0868  Tc -0.5132  Tw (originally had direct access to the one item of global data it needed,) TjT* 0.3075  Tc 0.5025  Tw (now it must extract it from a Context object, increasing the) TjT* -0.0036  Tc -0.1464  Tw (complexity of the interface.) Tj11.4 -12  TD -0.0981  Tc -0.4519  Tw (The resulting context is a significantly more coupled system. As) Tj-11.4 -12  TD -0.0957  Tc -0.285  Tw (far as I can see, the effect on maintainability is minimal, there is no) Tj0 -12  TD -0.1154  Tc 0.1154  Tw (effect on substitutability, and encapsulation has suffered. We have) TjT* -0.1713  Tc -0.4402  Tw (gone from a Bad Thing to an even Worse Thing. That is the opposite) TjT* -0.0695  Tc -0.1662  Tw (of a design pattern; it is an Anti-Pattern.) Tj11.4 -12  TD 0.2748  Tc 0.8352  Tw (I will add just one further comment. If you find yourself) Tj-11.4 -12  TD -0.0741  Tc 0.0575  Tw (designing a system with significant amounts of global data and/or) Tj0 -12  TD -0.1349  Tc -0.3423  Tw (passing data between distant parts of a system, you have a problem.) TjT* -0.0758  Tc 0.2858  Tw (It may be a deep-seated problem. Think carefully about what this) TjT* -0.0765  Tc 0.2765  Tw (data is, where it is needed and how the system is partitioned. The) TjT* -0.1139  Tc 0.4439  Tw (problem can only be solved by a fundamental restructuring of the) TjT* -0.0053  Tc 0.4553  Tw (system. There probably isn\222t a single design pattern that will do) TjT* -0.0801  Tc 0.0051  Tw (that. \223Encapsulate Context\224 won\222t help you. Don\222t use it.) TjETendstreamendobj30 0 obj11510endobj28 0 obj<</Type /Page/Parent 5 0 R/Resources <</Font 37 0 R/ProcSet 2 0 R>>/Contents 29 0 R>>endobj37 0 obj<</F0 6 0 R/F2 10 0 R/F4 16 0 R/F6 23 0 R/F7 25 0 R/F8 31 0 R/F9 33 0 R/F10 35 0 R>>endobj39 0 obj<</Length 40 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (6) Tj0 768.6  TD /F0 12  Tf-0.0449  Tc 0.2549  Tw (Overload issue 64 december 2004) Tj14.4 -38.4  TD /F1 18  Tf0.0074  Tc -0.0114  Tw (Evolution of the Observer) Tj25.2 -20.4  TD 0.0557  Tc 0  Tw (Pattern) Tj-25.2 -12  TD /F0 10.2  Tf-0.1026  Tc -0.0714  Tw (by Phil Bass) Tj-14.4 -18  TD /F4 10.2  Tf-0.2671  Tc 0.1171  Tw (Back in the early 1990s four wise men began a voyage of discovery.) Tj0 -12  TD -0.2582  Tc 0.4355  Tw (They were trying to trace the origins of good software design. They) TjT* -0.0898  Tc 1.1398  Tw (crossed great deserts of featureless software and fought through) TjT* -0.2388  Tc 0.6221  Tw (almost impenetrable jungles of code. What they found changed the) TjT* -0.2387  Tc 1.2887  Tw (way we think about software development. Eric Gamma, Richard) TjT* -0.2381  Tc 1.1547  Tw (Helm, Ralph Johnson and John Vlissides discovered a plethora of) TjT* -0.2188  Tc 0.0688  Tw (Design Pattern species falling into 23 separate genera.) Tj11.4 -12  TD 0.0139  Tc 0.4361  Tw (The \223Gang of Four\224, as they have become known, published) Tj-11.4 -12  TD -0.0667  Tc -0.55  Tw (their findings in 1995 [1] and \223patternologists\224 have been studying) Tj0 -12  TD -0.0729  Tc 0.2502  Tw (these creatures ever since. I have taken a particular interest in the) TjT* -0.1202  Tc -0.5698  Tw (Observer pattern and I have evidence for changes in its morphology) TjT* -0.0637  Tc 0.5137  Tw (and behaviour. The Observer pattern is evolving rapidly and this) TjT* -0.0771  Tc 0.0771  Tw (paper presents some recent and, I believe, important changes.) Tj0 -18  TD /F0 12  Tf0.0011  Tc -0.2411  Tw (Historical Perspective) TjT* /F4 10.2  Tf0.1154  Tc 0.9946  Tw (In their description of the Observer pattern the Gang of Four) Tj0 -12  TD -0.0925  Tc 0.8153  Tw (assumed that a Subject has a single point of attachment and that) TjT* 0.006  Tc 1.244  Tw (Observers attach directly to their Subjects. I have argued \([2],) TjT* -0.0952  Tc 1.5202  Tw ([3]\) that Subjects can have multiple attachment points \(Events\)) TjT* -0.0906  Tc 0.6072  Tw (and that Observers may attach indirectly via structures known as) TjT* 0.2513  Tc 0.8737  Tw (Callbacks. Indeed, it is possible to understand the Observer) TjT* 0.3021  Tc 0.8812  Tw (pattern purely in terms of Events and Callbacks. From this) TjT* -0.0517  Tc 1.235  Tw (perspective, a Subject is anything that publishes Events and an) TjT* -0.0525  Tc -0.0975  Tw (Observer is anything that attaches Callbacks to Events.) Tj11.4 -12  TD -0.1672  Tc 0.5422  Tw (Formally, a Subject provides registries of event handlers, while) Tj-11.4 -12  TD -0.1847  Tc -0.0403  Tw (Observers add handlers to these registries and subsequently remove) Tj0 -12  TD -0.1723  Tc 0.5023  Tw (them again. State change events in a Subject are communicated to) TjT* 0.1271  Tc 0.2562  Tw (the Observers by calling the registered handlers. In this paper,) TjT* -0.2003  Tc 0.5903  Tw (however, we will use \221Event\222 to mean \223registry of event handlers\224) TjT* -0.2021  Tc -0.4729  Tw (and \221Callback\222 to mean \223registered event handler\224. This terminology) TjT* -0.198  Tc 0.048  Tw (is slightly unusual, but it simplifies the discussion considerably.) Tj11.4 -12  TD -0.2191  Tc 0.5491  Tw (In the Gang of Four pattern, detaching an Observer required the) Tj-11.4 -12  TD -0.3793  Tc -0.3707  Tw (Subject to search its collection of attached Observers. I proposed a more) Tj0 -12  TD -0.2938  Tc 0.0771  Tw (efficient mechanism in which the Observer stores an iterator returned) TjT* -0.2989  Tc -0.2664  Tw (when a Callback is attached to an Event and passes the iterator back to) TjT* -0.2909  Tc -0.5191  Tw (the Event when the Callback is detached. Although more efficient, this) TjT* 0.0509  Tc 1.2657  Tw (approach requires more client code and is more vulnerable to) TjT* -0.2989  Tc 0.0822  Tw (programmer error. \(I call this the correctness vs. efficiency problem.\)) Tj11.4 -12  TD 0.0081  Tc 0.4419  Tw (Until recently, my own research has been confined to Events) Tj-11.4 -12  TD -0.0997  Tc -0.2139  Tw (based on lists of pointers to a polymorphic callback base class. For) Tj0 -12  TD 0.273  Tc 0.377  Tw (example, here is a complete specimen of the common Event) TjT* 0.2034  Tc 0  Tw (\() Tj3.6 0  TD /F10 10.2  Tf-0.1755  Tc 0.0255  Tw (Eventus Vulgaris) Tj67.8 0  TD /F4 10.2  Tf0.2034  Tc 0  Tw (\)) Tj3 2.4  TD /F4 7.2  Tf0  Tc (1) Tj6 -2.4  TD /F4 10.2  Tf-0.1272  Tc 0.3772  Tw (as described in [3].) Tj-66 -17.4  TD /F2 9  Tf0  Tc 0  Tw (// Abstract Function interface class.) Tj0 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf(template<typename Arg>) TjT* (struct AbstractFunction {) Tj10.8 -12  TD (virtual ~AbstractFunction\(\) {}) Tj0 -12  TD (virtual void operator\(\) \(Arg\) = 0;) Tj-10.8 -12  TD (};) Tj0 -18.6  TD 0 0 0 rg /F2 9  Tf(// Event class template.) Tj0 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf(template<typename Arg>) TjT* (struct Event : list<AbstractFunction<Arg>*> {) Tj10.8 -12  TD (void notify\(Arg arg\) {) Tj10.8 -12  TD (typedef AbstractFunction<Arg> Func;) Tj274.8 684  TD (for_each\(begin\(\), end\(\),) Tj37.8 -12  TD (bind2nd\(mem_fun\(&Func::operator\(\)\),) Tj43.2 -12  TD (arg\)\);) Tj-91.8 -12  TD (}) Tj-10.8 -12  TD (};) Tj33.6 -17.4  TD 0 0 0 rg /F7 10.2  Tf-0.1361  Tc 0.0718  Tw (Specimen 1 \226 An Event from early 2003) Tj-47.4 -18.6  TD /F4 10.2  Tf0.5388  Tc 0.5779  Tw (We will compare this with several specimens of a newly) Tj0 -12  TD 0.2866  Tc 0.7634  Tw (discovered species \() Tj88.8 0  TD /F10 10.2  Tf0.3258  Tc 0.7242  Tw (Eventus Adaptabilis) Tj88.2 0  TD /F4 10.2  Tf0.2359  Tc 0.9341  Tw (\) that is able to use) Tj-177 -12  TD -0.2219  Tc 1.2053  Tw (different types of container and different types of callback. These) Tj0 -12  TD -0.1838  Tc 0.8338  Tw (adaptive changes allow ) Tj97.2 0  TD /F10 10.2  Tf-0.1865  Tc 1.2365  Tw (E. Adaptabilis) Tj61.2 0  TD /F4 10.2  Tf-0.2143  Tc 1.3843  Tw (to thrive in a much wider) Tj-158.4 -12  TD -0.1948  Tc 0.6448  Tw (range of programming environments. They also provide a solution) Tj0 -12  TD -0.2104  Tc 0.0604  Tw (to the correctness vs. efficiency problem, as we shall see shortly.) Tj0 -18  TD /F0 12  Tf-0.0394  Tc 0.1994  Tw (A Remarkable New Species) TjT* /F4 10.2  Tf-0.0864  Tc 0.7079  Tw (The key to the greater adaptability of ) Tj156.6 0  TD /F10 10.2  Tf-0.048  Tc 0.498  Tw (E. Adaptabilis) Tj61.2 0  TD /F4 10.2  Tf-0.0731  Tc 1.1231  Tw (is a second) Tj-217.8 -12  TD 0.0105  Tc 1.2645  Tw (template parameter, which specifies the type of container and,) Tj0 -12  TD -0.0734  Tc -0.0766  Tw (hence, the type of the callback pointers stored within it.) Tj13.8 -17.4  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc 0  Tw (template<) Tj21.6 -12  TD (typename Arg,) Tj0 -12  TD (typename Container =) Tj21.6 -12  TD (std::list<Callback::Function<Arg>*> >) Tj-43.2 -12  TD (struct Event;) Tj-6 -18.6  TD 0 0 0 rg /F7 10.2  Tf-0.1068  Tc 0.0318  Tw (Specimen 2 \226 The defining feature of Eventus Adaptabilis.) Tj-7.8 -24  TD /F4 10.2  Tf0.0621  Tc 1.2129  Tw (This tiny fragment suggests answers to several questions that) Tj0 -12  TD -0.0925  Tc 0.6925  Tw (have puzzled patternologists. It explains, for example, why most) TjT* /F10 10.2  Tf-0.048  Tc -0.102  Tw (E. Adaptabilis) Tj60 0  TD /F4 10.2  Tf-0.0919  Tc 0.3019  Tw (individuals are almost indistinguishable from their) Tj-60 -12  TD /F10 10.2  Tf-0.1321  Tc 0.5821  Tw (E. Vulgaris) Tj48.6 0  TD /F4 10.2  Tf-0.0601  Tc 0.5101  Tw (cousins. Because, by default, ) Tj121.2 0  TD /F10 10.2  Tf-0.048  Tc 0.498  Tw (E. Adaptabilis) Tj60.6 0  TD /F4 10.2  Tf-0.1755  Tc 1.2255  Tw (uses the) Tj-230.4 -12  TD -0.0198  Tc 0.9198  Tw (same container type as ) Tj99.6 0  TD /F10 10.2  Tf-0.0121  Tc 1.0621  Tw (E. Vulgaris) Tj51 0  TD /F4 10.2  Tf-0.0109  Tc 1.2109  Tw (the two species often have) Tj-150.6 -12  TD -0.0919  Tc 0.6085  Tw (identical external appearance and behaviour. It is also clear from) Tj0 -12  TD 0.0716  Tc 0.7784  Tw (this fragment how ) Tj81 0  TD /F10 10.2  Tf-0.0019  Tc 1.0519  Tw (E. Adaptabilis) Tj63.6 0  TD /F4 10.2  Tf0.0859  Tc 1.1641  Tw (is able to adapt so easily to) Tj-144.6 -12  TD 0.5117  Tc 0.7383  Tw (different environments. Simply by specifying a different) Tj0 -12  TD /F2 9  Tf0.3333  Tc 0  Tw (Container) Tj55.2 0  TD /F4 10.2  Tf0.1343  Tc 0.3157  Tw (argument ) Tj43.8 0  TD /F10 10.2  Tf0.1827  Tc 0.8673  Tw (E. Adaptabilis) Tj66 0  TD /F4 10.2  Tf0.163  Tc 1.037  Tw (can acquire any of the) Tj-165 -12  TD -0.0829  Tc 0.1329  Tw (characteristics of that ) Tj87.6 0  TD /F2 9  Tf0  Tc 0  Tw (Container) Tj48.6 0  TD /F4 10.2  Tf-0.15  Tc (.) Tj-125.4 -12  TD -0.159  Tc -0.2576  Tw (It is not clear, however, from Specimen 2 whether ) Tj196.2 0  TD /F10 10.2  Tf-0.1404  Tc -0.6096  Tw (E. Adaptabilis) Tj-207 -12  TD /F4 10.2  Tf0.134  Tc 0.316  Tw (acquires its behavioural traits through inheritance, nor can we) Tj0 -12  TD -0.0915  Tc -0.1252  Tw (deduce which types of container constitute valid parameters to the) TjT* /F10 10.2  Tf-0.048  Tc 0.498  Tw (E. Adaptabilis) Tj60.6 0  TD /F4 10.2  Tf-0.0649  Tc 0.5149  Tw (template. To answer such questions we must look) Tj-60.6 -12  TD -0.0868  Tc 0.0118  Tw (inside the Event. Our next specimen is instructive, here.) Tj13.8 -17.4  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc 0  Tw (template<typename Arg, typename Container>) Tj0 -12  TD (struct Event : Container {) Tj10.8 -12  TD (struct notify_function {) Tj10.8 -12  TD (notify_function\(Arg a\) : arg\(a\) {}) Tj0 -12  TD (typedef typename) Tj43.2 -12  TD (element<Container>::type pointer;) Tj-43.2 -12  TD (void operator\(\)\(const pointer& ptr\)) Tj145.8 -12  TD ({\(*ptr\)\(arg\);}) Tj-145.8 -12  TD (Arg arg;) Tj-10.8 -12  TD (};) Tj0 -18.6  TD 0 0 0 rg /F2 9  Tf(// ...  indistinct features) Tj0 -17.4  TD 0.2 0.2 0.2 rg /F11 9  Tf(void notify\(Arg arg\) {) Tj10.8 -12  TD 0 0 0 rg /F2 9  Tf(// for_each\(begin\(\), end\(\),) Tj0 -12  TD (//          notify_function\(arg\)\); ???) Tj-10.8 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf(}) Tj-10.8 -12  TD (};) Tj0.6 -18.6  TD 0 0 0 rg /F7 10.2  Tf-0.0973  Tc 0.033  Tw (Specimen 3 \226 Some internal structure of ) Tj173.4 0  TD /F12 10.2  Tf-0.0898  Tc -0.6602  Tw (E. Adaptabilis) Tj58.2 0  TD /F7 10.2  Tf-0.15  Tc 0  Tw (.) TjET1 1 1 rg 28.8 56.4 264 9.6 re f28.8 56.4 264 9.6 re fBT28.8 60  TD0 0 0 rg /F9 7.8  Tf-0.144  Tc (1) Tj11.4 0  TD 0.038  Tc -0.11  Tw (The ) Tj12.6 0  TD /F2 7.8  Tf0.12  Tc 0  Tw (std::) Tj25.8 0  TD /F9 7.8  Tf0.0746  Tc 0.0171  Tw (prefix has been omitted to improve the layout on the printed page.) Tj0.6 w 1 J 1 j 0 0 0 RG ET28.8 69.6 m 292.8 69.6 l S endstreamendobj40 0 obj10896endobj38 0 obj<</Type /Page/Parent 5 0 R/Resources <</Font 45 0 R/ProcSet 2 0 R>>/Contents 39 0 R>>endobj45 0 obj<</F0 6 0 R/F1 8 0 R/F2 10 0 R/F4 16 0 R/F7 25 0 R/F9 33 0 R/F10 35 0 R/F11 41 0 R/F12 43 0 R>>endobj47 0 obj<</Length 48 0 R>>stream
BT559.2 42  TD0 0 0 rg /F0 10.8  Tf0.2028  Tc 0  Tw (7) Tj-246.6 768.6  TD /F0 12  Tf-0  Tc -0.0896  Tw (Overload issue 64 december 2004) Tj-283.2 -40.8  TD /F4 10.2  Tf-0.201  Tc 0.291  Tw (Unfortunately, the details of the ) Tj127.8 0  TD /F2 9  Tf-0.075  Tc 0  Tw (notify\(\)) Tj45 0  TD /F4 10.2  Tf-0.2078  Tc 0.6578  Tw (function have not been) Tj-172.8 -12  TD -0.1645  Tc 1.2895  Tw (preserved. When this specimen was first discovered we assumed) Tj0 -12  TD -0.1092  Tc 0.5592  Tw (that the ) Tj34.2 0  TD /F2 9  Tf0.075  Tc 0  Tw (notify\(\)) Tj47.4 0  TD /F4 10.2  Tf-0.0747  Tc 1.1247  Tw (function is similar to that of ) Tj121.2 0  TD /F10 10.2  Tf-0.1921  Tc 1.2421  Tw (E. Vulgaris) Tj46.2 0  TD /F4 10.2  Tf0.1178  Tc 0.9322  Tw (, as) Tj-249 -12  TD -0.185  Tc 1.1804  Tw (shown by the comment. In fact, this assumption turned out to be) Tj0 -12  TD -0.0345  Tc 1.0845  Tw (incorrect, but Specimen 3 does clearly show several interesting) TjT* -0.1764  Tc 1.1514  Tw (features. It is immediately clear, for example, that ) Tj206.4 0  TD /F10 10.2  Tf-0.1404  Tc 1.1904  Tw (E. Adaptabilis) Tj-206.4 -12  TD /F4 10.2  Tf-0.1807  Tc 0.0307  Tw (inherits all the characteristics of its ) Tj138 0  TD /F2 9  Tf-0.0667  Tc 0  Tw (Container) Tj47.4 0  TD /F4 10.2  Tf-0.15  Tc (.) Tj-174 -12  TD -0.0558  Tc -0.3942  Tw (The most striking feature of Specimen 3, however, is the nested) Tj-11.4 -12  TD -0.0752  Tc 0.5252  Tw (function object class, ) Tj88.8 0  TD /F2 9  Tf0  Tc 0  Tw (notify_function) Tj81 0  TD /F4 10.2  Tf-0.0647  Tc 0.5147  Tw (. It is perfectly adapted) Tj-169.8 -12  TD -0.0935  Tc 0.2435  Tw (to its assumed role in the ) Tj103.8 0  TD /F2 9  Tf0  Tc 0  Tw (notify\(\)) Tj46.2 0  TD /F4 10.2  Tf-0.091  Tc 0.541  Tw (function. It provides exactly) Tj-150 -12  TD -0.0508  Tc 0.5008  Tw (the right interface for the ) Tj105.6 0  TD /F2 9  Tf0  Tc 0  Tw (for_each\(\)) Tj57 0  TD /F4 10.2  Tf-0.0261  Tc 0.4761  Tw (algorithm and yet makes) Tj-162.6 -12  TD -0.0868  Tc -0.1382  Tw (only the minimum assumptions about the container element types.) Tj0 -12  TD 0.2034  Tc 0.2466  Tw (Where ) Tj32.4 0  TD /F10 10.2  Tf0.2879  Tc 1.3621  Tw (E. Vulgaris) Tj54.6 0  TD /F4 10.2  Tf0.2633  Tc 1.0867  Tw (is restricted to using ) Tj96.6 0  TD /F2 9  Tf0.4364  Tc 0  Tw (std::list<>) Tj63.6 0  TD /F4 10.2  Tf0.45  Tc (, ) Tj7.2 0  TD /F10 10.2  Tf0.4089  Tc (E.) Tj-254.4 -12  TD -0.1311  Tc (Adaptabilis) Tj47.4 0  TD /F4 10.2  Tf-0.1752  Tc -0.2748  Tw (is free to use vectors, lists, sets, user-defined containers,) Tj-47.4 -12  TD -0.0938  Tc -0.0562  Tw (etc. And where ) Tj63.6 0  TD /F10 10.2  Tf-0.2521  Tc 0.7021  Tw (E. Vulgaris) Tj47.4 0  TD /F4 10.2  Tf-0.0747  Tc 0.4047  Tw (requires the container element type to) Tj-111 -12  TD 0.2428  Tc 1.8072  Tw (be a built-in pointer to an ) Tj125.4 0  TD /F2 9  Tf0.4  Tc 0  Tw (AbstractFunction<Arg>) Tj121.2 0  TD /F4 10.2  Tf0.45  Tc (, ) Tj7.8 0  TD /F10 10.2  Tf0.4089  Tc (E.) Tj-254.4 -12  TD -0.0766  Tc (Adaptabilis) Tj48 0  TD /F4 10.2  Tf-0.0831  Tc -0.4097  Tw (accepts built-in pointers and smart pointers to ordinary) Tj-48 -12  TD -0.0719  Tc 0.2492  Tw (functions and function objects of any type that can be called with) Tj0 -12  TD -0.1295  Tc 0.4295  Tw (an argument convertible to ) Tj109.8 0  TD /F2 9  Tf0  Tc 0  Tw (Arg) Tj16.2 0  TD /F4 10.2  Tf-0.15  Tc (.) Tj-114.6 -12  TD -0.1773  Tc -0.3156  Tw (It is interesting to note that the ) Tj118.8 0  TD /F2 9  Tf-0.08  Tc 0  Tw (notify_function) Tj81.6 0  TD /F4 10.2  Tf-0.1318  Tc -0.6182  Tw (is public and,) Tj-211.8 -12  TD -0.0477  Tc 0.0613  Tw (therefore, available to client code. This seems to be a violation of) Tj0 -12  TD -0.1053  Tc 0.1353  Tw (encapsulation, but it also provides benefits, as we shall see later.) Tj11.4 -12  TD -0.0586  Tc 0.5086  Tw (Another note-worthy feature of the ) Tj145.8 0  TD /F2 9  Tf0  Tc 0  Tw (notify_function) Tj84 0  TD /F4 10.2  Tf0.1064  Tc 0.3436  Tw (is the) Tj-241.2 -12  TD /F2 9  Tf-0.0667  Tc 0  Tw (element<Container>) Tj97.8 0  TD /F4 10.2  Tf-0.1217  Tc -0.4783  Tw (meta-function. The implementation of this) Tj-97.8 -12  TD -0.0807  Tc -0.0693  Tw (meta-function was missing from Specimen 3, but an intact sample) Tj0 -12  TD -0.0788  Tc -0.0712  Tw (was discovered later and is shown here as Specimen 4.) Tj13.8 -17.4  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc 0  Tw (template<typename Container>) Tj0 -12  TD (struct element {) Tj10.8 -12  TD (typedef typename Container::value_type type;) Tj-10.8 -12  TD (};) Tj27.6 -18.6  TD 0 0 0 rg /F7 10.2  Tf-0.0566  Tc -0.2434  Tw (Specimen 4 \226 The ) Tj77.4 0  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc 0  Tw (element) Tj40.8 0  TD 0 0 0 rg /F7 10.2  Tf-0.0528  Tc (meta-function.) Tj-159.6 -24  TD /F4 10.2  Tf0.1319  Tc 1.0381  Tw (In itself this is an unremarkable structure. It just extracts the) Tj0 -12  TD /F2 9  Tf0.3  Tc 0  Tw (value_type) Tj60 0  TD /F4 10.2  Tf0.1514  Tc 1.1557  Tw (from a container that conforms to the standard) Tj-60 -12  TD 0.0702  Tc 1.237  Tw (requirements. In evolutionary terms, however, its existence is) Tj0 -12  TD 0.3874  Tc 0.3626  Tw (quite interesting. ) Tj79.8 0  TD /F10 10.2  Tf0.3673  Tc 0.6827  Tw (E. Adaptabilis) Tj68.4 0  TD /F4 10.2  Tf0.4042  Tc 0.6458  Tw (can only benefit from the) Tj-148.2 -12  TD /F2 9  Tf0  Tc 0  Tw (element<>) Tj51.6 0  TD /F4 10.2  Tf-0.0864  Tc 0.5364  Tw (meta-function when it uses a non-standard container) Tj-51.6 -12  TD 0.5163  Tc 0.6004  Tw (and only then if the meta-function is specialised for that) Tj0 -12  TD -0.102  Tc 0.352  Tw (container. As yet, there are no known cases of ) Tj189 0  TD /F10 10.2  Tf-0.048  Tc -0.102  Tw (E. Adaptabilis) Tj60 0  TD /F4 10.2  Tf0.0904  Tc 0  Tw (and) Tj-249 -12  TD -0.086  Tc 0.8693  Tw (non-standard containers co-existing like this in the wild. It must) Tj0 -12  TD -0.1074  Tc 0.4374  Tw (be a matter of speculation, therefore, whether this feature has any) TjT* -0.0471  Tc -0.1029  Tw (real benefit.) Tj11.4 -12  TD -0.0669  Tc -0.2031  Tw (The internal structure of the ) Tj112.2 0  TD /F2 9  Tf0  Tc 0  Tw (notify\(\)) Tj45.6 0  TD /F4 10.2  Tf-0.0776  Tc -0.2724  Tw (function was a surprise.) Tj-169.2 -12  TD -0.077  Tc 0.227  Tw (Instead of the ubiquitous ) Tj103.2 0  TD /F2 9  Tf0  Tc 0  Tw (for_each\(\)) Tj57 0  TD /F4 10.2  Tf-0.0736  Tc 0.5236  Tw (function it uses a hitherto) Tj-160.2 -12  TD -0.0931  Tc -0.0569  Tw (unknown algorithm, ) Tj84 0  TD /F2 9  Tf0  Tc 0  Tw (slither\(\)) Tj48.6 0  TD /F4 10.2  Tf-0.1027  Tc 0.2527  Tw (. The ) Tj22.8 0  TD /F2 9  Tf0  Tc 0  Tw (notify\(\)) Tj46.2 0  TD /F4 10.2  Tf-0.0602  Tc 0.2102  Tw (function can be) Tj-201.6 -12  TD -0.0944  Tc 0.1444  Tw (seen in Specimen 5 and the ) Tj112.2 0  TD /F2 9  Tf0  Tc 0  Tw (slither\(\)) Tj51.6 0  TD /F4 10.2  Tf-0.0774  Tc 0.1274  Tw (algorithm itself is shown) Tj-163.8 -12  TD -0.1012  Tc -0.0488  Tw (in Specimen 6.) Tj13.8 -17.4  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc 0  Tw (template<typename Arg, typename Container>) Tj0 -12  TD (struct Event : Container {) Tj10.8 -18.6  TD 0 0 0 rg /F2 9  Tf(// ...) Tj0 -24  TD 0.2 0.2 0.2 rg /F11 9  Tf(void notify\(Arg arg\) {) Tj10.8 -12  TD (slither\(this->begin\(\),) Tj43.2 -12  TD (this->end\(\),) Tj0 -12  TD (notify_function\(arg\)\);) Tj-54 -12  TD (}) Tj-10.8 -12  TD (};) Tj16.2 -12  TD 0 0 0 rg /F7 10.2  Tf-0.1132  Tc 0.1632  Tw (Specimen 5 \226 ) Tj58.8 0  TD /F12 10.2  Tf-0.0898  Tc -0.0602  Tw (E. Adaptabilis) Tj60.6 0  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc 0  Tw (notify\(\)) Tj45.6 0  TD 0 0 0 rg /F7 10.2  Tf-0.1135  Tc (function.) Tj94.2 708  TD 0.2 0.2 0.2 rg /F11 9  Tf-0.014  Tc 0.014  Tw (template<typename Iterator, typename Function>) Tj0 -12  TD -0.0154  Tc 0.0154  Tw (void slither\(Iterator first, Iterator last,) Tj70.2 -12  TD 0  Tc 0  Tw (Function function\) {) Tj-59.4 -12  TD (if\(first != last\) {) Tj10.8 -12  TD (for\(Iterator next = first;) Tj21.6 -12  TD (++next != last;\) {) Tj-10.8 -12  TD (function\(*first\), first = next;) Tj-10.8 -12  TD (}) Tj0 -12  TD (function\(*first\);) Tj-10.8 -12  TD (}) Tj-10.8 -12  TD (}) Tj30.6 -17.4  TD 0 0 0 rg /F7 10.2  Tf-0.1027  Tc -0.0473  Tw (Specimen 6 \226 The ) Tj77.4 0  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc 0  Tw (slither\(\)) Tj51.6 0  TD 0 0 0 rg /F7 10.2  Tf-0.1214  Tc (algorithm.) Tj-174 -18.6  TD /F4 10.2  Tf-0.0241  Tc 0.4741  Tw (Like ) Tj22.2 0  TD /F2 9  Tf0.06  Tc 0  Tw (for_each\(\)) Tj54.6 0  TD /F4 10.2  Tf-0.15  Tc (, ) Tj6 0  TD /F2 9  Tf0.0667  Tc (slither\(\)) Tj52.8 0  TD /F4 10.2  Tf-0.0726  Tc 1.3626  Tw (applies a given function to the) Tj-135.6 -12  TD -0.1021  Tc 0.3271  Tw (result of dereferencing every iterator in the range [) Tj204 0  TD /F2 9  Tf0  Tc 0  Tw (first) Tj27 0  TD /F4 10.2  Tf-0.15  Tc (, ) Tj5.4 0  TD /F2 9  Tf0  Tc (last) Tj21.6 0  TD /F4 10.2  Tf-0.2733  Tc (\).) Tj-258 -12  TD -0.1166  Tc 0.5666  Tw (However, ) Tj42.6 0  TD /F2 9  Tf0  Tc 0  Tw (slither\(\)) Tj52.2 0  TD /F4 10.2  Tf-0.0435  Tc 1.0935  Tw (uses two iterators. At the start of the for) Tj-94.8 -12  TD -0.0169  Tc 0.767  Tw (loop body ) Tj45.6 0  TD /F2 9  Tf0  Tc 0  Tw (first) Tj31.2 0  TD /F4 10.2  Tf-0.0716  Tc 1.3466  Tw (points to the function about to be called and) Tj-76.8 -12  TD /F2 9  Tf0  Tc 0  Tw (next) Tj24.6 0  TD /F4 10.2  Tf-0.0685  Tc 0.7367  Tw (points to the next one. At that point the function is called,) Tj-24.6 -12  TD /F2 9  Tf0.24  Tc 0  Tw (first) Tj31.2 0  TD /F4 10.2  Tf0.0509  Tc 0.8491  Tw (is moved forward to ) Tj90 0  TD /F2 9  Tf0  Tc 0  Tw (next) Tj25.8 0  TD /F10 10.2  Tf0.0226  Tc 1.0274  Tw (by assignment) Tj59.4 0  TD /F4 10.2  Tf0.0303  Tc 0.7197  Tw (, and ) Tj24.6 0  TD /F2 9  Tf0.3  Tc 0  Tw (next) Tj25.8 0  TD /F4 10.2  Tf0.1983  Tc (is) Tj-256.8 -12  TD 0.1561  Tc 1.1605  Tw (incremented. The loop then proceeds to the next iteration or) Tj0 -12  TD -0.0729  Tc -0.0771  Tw (terminates. The overall effect is the same as ) Tj177.6 0  TD /F2 9  Tf0  Tc 0  Tw (for_each\(\)) Tj57 0  TD /F4 10.2  Tf-0.0322  Tc -0.1178  Tw (and yet) Tj-234.6 -12  TD -0.0452  Tc -0.1048  Tw (the algorithm is more complex.) Tj11.4 -12  TD 0.2788  Tc 0.6212  Tw (Patternologists puzzled over this for a long time. Natural) Tj-11.4 -12  TD -0.156  Tc -0.2607  Tw (selection is a powerful mechanism for reducing the costs associated) Tj0 -12  TD -0.0954  Tc 0.4454  Tw (with unnecessary complexity. It should prefer ) Tj188.4 0  TD /F2 9  Tf0.06  Tc 0  Tw (for_each\(\)) Tj57.6 0  TD /F4 10.2  Tf-0.0313  Tc (over) Tj-246 -12  TD /F2 9  Tf0  Tc (slither\(\)) Tj48.6 0  TD /F4 10.2  Tf-0.1575  Tc -0.2591  Tw (. And yet here was an example of evolution proceeding) Tj-48.6 -12  TD 0.1402  Tc 0.3098  Tw (in the wrong direction. Several explanations were proposed to) Tj0 -12  TD -0.0595  Tc 0.3895  Tw (account for this anomaly. Perhaps ) Tj141.6 0  TD /F2 9  Tf0.0667  Tc 0  Tw (slither\(\)) Tj52.2 0  TD /F4 10.2  Tf0  Tc 0.45  Tw (is just a transient) Tj-193.8 -12  TD 0.1475  Tc 0.3025  Tw (mutation that hasn\222t yet been weeded out by competition with) Tj0 -12  TD /F2 9  Tf0.42  Tc 0  Tw (for_each\(\)) Tj57.6 0  TD /F4 10.2  Tf0.2558  Tc 1.7692  Tw (. Or, perhaps there is some hidden benefit to) Tj-57.6 -12  TD /F2 9  Tf0  Tc 0  Tw (slither\(\)) Tj51 0  TD /F4 10.2  Tf-0.0673  Tc 0.0173  Tw (that more than compensates for the cost.) Tj-39.6 -12  TD 0.0652  Tc 0.3848  Tw (I have made a crude attempt to measure the relative costs of) Tj-11.4 -12  TD /F2 9  Tf-0.18  Tc 0  Tw (for_each\(\)) Tj54.6 0  TD /F4 10.2  Tf-0.3096  Tc 0.1596  Tw (and ) Tj16.2 0  TD /F2 9  Tf-0.2667  Tc 0  Tw (slither\(\)) Tj46.8 0  TD /F4 10.2  Tf-0.3217  Tc 0.5146  Tw (. As is often the case when measuring) Tj-117.6 -12  TD 0.0904  Tc 0.5996  Tw (speed of execution I found the result surprising. There was no) Tj0 -12  TD -0.2965  Tc -0.1808  Tw (difference in speed between the two algorithms. \(I used GCC 3.2.3 on) TjT* -0.3309  Tc 0.0809  Tw (Linux Red Hat 9 with full optimisation.\) In fact, my attempt to extend) TjT* -0.2903  Tc 0.1403  Tw (the running time by increasing the number of function pointers in the) TjT* -0.3796  Tc -0.3704  Tw (container just consumed all the available RAM and triggered swapping,) TjT* -0.0327  Tc 0.3113  Tw (which made further measurements meaningless. However, I saw) TjT* -0.3045  Tc -0.2655  Tw (approximately 200 million loop iterations per second on my 700 MHz) TjT* -0.2737  Tc -0.143  Tw (PC before swapping kicked in. I tentatively concluded, therefore, that) TjT* -0.2686  Tc -0.1814  Tw (there is no significant cost associated with the ) Tj175.2 0  TD /F2 9  Tf-0.2  Tc 0  Tw (slither\(\)) Tj48.6 0  TD /F4 10.2  Tf-0.3218  Tc (algorithm.) Tj-212.4 -12  TD -0.0942  Tc -0.0558  Tw (The negligible cost of ) Tj88.2 0  TD /F2 9  Tf0  Tc 0  Tw (slither\(\)) Tj51 0  TD /F4 10.2  Tf-0.069  Tc -0.381  Tw (may explain how it manages) Tj-150.6 -12  TD -0.0484  Tc -0.1016  Tw (to compete with ) Tj67.2 0  TD /F2 9  Tf0  Tc 0  Tw (for_each\(\)) Tj54 0  TD /F4 10.2  Tf-0.0852  Tc 0.1924  Tw (, but it doesn\222t explain why it came) Tj-121.2 -12  TD -0.1666  Tc -0.2501  Tw (into existence. For that we need to look at ) Tj163.2 0  TD /F10 10.2  Tf-0.0942  Tc -0.6558  Tw (E. Adaptabilis) Tj58.2 0  TD /F4 10.2  Tf-0.1268  Tc -0.3232  Tw (in a hostile) Tj-221.4 -12  TD -0.0905  Tc 0.0605  Tw (environment. Consider the following sample program:) Tj14.4 -17.4  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc 0  Tw (#include "Event.hpp") Tj0 -18.6  TD 0 0 0 rg /F2 9  Tf-0.0343  Tc 0.0343  Tw (// Callback that detaches itself from the) Tj0 -12  TD 0  Tc 0  Tw (// event when called.) TjT* 0.2 0.2 0.2 rg /F11 9  Tf-0.0146  Tc 0.0146  Tw (struct Disconnect : Callback::Function<int> {) Tj10.8 -12  TD 0  Tc 0  Tw (Disconnect\(Event<int>& e\)) Tj10.8 -12  TD (: event\(e\),) Tj10.8 -12  TD -0.0353  Tc 0.0353  Tw (position\(e.insert\(e.end\(\),this\)\) {}) Tj-21.6 -12  TD 0  Tc 0  Tw (void operator\(\)\(int i\) {) Tj10.8 -12  TD (event.erase\(position\);) Tj-10.8 -12  TD (}) Tj0 -12  TD (Event<int>&          event;) TjT* (Event<int>::iterator position;) Tj-10.8 -12  TD (};) TjETendstreamendobj48 0 obj14431endobj46 0 obj<</Type /Page/Parent 5 0 R/Resources <</Font 49 0 R/ProcSet 2 0 R>>/Contents 47 0 R>>endobj49 0 obj<</F0 6 0 R/F2 10 0 R/F4 16 0 R/F7 25 0 R/F10 35 0 R/F11 41 0 R/F12 43 0 R>>endobj51 0 obj<</Length 52 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (8) Tj0 768.6  TD /F0 12  Tf-0.0449  Tc 0.2549  Tw (Overload issue 64 december 2004) Tj14.4 -40.8  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc 0  Tw (int main\(\) {) Tj10.8 -12  TD (Event<int> event;) Tj0 -12  TD (Disconnect disconnect\(event\);) TjT* (event.notify\(7\);   ) Tj102.6 0  TD 0 0 0 rg /F2 9  Tf(// !) Tj-102.6 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf(event.notify\(7\);) Tj0 -12  TD (return 0;) Tj-10.8 -12  TD (}) Tj5.4 -17.4  TD 0 0 0 rg /F7 10.2  Tf-0.0532  Tc 0.1032  Tw (Specimen 7 \226 ) Tj58.8 0  TD /F12 10.2  Tf-0.0898  Tc -0.0602  Tw (E. Adaptabilis) Tj60 0  TD /F7 10.2  Tf-0.0464  Tc -0.1036  Tw (in a hostile environment.) Tj-138.6 -18.6  TD /F4 10.2  Tf-0.0178  Tc 1.3678  Tw (Here we have a callback that connects itself to an event in its) Tj0 -12  TD 0.4223  Tc 1.0777  Tw (constructor and disconnects itself when it is called. Such) TjT* 0.5217  Tc 0.6483  Tw (callbacks are extremely poisonous to ) Tj177 0  TD /F10 10.2  Tf0.4079  Tc 0.6421  Tw (E. Vulgaris) Tj52.2 0  TD /F4 10.2  Tf0.6036  Tc 0.4464  Tw (, but ) Tj25.2 0  TD /F10 10.2  Tf0.4089  Tc 0  Tw (E.) Tj-254.4 -12  TD 0.7961  Tc (Adaptabilis) Tj63.6 0  TD /F4 10.2  Tf0.7075  Tc 4.4425  Tw (is immune. To see why, consider the) Tj-63.6 -12  TD /F2 9  Tf0.12  Tc 0  Tw (Event::notify\(\)) Tj86.4 0  TD /F4 10.2  Tf0.0242  Tc 0.4258  Tw (call. ) Tj21 0  TD /F10 10.2  Tf-0.0721  Tc 1.1221  Tw (E. Vulgaris) Tj49.8 0  TD /F4 10.2  Tf0  Tc 1.05  Tw (iterates through its list of) Tj-157.2 -12  TD 0.5927  Tc 0.6573  Tw (callback pointers using ) Tj112.8 0  TD /F2 9  Tf0.78  Tc 0  Tw (for_each\(\)) Tj64.8 0  TD /F4 10.2  Tf0.5363  Tc 1.1137  Tw (which \(invariably\)) Tj-177.6 -12  TD 0.5745  Tc 0.5505  Tw (increments a single iterator. When the iterator reaches a) Tj0 -12  TD /F2 9  Tf0.54  Tc 0  Tw (Disconnect) Tj63.6 0  TD /F4 10.2  Tf0.4017  Tc 0.0483  Tw (callback ) Tj40.8 0  TD /F2 9  Tf0.48  Tc 0  Tw (for_each\(\)) Tj63.6 0  TD /F4 10.2  Tf0.4246  Tc 0.6254  Tw (invokes the callback,) Tj-168 -12  TD 0.0458  Tc 1.2042  Tw (which erases itself from the list, invalidating the iterator. The) Tj0 -12  TD /F2 9  Tf0.42  Tc 0  Tw (for_each\(\)) Tj63 0  TD /F4 10.2  Tf0.3405  Tc 1.0095  Tw (algorithm then tries to increment the invalid) Tj-63 -12  TD 0.109  Tc 1.016  Tw (iterator and continue the sequence of function calls, typically) Tj0 -12  TD 0.4946  Tc 0.3554  Tw (with disastrous results. ) Tj109.8 0  TD /F10 10.2  Tf0.4596  Tc 0.5904  Tw (E. Adaptabilis) Tj66 0  TD /F4 10.2  Tf0.4095  Tc 0.8405  Tw (, however, uses the) Tj-175.8 -12  TD /F2 9  Tf0.6667  Tc 0  Tw (slither\(\)) Tj58.8 0  TD /F4 10.2  Tf0.5328  Tc 0.5172  Tw (algorithm. When it gets to the ) Tj145.2 0  TD /F2 9  Tf0.66  Tc 0  Tw (Disconnect) Tj-204 -12  TD /F4 10.2  Tf0.073  Tc 1.4437  Tw (callback it invokes the callback, which erases itself from the) Tj0 -12  TD 0.037  Tc 0.413  Tw (list, invalidating the iterator as before. But ) Tj181.2 0  TD /F2 9  Tf0.0667  Tc 0  Tw (slither\(\)) Tj52.8 0  TD /F4 10.2  Tf-0.0898  Tc (doesn\222t) Tj-234 -12  TD 0.01  Tc 0.98  Tw (increment the invalid iterator, it simply assigns a new value to) Tj0 -12  TD 0.5106  Tc 0.8994  Tw (it. This is, of course, a valid operation, so the algorithm) TjT* 0.0639  Tc 0.5861  Tw (completes normally and ) Tj105.6 0  TD /F10 10.2  Tf0.0443  Tc 1.0057  Tw (E. Adaptabilis) Tj63.6 0  TD /F4 10.2  Tf0.062  Tc 1.188  Tw (lives to notify another) Tj-169.2 -12  TD 0.0928  Tc 0  Tw (event.) Tj11.4 -12  TD -0.2188  Tc -0.2312  Tw (Together these features provide an answer to the question of what) Tj-11.4 -12  TD 0.1668  Tc 0.2832  Tw (constitutes a valid ) Tj80.4 0  TD /F2 9  Tf0.2  Tc 0  Tw (Container) Tj53.4 0  TD /F4 10.2  Tf0.1288  Tc 0.3212  Tw (argument to the ) Tj69.6 0  TD /F10 10.2  Tf0.1366  Tc 0.3134  Tw (E. Adaptabilis) Tj-203.4 -12  TD /F4 10.2  Tf-0.0532  Tc -0.0968  Tw (template, ) Tj40.2 0  TD /F2 9  Tf0.03  Tc 0  Tw (Event<Arg,Container>) Tj108.6 0  TD /F4 10.2  Tf-0.1027  Tc 0.5527  Tw (. The ) Tj24 0  TD /F2 9  Tf0  Tc 0  Tw (Container) Tj51.6 0  TD /F4 10.2  Tf-0.0567  Tc 0.5067  Tw (must be a) Tj-224.4 -12  TD 0.3151  Tc 0.1349  Tw (class with ) Tj47.4 0  TD /F2 9  Tf0.4286  Tc 0  Tw (begin\(\)) Tj43.8 0  TD /F4 10.2  Tf0.2904  Tc 0.1596  Tw (and ) Tj18.6 0  TD /F2 9  Tf0.48  Tc 0  Tw (end\(\)) Tj32.4 0  TD /F4 10.2  Tf0.2424  Tc 0.8076  Tw (member functions returning) Tj-142.2 -12  TD /F2 9  Tf0  Tc 0  Tw (Forward) Tj40.2 0  TD /F4 10.2  Tf-0.1054  Tc -0.216  Tw (iterators. It must contain a nested typedef, ) Tj166.8 0  TD /F2 9  Tf0  Tc 0  Tw (value_type) Tj54 0  TD /F4 10.2  Tf-0.15  Tc (,) Tj-261 -12  TD -0.1086  Tc 0.4495  Tw (that defines the type of the container elements, or it must provide) Tj0 -12  TD -0.0909  Tc -0.0591  Tw (a specialisation of the ) Tj88.8 0  TD /F2 9  Tf0  Tc 0  Tw (element<>) Tj51 0  TD /F4 10.2  Tf-0.0807  Tc -0.2693  Tw (meta-function for that purpose.) Tj-139.8 -12  TD 0.053  Tc 0.3303  Tw (The element type must define a dereference operation. And the) Tj0 -12  TD -0.0916  Tc 0.4216  Tw (result of dereferencing an element must be a function or function) TjT* -0.0762  Tc 0.0462  Tw (object that can be called with an argument of type ) Tj202.2 0  TD /F2 9  Tf0  Tc 0  Tw (Arg) Tj16.2 0  TD /F4 10.2  Tf-0.15  Tc (.) Tj-207 -12  TD -0.1216  Tc 0.4966  Tw (These are very general requirements. They can be summarised) Tj-11.4 -12  TD -0.0305  Tc -0.1195  Tw (informally as:) Tj0 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf0.0678  Tc 0.3822  Tw (An ) Tj15 0  TD /F10 10.2  Tf-0.1404  Tc -0.0096  Tw (E. Adaptabilis) Tj59.4 0  TD /F4 10.2  Tf-0.0532  Tc 0.1032  Tw (event is a ) Tj40.2 0  TD /F10 10.2  Tf-0.1441  Tc 0  Tw (container) Tj40.8 0  TD /F4 10.2  Tf-0.0483  Tc 0.4983  Tw (of ) Tj10.8 0  TD /F10 10.2  Tf-0.1294  Tc 0  Tw (pointers) Tj35.4 0  TD /F4 10.2  Tf-0.0678  Tc -0.0822  Tw (to ) Tj10.2 0  TD /F10 10.2  Tf-0.0226  Tc 0  Tw (functions) Tj36.6 0  TD /F4 10.2  Tf-0.15  Tc (.) Tj-259.8 -10.2  TD /F5 6  Tf0.054  Tc (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0629  Tc -0.0871  Tw (In this context, a ) Tj69 0  TD /F10 10.2  Tf-0.0954  Tc 0  Tw (pointer) Tj31.8 0  TD /F4 10.2  Tf-0.1123  Tc 0.0623  Tw (is any type that can be dereferenced;) Tj-112.2 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf0.0267  Tc 0.1233  Tw (And a ) Tj27 0  TD /F10 10.2  Tf0.0206  Tc 0  Tw (function) Tj35.4 0  TD /F4 10.2  Tf-0.1166  Tc 0.3666  Tw (is any type that can be called with an argument) Tj-62.4 -12  TD -0.0629  Tc -0.0871  Tw (of the right type.) Tj-11.4 -18  TD /F0 12  Tf-0.372  Tc -0.268  Tw (The Correctness vs. Efficiency) Tj20.4 -12  TD -0.5006  Tc 0  Tw (Problem) Tj-20.4 -18  TD /F4 10.2  Tf-0.095  Tc 0.745  Tw (Programmers working with ) Tj115.8 0  TD /F10 10.2  Tf-0.0721  Tc 1.1221  Tw (E. Vulgaris) Tj49.8 0  TD /F4 10.2  Tf-0.1344  Tc 1.3844  Tw (must remember to store) Tj-165.6 -12  TD -0.086  Tc 0.5905  Tw (the iterator returned when a callback is attached and pass it back) Tj0 -12  TD -0.0349  Tc 1.2049  Tw (to the event when the callback is disconnected. This is tedious) TjT* 0.0767  Tc 1.0278  Tw (and it is tempting to leave the callback attached \223for ever\224 to) TjT* -0.1021  Tc 0.2521  Tw (avoid having to manage the iterator. This usually leads to disaster) TjT* -0.0762  Tc -0.0738  Tw (and is always frustrating for the hapless programmer.) Tj11.4 -12  TD 0.1132  Tc 0.6368  Tw (The need to store the iterator can be removed by searching) Tj-11.4 -12  TD 0.101  Tc -0.176  Tw (the list of pointers before disconnecting the callback. However,) Tj0 -12  TD 0.2322  Tc 0.2178  Tw (in ) Tj11.4 0  TD /F10 10.2  Tf0.0479  Tc 1.0021  Tw (E. Vulgaris) Tj51 0  TD /F4 10.2  Tf0.095  Tc 0.715  Tw (this technique carries a significant performance) Tj-62.4 -12  TD 0.1543  Tc -0.1043  Tw (penalty because the ) Tj84.6 0  TD /F2 9  Tf0.2727  Tc 0  Tw (std::list<>) Tj64.2 0  TD /F4 10.2  Tf0.1004  Tc -0.1004  Tw (it uses only supports search) Tj-148.8 -12  TD 0.4387  Tc 1.8113  Tw (algorithms with linear complexity. With ) Tj194.4 0  TD /F10 10.2  Tf0.4596  Tc 2.3904  Tw (E. Adaptabilis) Tj66.6 0  TD /F4 10.2  Tf-0.15  Tc 0  Tw (,) Tj-261 -12  TD 0.1906  Tc 0.4594  Tw (however, there is an alternative. Specimen 8 provides a good) Tj0 -12  TD 0.1616  Tc 0  Tw (example.) Tj289.2 708  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc (#include <iostream>) Tj0 -12  TD (#include <set>) TjT* (#include "Event.hpp") Tj0 -17.4  TD (using namespace std;) Tj0 -18.6  TD (void log\(int i\) {) Tj10.8 -12  TD (clog << "void log\(" << i << "\)" << endl;) Tj-10.8 -12  TD (}) Tj0 -24  TD (int main\(\) {) Tj10.8 -12  TD (typedef std::set<void \(*\)\(int\)> container;) Tj0 -17.4  TD (Event<int,container> event;) Tj0 -18.6  TD (event.insert\(log\); ) Tj102.6 0  TD 0 0 0 rg /F2 9  Tf(// no need to store an) Tj0 -12  TD (// iterator) Tj-102.6 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf(event.notify\(8\);) Tj0 -12  TD (event.erase\(log\); ) Tj97.2 0  TD 0 0 0 rg /F2 9  Tf(// efficient search and) Tj0 -12  TD (// erase) Tj-97.2 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf(return 0;) Tj-10.8 -12  TD (}) Tj15 -17.4  TD 0 0 0 rg /F7 10.2  Tf-0.1132  Tc -0.0368  Tw (Specimen 8 \226 ) Tj58.2 0  TD /F12 10.2  Tf-0.0898  Tc -0.6602  Tw (E. Adaptabilis) Tj60.6 0  TD /F7 10.2  Tf-0.1243  Tc -0.0257  Tw (using a ) Tj33 0  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc 0  Tw (std::set<>) Tj-180.6 -18.6  TD 0 0 0 rg /F4 10.2  Tf0.2154  Tc 0.9846  Tw (This variant uses a ) Tj87.6 0  TD /F2 9  Tf0.3  Tc 0  Tw (std::set<>) Tj61.2 0  TD /F4 10.2  Tf0.2394  Tc 1.1106  Tw (of function pointers as its) Tj-148.8 -12  TD -0.1054  Tc 0.9304  Tw (container. The insertion, removal and iteration operations are all) Tj0 -12  TD 0.1813  Tc 0.8687  Tw (\223fairly efficient\224. By that I mean that, for most applications,) TjT* -0.0728  Tc 0.1028  Tw (efficiency is not an issue. And for very demanding applications it) TjT* 0.0372  Tc 0.9378  Tw (is always possible to use a variant of ) Tj162.6 0  TD /F10 10.2  Tf0.0443  Tc 1.0057  Tw (E. Adaptabilis) Tj63.6 0  TD /F4 10.2  Tf0.1107  Tc 0.9393  Tw (based on) Tj-226.2 -12  TD 0.1611  Tc 0.8889  Tw (specialised containers. It\222s even possible to use a specialised) Tj0 -12  TD 0.2141  Tc 0.9693  Tw (iteration algorithm thanks to the public access of the nested) TjT* /F2 9  Tf-0.04  Tc 0  Tw (notify_function) Tj83.4 0  TD /F4 10.2  Tf-0.1298  Tc (class.) Tj-83.4 -18  TD /F0 12  Tf0.0258  Tc -0.2658  Tw (Summary and Conclusion) Tj0 -18  TD /F4 10.2  Tf-0.1184  Tc 1.1684  Tw (This paper has described a recently discovered species of Event) Tj0 -12  TD 0.2034  Tc 0  Tw (\() Tj3 0  TD /F10 10.2  Tf-0.0409  Tc 0.4909  Tw (Eventus Adaptabilis) Tj81 0  TD /F4 10.2  Tf-0.0826  Tc 1.1326  Tw (\) with a remarkably wide range of habitats.) Tj-84 -12  TD /F10 10.2  Tf0.0443  Tc 1.0057  Tw (E. Adaptabilis) Tj63 0  TD /F4 10.2  Tf0.0543  Tc 0.9957  Tw (is closely related to the more common ) Tj168 0  TD /F10 10.2  Tf-0.0705  Tc 0  Tw (Eventus) Tj-231 -12  TD -0.2674  Tc (Vulgaris) Tj36 0  TD /F4 10.2  Tf-0.096  Tc 0.1174  Tw (but is more adaptable in the following ways:) Tj-36 -12  TD -0.225  Tc 0  Tw (1.) Tj10.8 0  TD 0.0702  Tc 0.3798  Tw (It accepts callbacks taking parameters convertible to its own) Tj0 -12  TD -0.102  Tc -0.048  Tw (argument type;) Tj-10.8 -12  TD -0.225  Tc 0  Tw (2.) Tj10.8 0  TD -0.1089  Tc -0.4411  Tw (It accepts callbacks of ordinary function types or function object) Tj0 -12  TD 0.0387  Tc 0  Tw (types;) Tj-10.8 -12  TD -0.225  Tc (3.) Tj10.8 0  TD -0.0655  Tc -0.0178  Tw (It can store built-in pointers or smart pointers to callbacks;) Tj-10.8 -12  TD -0.225  Tc 0  Tw (4.) Tj10.8 0  TD 0.2628  Tc 0.7872  Tw (It can use any of the standard containers and many other) Tj0 -12  TD -0.0748  Tc 0.5248  Tw (container types;) Tj-10.8 -12  TD -0.225  Tc 0  Tw (5.) Tj10.8 0  TD -0.0752  Tc 0.5252  Tw (It is immune to callbacks that disconnect themselves from the) Tj0 -12  TD -0.1548  Tc 0  Tw (event;) Tj-10.8 -12  TD -0.225  Tc (6.) Tj10.8 0  TD -0.0851  Tc 0.0209  Tw (It allows user-defined iteration algorithms to be used.) Tj-10.8 -12  TD 0.0801  Tc 1.2699  Tw (It achieves all this without sacrificing efficiency and without) Tj0 -12  TD 0.3356  Tc 0.8644  Tw (forcing the programmer to store iterators. A rare specimen) TjT* -0.1347  Tc 0  Tw (indeed.) Tj229.8 -12  TD /F8 10.2  Tf0.072  Tc -0.516  Tw (Phil Bass) Tj-117.6 -12  TD /F2 9  Tf0  Tc 0  Tw (phil@stoneymanor.demon.co.uk) Tj-112.2 -18  TD /F0 12  Tf-0.018  Tc (References) Tj0 -18  TD /F4 10.2  Tf0.2598  Tc 1.1902  Tw (1. Gamma, Helm, Johnson and Vlissides, ) Tj189.6 0  TD /F10 10.2  Tf0.239  Tc 2.011  Tw (Design Patterns,) Tj-178.8 -12  TD 0.2233  Tc 0.2267  Tw (Elements of Reusable Object-Oriented Software) Tj207.6 0  TD /F4 10.2  Tf0.2317  Tc -0.3817  Tw (, Addison-) Tj-207.6 -12  TD -0.1486  Tc -0.0014  Tw (Wesley, ISBN 0-201-63361-2.) Tj-10.8 -12  TD -0.1158  Tc -0.2523  Tw (2. Phil Bass, \223Implementing the Observer Pattern in C++ \226 Part 1\224,) Tj10.8 -12  TD /F10 10.2  Tf-0.1325  Tc 0.5825  Tw (Overload 52) Tj50.4 0  TD /F4 10.2  Tf-0.1437  Tc 0.2937  Tw (, December 2002.) Tj-61.2 -12  TD -0.1158  Tc -0.2523  Tw (3. Phil Bass, \223Implementing the Observer Pattern in C++ \226 Part 2\224,) Tj10.8 -12  TD /F10 10.2  Tf-0.1325  Tc 0.5825  Tw (Overload 53) Tj50.4 0  TD /F4 10.2  Tf-0.123  Tc 0.273  Tw (, February 2003.) TjETendstreamendobj52 0 obj13727endobj50 0 obj<</Type /Page/Parent 5 0 R/Resources <</Font 53 0 R/ProcSet 2 0 R>>/Contents 51 0 R>>endobj53 0 obj<</F0 6 0 R/F2 10 0 R/F4 16 0 R/F5 21 0 R/F7 25 0 R/F8 31 0 R/F10 35 0 R/F11 41 0 R/F12 43 0 R>>endobj56 0 obj<</Length 57 0 R>>stream
BT558.6 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (9) Tj-246 768.6  TD /F0 12  Tf-0  Tc -0.0896  Tw (Overload issue 64 december 2004) Tj-269.4 -38.4  TD /F1 18  Tf-0.0117  Tc 0.0077  Tw (An Experience Report on) Tj15 -20.4  TD -0.0117  Tc 0.4077  Tw (Implementing a Custom) Tj14.4 -19.8  TD 0.0205  Tc -0.2245  Tw (Agile Methodology on a) Tj15.6 -19.8  TD 0.0208  Tc -0.2248  Tw (C++/Python Project) Tj-45 -12  TD /F0 10.2  Tf-0.129  Tc 0.105  Tw (by Giovanni Asproni, Alexander Fedotov) Tj19.2 -12  TD -0.1126  Tc -0.0614  Tw (and Rodrigo Fernandez) Tj-33 -14.4  TD /F4 10.2  Tf-0.0851  Tc 1.2018  Tw (In this article we\222ll describe our experience in implementing an) Tj0 -12  TD -0.1042  Tc 0.0742  Tw (agile methodology in a C++/Python project.) Tj11.4 -12  TD 0.2289  Tc 1.3461  Tw (The promise of agile methodologies is to make software) Tj-11.4 -12  TD -0.1151  Tc -0.4549  Tw (development faster and, at the same time, have higher code quality,) Tj0 -12  TD -0.1794  Tc -0.2706  Tw (higher customer satisfaction, and happier programmers. This is very) TjT* -0.0706  Tc 0.5206  Tw (appealing! However, their implementation is not easy, especially) TjT* -0.1016  Tc 0.3516  Tw (when it is the first one in the organisation, and the main language) TjT* -0.0159  Tc -0.1341  Tw (used is C++.) Tj11.4 -12  TD -0.1102  Tc 0.5602  Tw (In fact, introducing a new methodology \226 and more generally,) Tj-11.4 -12  TD 0.2638  Tc 0.8462  Tw (any kind of change \226 in an organisation may create several) Tj0 -12  TD -0.1705  Tc -0.4295  Tw (technical, human, and political problems. We\222ll describe the choices) TjT* 0.2825  Tc 0.2875  Tw (we made in order to minimise their occurrence, and how we) TjT* -0.1096  Tc 0.0596  Tw (managed to solve the ones we faced.) Tj11.4 -12  TD -0.1561  Tc -0.3272  Tw (We\222ll start by briefly introducing the project. Then, we\222ll explain) Tj-11.4 -12  TD -0.1391  Tc -0.3709  Tw (what agile software development means and why we decided to use) Tj0 -12  TD -0.1369  Tc 0.2869  Tw (an agile approach.) Tj11.4 -12  TD -0.1185  Tc -0.3649  Tw (We\222ll describe the methodology with the rationale behind it, and) Tj-11.4 -12  TD -0.0778  Tc 0.5278  Tw (we\222ll show the reasons why we decided to not pick an out of the) Tj0 -12  TD -0.0884  Tc -0.0616  Tw (box one like Extreme Programming [3].) Tj11.4 -12  TD -0.1083  Tc -0.1017  Tw (Finally, we\222ll give an assessment of the results of our approach,) Tj-11.4 -12  TD -0.079  Tc -0.071  Tw (including what worked well and what we would do differently the) Tj0 -12  TD -0.1066  Tc 0.1066  Tw (next time in similar circumstances.) Tj0 -18  TD /F0 12  Tf0.0112  Tc -0.2512  Tw (Project Overview) TjT* /F4 10.2  Tf-0.0576  Tc 0.2349  Tw (The project consisted of the development of a family of C++ and) Tj0 -12  TD -0.0421  Tc 1.1671  Tw (Python programs used to produce, store, manage and distribute) TjT* 0.2583  Tc 0.7917  Tw (biological data to and from an Oracle database. These were) TjT* -0.0884  Tc -0.0616  Tw (developed for internal use.) Tj11.4 -12  TD -0.1076  Tc 0.503  Tw (The purpose was to substitute a family of old C programs that) Tj-11.4 -12  TD -0.0939  Tc 0.4348  Tw (used text files as a storage medium. During the years the amount) Tj0 -12  TD -0.0944  Tc -0.1479  Tw (of data had increased so much that the usage of text files became a) TjT* 0.0212  Tc 0.4288  Tw (serious bottleneck in the data production process \226 the usage of) TjT* -0.1382  Tc -0.3936  Tw (files, and the way the programs were written, forced a serial process) TjT* -0.09  Tc -0.06  Tw (that was becoming too time consuming.) Tj11.4 -12  TD -0.0717  Tc 0.455  Tw (The usage of a relational database seemed the perfect solution) Tj-11.4 -12  TD -0.1013  Tc 0.3332  Tw (to this: it could allow the execution of several production tasks at) Tj0 -12  TD -0.1037  Tc -0.6463  Tw (the same time, having the certainty that the data was kept consistent) TjT* 0.2411  Tc 2.9089  Tw (thanks to the isolation and synchronisation given by the) TjT* -0.0923  Tc -0.0577  Tw (transactional model. Implementing transactions in the C programs) TjT* 0.1774  Tc 0.2726  Tw (in order to keep the data in text files, would have been a very) TjT* -0.1451  Tc 0.338  Tw (difficult task, and an obvious waste of time.) Tj11.4 -12  TD -0.089  Tc 0.539  Tw (Six years before the three of us started to work on the project,) Tj-11.4 -12  TD 0.2732  Tc 1.5268  Tw (some people already understood the limitations of those C) Tj0 -12  TD -0.0941  Tc -0.2196  Tw (programs, and started to work on their substitutes: a family of C++) TjT* -0.0627  Tc -0.2873  Tw (programs that used an Oracle database \(Python was something the) TjT* -0.0621  Tc -0.4152  Tw (three of us decided to introduce\). During those years, the team size) TjT* -0.1192  Tc -0.4126  Tw (varied from a minimum of one to a maximum of five programmers.) TjT* -0.1152  Tc -0.1271  Tw (As far as we know, not all of them worked full-time on the project.) Tj11.4 -12  TD -0.042  Tc -0.4899  Tw (When we were assigned to the project, we inherited a code base) Tj-11.4 -12  TD -0.0603  Tc -0.5512  Tw (of about fifty thousand lines of C++ code that had not been put into) Tj0 -12  TD 0.0201  Tc 0.3699  Tw (production yet. At that point, the project had become of critical) TjT* -0.0822  Tc -0.2314  Tw (importance to the business, and our task was to make it production) Tj274.8 708  TD 0.0807  Tc 0.3693  Tw (ready in about one year \226 this meant fixing the bugs as well as) Tj0 -12  TD -0.0844  Tc -0.0656  Tw (implementing several new requirements.) Tj11.4 -12  TD 0.2373  Tc 2.0127  Tw (When we started our work, the programming team was) Tj-11.4 -12  TD -0.0839  Tc -0.4161  Tw (composed entirely of the three of us. None of us had been involved) Tj0 -12  TD -0.0824  Tc 0.1824  Tw (in the project before \226 all members of the original team either left) TjT* -0.1162  Tc 0.5662  Tw (the company, or were assigned to other tasks. From time to time,) TjT* -0.0797  Tc -0.1794  Tw (when some specialists joined the team, its size increased to four or) TjT* -0.055  Tc -0.02  Tw (five, to go back to three after a while.) Tj11.4 -12  TD -0.0738  Tc 0.0438  Tw (Here is where our story begins.) Tj-7.2 -18  TD /F0 12  Tf0.0988  Tc -0.3388  Tw (The Beginnings) Tj-4.2 -18  TD /F4 10.2  Tf0.1483  Tc 1.0217  Tw (Unfortunately, the code we inherited was not in a very good) Tj0 -12  TD -0.0756  Tc 0.5256  Tw (shape \226 it was very difficult to modify and extend, there was not) TjT* -0.0826  Tc 0.0826  Tw (a single test and it was bug-ridden.  Furthermore, there were a big) TjT* -0.0601  Tc -0.0899  Tw (number of \(very volatile\) new requirements to implement.) Tj11.4 -12  TD -0.0976  Tc 0.0976  Tw (However, at first, we tried to improve it \226 part of the code-base) Tj-11.4 -12  TD -0.093  Tc -0.6024  Tw (was shared with another project that was maintained by a team with) Tj0 -12  TD 0.2423  Tc 0.8077  Tw (members in our office and in a room nearby, so we had the) TjT* -0.0447  Tc 0.428  Tw (opportunity to ask questions and understand the code better. We) TjT* -0.0878  Tc -0.0622  Tw (added some tests, refactored some parts, and rewrote some others.) TjT* -0.0566  Tc 0.5066  Tw (But, after two months spent doing this, we realised that we were) TjT* -0.0729  Tc 0.1956  Tw (not making any real progress: the code was too tightly coupled in) TjT* -0.1041  Tc 0.0741  Tw (totally unpredictable ways. Fixing a bug caused others to show up) TjT* 0.2861  Tc 1.4839  Tw (from nowhere \226 and the number and the volatility of new) TjT* 0.0956  Tc 0.3544  Tw (requirements caused even more trouble. Furthermore, the code) TjT* -0.1188  Tc -0.3585  Tw (shared with the other project was in common for the wrong reasons) TjT* -0.0904  Tc 0.5404  Tw (\226 trying to exploit commonality where there was none \226 and that) TjT* -0.0857  Tc 0.0857  Tw (caused maintenance problems for the other team as well.) Tj11.4 -12  TD -0.2102  Tc 0.2852  Tw (We analysed the situation, and decided that rewriting everything) Tj-11.4 -12  TD -0.2968  Tc -0.3032  Tw (from scratch was a much better option: the basic logic of the programs) Tj0 -12  TD -0.1997  Tc 0.0497  Tw (was simple, and one year, if well used, was more than enough.) Tj11.4 -12  TD -0.1358  Tc 0.0715  Tw (We had a few problems to solve though) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1219  Tc -0.0281  Tw (Convince our boss) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1855  Tc -0.3245  Tw (Convince our customer. This was the person that had the ultimate) Tj0 -12  TD -0.0651  Tc 0.0951  Tw (responsibility on the requirements, and also one of the users of) TjT* -0.1082  Tc -0.0418  Tw (the programs) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.083  Tc 0.133  Tw (Organise our activities properly) Tj-11.4 -12  TD 0.6442  Tc 2.2058  Tw (To solve these problems, we decided to use an agile) Tj0 -12  TD 0.2019  Tc 0.8481  Tw (methodology. Before explaining why, we\222ll summarise what) TjT* -0.0933  Tc -0.0567  Tw (Agile Development is about.) Tj4.2 -18  TD /F0 12  Tf0.0425  Tc -0.2825  Tw (Agile Software Development) Tj12.6 -18  TD /F6 10.2  Tf-0.0066  Tc 0.4836  Tw (\223Agility is more attitude than process, more environment than) Tj-11.4 -12  TD -0.1088  Tc 0.0608  Tw (methodology.\224 Jim Highsmith [9]) Tj-5.4 -12  TD /F4 10.2  Tf-0.1924  Tc 0.5758  Tw (The term Agile Software Development is a container that includes) Tj0 -12  TD -0.1937  Tc 0.4037  Tw (all the methodologies that share the values and principles stated on) TjT* 0.4452  Tc 0.0048  Tw (the ) Tj17.4 0  TD /F10 10.2  Tf0.5191  Tc 0.5309  Tw (Agile Manifesto) Tj76.2 0  TD /F4 10.2  Tf0.4764  Tc 0.5736  Tw (\(see sidebar on next page\). The main) Tj-93.6 -12  TD -0.0925  Tc 1.0758  Tw (characteristic of all these methodologies is that they are ) Tj234 0  TD /F10 10.2  Tf-0.0843  Tc 0  Tw (people-) Tj-234 -12  TD 0.4964  Tc (centric) Tj38.4 0  TD /F4 10.2  Tf0.5998  Tc 2.8502  Tw (\226 i.e., they emphasise teamwork, face-to-face) Tj-38.4 -12  TD 0.2691  Tc 0.7809  Tw (communication, and short feedback-loops. Furthermore, the) Tj0 -12  TD 0.0175  Tc 1.1825  Tw (processes and tools used have to be suited to the needs of the) TjT* 0.0237  Tc 1.093  Tw (people involved: they may differ for specific methods, but the) TjT* 0.1105  Tc 0.9395  Tw (general recommendation in the agile community is to use the) TjT* -0.1765  Tc 0.1902  Tw (simplest ones that help in solving the problem at hand, and dismiss) TjT* -0.1851  Tc 0.0351  Tw (or substitute them as soon as they are not useful anymore.) Tj11.4 -12  TD 0.262  Tc 1.1308  Tw (That said, the following practices are becoming de-facto) Tj-11.4 -12  TD -0.0902  Tc -0.0052  Tw (standards in all agile methods \(and most of them are standard also) Tj0 -12  TD -0.0574  Tc -0.0926  Tw (on several non-agile methods as well\)) Tj0 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1  Tc -0.05  Tw (Extensive unit-testing) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0956  Tc 0.0956  Tw (Test-driven development \(i.e., write the tests before the code\)) TjETendstreamendobj57 0 obj11406endobj54 0 obj<</Type /Page/Parent 55 0 R/Resources <</Font 58 0 R/ProcSet 2 0 R>>/Contents 56 0 R>>endobj58 0 obj<</F0 6 0 R/F1 8 0 R/F4 16 0 R/F5 21 0 R/F6 23 0 R/F10 35 0 R>>endobj60 0 obj<</Length 61 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.0912  Tc 0  Tw (10) Tj0 768.6  TD /F0 12  Tf-0.0449  Tc 0.2549  Tw (Overload issue 64 december 2004) Tj0 -39  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.2523  Tc -0.431  Tw (Short iterations \(never longer than two months, usually 1-2 weeks\)) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0802  Tc -0.0698  Tw (Merciless refactoring) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0876  Tc -0.0624  Tw (Continuous integration) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1111  Tc -0.0389  Tw (Configuration management) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1016  Tc 0.2516  Tw (Automatic Acceptance testing) Tj-11.4 -12  TD 0.2641  Tc 1.1287  Tw (Agile methodologies are especially suited for projects with) Tj0 -12  TD 0.1226  Tc 1.0024  Tw (highly volatile requirements, tight schedules and up to 10-12) TjT* -0.0755  Tc 1.2969  Tw (developers. In fact, with more people involved, communication) TjT* -0.0714  Tc 1.2714  Tw (may become difficult. However some techniques to apply them) TjT* -0.0851  Tc 0.0208  Tw (to large projects are starting to appear [8].) Tj11.4 -12  TD -0.0995  Tc -0.2305  Tw (The most important goal that this kind of methodologies tries to) Tj-11.4 -12  TD 0.0062  Tc 0.3438  Tw (achieve is to deliver value to ) Tj122.4 0  TD /F10 10.2  Tf-0.1904  Tc 0  Tw (all) Tj13.8 0  TD /F4 10.2  Tf-0.0032  Tc 0.4532  Tw (the stakeholders of the project,) Tj-136.2 -12  TD -0.05  Tc 0.2  Tw (including the ) Tj55.2 0  TD /F10 10.2  Tf-0.0386  Tc 0  Tw (developers) Tj43.2 0  TD /F4 10.2  Tf-0.15  Tc (.) Tj-87 -12  TD -0.0971  Tc 0.4138  Tw (The value delivered to the customer may be obvious: software) Tj-11.4 -12  TD -0.0803  Tc 0.0939  Tw (that is fit for its intended purpose on time and within budget.) Tj11.4 -12  TD -0.1818  Tc 0.4518  Tw (The value delivered to the developers is much less obvious: job) Tj-11.4 -12  TD 0.0681  Tc 1.1819  Tw (satisfaction and self-motivation. In fact, the usage of an agile) Tj275.4 192  TD -0.2599  Tc -0.2501  Tw (methodology can be a big help in increasing and keeping developers\222) Tj0 -12  TD -0.188  Tc 0.413  Tw (motivation [2], and, more interestingly, self-motivation is the most) TjT* -0.3616  Tc -0.4741  Tw (important factor influencing developers\222 productivity [5]. An important) TjT* -0.3142  Tc 0.4642  Tw (consequence of these facts is that, delivering value to developers has) TjT* -0.2977  Tc -0.0323  Tw (a direct positive impact on the value delivered to the customer.) Tj10.8 -12  TD -0.108  Tc -0.042  Tw (To learn more about agile development, a good starting point is) Tj-10.8 -12  TD -0.0568  Tc -0.2432  Tw (the AgileAlliance web site [10].) Tj0 -18  TD /F0 12  Tf-0.0529  Tc 0.2129  Tw (Why an Agile Methodology?) TjT* /F4 10.2  Tf-0.1086  Tc 0.1432  Tw (At this point, many of the reasons why we decided to use an agile) Tj0 -12  TD -0.1295  Tc 0.1795  Tw (methodology should be clear.) Tj10.8 -12  TD -0.0362  Tc 0.4862  Tw (First of all, we wanted to organise our development activities) Tj-10.8 -12  TD -0.0947  Tc 0.2447  Tw (properly making the most out of the time and resources available.) Tj0 -12  TD -0.1307  Tc -0.5526  Tw (Our company didn\222t mandate the use of any particular methodology) TjT* -0.0886  Tc -0.0614  Tw (so we had total freedom of choice.) Tj10.8 -12  TD -0.1155  Tc 0.3855  Tw (We wanted a methodology that was able to cope with unstable) Tj-10.8 -12  TD 0.262  Tc 1.1214  Tw (requirements. In our case, they were changing very often \226) Tj0 -12  TD -0.0832  Tc -0.0668  Tw (sometimes from one day to the next \226 and we wanted to be able to) TjT* -0.0761  Tc 0.0118  Tw (respond to these changes as smoothly as possible.) Tj10.8 -12  TD -0.0959  Tc -0.4905  Tw (We wanted to have early results and short feedback loops, so we) Tj-10.8 -12  TD -0.0855  Tc -0.0645  Tw (could demonstrate our progress early and often.) Tj10.8 -12  TD 0.2367  Tc 2.28  Tw (We wanted to write high quality software with a clear) Tj-10.8 -12  TD -0.0771  Tc -0.0729  Tw (architecture, no code duplication, and fully tested.) Tj10.8 -12  TD -0.1039  Tc -0.3461  Tw (Each of us wanted to be involved in every development activity,) Tj-10.8 -12  TD -0.1069  Tc 0.1284  Tw (from discussing the requirements to coding the solution.) Tj10.8 -12  TD -0.1234  Tc 0.5234  Tw (We wanted to have fun, to learn new things, and to write code) Tj-10.8 -12  TD -0.0959  Tc -0.0541  Tw (we could be proud of.) Tj10.8 -12  TD -0.1211  Tc 0.1711  Tw (We didn\222t want to have too much overhead: we were on a tight) Tj-10.8 -12  TD 0.1297  Tc 0.3203  Tw (schedule, so we wanted to work only on what was essential to) Tj0 -12  TD -0.0886  Tc 0.2386  Tw (achieve the goal.) Tj10.8 -12  TD -0.1143  Tc 0.1643  Tw (The methodology had to be simple to implement but effective.) Tj0 -12  TD -0.0782  Tc 0.31  Tw (Finally, the methodology shouldn\222t get in to our way. It had to) Tj-10.8 -12  TD -0.0921  Tc 0.1821  Tw (be natural to follow its practices.) Tj10.8 -12  TD -0.1024  Tc -0.3476  Tw (Given these requirements, and the fact that one of us \(Giovanni\)) Tj-10.8 -12  TD 0.2025  Tc 0.2475  Tw (had already experience with Extreme Programming and agile) Tj0 -12  TD 0.2391  Tc 0.2109  Tw (development, it seemed natural to use an agile methodology.) TjT* 0.1841  Tc 0.2659  Tw (However, we didn\222t choose one out of the box \(e.g., Extreme) TjT* -0.0875  Tc -0.0625  Tw (Programming\), because, doing that, there could have been the risk) TjT* -0.0983  Tc -0.4517  Tw (of focusing more on the methodology itself than on the goals of the) TjT* -0.1016  Tc 0.4182  Tw (project. What we did instead, was to follow a \223methodology-per-) TjT* -0.1027  Tc -0.1018  Tw (project\224 approach [6]: we created our own one based on our needs) TjT* -0.0967  Tc 0.0134  Tw (and experience, in other terms we used our common sense.) Tj4.2 -18  TD /F0 12  Tf-0.024  Tc 0.384  Tw (The Methodology) Tj-4.2 -18  TD /F4 10.2  Tf0.0689  Tc 0.9811  Tw (Our methodology was based on some values: communication,) Tj0 -12  TD -0.2293  Tc 0.5293  Tw (courage, feedback, simplicity, humility, and trust. They were never) TjT* 0.0897  Tc 0.9603  Tw (stated explicitly as such \226 i.e., we never sat around a table to) TjT* -0.1988  Tc 0.0488  Tw (discuss them \226 but they were always present on the background.) Tj10.8 -12  TD -0.2083  Tc -0.475  Tw (We always strove to have open and honest communication among) Tj-10.8 -12  TD -0.2763  Tc -0.3101  Tw (us and with the customer. We tried to make every assumption explicit) Tj0 -12  TD -0.1946  Tc -0.1954  Tw (\226 sometimes asking seemingly obvious questions \226 in order to avoid) TjT* -0.2008  Tc 0.0508  Tw (misunderstandings and wrong expectations.) Tj10.8 -12  TD -0.197  Tc -0.253  Tw (We had the courage to take decisions and to accept accountability) Tj-10.8 -12  TD -0.1239  Tc -0.5338  Tw (for them. We had the courage to never give up to pressure to deliver) Tj0 -12  TD -0.0998  Tc -0.2302  Tw (on unrealistic schedules \226 of course we always explained why, and) TjT* -0.1094  Tc 0.5049  Tw (tried to offer alternative solutions. We had also the courage to be) TjT* -0.1203  Tc 0.1503  Tw (honest, not hiding problems from the customer, or from our boss.) Tj10.8 -12  TD -0.0811  Tc -0.4889  Tw (We had always the humility to recognise our own limitations, so) Tj-10.8 -12  TD -0.0887  Tc -0.1813  Tw (we always listened to other people\222s opinions and advice, or asked) Tj0 -12  TD -0.1499  Tc -0  Tw (for help when necessary.) TjET1 1 1 rg 28.8 56.4 264 513 re f0.9529 0.9529 0.9529 rg 29.4 57 262.8 511.8 re fBT31.2 553.8  TD0 0 0 rg /F0 12  Tf0.0346  Tc 0.0254  Tw (The Agile Manifesto) Tj0 -17.4  TD /F4 10.2  Tf-0.0948  Tc 0.1162  Tw (The Agile Manifesto has been taken from [4].) Tj0 -21  TD /F13 10.2  Tf-0.0603  Tc 0.0123  Tw (Manifesto for Agile Software Development) Tj0 -12  TD /F4 10.2  Tf-0.0859  Tc 0.2026  Tw (We are uncovering better ways of developing software by doing) TjT* -0.0752  Tc 0.5752  Tw (it and helping others do it. Through this work we have come to) TjT* 0.0452  Tc 0  Tw (value:) Tj0 -9.6  TD /F5 6  Tf0.054  Tc (l) Tj11.4 -2.4  TD /F7 10.2  Tf-0.0819  Tc -0.0681  Tw (Individuals and interactions) Tj123 0  TD /F4 10.2  Tf-0.0847  Tc 0.1347  Tw (over processes and tools) Tj-134.4 -9.6  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -2.4  TD /F7 10.2  Tf-0.1393  Tc -0.0107  Tw (Working software) Tj79.2 0  TD /F4 10.2  Tf-0.0835  Tc -0.0665  Tw (over comprehensive documentation) Tj-90.6 -9.6  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -2.4  TD /F7 10.2  Tf-0.0885  Tc 0.5385  Tw (Customer collaboration) Tj103.8 0  TD /F4 10.2  Tf-0.0904  Tc -0.0596  Tw (over contract negotiation) Tj-115.2 -9.6  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -2.4  TD /F7 10.2  Tf-0.1043  Tc -0.0457  Tw (Responding to change) Tj96.6 0  TD /F4 10.2  Tf-0.0381  Tc -0.1119  Tw (over following a plan) Tj-108 -12  TD -0.0841  Tc 0.7649  Tw (That is, while there is value in the items on the right, we value) Tj0 -12  TD -0.0882  Tc 0.0582  Tw (the items on the left more.) Tj0 -21.6  TD /F13 10.2  Tf-0.0787  Tc 0.0307  Tw (Principles behind the Agile Manifesto) Tj0 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1311  Tc -0.3789  Tw (Our highest priority is to satisfy the customer through early and) Tj0 -12  TD -0.095  Tc 0.095  Tw (continuous delivery of valuable software.) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf0.007  Tc 0.443  Tw (Welcome changing requirements, even late in development.) Tj0 -12  TD -0.1057  Tc -0.3872  Tw (Agile processes harness change for the customer\222s competitive) TjT* -0.0101  Tc 0  Tw (advantage.) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.2848  Tc -0.2852  Tw (Deliver working software frequently, from a couple of weeks to a) Tj0 -12  TD -0.265  Tc -0.085  Tw (couple of months, with a preference to the shorter timescale.) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf0.2041  Tc 0.2459  Tw (Business people and developers must work together daily) Tj0 -12  TD -0.1099  Tc 0.2599  Tw (throughout the project.) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf0.0299  Tc 0.4201  Tw (Build projects around motivated individuals. Give them the) Tj0 -12  TD -0.0918  Tc 0.4818  Tw (environment and support they need, and trust them to get the) TjT* -0.0768  Tc -0.0732  Tw (job done.) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf0.0256  Tc 0.4244  Tw (The most efficient and effective methodology of conveying) Tj0 -12  TD -0.0856  Tc 0.3106  Tw (information to and within a development team is face-to-face) TjT* -0.0978  Tc 0  Tw (conversation.) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.074  Tc -0.076  Tw (Working software is the primary measure of progress.) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf0.2728  Tc 1.7372  Tw (Agile processes promote sustainable development. The) Tj0 -12  TD -0.0366  Tc 0.4866  Tw (sponsors, developers, and users should be able to maintain a) TjT* -0.1306  Tc -0.0194  Tw (constant pace indefinitely.) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0812  Tc 0.2741  Tw (Continuous attention to technical excellence and good design) Tj0 -12  TD -0.1878  Tc 0.6378  Tw (enhances agility.) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1383  Tc -0.2117  Tw (Simplicity-the art of maximising the amount of work not done-) Tj0 -12  TD -0.0568  Tc 0.5068  Tw (is essential.) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1062  Tc -0.3009  Tw (The best architectures, requirements, and designs emerge from) Tj0 -12  TD -0.0827  Tc -0.0673  Tw (self-organising teams.) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0835  Tc -0.0065  Tw (At regular intervals, the team reflects on how to become more) Tj0 -12  TD -0.1155  Tc 0.137  Tw (effective, then tunes and adjusts its behaviour accordingly.) TjETq 28.8 569.4 m 28.8 56.4 l 292.8 56.4 l 292.8 569.4 l 29.4 568.8 m 29.4 57 l 292.2 57 l 292.2 568.8 l h W* n 28.8 56.4 264 513 re fQ endstreamendobj61 0 obj12636endobj59 0 obj<</Type /Page/Parent 55 0 R/Resources <</Font 64 0 R/ProcSet 2 0 R>>/Contents 60 0 R>>endobj64 0 obj<</F0 6 0 R/F4 16 0 R/F5 21 0 R/F7 25 0 R/F10 35 0 R/F13 62 0 R>>endobj66 0 obj<</Length 67 0 R>>stream
BT555.6 42  TD0 0 0 rg /F0 10.8  Tf-0.0048  Tc 0  Tw (11) Tj-243 768.6  TD /F0 12  Tf-0  Tc -0.0896  Tw (Overload issue 64 december 2004) Tj-271.8 -40.8  TD /F4 10.2  Tf-0.1178  Tc 0.1478  Tw (We always looked for simple and clean solutions to the current) Tj-11.4 -12  TD -0.0777  Tc -0.4723  Tw (problems. Our requirements were so unstable, that was pointless to) Tj0 -12  TD -0.0867  Tc 0.3867  Tw (try to predict the evolution of the system for a time period longer) TjT* -0.1626  Tc 0.3126  Tw (than one month.) Tj11.4 -12  TD -0.104  Tc -0.5537  Tw (We trusted each other; we knew that each of us had the skills and) Tj-11.4 -12  TD -0.0898  Tc 0.1398  Tw (the motivation to make the project succeed.) Tj11.4 -12  TD -0.0671  Tc -0.5496  Tw (The methodology itself was quite simple. Actually was easier to) Tj-11.4 -12  TD -0.062  Tc -0.088  Tw (implement than to explain) Tj0 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf0.0339  Tc 0.8961  Tw (As every modern method \(agile or not\), it was iterative and) Tj0 -12  TD -0.1901  Tc 0.1151  Tw (incremental, with, usually, one-week long iterations. This was to) TjT* -0.2783  Tc -0.0102  Tw (give the customer \226 and us \226 a better feeling of progress and better) TjT* -0.2825  Tc -0.3175  Tw (control of the project. In fact the short feedback loop allowed her to) TjT* -0.1764  Tc 0.1597  Tw (change her ideas on some functionality without losing too much) TjT* -0.3451  Tc -0.4049  Tw (development time, and allowed us to know how well we were doing) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.3654  Tc -0.2512  Tw (Team meeting every day before starting our activities. The meetings) Tj0 -12  TD -0.1936  Tc 0.4036  Tw (were usually ten minutes long. They were organised in a Scrum) TjT* -0.2386  Tc -0.0205  Tw (like fashion [11] [12]: everybody said what he did the day before,) TjT* -0.2488  Tc -0.4466  Tw (what problems he encountered, and what was going to do that day.) TjT* -0.2493  Tc 0.0993  Tw (Their purpose was to put everybody in synch with the others, and) TjT* -0.2468  Tc 0.0368  Tw (to decide how to solve the problems encountered along the way) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.2884  Tc 0.0784  Tw (Metaphor. This was the very high level architecture of the system.) Tj0 -12  TD -0.3057  Tc -0.4443  Tw (Its purpose was to communicate with the customer, and to drive our) TjT* -0.3001  Tc -0.0499  Tw (development activities. It helped us in making all important design) TjT* -0.2925  Tc -0.0575  Tw (decisions. Every time we had a doubt on how to do something, the) TjT* -0.2946  Tc 0.0846  Tw (metaphor had a fundamental role in helping us finding a solution) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf0.1007  Tc 0.3493  Tw (Coding standards. They were agreed at the beginning of the) Tj0 -12  TD 0.2012  Tc 0.2488  Tw (project. Their purpose was to allow us to guess the precise) TjT* -0.0627  Tc -0.3373  Tw (meaning of a name, to read code faster, and to give guidance on) TjT* -0.1143  Tc 0.1643  Tw (where to look for classes, functions, etc.) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.116  Tc 0.4993  Tw (Collective code ownership. Every member of the team had the) Tj0 -12  TD 0.1381  Tc 0.3119  Tw (power to change anything in the code to accommodate new) TjT* -0.0753  Tc -0.589  Tw (requirements, or refactoring odd-looking code. Its main purpose) TjT* -0.0309  Tc 0.4809  Tw (was to avoid the typical problems created by \223personal\224 code) TjT* -0.0434  Tc 0.4934  Tw (ownership, such as being dependent on a particular developer) TjT* -0.08  Tc 0.03  Tw (for the modifications in his or her parts of the system. It helped) TjT* -0.0752  Tc 0.0452  Tw (also in enforcing the coding standards.) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf0.2546  Tc 0.7954  Tw (Collective accountability. If someone in the team made a) Tj0 -12  TD -0.0698  Tc 0.3398  Tw (mistake, the entire team would have been accountable for it in) TjT* -0.106  Tc -0.544  Tw (front of the customer and the boss. Its main purpose was to avoid) TjT* -0.0522  Tc 0.5022  Tw (scapegoating and finger pointing. Of course, in order to make) TjT* -0.0608  Tc -0.0892  Tw (this work, trust among us was essential) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0868  Tc -0.5774  Tw (Direct face-to-face communication was preferred to other forms) Tj0 -12  TD 0  Tc 0.4494  Tw (of more indirect communication \(i.e., written documentation,) TjT* 0.2789  Tc 3.7711  Tw (phone calls, e-mails, etc.\). Its purpose was to make) TjT* -0.0778  Tc -0.0722  Tw (communication faster, and more precise) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf0.2836  Tc 0.1664  Tw (Everybody was involved in all phases of development. Its) Tj0 -12  TD -0.0984  Tc -0.1516  Tw (purpose was to allow us to have fun, learn new things, and keep) TjT* -0.0918  Tc 0.3168  Tw (self-motivation high. It was also instrumental in improving the) TjT* 0.2592  Tc 0.7908  Tw (design of the system, since we always had brainstorming) TjT* -0.1083  Tc 0.4083  Tw (sessions before taking any important decision that could affect) TjT* -0.0733  Tc 0.0733  Tw (the architecture of the system) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0807  Tc 0.5307  Tw (Requirements prioritisation. Its purpose was twofold: to allow) Tj0 -12  TD -0.1139  Tc -0.0361  Tw (the customer to have the certainty of having the most important) TjT* -0.078  Tc 0.108  Tw (requirements implemented, and to give us a clear goal for each) TjT* -0.0441  Tc 0  Tw (iteration) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0793  Tc -0.4707  Tw (Configuration management. Its purpose was to keep track of the) Tj0 -12  TD -0.0846  Tc 0.468  Tw (modifications made to the system, rollback changes, and to be) TjT* -0.1173  Tc 0.2946  Tw (able to rebuild a specific version if we needed to. We managed) TjT* -0.0841  Tc -0.5801  Tw (the configuration of every artefact: source code, documentation,) TjT* -0.0692  Tc -0.0208  Tw (build scripts and also the external tools and libraries we used) Tj263.4 709.8  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0799  Tc 0.3499  Tw (Extensive testing. Code was not finished until we had tests for) Tj0 -12  TD -0.0834  Tc -0.0666  Tw (it. Is purpose was to verify that the system worked as expected,) TjT* -0.084  Tc -0.466  Tw (and to allow us to make changes to the code with the confidence) TjT* -0.1606  Tc -0.4094  Tw (that we hadn\222t broken any existing functionality. As a side effect,) TjT* -0.0926  Tc -0.0574  Tw (it helped in improving our development speed as we proceeded) TjT* -0.0977  Tc 0.0143  Tw (because we had to spend less time hunting for bugs) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.2812  Tc -0.1088  Tw (Merciless refactoring. Its main purpose was to keep the code clean) Tj0 -12  TD -0.3178  Tc -0.4322  Tw (and supple. One of its side effects \(in concert with extensive testing\)) TjT* -0.2845  Tc -0.3732  Tw (was to allow us to develop a set of reusable libraries. These, in turn,) TjT* -0.2579  Tc 0.5879  Tw (allowed us to increase our speed substantially, since, as we went) TjT* 0.052  Tc 1.6838  Tw (along, the development of new functionality became more) TjT* -0.2764  Tc -0.0736  Tw (assembling of reusable assets and less development of new code) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1071  Tc 0.1071  Tw (Automation of all repetitive tasks-and of code generation when) Tj0 -12  TD -0.0614  Tc -0.6219  Tw (possible. Repetitive tasks are boring and slow if done manually,) TjT* -0.0959  Tc 0.1174  Tw (and bored people make silly mistakes. Enough said) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1041  Tc -0.1126  Tw (Never, ever, compromise design or code quality for any reason.) Tj0 -12  TD -0.0842  Tc -0.1749  Tw (The expected lifetime of the code we produced was in the order) TjT* -0.0725  Tc 0.0862  Tw (of several years, so it had to be maintainable and extensible. In) TjT* 0.0943  Tc 0.3557  Tw (conjunction with refactoring and testing, it allowed us to go) TjT* -0.0503  Tc -0.0997  Tw (faster as we proceeded) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0702  Tc -0.5598  Tw (Modify the methodology if necessary. Its purpose was to not get) Tj0 -12  TD 0.2605  Tc 0.3895  Tw (stubbornly stuck to practices or tools that were not useful) TjT* -0.1131  Tc -0.4569  Tw (anymore. For example, some times we modified the length of an) TjT* -0.0646  Tc 0.0646  Tw (iteration to fit our needs) Tj-11.4 -12  TD -0.3196  Tc 0.5696  Tw (In order to make our methodology work properly, we had to do also) Tj0 -12  TD -0.2817  Tc 0.065  Tw (some complementary things right from the beginning of the project) Tj0 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf0.253  Tc 2.3398  Tw (Define very clearly the responsibilities of the different) Tj0 -12  TD 0.1172  Tc 0.247  Tw (stakeholders. This was fundamental to reduce problems and) TjT* -0.1438  Tc 0.3538  Tw (finger pointing in case of problems) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0134  Tc 0.4634  Tw (Ask our boss to not put any of us on other teams working on) Tj0 -12  TD 0.2976  Tc 1.0524  Tw (other projects at the same time. This would have been a) TjT* -0.1356  Tc -0.4144  Tw (teamicide [7], would have lead to time fragmentation, and would) TjT* -0.095  Tc -0.055  Tw (have made estimating impossible) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.3053  Tc 0.3553  Tw (Strong emphasis on teamwork. We asked the customer to address) Tj0 -12  TD -0.2849  Tc -0.4651  Tw (her requests to the team, not individuals; for example, if she wanted) TjT* -0.3144  Tc 0.1644  Tw (to ask something by e-mail she had to address it to each of us) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0831  Tc -0.3669  Tw (During an iteration, the customer was not allowed to change the) Tj0 -12  TD -0.1489  Tc -0.5261  Tw (functionality being implemented. Its purpose was to avoid chaos,) TjT* -0.0688  Tc -0.4812  Tw (and had also the nice side effect of forcing the customer to think) TjT* -0.1145  Tc 0.1359  Tw (in more depth about her needs and priorities) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0521  Tc 0.0354  Tw (When possible, we used available code and libraries instead of) Tj0 -12  TD 0.0403  Tc 0.4097  Tw (writing our own \226 e.g., boost, CppUnit, Log4cplus, etc. This) TjT* -0.0803  Tc 0.3053  Tw (reduced development time, reduced the code base to maintain,) TjT* -0.1084  Tc 0.1084  Tw (and improved overall code quality) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0727  Tc -0.3773  Tw (Colocation in the same room, this had the purpose of increasing) Tj0 -12  TD -0.1032  Tc -0.4468  Tw (the communication bandwidth, and avoiding any of us being out) TjT* -0.0726  Tc 0.1534  Tw (of synch with the others \226 luckily we hadn\222t had to ask for this) TjT* -0.0903  Tc -0.0597  Tw (because we were already in the same office) Tj-11.4 -12  TD -0.0977  Tc 0.875  Tw (From time to time we had to ask some \223specialists\224 \(i.e., Oracle) Tj0 -12  TD 0.0496  Tc 1.0604  Tw (database experts\) for help. As far as we were concerned, they) TjT* -0.0867  Tc 0.7767  Tw (were akin to external consultants, and, since they worked on the) TjT* -0.1083  Tc 1.0492  Tw (project only for limited amounts of time, the fact that they were) TjT* -0.1097  Tc 0.1097  Tw (not located in our room was not a problem.) Tj11.4 -12  TD -0.0458  Tc -0.0442  Tw (Every time we dealt with one of these specialists, we managed) Tj-11.4 -12  TD -0.0983  Tc -0.4671  Tw (to learn enough from them so that, after a while, we could take over) Tj0 -12  TD -0.0861  Tc -0.0639  Tw (their tasks and carry on without their help. We acted as what Scott) TjT* -0.0383  Tc 0.4883  Tw (Ambler calls \223generalizing specialists\224 [1]: each of us had some) TjT* -0.0792  Tc -0.3375  Tw (strong skills \226 e.g., C++ programming, or Object Oriented Design,) TjT* -0.0576  Tc 0.2504  Tw (etc. \226 but had also the ability and the will to learn and apply new) TjT* 0.0707  Tc 0  Tw (ones.) TjETendstreamendobj67 0 obj12779endobj65 0 obj<</Type /Page/Parent 55 0 R/Resources <</Font <</F0 6 0 R /F4 16 0 R /F5 21 0 R >>/ProcSet 2 0 R>>/Contents 66 0 R>>endobj69 0 obj<</Length 70 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.0912  Tc 0  Tw (12) Tj0 768.6  TD /F0 12  Tf-0.0449  Tc 0.2549  Tw (Overload issue 64 december 2004) Tj11.4 -40.8  TD /F4 10.2  Tf-0.0994  Tc 0.4744  Tw (We deliberately decided not to enforce the following practices) Tj-11.4 -12  TD -0.0684  Tc -0.0816  Tw (used by Extreme Programming and other agile methods:) Tj0 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0374  Tc -0.1126  Tw (Pair programming) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1336  Tc 0.1836  Tw (Test driven development \(TDD\)) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1366  Tc 0.2866  Tw (Planning game and story cards) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf0.0291  Tc 0.4209  Tw (Automated acceptance tests written in collaboration with the) Tj0 -12  TD -0.0241  Tc 0  Tw (customer) Tj-11.4 -12  TD -0.282  Tc 1.332  Tw (Pair programming all the time could be tough. It is a very intense) Tj0 -12  TD -0.3045  Tc 1.3084  Tw (experience, and it requires a bit of time to get used to. Apart from) TjT* -0.1203  Tc 1.1703  Tw (that, we thought that, in our specific case, we could work faster) TjT* -0.2875  Tc 0.0775  Tw (without pairing. However, from time to time, we used this technique,) TjT* -0.2802  Tc 0.0444  Tw (especially for working on some particularly difficult tasks.) Tj11.4 -12  TD -0.3864  Tc -0.3636  Tw (Test driven development does not come naturally to everybody, and,) Tj-11.4 -12  TD -0.1922  Tc 0.5876  Tw (since we wanted to implement the methodology in a way that was) Tj0 -12  TD -0.2964  Tc -0.3736  Tw (natural for each of us, we didn\222t mandate \226 or forbid \226 the usage of this) TjT* -0.2786  Tc -0.1714  Tw (practice. However, as time passed we started to use it more and more.) Tj11.4 -12  TD -0.0921  Tc -0.3579  Tw (The planning game, story cards, and automated acceptance tests) Tj-11.4 -12  TD 0.2707  Tc 1.2459  Tw (written with the user, were never used because we already) Tj0 -12  TD -0.0638  Tc 0.5138  Tw (introduced many changes, and we thought that introducing more) TjT* -0.1186  Tc 0.5141  Tw (could have shifted too much the attention from the product to the) TjT* -0.1036  Tc 0.0082  Tw (process, or overwhelm our customer. In fact she was very keen on) TjT* -0.0798  Tc -0.0702  Tw (manual acceptance testing, and also more traditional requirements) TjT* -0.0282  Tc -0.1218  Tw (gathering meetings.) Tj11.4 -12  TD -0.0349  Tc 0.4849  Tw (To \(partially\) overcome the absence of automated acceptance) Tj-11.4 -12  TD -0.191  Tc -0.259  Tw (tests, we wrote tests for high level functionality using CppUnit. This) Tj0 -12  TD -0.1171  Tc 0.2243  Tw (was less than ideal, but better than nothing.) Tj4.8 -18  TD /F0 12  Tf-0.0369  Tc 0.3969  Tw (Implementing the Methodology) Tj12.6 -18  TD /F6 10.2  Tf-0.1092  Tc 0.0612  Tw (\223People hate change...) Tj0 -12  TD -0.0939  Tc 0.0459  Tw (and that\222s because people hate change...) TjT* -0.0935  Tc 0.0455  Tw (I want to be sure that you get my point.) TjT* -0.116  Tc 0.668  Tw (People ) Tj27 0  TD /F9 10.2  Tf-0.1966  Tc 0  Tw (really) Tj22.2 0  TD /F6 10.2  Tf-0.0764  Tc 0.0284  Tw (hate change.) Tj-49.2 -12  TD -0.1788  Tc 0.1308  Tw (They ) Tj19.8 0  TD /F9 10.2  Tf0.0034  Tc 0  Tw (really) Tj19.8 0  TD /F6 10.2  Tf-0.048  Tc (, ) Tj4.8 0  TD /F9 10.2  Tf-0.1966  Tc (really) Tj22.2 0  TD /F6 10.2  Tf-0.096  Tc 0.048  Tw (do.\224 Steve McMenamin as quoted in [7]) Tj-84 -12  TD /F4 10.2  Tf-0.0538  Tc 1.3438  Tw (Introducing any kind of change in an organisation can be very) Tj0 -12  TD 0.2464  Tc 0.9369  Tw (difficult. Humans are creatures of habit and tend to despise) TjT* -0.0131  Tc 1.1297  Tw (change. Furthermore, some people may perceive a change as a) TjT* 0.1848  Tc 0.8652  Tw (threat to their position of power. This fact can cause several) TjT* -0.0634  Tc 0.1134  Tw (political and technical problems.) Tj11.4 -12  TD 0.1029  Tc 0.3471  Tw (In our case, in order to minimise the impact of the potential) Tj-11.4 -12  TD -0.0956  Tc -0.0544  Tw (problems we implemented our methodology with great discretion.) Tj0 -12  TD -0.1032  Tc 0.0078  Tw (We never mentioned it explicitly \226 actually, we didn\222t even give it) TjT* 0.1823  Tc 0.2677  Tw (a name \226 we only explained our practices to our boss and our) TjT* -0.0871  Tc -0.5295  Tw (customer presenting them as simple common sense. The reason for) TjT* 0.158  Tc 0.292  Tw (doing that was to minimise the chance of having endless \(and) TjT* -0.0582  Tc -0.0918  Tw (useless\) methodological discussions.) Tj11.4 -12  TD -0.0219  Tc 0.4719  Tw (In order to make the project succeed, we had to perform four) Tj-11.4 -12  TD -0.0792  Tc -0.0708  Tw (concurrent, but strongly connected, activities:) Tj0 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1533  Tc 0.4033  Tw (To manage the customer) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.2303  Tc 0.4803  Tw (To manage the boss) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1483  Tc 0.2383  Tw (To carry out the technical tasks) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.2429  Tc 0.3929  Tw (To have fun) Tj-11.4 -12  TD -0.0892  Tc 0.6592  Tw (These activities were all equally important. In fact, the failure of) Tj0 -12  TD -0.0993  Tc 0.0826  Tw (performing any of them could have made the project fail.) Tj11.4 -12  TD -0.0973  Tc 0.5473  Tw (In the following paragraphs we\222ll show how our methodology) Tj-11.4 -12  TD -0.0765  Tc -0.0735  Tw (helped us in carrying out these activities, leading to the successful) Tj0 -12  TD -0.0755  Tc -0.0745  Tw (completion of the project.) Tj4.8 -18  TD /F0 12  Tf-0.0126  Tc -0.2274  Tw (Managing the Customer) Tj-4.8 -18  TD /F4 10.2  Tf0.3633  Tc 0.6867  Tw (Managing the customer and her expectations was the most) Tj0 -12  TD -0.2861  Tc 0.5111  Tw (challenging and time-consuming activity. In many respects, she was) Tj275.4 708  TD -0.271  Tc 0.1756  Tw (a typical customer: she had the tendency to give us solutions, instead) Tj0 -12  TD -0.2851  Tc 1.2018  Tw (of explaining the problems; she had the very common \223everything) TjT* -0.2932  Tc 0.0887  Tw (has top priority\224 mentality and, finally, we had to buy her trust.) Tj10.8 -12  TD 0.2867  Tc 0.1633  Tw (All practices of our methodology had an important role in) Tj-10.8 -12  TD -0.0864  Tc -0.1386  Tw (helping us to change her attitude, but face-to-face communication,) Tj0 -12  TD -0.1221  Tc 0.2721  Tw (incremental delivery, and short iterations were the ones that had a) TjT* -0.1222  Tc 0.1222  Tw (more immediate and direct effect.) Tj10.8 -12  TD 0.013  Tc 0.437  Tw (Face to face communication is the fastest and more effective) Tj-10.8 -12  TD -0.1756  Tc 0.2256  Tw (channel for exchanging information. Part of this information \226 that) Tj0 -12  TD -0.1306  Tc 0.4606  Tw (cannot be easily conveyed by other means of communication \226 is) TjT* -0.1998  Tc -0.2169  Tw (composed by the feelings, and emotions that are transmitted through) TjT* 0.1556  Tc 1.3611  Tw (gestures, and facial and body expressions. This last point is) TjT* -0.2261  Tc -0.3905  Tw (particularly important, for human beings are not entirely rational, and) TjT* -0.2929  Tc -0.1571  Tw (often make choices based on feelings or fears instead of logic or facts.) Tj10.8 -12  TD -0.2843  Tc 0.1943  Tw (Being aware of that, we always presented facts to substantiate our) Tj-10.8 -12  TD 0.0478  Tc 0.1622  Tw (choices, decisions, and proposals, but also took great care to be) Tj0 -12  TD -0.2842  Tc 0.0008  Tw (reassuring and look confident. This was helpful on several occasions.) Tj10.8 -12  TD 0.2668  Tc 4.0404  Tw (We preferred face to face communication to written) Tj-10.8 -12  TD 0.2597  Tc 1.5403  Tw (documentation to the point that, usually, we answered our) Tj0 -12  TD -0.1713  Tc -0.3605  Tw (customer\222s e-mails by going to her office and talking to her directly.) TjT* -0.077  Tc 0.347  Tw (This kind of answer was much more powerful than answering by) TjT* -0.0981  Tc 0.5481  Tw (e-mail for a couple of reasons: ambiguity and misunderstandings) TjT* -0.0756  Tc 0.5256  Tw (could be dealt with much more easily, and showing up in person) TjT* -0.0876  Tc 0.0876  Tw (sent a clear message of commitment to the project.) Tj10.8 -12  TD -0.308  Tc 0.058  Tw (Finally, it was of great help in keeping her focused on the business) Tj-10.8 -12  TD -0.2828  Tc 0.3328  Tw (side of the project, was instrumental in eliminating ambiguities from) Tj0 -12  TD -0.3871  Tc -0.3629  Tw (the requirements, solve problems more easily, helping her in prioritising) TjT* 0.0874  Tc 2.5055  Tw (the requirements, and in avoiding implicit assumptions and) TjT* -0.3049  Tc -0.4451  Tw (expectations by making every aspect of the project explicit and visible.) Tj10.8 -12  TD -0.1521  Tc -0.5229  Tw (Incremental delivery and short iterations helped greatly in buying) Tj-10.8 -12  TD -0.2815  Tc -0.3685  Tw (her trust. She could verify early and often our real progress by running) Tj0 -12  TD -0.2435  Tc -0.0265  Tw (the programs delivered at the end of each iteration. Furthermore, she) TjT* -0.1967  Tc 0.0467  Tw (could estimate the completion dates based on real data.) Tj10.8 -12  TD -0.1284  Tc -0.5216  Tw (After a while, she started to realise the advantages of all the other) Tj-10.8 -12  TD -0.1214  Tc 0.0914  Tw (practices as well, and to see how they reinforced each other.) Tj10.8 -12  TD -0.3214  Tc -0.1886  Tw (Unfortunately, not everything went as well as we wanted. A couple) Tj-10.8 -12  TD -0.2723  Tc -0.1504  Tw (of times we had to discuss some technical requirements with her \(and) Tj0 -12  TD -0.1497  Tc 0.2997  Tw (our boss\), and agree to implement an inferior solution for political) TjT* -0.2972  Tc 0.0472  Tw (reasons. Of course, when we did that we always made them aware of) TjT* -0.2948  Tc 0.0902  Tw (the drawbacks in order to avoid finger pointing in case of problems.) Tj4.2 -18  TD /F0 12  Tf0.0288  Tc -0.2688  Tw (Managing the Boss) Tj-4.2 -18  TD /F4 10.2  Tf-0.0428  Tc 1.0262  Tw (Managing the boss was easier than managing the customer. As) Tj0 -12  TD -0.0758  Tc -0.0742  Tw (long as the customer was happy, he was happy as well.) Tj10.8 -12  TD 0.084  Tc 0.366  Tw (Initially, he was dubious about our decision of starting from) Tj-10.8 -12  TD -0.1354  Tc -0.1146  Tw (scratch, and also about our approach. To convince him to give us a) Tj0 -12  TD -0.0806  Tc -0.3361  Tw (try, Giovanni \226 the officially appointed technical leader \226 accepted) TjT* -0.1733  Tc -0.3967  Tw (to link his career advancements and salary increase to the successful) TjT* 0.2681  Tc 0.1069  Tw (outcome of the project. This apparently careless gamble was) TjT* -0.1156  Tc 0.4323  Tw (actually a calculated risk. We had enough experience and domain) TjT* -0.1032  Tc -0.0468  Tw (knowledge to know that the risk of failure was quite low.) Tj10.8 -12  TD -0.0938  Tc -0.4254  Tw (In fact, after a few months of work, the results were so good that) Tj-10.8 -12  TD 0.2185  Tc 1.0115  Tw (our boss started to promote our way of working around the) Tj0 -12  TD 0.233  Tc 0.217  Tw (company. He also convinced us to give some seminars about) TjT* -0.1289  Tc -0.3639  Tw (configuration management and testing to other development teams.) Tj4.2 -18  TD /F0 12  Tf-0.0388  Tc -0.0012  Tw (Managing the Technical Activities) Tj-4.2 -18  TD /F4 10.2  Tf0.2494  Tc 1.1006  Tw (During our purely technical tasks, e.g., design, coding, and) Tj0 -12  TD 0.1858  Tc 0.9976  Tw (testing, we had been able to apply the methodology without) TjT* -0.1518  Tc 0.22  Tw (effort. In fact it felt very natural to work in that way.) TjETendstreamendobj70 0 obj12044endobj68 0 obj<</Type /Page/Parent 55 0 R/Resources <</Font <</F0 6 0 R /F4 16 0 R /F5 21 0 R /F6 23 0 R /F9 33 0 R >>/ProcSet 2 0 R>>/Contents 69 0 R>>endobj72 0 obj<</Length 73 0 R>>stream
BT552.6 42  TD0 0 0 rg /F0 10.8  Tf0.0912  Tc 0  Tw (13) Tj-240 768.6  TD /F0 12  Tf-0  Tc -0.0896  Tw (Overload issue 64 december 2004) Tj-271.8 -40.8  TD /F4 10.2  Tf-0.0887  Tc 0.2987  Tw (Since the languages used were C++ and Python, we hadn\222t the) Tj-11.4 -12  TD 0.0053  Tc 0.4447  Tw (possibility of having any refactoring tool, but we never had any) Tj0 -12  TD 0.1425  Tc 0.3075  Tw (special problems for this reason. We managed to do merciless) TjT* -0.0478  Tc -0.1022  Tw (refactoring by hand quite well.) Tj11.4 -12  TD 0.0192  Tc 0.4308  Tw (One of the main purposes of using Python was to reduce our) Tj-11.4 -12  TD 0.2551  Tc 0.3749  Tw (coding effort. All C++ code used to access the database was) Tj0 -12  TD 0.0744  Tc 0.3756  Tw (generated by a Python program we wrote for that purpose. We) TjT* -0.0598  Tc -0.2538  Tw (accessed all the tables with the same pattern, so we could generate) TjT* -0.0551  Tc 0.5051  Tw (the C++ code directly from the SQL used to create the database.) TjT* -0.1026  Tc 0.5526  Tw (This saved us a huge amount of time and reduced the occurrence) TjT* -0.1306  Tc -0.0194  Tw (of bugs.) Tj11.4 -12  TD 0.2725  Tc 2.4575  Tw (As the project went on, we were able to increase our) Tj-11.4 -12  TD 0.2048  Tc 0.2452  Tw (development speed, due to the number of tests we had, to the) Tj0 -12  TD 0.0054  Tc 0.4446  Tw (absence of duplication, and to the refactoring that allowed us to) TjT* -0.0861  Tc 0.0027  Tw (improve our architecture and create a set of reusable libraries.) Tj11.4 -12  TD 0.1655  Tc 0.2095  Tw (This last point deserves some explanation. A very common) Tj-11.4 -12  TD -0.0646  Tc 0.3146  Tw (approach to create reusable libraries is to work bottom-up: trying) Tj0 -12  TD 0.2625  Tc 3.1209  Tw (to write them as reusable artefacts right from the start.) TjT* 0.2583  Tc 0.6203  Tw (Unfortunately, this approach doesn\222t always give the results) TjT* -0.1473  Tc -0.3027  Tw (intended, because trying to predict all possible uses is very difficult.) TjT* 0.0643  Tc 0.3257  Tw (Our approach, instead, was \223use before reuse\224. When we had a) TjT* -0.1183  Tc 0.4299  Tw (specific problem to solve, the first thing we did was to look if we) TjT* -0.1022  Tc 0.3022  Tw (already solved a similar one. If we found it we would refactor the) TjT* -0.074  Tc -0.076  Tw (solution to an abstraction that could solve both of them; otherwise) TjT* -0.086  Tc 0.136  Tw (we wrote just the code for the specific case. Working in this way,) TjT* -0.0618  Tc 0.1785  Tw (we created several reusable libraries that helped in increasing our) TjT* 0.2831  Tc 1.1269  Tw (productivity quite a lot: we reached a point in which most) TjT* 0.0429  Tc 0.4071  Tw (programming tasks were mainly assembling components in our) TjT* -0.1175  Tc 0  Tw (libraries.) Tj11.4 -12  TD -0.1709  Tc -0.4458  Tw (The methodology was also instrumental in helping us solve some) Tj-11.4 -12  TD -0.1259  Tc -0.0241  Tw (technical problems we had along the way.) Tj11.4 -12  TD -0.1209  Tc -0.4491  Tw (Most of them were caused by our target operating system: Tru64) Tj-11.4 -12  TD 0.1215  Tc 0.3285  Tw (Digital Unix. Unfortunately, this wasn\222t a very well supported) Tj0 -12  TD 0.1948  Tc 0.2552  Tw (platform either by the software houses, or by the open source) TjT* -0.0924  Tc -0.5376  Tw (community. We had to write our own compilation scripts for boost,) TjT* -0.0232  Tc 0.3982  Tw (CppUnit, and other libraries. And the particular configuration of) TjT* -0.0817  Tc -0.3683  Tw (our hardware was less than optimal for developing software: as the) TjT* -0.1054  Tc 0.3554  Tw (code base grew, the compilation process became a painfully slow) TjT* -0.0479  Tc 0.4979  Tw (experience \226 from forty minutes to four hours, depending on the) TjT* -0.1556  Tc 0.4056  Tw (load of the machines.) Tj11.4 -12  TD -0.1018  Tc -0.0482  Tw (To solve this we decided to port our code base under Linux and) Tj-11.4 -12  TD -0.1066  Tc -0.0434  Tw (Windows \226 for which we had much faster machines that were also) Tj0 -12  TD -0.0906  Tc 0.1806  Tw (under our control \226 and compile under Digital Unix \(usually once) TjT* -0.0839  Tc -0.5025  Tw (per day\) only to run the tests when everything was already working) TjT* -0.1191  Tc 0.1691  Tw (on Windows and Linux.) Tj11.4 -12  TD -0.1673  Tc -0.4191  Tw (Thanks to our extensive test suite, the full automation of the build) Tj-11.4 -12  TD -0.0707  Tc 0.4007  Tw (process, and our obsession in keeping the code clean, the porting) Tj0 -12  TD -0.0684  Tc -0.6354  Tw (proved to be a painless experience. It had also a nice side effect: we) TjT* -0.0496  Tc 0.4996  Tw (ended up with truly portable software, with fewer defects. Some) TjT* -0.1027  Tc -0.4673  Tw (bugs that were missed from a compiler were almost certainly found) TjT* -0.1158  Tc 0.1158  Tw (by one of the others.) Tj4.2 -18  TD /F0 12  Tf0.0613  Tc -0.3013  Tw (Having Fun) Tj-4.2 -18  TD /F4 10.2  Tf0.0381  Tc 1.121  Tw (Fun is a fundamental part of work. It comprises all the things) Tj0 -12  TD -0.0135  Tc 1.0635  Tw (that make work something to look forward to. It comprises all) TjT* 0.029  Tc 1.021  Tw (the factors that motivate us in doing a job in the best possible) TjT* -0.2358  Tc 0  Tw (way.) Tj11.4 -12  TD -0.094  Tc -0.0015  Tw (We decided, right from the start, that we wanted to really enjoy) Tj-11.4 -12  TD -0.0835  Tc 0.4001  Tw (the project, and our methodology was strongly influenced by this) Tj0 -12  TD -0.1274  Tc 0  Tw (decision.) Tj286.2 708  TD -0.0706  Tc -0.0044  Tw (Our strongest motivating factors \(in no particular order\) were) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0375  Tc -0.1125  Tw (Doing a quality job) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1012  Tc -0.0488  Tw (Delivering value) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1601  Tc (Involvement) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1085  Tc -0.0415  Tw (Learn new things) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1402  Tc 0.2902  Tw (Having a challenge) Tj-11.4 -12  TD -0.111  Tc 0.036  Tw (The first three were directly addressed by our methodology.) Tj11.4 -12  TD -0.1724  Tc -0.5776  Tw (The fourth factor was only partially addressed by it \226 i.e., learning) Tj-11.4 -12  TD -0.1994  Tc 0.5894  Tw (a new approach to software development. So, we made some very) Tj0 -12  TD -0.174  Tc -0.276  Tw (deliberate choices to learn even more: we explicitly decided to learn) TjT* -0.2004  Tc 0.0504  Tw (more about Oracle, Python, and some modern \(but not arcane\) C++) TjT* -0.1955  Tc 0.0455  Tw (techniques, and also made some design experiments.) Tj11.4 -12  TD -0.0349  Tc 0.4849  Tw (The fifth was actually created by our boss, and our customer,) Tj-11.4 -12  TD -0.0953  Tc 0.0787  Tw (with their initial belief that we were going to fail.) Tj11.4 -12  TD -0.333  Tc -0.417  Tw (It was OK to experiment and make mistakes \226 we had configuration) Tj-11.4 -12  TD -0.2931  Tc 0.0831  Tw (management and lots of tests to protect us from their consequences.) Tj11.4 -12  TD -0.1145  Tc 0.2045  Tw (We certainly managed to enjoy the project, and this showed up) Tj-11.4 -12  TD -0.1366  Tc 0.2266  Tw (in the final product, and in the satisfaction of the customer.) Tj4.2 -18  TD /F0 12  Tf0.0324  Tc 0  Tw (Conclusion) Tj-4.2 -18  TD /F4 10.2  Tf-0.0967  Tc 0.3467  Tw (The first production quality version of the programs was released) Tj0 -12  TD -0.1067  Tc 1.0183  Tw (in about nine months. It had a very low number of bugs and no) TjT* -0.0423  Tc -0.1077  Tw (memory leaks.) Tj11.4 -12  TD -0.0541  Tc 0.5041  Tw (Before releasing to production, our customer decided that she) Tj-11.4 -12  TD 0.2778  Tc 2.1436  Tw (wanted even more functionality implemented, so the first) Tj0 -12  TD -0.0903  Tc -0.1931  Tw (production version was released in sixteen months after we started) TjT* -0.0784  Tc 0.0084  Tw (to work on it. So far there has been only one bug \226 that was easily) TjT* -0.0788  Tc 0.0788  Tw (fixed \226 in more than five months of operation.) Tj11.4 -12  TD -0.0629  Tc 0.5129  Tw (Compared with the system we had to maintain when we were) Tj-11.4 -12  TD -0.0533  Tc 0.0833  Tw (assigned to the project, the new one had much more functionality) Tj0 -12  TD -0.0938  Tc 0.4105  Tw (implemented, the performances were five to ten times better than) TjT* -0.0785  Tc -0.0715  Tw (the previous one, and was much easier to maintain,) Tj11.4 -12  TD -0.0629  Tc -0.43  Tw (The last point deserves some more explanation. Maintainability) Tj-11.4 -12  TD 0.068  Tc 0.382  Tw (is something that is usually difficult to achieve, and even more) Tj0 -12  TD 0.2524  Tc 1.3376  Tw (difficult to quantify. So how can we claim to have written) TjT* -0.0517  Tc -0.0983  Tw (maintainable code?) Tj11.4 -12  TD -0.0509  Tc 0.5009  Tw (We certainly put great care in keeping the architecture simple) Tj-11.4 -12  TD -0.0868  Tc 0.3568  Tw (and tidy, in localising responsibilities as much as possible, and in) Tj0 -12  TD 0.0196  Tc 0.4304  Tw (writing clean self-documenting and well-tested code. But, more) TjT* 0.0993  Tc 0.3507  Tw (importantly, soon after the production release, there have been) TjT* -0.1419  Tc -0.2331  Tw (several changes and additions in the implemented functionality that) TjT* -0.0847  Tc 0.068  Tw (really put maintainability under test: so far, the implementation of) TjT* -0.0958  Tc -0.2942  Tw (each of them has been quite straightforward, causing, at most, very) TjT* -0.0853  Tc -0.0647  Tw (localised changes in the code-base.) Tj11.4 -12  TD 0.0375  Tc 0.4125  Tw (Even if the project has been quite successful, there are some) Tj-11.4 -12  TD -0.081  Tc 0.131  Tw (things that, with hindsight, we would do differently. In particular,) Tj0 -12  TD 0.0049  Tc 0.4451  Tw (we would use TDD right from the start; we would push to have) TjT* 0.2556  Tc 1.4801  Tw (automated acceptance tests written in conjunction with the) TjT* 0.2554  Tc 0.1946  Tw (customer; and we would try to fight harder to avoid political) TjT* -0.0743  Tc 0.0243  Tw (compromises for deciding on purely technical issues.) Tj11.4 -12  TD -0.1978  Tc -0.2856  Tw (Manual acceptance testing had been the cause of many problems,) Tj-11.4 -12  TD -0.1053  Tc 0.3553  Tw (being a very time consuming and error prone activity. Sometimes) Tj0 -12  TD -0.1145  Tc 0.4009  Tw (the customer simply hadn\222t the time to run her tests, and, because) TjT* -0.0696  Tc -0.0804  Tw (of that, we couldn\222t proceed to work on the next iteration. For this) TjT* 0.2635  Tc 0.7865  Tw (reason, about four months out of sixteen have been wasted.) TjT* 0.2649  Tc 0.6518  Tw (Furthermore, it was easy to make mistakes during the tests\222) TjT* 0.2693  Tc 0.6307  Tw (execution: several times, the customer came to us claiming,) TjT* -0.029  Tc 0.479  Tw (wrongly, to have found a bug in the code, when what had really) TjT* -0.0972  Tc 0.0562  Tw (happened was that she had made an error in the testing procedure.) Tj90.6 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc 0  Tw ([concluded at foot of next page]) TjETendstreamendobj73 0 obj11417endobj71 0 obj<</Type /Page/Parent 55 0 R/Resources <</Font <</F0 6 0 R /F4 16 0 R /F5 21 0 R /F11 41 0 R >>/ProcSet 2 0 R>>/Contents 72 0 R>>endobj75 0 obj<</Length 76 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.0912  Tc 0  Tw (14) Tj0 768.6  TD /F0 12  Tf-0.0449  Tc 0.2549  Tw (Overload issue 64 december 2004) Tj0 -460.8  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc 0  Tw ([continued from previous page]) Tj11.4 -12  TD 0 0 0 rg /F4 10.2  Tf0.0255  Tc 0.4245  Tw (The few technical compromises we had to make for political) Tj-11.4 -12  TD -0.0781  Tc 0.3031  Tw (reasons always caused the problems we forecasted, that regularly) Tj0 -12  TD -0.0843  Tc 0.3706  Tw (gave rise to long and painful discussions about the reasons of the) TjT* -0.1343  Tc 0.1557  Tw (problems with our boss and with the customer.) Tj11.4 -12  TD -0.1137  Tc 0.1887  Tw (Finally, we would keep the possibility of dynamically adapting) Tj-11.4 -12  TD -0.1208  Tc 0.5708  Tw (the methodology to the needs of the project. We are aware of the) Tj0 -12  TD -0.0175  Tc 0.4675  Tw (fact that there is no one-size-fits-all methodology, but, from our) TjT* 0.1347  Tc 0.3153  Tw (experience, we are convinced that, sometimes, a methodology) TjT* -0.0844  Tc -0.481  Tw (cannot fit even a single project if it is not flexible enough to change) TjT* -0.0375  Tc -0.1125  Tw (along with the needs of the project.) Tj11.4 -12  TD -0.2505  Tc -0.1722  Tw (We don\222t claim that our methodology can work for every team, or) Tj-11.4 -12  TD -0.2369  Tc -0.4131  Tw (project \226 in particular, we don\222t recommend anybody to put his or her) Tj0 -12  TD -0.2519  Tc -0.1708  Tw (career at stake as Giovanni did. However, we think that our approach) TjT* -0.2625  Tc -0.2875  Tw (can be used by other teams to develop their own methodology. In fact) TjT* -0.2027  Tc 0.5193  Tw (the most important assumption behind our choices \(and behind the) TjT* -0.2355  Tc -0.2645  Tw (agile manifesto\) was that the process and tools should fit the needs of) TjT* -0.196  Tc 0.296  Tw (the people involved in the project, not the other way round. In fact,) TjT* -0.2438  Tc 0.0938  Tw (happy programmers produce better software.) Tj201 -12  TD /F8 10.2  Tf-0.0408  Tc -0.4032  Tw (Giovanni Asproni) Tj-7.2 -12  TD /F2 9  Tf0  Tc 0  Tw (aspro@acm.org) Tj3 -12  TD /F8 10.2  Tf-0.1313  Tc 0.2873  Tw (Alexander Fedotov) Tj-24.6 -12  TD /F2 9  Tf0  Tc 0  Tw (fedotov@ebi.ac.uk) Tj24 -12  TD /F8 10.2  Tf-0.132  Tc 0.288  Tw (Rodrigo Fernandez) Tj-105 -12  TD /F2 9  Tf0  Tc 0  Tw (rodrigo.fernandez@bnpparibas.com) Tj184.2 289.2  TD /F0 12  Tf-0.018  Tc (References) Tj0 -25.2  TD /F4 10.2  Tf-0.1827  Tc -0.3673  Tw ([1] Ambler, S., ) Tj59.4 0  TD /F10 10.2  Tf-0.1643  Tc -0.3457  Tw (Generalizing Specialists: Improving Your IT Career) Tj-48.6 -12  TD 0.3161  Tc 0  Tw (Skills) Tj24 0  TD /F4 10.2  Tf0.45  Tc (, ) Tj21 0  TD /F2 9  Tf0.3833  Tc (http://www.agilemodeling.com/essays/) Tj-45 -12  TD 0  Tc (generalizingSpecialists.htm) Tj-10.8 -12  TD /F4 10.2  Tf-0.1135  Tc -0.7222  Tw ([2] Asproni, G., \223Motivation, Teamwork, and Agile Development\224,) Tj10.8 -12  TD /F10 10.2  Tf-0.1945  Tc 0.0445  Tw (Agile Times Vol. 4) Tj72.6 0  TD /F4 10.2  Tf-0.15  Tc 0  Tw (, 2004) Tj-72.6 -12  TD /F2 9  Tf0  Tc (http://www.giovanniasproni.com/articles) Tj-10.8 -12  TD /F4 10.2  Tf-0.0426  Tc -0.3074  Tw ([3] Beck, K., ) Tj52.8 0  TD /F10 10.2  Tf-0.13  Tc -0.32  Tw (Extreme Programming Explained: Embrace Change) Tj208.2 0  TD /F4 10.2  Tf-0.15  Tc 0  Tw (,) Tj-250.2 -12  TD -0.1615  Tc 0.3115  Tw (Addison Wesley, 1999) Tj-10.8 -12  TD -0.0646  Tc -0.0854  Tw ([4] Beck, K., et al., ) Tj78.6 0  TD /F10 10.2  Tf-0.1195  Tc -0.0305  Tw (The Agile Manifesto) Tj81 0  TD /F4 10.2  Tf-0.15  Tc 0  Tw (,) Tj-148.8 -12  TD /F2 9  Tf0  Tc (http://www.agilemanifesto.org) Tj-10.8 -12  TD /F4 10.2  Tf-0.2341  Tc -0.0659  Tw ([5] Boehm B. W., ) Tj71.4 0  TD /F10 10.2  Tf-0.1092  Tc -0.0408  Tw (Software Engineering Economics) Tj132.6 0  TD /F4 10.2  Tf-0.0636  Tc -0.0864  Tw (, Prentice Hall,) Tj-193.2 -12  TD -0.15  Tc 0  Tw (1981) Tj-10.8 -12  TD -0.3158  Tc -0.4342  Tw ([6] Cockburn, A., ) Tj67.2 0  TD /F10 10.2  Tf-0.3258  Tc -0.4242  Tw (Agile Software Development) Tj108 0  TD /F4 10.2  Tf-0.3504  Tc -0.7996  Tw (, Addison Wesley, 2002) Tj-175.2 -12  TD -0.1987  Tc 0.5287  Tw ([7] DeMarco, T., Lister, T., ) Tj112.2 0  TD /F10 10.2  Tf-0.1055  Tc 0.5555  Tw (Peopleware: Productive Projects and) Tj-101.4 -12  TD -0.2864  Tc 0  Tw (Teams) Tj25.2 0  TD /F4 10.2  Tf-0.0444  Tc -0.1056  Tw (, Dorset House Publishing, 1999) Tj-36 -12  TD -0.0693  Tc -0.0807  Tw ([8] Eckstein, J., ) Tj64.8 0  TD /F10 10.2  Tf-0.1109  Tc 0.2609  Tw (Agile Software Development in the Large: Diving) Tj-54 -12  TD -0.0598  Tc 0.2098  Tw (into the Deep) Tj54 0  TD /F4 10.2  Tf-0.0889  Tc 0.2389  Tw (, Dorset House Publishing, 2004) Tj-64.8 -12  TD 0.0759  Tc 0.3741  Tw ([9] Highsmith, J., ) Tj76.8 0  TD /F10 10.2  Tf0.0084  Tc 0.4416  Tw (Agile Project Management) Tj111.6 0  TD /F4 10.2  Tf-0.0838  Tc 0.5338  Tw (, Addison Wesley,) Tj-177.6 -12  TD -0.15  Tc 0  Tw (2004) Tj-10.8 -12  TD -0.108  Tc -0.042  Tw ([10] N.A., ) Tj43.2 0  TD /F10 10.2  Tf-0.1176  Tc 0  Tw (AgileAlliance) Tj54.6 0  TD /F4 10.2  Tf-0.15  Tc (, ) Tj4.8 0  TD /F2 9  Tf0  Tc (http://www.agilealliance.org) Tj-102.6 -12  TD /F4 10.2  Tf-0.1266  Tc 0.1766  Tw ([11] Schwaber, K., ) Tj77.4 0  TD /F10 10.2  Tf-0.1722  Tc 0  Tw (Scrum) Tj25.2 0  TD /F4 10.2  Tf-0.15  Tc (, ) Tj5.4 0  TD /F2 9  Tf0  Tc (http://www.controlchaos.com) Tj-108 -12  TD /F4 10.2  Tf-0.1257  Tc 0.3357  Tw ([12] Schwaber, K., Beedle, M., ) Tj128.4 0  TD /F10 10.2  Tf-0.0712  Tc 0.3212  Tw (Agile Software Development with) Tj-117.6 -12  TD -0.0522  Tc 0  Tw (Scrum) Tj25.8 0  TD /F4 10.2  Tf-0.0828  Tc -0.0672  Tw (, Prentice Hall, 2002) Tj0.6 w 1 J 1 j 0 0 0 RG ET28.8 363.6 m 567.6 363.6 l S BT43.2 772.2  TD/F1 18  Tf-0.0115  Tc -0.4925  Tw (Yet Another Hierarchical) Tj25.2 -20.4  TD -0.119  Tc -0.085  Tw (State Machine) Tj-25.2 -12  TD /F0 10.2  Tf-0.1497  Tc -0.0243  Tw (by Stefan Heinzmann) Tj-14.4 -18  TD /F4 10.2  Tf0.0329  Tc 1.2838  Tw (Most of you are probably familiar with state machines. Finite) Tj0 -12  TD -0.0542  Tc 0.0376  Tw (state machines \(FSMs\) are widely used in both digital electronics) TjT* 0.6248  Tc 0.8752  Tw (and programming. Applications include communication) TjT* -0.1147  Tc 0.479  Tw (protocols, industrial control or GUI programming. UML includes) TjT* -0.0745  Tc 0.7645  Tw (a more flexible variant in the form of statechart diagrams. Here,) TjT* 0.0047  Tc 1.2703  Tw (states can contain other states, making the corresponding state) TjT* -0.0626  Tc -0.0874  Tw (machine hierarchical. ) Tj11.4 -12  TD 0.2673  Tc 1.1255  Tw (Hierarchical state machines \(HSMs\) can be converted to) Tj-11.4 -12  TD -0.0761  Tc 0.5261  Tw (ordinary \(flat\) state machines, so most implementors concentrate) Tj0 -12  TD -0.0952  Tc -0.0548  Tw (on the implementation of FSMs, and many implementations exist.) TjT* -0.0765  Tc 0.0465  Tw (The conversion however tends to lose the original structure of the) TjT* 0.2634  Tc 0.7866  Tw (HSM, making it difficult to make the connection between a) TjT* -0.1053  Tc 0.2553  Tw (statechart and its implementation. Clearly, it would be nicer if the) TjT* -0.1045  Tc 0.1045  Tw (HSM could be implemented directly in source code. ) Tj11.4 -12  TD 0.1387  Tc 0.3113  Tw (Direct implementations of HSMs seem to be comparatively) Tj-11.4 -12  TD 0.0103  Tc 0.4397  Tw (rarely published. Miro Samek provides a prominent) Tj0 -12  TD -0.0257  Tc 0.4757  Tw (example in his book [1]. See the sidebar \(next page\)) TjT* -0.0768  Tc -0.0732  Tw (for some more information about his approach, which) TjT* -0.1021  Tc -0.4979  Tw (provided the motivation for the approach I will present) TjT* -0.1917  Tc -0.3333  Tw (here. UML tools are available that generate source code) TjT* -0.0693  Tc -0.5607  Tw (directly from statechart diagrams \(example: Rhapsody) TjT* 0.0251  Tc 0.4249  Tw ([5]\). More information about HSMs and Statecharts) TjT* -0.0623  Tc 0.5123  Tw (can be found in [1],[2],[3] and \226 of course \226 through) TjT* -0.1113  Tc -0.0387  Tw (Google. ) Tj11.4 -12  TD 0.1774  Tc 0.3926  Tw (The implementation I\222m presenting here allows) Tj-11.4 -12  TD 0.0229  Tc 0.4938  Tw (you to code your HSM in C++ directly, without the) Tj0 -12  TD 0.2048  Tc 0.4167  Tw (need for special code generation tools or wizards,) TjT* 0.3643  Tc 0.5857  Tw (although such a wizard could ease development) TjT* 0.1868  Tc 0.2632  Tw (further by converting the statechart automatically.) TjT* -0.0087  Tc 0.2016  Tw (Template techniques are used to enable the compiler) Tj275.4 396  TD 0.0084  Tc 0.0816  Tw (to optimize the code through inlining, and I believe the resulting) Tj0 -12  TD 0.0468  Tc 0.4577  Tw (code ranks among the fastest you can get, provided you have a) TjT* 0.0359  Tc -0.3573  Tw (good up-to-date optimizing compiler \(which you\222ll need anyway) TjT* 0.0049  Tc -0.0049  Tw (because of the templates\). ) Tj10.8 -12  TD -0.1443  Tc -0.3875  Tw (Only a subset of UML statecharts are supported at present. If you) Tj-10.8 -12  TD -0.035  Tc 0.485  Tw (need advanced features like concurrent states or history pseudo-) Tj0 -12  TD -0.0574  Tc 0.0574  Tw (states, you need to expand the solution yourself \(tell me if you do) TjT* -0.0959  Tc 0.1259  Tw (so, it would be nice to have a complete implementation\). ) Tj0 -18  TD /F0 12  Tf-0.0868  Tc 0.0468  Tw (The TestHSM Example ) TjT* /F4 10.2  Tf0.09  Tc 1.2  Tw (It is best to describe how a hierarchical state machine works) Tj0 -12  TD -0.0907  Tc 1.2007  Tw (when you have an example. I lifted the statechart shown below) TjT* 0.1861  Tc 0.9839  Tw (from Miro\222s book. It specifies the state machine for the test) TjT* 0.4215  Tc 0.6285  Tw (example he implemented in his book \([1] page 95\). We\222ll) TjT* 0.2078  Tc 0.8422  Tw (implement the same here. The example is artificial and only) TjT* 0.3462  Tc 0.7638  Tw (serves the purpose of providing a number of test cases for) TjT* 0.0792  Tc 1.1958  Tw (checking the correct implementation of the state machine. Its) TjT* -0.0555  Tc 1.3237  Tw (advantage is that it is quite small and therefore well suited for) TjT* -0.1153  Tc 0.1653  Tw (demonstration. It is driven by keypresses on the keyboard. ) TjET1 1 1 rg 248.4 373.8 319.2 172.2 re f249 374.4 318 171 re fq 312.6 0 0 -165 252 541.2 cm /im1 Doendstreamendobj76 0 obj10526endobj78 0 obj<</Type /XObject/Subtype /Image/Name /im1/Width 417/Height 220/BitsPerComponent 8/ColorSpace [ /Indexed /DeviceRGB 255 77 0 R ]/Length 79 0 R>>stream
ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛˛ˇ˛˛˝ˇ˛ˇˇ˝ˇˇˇ˝ˇˇˇ˛˛˛ˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˛˛˛˛˛ˇˇˇˇˇˇˇˇˇ˛˛ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛ˇ˛˛˛˛˛ˇ˛ˇˇˇ˛˛˛ˇ˛ˇˇ˛ˇˇˇ˝ˇ˛˛˛ˇ˛˛˝ˇ˛ˇˇ˛ˇˇˇˇ˛˛˛ˇˇ˛ˇ˛ˇˇ˛ˇˇˇˇˇˇˇˇ˛ˇˇˇ˛ˇ˛ˇˇˇ˛˛ˇ˛ˇ˛˛˛˛˛ˇ˛ˇˇˇ˛ˇ˛˛˛ˇ˛ˇˇˇˇ˛˛˛ˇˇ˛˛˛˛˛ˇˇˇ˝˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛˛˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇ˛˛ˇˇ˝ˇˇ˛˛ˇ˛ˇˇˇˇ˛ˇ˛˛ˇ˛˛˛˛˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇ˛˛ˇ˛ˇˇ˛ˇ˛ˇ˛ˇˇˇ˛˛ˇˇ˛ˇ˛˛ˇˇ˛ˇ˛ˇ˛ˇˇˇ˝ˇˇ˛˛ˇ˛˛ˇ˛˛˛˛˛ˇˇ˛ˇˇˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇ˛˝ˇ˛˛ˇˇ˛ˇ˛ˇˇ˛ˇˇˇ˛ˇ˛ˇ˛ˇˇˇ˛ˇˇˇ˛ˇ˛ˇ˛ˇˇˇˇ˛˛ˇ˛ˇˇˇˇ˛ˇˇˇ˛˛ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛˛˛ˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇˇ˛ˇ˛˛ˇˇ˛˝ˇˇ˛˛ˇ˛ˇ˛ˇˇˇ˝ˇˇ˛ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˛˛ˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇ˛ˇ˛˛˛˛ˇ˛ˇˇˇˇˇˇˇˇ˛˛˛ˇ˛ˇˇ˛ˇ˛ˇ˛˛˛ˇˇ˛˛˛˛ˇ˛˛ˇ˛˛˛˛˛ˇ˛ˇ˛ˇˇ˛˝ˇˇ˛˛ˇ˛˛˛ˇˇ˝˛ˇ˛˛ˇ˛ˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛ˇ˛˛ˇ˛˛ˇ˛ˇ˛ˇˇ˛˛˛ˇ˛ˇˇ˛˛˛ˇ˛˛ˇˇ˛ˇ˛˛ˇ˛˛ˇ˛ˇ˛˛ˇ˛˛˛˛˛˛˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛ˇ˛ıˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛˛ˇ˛Ûˇˇ˛ıˇ˛˛˛Ûˇˇ˛ı˛˛ˇı˝ˇ˛ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÌˇ˛Ûı˛ˇˇˇˇˇˇˇˇˇˇˇ˛ÌÛ˛ˇˇ˛ˇˇˇˇˇˇˇˇˇ˛ˆˇˇˆ˛ˇˇˇˇˇˇˇˇˇÙˇˇ˛Ùˇ˛˛Ûı˛ˇˇ˛ˇˇˇıÛ˛˛ˆˇ˛˛ˇ˛Ûˇ˛ˇ˛ˇˇ˛ıˇ˛˛˛˛ˇ˛ˇ˛ˇ˛ıˇ˛˛ˆ˛ˇˆ˛ˇˇˇˇˇˇˇˇÙˇˇ˛ı˛ı˛˛Ûˇ˛˛ˇ˛ıˇı˛Ù˛˛˛ˇˇ˛ˇˆ˛ÌÈ˛˛Û˛ˇıÛıˇıı˛˝˛ˇÙıˇÛÙ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ˙˛ˇ˝˝Ì≈ü|ÖÑ}ë}ÜÑç|ÜÉ}ÖÖéãéìãÜÉ}ã}uÑÜÑÖ}éãÖ|}é|Üã||}lÉéôÜãÑáÉkÑÜÑ}tÑéÑ}ÑãÜ|tÑ}}|}}ÜÑóåÉlÑÜÉ}ÑáÉoÜÉ}|}Ñ}}uÖãÜoä~ÑuÑ|Ñã}ëéãÜ|åéãéãÖu|}|áÑ|vÑÜãu|~í}äÑâáäÜäáëãáâïàÑ~}ÑÜÑçääÖä}ãÑÉÉÖÑÖÉ}|ãÖÉÑäÑÉÑÉâ|Å|ë{Ç{Ñ{{óÖä||âÖt{Çãï{åêë{z{s{{{{t{zÇÑÇ|zÇçä{ÉÑÇÖÉëÖäÖÇéÇôÜâuëé|ÇtíÖäÖv}|}éàëññöÜxyàïèàÜv~ÉÉuÑóÑvòéÉ|Üãóã|åãéãÖÉ}É|ÜöüëÖãåòíÜ°ÜÉÑòÑóìéëãÜí|ãÜãÉ}òéÉéãéãÑçÑóíçíôèãéíñÑôóíóí†íëéãüãéãìóëéëéÑãó†óëóôÜããóíçÑóôóéö†är®ˆˇ˚˝˛ˇ˛ˇˇˇˇ˝ˇ¯ˇ˘ˇ¸ﬁev∂€Ù˘¸¸˚Ú˚¸¸˚¸¸¸¸¸˚¸¸˚¸˚˚˚¸˚¸˚¸˚˚¸˚¸¸˚¸˚˚¸¸˚¸˚˚˚¸¸˚¸˚¸˚¸¸¸˙˚¸¸¸˚˚¸˚¸˚¸˚˚¸˚¸˚¸¸˚˝˚˚¸˚¸˚¸˚˚¸˚˚¸˚˚¸˚˙¸˚˚¸¸˚¸˚˚˚¸¸˚¸¸˚¸¸¸˚¸˚˚˚˚¸¸¸˚¸¸˚¸˚¸˚˚˚¸˚¸˚ˇˇˇ˛˝˚¸˚¸˝˚˝˝ˇ˝˛¸˚¸¸˛¸˝¸¸¸¸¸˝¸¸˝¸˝¸˚˝¸˝˝¸¸˝˝¸˝¸¸¸¸¸˝¸¸¸¸˝¸¸˝¸¸¸¸¸¸¸˝¸¸˝¸¸˚¸¸¸¸¸˚¸¸¸¸¸¸˝˚˝˝¸˝˝˝¸¸¸˝˚˝¸˝˝¸˝¸¸˝˝˝¸¸¸¸˛˝˝˚¸¸˝¸˛˚ˇ˛ˇˇ˛˛˛¸˝˚¸˚¸˚˚¸¸˚˚¸˚˚¸˚˚¸˚˚˚¸¸¸¸¸˚˝¸¸˚¸˝˚¸¸¸¸¸¸¸¸¸¸˚¸˚¸¸¸¸˚¸¸¸˚¸˚¸¸¸¸¸¸¸˚˝¸¸¸¸¸¸˚¸˚˚¸¸¸¸˚¸˚¸¸¸¸˚¸¸˚˚˚¸¸˚˚¸˚¸¸¸˚¸˚¸¸¸¸¸˚¸˚¸¸ˇ¸˚¸˛˛–cÈ˙ˇ¯ˇ˚ˇˇˇˇ˛ˇ¸ˇˇˇ†iË˝˛ˇ˛˛ˇˇˇˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ˛ˇˇˇˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸¸˛˛ÓÜø˝ˇ˛˛˛ˇˇˇˇ¯ˇ˝ÛÄÆ˝¸˛˚˛˝ˇ˝˛˝˛˛˝˝˛˛˝˛˛˝˛˛˛˝˝˛˝˛˝˛˝˛˛˝˝˛˝˛ˇ˝˝˛˛˝˛¸˛˛˛˝˝˝˛˝˛˝˛˛˝˛˝˛˝˛ˆ˝˝˛˛˛ˇ˛˝˝˝˛¸˛˛˛˝˛˝˝˝˛˝˝˛˛˛˝˝˝˛˝˛˝˛˝ˇ˛˛˛˝˝ˇ˝ˇ˝˛˛˛˛˝˛˝ˇ¸˛˛˛˝˛˝˛˝ˇ˛˝˛˝˛˝˛˛˛˛˛˝˛˝˝˝˚˙¸˝¸˛˛˛ˇˇ˛ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇ˛ˇ˝ˇ¸ˇ˝ˇ˛ˇ˛ˇ˛ˇ˛ˇ˛ˇˇ˝˛˛˛˛ˇ˛ˇˇ˝˛ˇ˛˛˛ˇ˛ˇ˛˛˛˛˝ˇˇ˛ˇˇˇˇˇ˛ˇˇˇˇˇˇˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˝¸¸¸˙˘˙¸˝ˇˇˇ˛˝˝˛˛˛˝˛˛˛¸˛˝˛˛˝˛˝ˇ˛˛˝˝˛˛˝˛˛˝˛˛˛˛˛˛ˇ˝˝˛˝˛˝ˇ˛˛˝˛˝˛˛˛˝˝˛˛˝˛˛˛˛˝˝˝˛˛˛˝˛˛˛˝˝˛˛˛˛˝˛˝˛˝˛˝˛˝˝˛˛˛˛˛˛˛˛˝˝˛˛˛˛˝˛˛˛˛˝˛˝˛˛˛˛˛˛ˇˇˇ˝˝¸˝©¥˙ˇ˙ˇ˛ˇ˛˝ˇˇÛ|’˝ˇˇˇˇ˛¸¯˙˝¸˝¸¸˝˝¸˝¸¸˝¸˝¸˝˛˝¸¸˝¸˝¸¸˝¸˝˝˝˝˝¸¸¸˛¸˝¸˝˝¸¸˝˝˝˝˝˝¸¸¸¸˝¸¸¸˝¸¸˝˝˝¸˝˝¸˝˝¸˝¸˝˝˝˝˚¸¸˝¸˝¸˝˚˛¸¸¸˝˝˝˝˝¸˝¸˝¸˝¸˝˝¸¸˝¸˝˝¸˝¸˝¸˛˝¸˝¸¸¸˝¸¸˝¸˚˝¸¸˝˝˛¸˝˝˚¸˝ˇ˛¸˙˙˚˙˝¸˚˙¸¸¯˘˙˘˘˘˘˘ÒÓÈËÔÈÔÁÂÈÈÊÿ€ø«“…¿ÆøØøπ¿∑∫≥∫¥∞µ∫¿∂πµ∫¥∞∫¿±´π∫™∞∫µ®¨∞¨±∞µ°´®∂∏©µ¿Ω…æ…»“——ŸË◊›≈—ÒÁ˙ÔÔÌÒ¯˙˘˙¯˘˜˛˝¸˚˙¸¸˝¸¸˚¸˚¸¸˝¸¸¸˝˝˝¸˛˝˝¸¸˝˝˝¸˝˝˝˝¸¸¸¸¸˝˝¸˝¸¸˝¸˝¸˝˝˛¸¸¸˝˝˝¸˝¸˝¸˝˝¸˝˝˝˛˝˝˝¸¸¸˝˛˝¸˝˝˝˝˝˝˝˝˛¸¸¸˝˝¸˝˝˝˝˛˝¸˛˝˝¸˝˝˝˝˝˛˝¸˝˝˝˝¸˝˝˝˝˝¸˝˙˚˝˛˝˝˛ˇ¸ˇï ˘ˇ˙ˇˇ˙ˇ˝˙√≥¯ˇˇ¸˛ˇˇˇˇ¸˛ˇ˝ˇ¸ˇ˝ˇ˝ˇ˛˛ˇ˛ˇ˛˛˛ˇ˛˛˛˛˛˛˛˛˛˛˛ˇ˛ˇ˛˛˛˛˛ˇ˛˛˛˝ˇ˝ˇ˛˛ˇ˝ˇ˝˛˛˛˛˛˛ˇ˛˛˛˝˛˛˛ˇ˝ˇ˛˛˛ˇ˝ˇ˝ˇ˛ˇ˝˛˝ˇ˝ˇ˝ˇ˛ˇ˛˛˝ˇ˛ˇ˛ˇ˛˝ˇ˛ˇ˝ˇˇ˛˛˝˛˛˛˛ˇ˛ˇ˝˛˛˛˛ˇ˛˛˛˛˛˛˛˛˛˛˛˝ˇ˝ˇˇˇ˝˝˘¸˚˝˚˙ﬁœ–√•ùëéàÄëï~ÜçêîëçàãÄèîèî™ü©®∑π∑∞Ωπ∂ØπÆ∫µπºΩ∫º∫ª∞ºº∏æπΩº¬ºº¿À¡µ∏√À µØΩπæ√π∞±®©®°ôíêìéúó´ôèñwvÄxÄqo~xpwáú≤≈ﬂÒÛÙ˙˙˚ˇˇ˛ˇ˝ˇ˝˛ˇ˛ˇ˛ˇ˝˛˛˛˛˛˛ˇ˛ˇ˛˛˛˛˛˛˛˛˛˛˝˛˛˛˛˛˛ˇ˛ˇ˝˛˝˛˛ˇ˝˛˛˛˛˛˛ˇ˝˛˛˛˛˛˛˛˛˛˛ˇ˛˛˛ˇ˛˛˛˛˛˛˛ˇ˛˝˛˛ˇ˛˛ˇ˛ˇ˛˛˛˛˛˛˛˛˛˛˛˛˝ˇ˛ˇ˛˛˛˛˛˛˛˝˛ˇ˛ˇ˛ˇ˛˝˛˛˛ˇˇ˝ˇ˙}Ûˇˇ˚ˇ¸ˇ˛ˇm¸¸˛˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÕëpp~úú´ºÿ÷Â˝˝˝¸¸¸¸˚¸˚¸˚¸¸˝¸¸¸˛¸˝¸˝˛¸˛˛ˇ¸ˇ˛˛˛˛ˇ˛˛ˇÚ˛˛˛˛˛˛ˇˇ˛ˇ˛˛˛ˇ˝ˇˇˇˇˇˇˇˇ˛ˇˇ˛ˇ˛˛˛˛˝˛˝˝˝¸¸˝¸˝¸¸¸¸˛˝˚¸˚¸¸˚˚˚˚¸˙˝¸˝“≥´ëizg{ØŸ˝ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚ˇ˝Ã™ˇ˝˝ˇ˛ˇˇ ∂˝˙˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚◊≥yàz•’ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÔ„ªåyy≈Ì˚˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚˙ˇÒ|¸ˇ˛ˇ˛¸ˆpÂˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚ˇ˚ˇ˛ˇˇˇ˛ÙÀétõŒˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚ˇˆˇ¸˙¯¸ˇ¯ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇ˛ˇˇ¸ˇÔ∏tvßÚ˛˛ˇˇˇ˚ˇ˚ˇˇˇˇˇˇ˛ˇˇ˛ˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇ˛ˇˇˇ˝ˇ˛ˇˇ˝ˇ˛ˇ˛ˇˇˇˇ˛ˇˇˇ˛ˇˇˇ˛ˇ˛ˇˇ˛˛ˇˇ˛ˇˇ˛ˇ˛ˇ˛˛˛˛˛˛ˇˇˇ˛ˇ˛ˇˇˇ˛˛˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇ˛fÌ¸˛ˇ˛¸ˇuˇ˛ˇ˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ˛˚“â∫ˆˇ˝˝˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˙ˇıˇºÑñ›ˇ˘¸˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇˇˇæu~Ÿ˛ˇˇ˛˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚ˇˇˇç‹˙ˇˇ˛˛Ùú˛ˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇ˝ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˜ˇˇˇˇÿZçËˇˇˇ¸ˇˇ˛ˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˙úE6-‘ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˛ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇÓwz‰ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸ˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇ˝ˇΩø˘ˇˇ˝˝€†ˇˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝¸¸˛ˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˚ˇ˝ˇ‰êñˆˇˇ˝¸¸ˇˇˇˇ˛˛˚˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˙¢§ÓÛ:à˜ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˝ˇˇ˛˝˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ‚t©˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇ˛˛¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚ˇ˛ˇ«¨˙ˇˇ˛˝√¥˛ˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇ˛ˇ˝˝˛˝ˇ¸ˇ˛ˇ˝˛˛˝˛ˇ˛˛˛˝˛ˇ˝ˇ˛ˇ˝˛˝ˇ¸ˇ˝ˇ˛˛˛˛˛ˇ˛˛˛˛˛ˇ˝ˇ˝˛˝˛˝˛˝ˇ˝˛˛˛˝ˇ¸˛˛˛˝˛˛˝˝˛¸˝˝˝˝˝¸ˇ¸˝˛˝˝˝˛¸˛˝˝˙ˇˇ˘ıûëÙˇˇ˛˝¸˝ˇ˜˙¸˝˛˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇÈEcˇˇˇ˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝¸¸˚¸˝˝¸˝¸¸¸¸¸˚˝˚¸¸¸˚¸¸˝¸˝¸¸˚˝˙¸¸˝˚¸˚¸˚¸˚¸¸˚˚¸˚¸¸˚˚˚¸˚˚¸¸¸˚˚˚¸˚¸˙¸¸˙¸¸˛˙˙¯˙˝¸ˇˇ {Æ¸˙˙¸¯˛˘˝˝¸˚˚˚¸˙˚˚˚˚¸˙¸˙¸˚˚˚˚˚˚˙˚˚˙˚˙¸˘¸˙˚˚˙˚¸˙˚˚˚˚˙˚˙˚˚˚˙˚˚˚˙¸˚˚˚˙˚˚˚˙˚˚˚˚˙˚˙¸˙˚˙¸˙˙¸˚˚˘˚˚˛˝ˇˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ”∞¸˛ˇ˛˝»Æˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇ˚˚¸˘ÓÈÁÒÔÚÊÁË‡˘·ÂÚÈ‡ÂÒÔÈ⁄È‹Ò‡‡ÈÂÒ€ÍÊÈÊ‡€‚Ôÿ‡‹‡“ÿÊ·€·⁄Âÿ⁄‡“Í‡“‡‹–”ÿ–“—›·»—–…·…—“»—”⁄…–«»»–ø∆ƒ7åµ…»ŒÃ¡Àæ«”⁄Á˝˚˝˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛a4Í›d˘ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˝˚¸˚˝‹ ¡™®ß™∞ü¨®∂®°û©∂®°†¨©ü°†°ü°ò¨óò£ó¢ôò†èóèòêòÜéòòÇòôóòò†ôèóê†çèòòöô†åüñêóêÉÑòôr'oåáë†áñã¢êóèôóáåêàóêôèçáóèêéèÉàáÉÄzázöáèàéàéááÑàèàÖêéÜÑàÖÑÄéàé~ÑâàÑâÖÄÖâxz{zàÄ{wÑwÖ™¿Ó˝¸ˇ˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇ˛ŒÆ˛˛ˇ˛ˇ∑∏˙ˇ˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˆ¥ééáàïîgdëóíìçãõëéöèïëàëçõïñêïôîëúïôïöï¢úïêúëú°úïôîëîôõíú°ëï°°ë™¢ô¢™£©£õ†ö°©™©™©©©´∞¢™©©™©™¢°üòdi™®Æ¶¨©©≤∏≥Æπ°ùñîƒˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛%ó˚˘je¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˆ≈á}üπΩ¬ƒƒ–√ …√¿¬¿ ¬—√— …º…––¿—»“»—–« –—»–––»—…–…–œ…œ◊œ–œ–––œ––¬»œ–ﬁ—“””“––…”ÃŒ–»—–éW≈ﬂ»œÿ’‰Œ—ÿÿœ÷–◊œ–Œ–÷ÿœ–‡‰ÿ›·››ÿ„‡‰È‹›ﬂﬁﬂ›‡Â›‡›È‰‡‰Ë‰‰‡„‹ËÍ‰È‰‡„‡„ÎﬁÒÚË‰ÚﬂÂﬂÎÁÎ¯ËÏÈÏËœ∂áÖ–˛ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸ˇ˙⁄πˇ˛ˇ˛ˇƒ´˙ˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ‹Ö¥˝˛¸˙˚˙⁄ó˚˝˝˘¸˚˝¸¸˝˚¸¸¸¸¸¸¸¸¸¸˝˚˝˚˝¸¸¸¸¸¸¸˝˚¸¸¸˚¸˚˝¸¸¸¸˚˝˝¸¸˝¸¸˝¸˝¸˝¸¸¸¸¸˝˝¸˝˝˝¸˛¸˛˝˝˝¸˝¸˛¸˝˝˛¡}˝¸˛˙˚¸˝˛ˇˇˇˇˇ˚˝ˇˇ°|Úˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˙ß¸˙x`˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇ˛°ÑÔ˛˝˝˛˝˛˝˛˛˛˛˝ˇ˛˛˛˝ˇ˛ˇ˛ˇ˝ˇ˛ˇ˛˛ˇ˝ˇ˛ˇˇ˛˛˛ˇ˛ˇ˛˛ˇ˛ˇ˛ˇ˛˛˛˛˛ˇ˛˛ˇ˛˛˛˛ˇ˛ˇ˛˛ˇˇˇˇˇˇˇˇ˚ˇˇˇˇ˛˝˝©Ä˚˛¸ˇˇˇˇ˛ˇ˛˛ˇ˛˛˛ˇ˛ˇ˛ˇ˛˛ˇˇˇˇ˛ˇˇˇˇ˛ˇ˛ˇ˛ˇ˛ˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇ¸˝¸zü˛˛˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˙ˇ˙›¢ˇˇˇˇ¸Ã™ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˘ˇ˚ˇ˚ˇªvÊ˝˛˛ˇˇ˝˝ıå˙ˇ¸¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇ˝ˇˇ˝∑çÛ˝˝˛ˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇ¸…~Ï˛˛ˇ˚ˇ˚ˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˙9xˆÛ;i˙ˇˇ˚ˇˇˇˇˇˇˇˇˇ˛˛ˇˇˇˇ˛ˇ˚˝Ù}æ˚ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˚˙˚¸¸˝¸¸˚˝¸¸¸¸¸¸¸¸˚¸¸˝¸˚¸¸¸¸˝˝¸¸¸¸˚˚¸¸˚˝¸¸¸˝˝˝¸¸¸˚¸ˇ´´¸ˇˇˇˇ¸¸˚˝˚˝¸¸¸˝¸˝¸¸˝¸¸¸¸¸¸˝¸˝¸˝˝¸˝˝˝¸˝¸˝¸¸¸¸˝¸¸˝¸¸¸˝¸¸˝˝˝¸˝¸¸˚˘¸¸ˇ˛ˇˇˇˇ˛ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇºéÚˇ˛˝ˇ˝ˇ˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇÀ∞˙ˇˇˇ˚∫¿ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇˇ˝ˇ˙ˇ˚—è˚ˇˇ˝ˇ¸ˇ˝ˇˇxÛˇ¸˚ˇˇˇˇˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛˚ˇˇÍY˚ˇ˛¸˛˝ˇˇˇˇˇˇˇˇˇˇ˝˝˝ˇˇ⁄yÎ˛ˇ˙ˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˙â
iXr˚ˇ˛ˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇ˛ˇˇˇˇÁe⁄ˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇˇ˛ˇˇ˝˝˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ˛ˇˇˇˇxÎˇˇˇ˝ˇ˛ˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇ˛ˇˇˇ˝˝˚ˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˝«ò˚ˇ˝˛˛ˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ¡π¸ˇˇ˛¸Ω≤ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇ˝ˇ˛ˇ¸˝ˇ—Ü˛˛ˇ˚˛¸ˇ˛ˇ˘ˇº¢¯ˇ¯˝˛ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛¸ˇ˚}—˛ˇ˚˝¸ˇˇˇˇˇˇˇˇˇˇˇˇ˝˛˚˛˛Ù|¸ˇ˝˝ˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇ˙˛¯≠\ä≤ø˙¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛˛˝}◊˝ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛ˇ˛˛˛ˇˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÓh¬g%›ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ˛˝ˇ˝ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˝¸ßßˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇª∑˚˛ˇˇ˚ƒ≥˛ˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˝¸¸˝¸ˇ˛˝˙oÛ˝˛˛˝ˇ˛ˇˇ˚ˇ¸ˇx‰˛ˇ˝˝˝˛˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ¸ˇ˝“®˝˝˛˝ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛˛˛˛À°˝ˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˛˘˚¸˙˚˙¸ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛˛˛ÀØ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛˛˝¸ˇˇ˛˛˝ˇ¸˚Ùı˝ı˛ÙıÛı˝Îˇ˙ˇÒı˝ıÙ˝ÙÙ˝˝ÌÎ˛¸ı˚˛˝˝Ù˛Í˜˚ˆÙˆÙˇÏˇÛıÙ˙Îó/ ÊıÏÓÏıÙ˝˛ÚÚˆÛÙÌÓÌÏÓ¸ÔÏÈÙıÏˆ˜˝ÁÏË˝ÌÙÔÌÓÎ˛ÛÔÌˆı‰ÛÊÌˆÌÔÏÍı˝ˇ¸ˇˇˇ˛¸˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇ˝ˇ˛Ùu‚˝ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇ˛ˇˇ˛ƒ®˚ˇˇ˛¸¡≠ˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˚˙ÚÓˇ¯ˇ¸ˇ¨Œˇ˛¸¸˛˛˛ˇˇˇ¯ˇ¯ÇÎ¸˛ˇˇ˝˛˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚ˇ˝ˇ˘ÅÙˇ˝˝ˇ˝˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸¸˛˝s¯ˇ¸ˇ˙ˇˇˇˇˇˇˇˇˇˇ˛ˇˇ˛˝ˇˇˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇ˛˛|Ûˇˇ˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛˛ˇ˛˚˛ˇ‚öeoq`bkujcaks`~^uicakrlrk`sarjsu}tskljvauruÑ|iÜrujs+   k{ujl{vrj{utírr~ru{j{t~ÇãÄz{~å~É~{É~Ç{~zâz|}É}çá||ë|àÑope≤Êˇ˛¸˛ˇ˝ˇ˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ¸ˇ¸·®˝ˇ˝˝˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇø±˚˛ˇ˛¸º¥˛ˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝¸˙˚f^Ìˇˇˇ¸ÑÛˇ˝ˇ¸ˇ˝ˇ˝ˇˇˇ˜ˇ˙⁄}Áˇ˛˛ˇˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˙ˇ˝ˇÌÄ˛˛ˇ˛˛˛ˇ˝ˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˝ˇ˛ˇñ‹ˇ˛ˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛¸ˇˇ¸ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇˇ˛ˇÇˇ˛ˇ˘ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛ˇˇ˝∂qí—ˇ˛˝˙˘˙˘˙˘˘˚˙˙¯¸¯¸¯˙˘˚˙˚˘˘˙˙˚˘˚˚˚˘˚˙˙˘¸¯¸˘˙˙˚˘¸˘˝¯˙˙Ω    C˚˘˙˚˙˚˚˙˚˘¸¯˚˙¸˚˙˙¸˙˚˙˙˚¸˙¸˚¸˙˙˙˚˙˙˚˙˚˚˙˚˘˚˙˚˙˚˚˚˚¸˙˚˚¸˚¸ˇ˛˛Õ•{›ˇ˝ˇ˝ˇ¸ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇÔä¸ˇ˝˙˛ˇˇˇˇˇˇˇˇˇˇ˝˛ˇˇª®˚ˇˇ˛¸Ø∂ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˙¸˘Ô l˙ˇ˛¸Å˝ˇˇ˛ˇˇˇˇˇ˝ˇˇ˙ˇ˚ˇ‚o‰˛˛˛˝ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝ˇ¸º±˝ˇ˝ˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇ˝ˇˇˇˇˇ˝ˇ˝À•˝ˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇ¸¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˛˛˛˛Èé˙ˇ˝˛˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛˝˛˛˝Û{¨ˇ˛ˇ¸˝˝ˇˇˇˇˇˇ˛ˇ˛ˇˇ˛ˇ˛ˇˇ˛ˇ˛˛ˇˇ˛ˇˇˇ˛˛˛ˇ˛ˇ˛ˇ˛ˇ˝ˇ˛ˇˇˇ˛ˇ˛ˇˇˇ˙µ	   bˇˇˇˇ˛ˇˇˇ˛ˇ˛ˇ˛ˇ˛ˇˇˇ˝ˇ˛ˇˇˇ˛ˇ˛ˇ˝ˇ˛ˇ˛ˇˇˇ˛ˇ˛ˇ˛ˇˇˇ˛ˇˇˇ˛ˇ˛ˇ˛ˇ˛ˇˇ¸˝˚ˇ˝Ò~°˝ˇˇ¸ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛|¸ˇ˛˙˛ˇˇˇˇˇˇˇˇˇˇ¸ˇˇˇ¿∫¸˛ˇˇ¸µºˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˛˜ß   Ñˇ¸ÛÉ˛ˇˇˇˇˇ˛ˇ˛ˇ˝ˇ¸ˇ˚ˇ˘ÚÉπÔ˛˝˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚ˇ˜m‚˛ˇˇˇˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇˇˇˇ˝ê˘ˇ˚ˇ˛ˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇ˝˝˛ˇ˛πØˇ¸ˇ˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝¸ˇˇË|⁄˛ˇ˛¸˛˛˛˝˛˝˝¸˝˝˛˛˝˛¸ˇ˝˛˝˝˝˛˝˝˝˝˛˝˝˝˛˝˛˝˛˝˛¸˛˝˝˝¸˛˝˝˛˛˝˝˝˚ˇ±	   ì˝˝˝˝˝˛˝˝˝˛˝˝˝˛˝˛¸˝˝˝˝˝˛˝˝˝˛¸˛˝˛˝˝˛˝¸˛¸˛˝˝˝˝˛˝˝˝˛˝˝˝˝˝˛˝˝˚ˇ¸˛˝ˇˇıû°˝˝˝˛ˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇˇ¸äˆ˛˛˙˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ√∑˚ˇˇ˛¸¿∏ˇˇˇ˝ˇ˝ˇˇˇˇˇˇ¸˚˝˝ˇˇˇˇÙˇÏﬁø&    íÎÂé˚ˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇ™xØÛˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇˆu˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˘ë¸ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˝ˇ¸´‹˝ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˆˇ˚ˇÛÄÎˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇÙˇ˘ˇ˚ˇ˛ˇ˛ˇˇˇˇˇ˚˚˝˝ˇ˛ˇˇ˚˝ˇŒ  —˛˛ˇ˝ˇ˛˛˛˛˛˛˝ˇ˝˛˛˛˛˛˛˛˛ˇ˛˛˛˛ˇ˛˛˝˛ˇˇ˛˛˝ˇ˛˛ˇ˛˛˛˝˝˛˛ˇ˘ˇ˘ˇ˚ˇˇˇˇˇˇˇˇˇˇˇ™øıˇıˇ˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ®‰˛˛¸ˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ ≤˙ˇˇˇ¸ƒƒˇˇ˛˛˛ˇ˛ˇˇˇ˝ˇˇˇ¸˝ˇ˝ø|ÖÑùüc      õ›ö˝ˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇ˛˛¸˜˜À°}ìü—˘˝ˇˇˇˇˇˇˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝ˇ¸⁄¢ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˙Ü˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸˝ˇ˝ü”˝ˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇˇ£Ãˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ˘ˇ¸ˇ˝ˇˇ˝ˇ¸ˇ˝ˇ˝ˇˇ˛˛¸˛¸˛˝˚ˇˇöÚ˝˛˝˝˛˝˛˛˛˝˝˛˝˛˝˛˝˝˝˛˝˛˝˝¸˝˛¸˛˝˝˝˝˝˛˝˛˚˛˝˝˛˛˛˛ˇ˝˝ˇˇ˝ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇ˜àÈˇ˛ˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ†Ê˛˛˝ˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇπΩ¸ˇˇˇ¸¿¡ˇˇˇ˝ˇ˛ˇ˛˛˝ˇ˛ˇˇˇﬁàyÆÛˇ˝ˇˆv       çóˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛ˆgq%8ƒˇˇ„ÆtÖƒˇ¸ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚ˇ˘®Œˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˙õ˙ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˛ˇ¸ó‹ˇ˛˝˝˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇÙÉ¸˝ˇˇˇˇˇˇˇˇ˝˝˝ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛¸ˇˇˇˇˇˇˇˇˇ˛ˇ¸ˇ˝ˇ˙ˇ˛˚ˇ˛ˇÈËŒÁﬁﬁ‰‹Ñ!⁄€·Á⁄Á⁄ÁŸŸ›‚ﬁ‚›Î„‹€ËŸ‘Ÿ⁄Ë⁄‘Ÿﬂ—‚‘‚‘„‘€…’⁄…—‹⁄»„Í˝˝ˇ¸ˇ˙ˇ˘ˇ¸ˇˇˇˇˇˇˇˇˇ¸Ÿõˇˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇûÏˇ˛˝˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ¡¬¸˛ˇˇ¸æ±ˇˇˇ˝ˇˇ˛˛˛˛˝˛ˇ˜üìÒˇ˜˝ˇˇˇÚ2    	:8íˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇ˛ˆ7∑ÖﬁˇˇˇˇÙ¨qÔˆ¸˙¸˘Ùˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚ˇ˘ïÓˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˙Ü¸ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˝ˇ˝ü⁄˛ˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ®≥¯˚¸ÛeÚˇˇˇˇ˚˙˚¸˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛˝˝ˇˇˇˇˇˇ˝ˇˇ˚ˇˇˇ˚ˇ˛ˇ◊Üàëú†•ì§ò®†åèòñûöù´≠ö§ú£¨´§£¨¨£´≠≤´¥¨´¨≤≠¢≥£¨≤´≤¥´∫≥¨≥≤µ≤ø´ûäà¶ˇ¸ˇ˙ˇ˘ˇˇˇˇˇˇˇˇˇ˛ˇ¯~˘ˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ®‡ˇ˝˝˛ˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ√∂¸˛ˇ˛¸√ƒ˛ˇˇ˛ˇˇ˛˛˛˛˛˛Êx‘ˇ¸ˇˇˇˇˇˇÙty†∏◊Ïˇ˙‚üˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛˝ˇ˜Œˇ˘Eôˇˇˇˇˇ˚Ûj’¯—eÕ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝ˇ˚ì˙˝˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˘à˘ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˛ˇ˚ó€˛ˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚y˛˘‹( ñˇ˛ˇ˚˛˝˝˝˛ˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˚˛¸Ú´í‡¿ˇ˘ˇ˘˝ˇ˝ˇ¸˝¸¸†é¯˛ˇ˘ˇ˛˚ˇˇˇ¸¸¸˚˛˝ˇ˝˛˝ˇ˛ˇ˝˝ˇ˛˛˛˛˛˝˛˝ˇ˝ˇ˛˛ˇ˝ˇ¸ˇ˛ˇˇˇ˛ˇ˝ˇ˛˛ˇ˛ˇ¸ˇ¸˛˝ p€˛ˇ˚ˇ˚ˇˇˇˇˇˇˇˇ˝ˇ˘∞’ˇ˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÆÁ˛ˇ˝ˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ¬∑¸ˇˇˇ˝ ∑ˇˇˇ˝ˇˇ˛˛¸ˇ˛˝yÍˇ¸ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇÁõˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ˛Ì¬ˇˇa^ˇˇˇˇıˇˆ˚;7   Œˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇÛ˝˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˘à˚ˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇ˝¢À˝ˇ˛˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇ˚n˛˛ÒJ  .˚ˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇ˝˙¸ˇ¸k0ÿˇˇ˝ˇ¸ˇ˘ˇ˛¸bªˇˇˇ˝ˇ˛ˇˇˇˇˇˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ÙtŒ˘ˇ¯˛ˇˇˇˇˇˇˇˇ˚ˇ¸⁄üˇ˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ±⁄˛˝˛˛ˇˇˇˇˇˇˇˇˇˇ˛˛ˇˇ÷±¸ˇˇˇ¸À´ˇˇˇ˝ˇˇ˛¸ˇˇıá…˛ˇˇ¸¸ˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇÍüˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˛ˇ˜•ˇ˝A}ˆˇˇˇˇÈå0     ÷˘ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚ˇ˚¸Åˇ˚˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÒñ˚ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˝ˇ¸∞ƒ˛˛˛˛˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇ˛ısˇËA    Ω‰–ÿÛ¸¸˝˝˝˛ˇˇˇˇˇˇˇˇˇˇˇ˝˘˝ˇ…∂Êõ ”˛ˇ˙ˇˇ˙ˇ˚˚y«¸˝ˇ˝ˇˇˇˇˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛ˇˇˇ˛ˇˇˇ˛ˇˇˇ˛˛ˇ˛ˇˇˇˇ˝˚Úì…˝ˇ¸ˇˇˇˇˇˇˇˇ˚ˇˇÚû¸ˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¶Ÿ˛˝ˇ˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ‘∂¸ˇˇˇ˚¬¿ˇˇˇ˝ˇˇ˛˝˝˝¬™˛˝¸˝ˇˇˇ˛ˇˇˇˇ˛ˇ˚¸˘ˇˇˇﬁ¢ˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇˇ˛Ì •Åÿˇˇ˙ˇˇπ       Ê˚ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˙ˇ˘Ë©ˇ˙˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˙ê˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˛ˇ¸°‹˛ˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇ¸Á{Ò<     :xûånil∞Ûˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˘˛¸é˛˙Â’˛ˇ˜ˇ˚ˇˇ¸ñøˇˇ˛˝˝˝¸¸¸ˇˇˇ˘ˇˇˇˇ˝˛¸˛¸˝˝˝¸¸˛˝˝˛˝˛˝˝˝˝¸˝˝˝˝¸˝˝˛˝˝˝˝¸˝¸˝˝¸˛˛˛˝˛¸¸¸˝˙ˇˇ¸ÜÛ˝ˇˇˇˇˇˇˇˇˇ˙ˇˇ˛ëˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇß⁄ˇ˝˝ˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇÃπ¸˛ˇ˛¸≈ªˇˇˇ˝ˇ˜ˇ¯ˇ‚Ö˚ˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ˚˝˛ˇˇÎÜ˙ˇˇˇˇˇˇˇˇˇ˛˛ˇ˛˛ˇˇˆgAI≠ˇˇ˛ˇˇˇ¸Œ    Îˇˇˇˇ˛˛ˇ˛ˇ˛˛˝˛˝˛˝˛˝˛˝˝˛˝˝˝˛˛˝˝˛¸˛¸˛˝˝˝˝˛˝˛˝˝˝˛˝˛˝˝˛¸˝˚˝˛—®˝¸¸˝˝¸˛˛˛˛˝˝ˇˇˇˇˇ˝˝ˇˇˇˇˇˇˇˇˇ˙é˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˛ˇ¸ü”˝ˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÏu@      -ˇ˛¸˝˛ˇ’ï{¬˝˝˛ˇ˝ˇˇˇˇˇˇ˛˘˝˝ã˙˘·◊˝ˇÚ˙ˇ˘ˇ∏î˜ˇ˝ˇˇ˚ˇ˝ˇˇˇ˛ˇˇ˝ˇ˙ˇˇ¯ˇ¸ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇÏp˛ˇˇˇˇˇˇˇˇˇ¸˛ˇ˛à¸ˇ˛ˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇ†‡˛˝˛˝ˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇÀ∑¸ˇˇˇ˚À£ˇˇˇ˝ˇ˘ˇ˝ˇë”ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇÊò˙ˇˇˇˇˇˇˇˇˇˇ˛˛˛ˇˇ˛ˆ∆˝˚ˆ˚ˇˇˇˇ˘¸˙‡0    Òıˇ˚ˇÒ⁄»æ…  ≥¡´∏¬µ¡µ¡∂∏´∞∞¿∏∂π¥π∏¿∞ø∞∂©∫¨≤¨±´π±µ∫´ß¨∫®£∫Ém°†®¢†≠®´Æ“È˛¯ˇˆˇ˘ˇˇˇˇˇˇˇˇˇˇˇ˙ë˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛˝ˇÛó¡˛ˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ‹        ÷¸˚ˇˇ˚˛˛˛êc„˛˘ˇˆˇˇˇˇˇ˝˙¸ˇ∏ªÌã ◊˝ˇ˘˚ˇ˙ˇÜÙ˙ˇˇÓzDoƒÍj“˙”wœÅ»ˇâK<Áˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˝ˇà˛ˇˇˇˇÏÏˇˇ¸ˇˇ˛ñ¸˝ˇ˝ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇß“˝ˇ˝ˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ’™˙˛ˇˇ¸æ≤ˇˇˇ˝˛ˇˇˇÙeÒˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇ˛ˇˇˇÏç˙ˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˛ˇ˛&—ˇ˛˘˛ˇˇˇ˛ˇ˜˝˝ÏW  $‡ˇ∆ìÖtô∫∞®ß∞±ßØ∂ÆπÆ∫æÆÆ∞ΩµØΩ µ∏Æ√πº∏≈ ºª∏—…√…ºº∏√¿ƒ…º¬»ª¡¡“»∫¿¬ À æüçÇïÀˇˆˇ˝ˇˇˇˇˇˇˇˇˇˇ˙à˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˛˛¸®Ã˝ˇ˝˝˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ÷◊≈®fT@&í˛ˇˇˇˇ˚¸˝˝„Öû˝ÙˇÙˇˇˇˇ¸˘¸ˇÏX0 ◊ˇˇˇ¸ˇˇıê˛˝˛ˇ^)íe0ƒC:‡CIË#†ÊOKòˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇÕ™˚˚ˇˇ‰+ïˇˇˇˇˇ˜òˇˇˇˇ˛ˇ˛˛˝ˇˇˇˇˇˇˇˇˇˇ®Ÿ˛˛˝˛ˇˇ˝˛˝˝ˇˇˇˇ˛ˇˇ˛√∂¸ˇˇˇ˝¡Æˇˇˇ˝˛ˇ¸ˇ–°˚ˇˇˇˇˇˇˇˇˇˇˇ˚¿•Í‹±ıˇˇˇÁò˚ˇˇˇˇˇˇˇˇˇˇ˛˛˛ˇˇˇˇ˘˙˙¸˝ˇˇˇˇˇ˛˝˚˚˘˙u 6◊^≤ˇˇ˝¸¸˚˚¸¸¸¸˝˚¸¸˝¸˝˝¸¸˝˝¸¸¸˝˚˛¸˛¸˛¸˝˝˝˝˝˝¸˝˝˝˝¸˝¸˝˝¸˛˝˛¸¸˝¸¸˝˝¸¸¸˛˝ˇ„ñjˇ˚ˇ˚ˇˇˇˇˇˇˇˇˇ˙ê˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˛ˇ¸ñ ˛ˇˇ˝ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ€Éˆ˘˙Û¯Ù¸˚ˇ˝˝˛ˇˇˇˇ˝¸¸ˇ√fˇÔˇ˚˝ˇˇ˝˝˚˝¸˚∂°πœˇˇ¸˛˝ˇ¿≠¸˝˛ﬂ¬Ìıx¡∫AÚ· ïÈ–ò^˜ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇ˘ˇ˜ë˘˝ˇÏ#.ˇˇˇˇˇˇÖˇˇˇ˛˛¸˛ˇˇ˛˝ˇˇˇˇˇˇˇˇü⁄˛˛˛ˇˇˇ˘˘˙˝ˇˇˇ˝˛ˇˇˇ∂±¸˛ˇˇ¸º´˛ˇˇ˝˛ˇˇˇ± ˛˛ˇˇˇˇˇˇˇˇˇˇî"B1 ÀˇˇˇÛî˙ˇˇˇˇˇˇˇˇˇˇ˛˛˛ˇˇ˛˛˚˚¸˝ˇˇˇˇˇˇˇ˛˝¯¸˙˛•q¯ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˆı_Ó˚ˇˇˇˇˇˇˇˇˇˇ˘ï˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸˝ˇ¸ü”˝ˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇﬂã˘¸˙˝˝˛ˇˇˇˇˇ˝˛ˇˇ˛¸˛˛ˇ¸‘cÙˇ¸ˇ˛˛˝˝˛˛˝ˇˇŸˇ˚ˇ˛˛ˇ¨ø˝˛˝«	-P#DÇˇ} ÉˆÒ†È◊Ò4Êˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˝˚Ö¸˘„&
 ∞˜ÚÊ˛ÚáÓ¸˙˚¸ˇˇˇˇˇ˝ˇˇˇˇˇˇˇˇß·ˇ˛˝ˇˇˇ˚˝˚ˇˇˇˇ¸˛ˇˇˇÃ∂˚˛ˇ˛¸Ω≤ˇˇˇ˝¸ˇˇ˛õÔ˛˛ˇˇˇˇˇˇˇˇˇ˜<Ü˜ÏYˇˇˇˇËè˘ˇˇˇˇˇˇˇˇˇˇ˛ˇ˛˛˛ˇˇˇ˚˝˝ˇˇˇˇˇˇ˛ˇ¸ˇ˘ˇˇ∂êˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇ˝ˇ¯ÌcÂˇˇˇˇˇˇˇˇˇˇ˙á˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˛ˇ¸üÃ˝˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÏÄ˙¸¸ˇ˛ˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛ˇ˝ˇ˙˘o—˘˛ˇˇˇˇˇ˝˛ˇˇˇÏí‚ˇ˛ˇ˛˝ˇ°œˇˇ˚Í ó∑¿&ÅÓ83ÓÙîŸ–˙k•ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇ˝¸ï˝÷'   &ÑÜèâ~H|ïÃÓ˚¸¸˚ˇ˛ˇˇˇˇˇˇˇˇˇßﬂ˝˛˛˛ˇˇˇˇˇˇˇ˛ˇ˛˛ˇˇˇÃØ˚ˇˇˇ¸∏π˛ˇˇ˝˙ˇˇˇÖÏ˙ˇˇˇˇˇˇˇˇˇˇ˚yt¶5Z˝ˇˇˇËö˚ˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ›|ˇ¯ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇ˛ˇ˘ˇ˜vÙˇˇˇˇˇˇˇˇˇ˘ê˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸˝ˇ˝°€˛ˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇﬁÅˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛¸˛ˇ˙ˇä≠˝ˇˇˇˇˇ˛˛ˇ˛ˇ˙ˇ˝ˇˇˇ˛˚ˇñÿ¸ˇ˚˛H3»å∑ ∞#w‹áº íˆ£E˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¯ˇıˇÖ›&     €˘˘¸Óí¯Úùrxﬂ˛ˇ¸ˇˇˇˇˇˇˇˇˇˇû”˝ˇ˛˛ˇˇ˚ÓŸÊ˝˛˙˝˝ˇˇˇ’©¸ˇˇˇ¸ƒºˇˇˇ˝˙ˇˇˇúŸ˘ˇˇˇˇˇˇˇˇˇ¸˛ÓäX> h˛ˇˇˇ·ï˙ˇˇˇˇˇˇˇˇˇˇ˛˛ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÉÈˇ˝ˇˇˇˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇ˛˝˘ˇ¸ˇˇ† ˇˇˇˇˇˇˇˇˇ˙á˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇ¸ü”˝ˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇÁèˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇ¸¯˛˛ˇûn˜˛ˇˇˇˇˇˇ˚˛¯ˇˇˇˇˇ˛¸ˇñ“˝ˇ˘˙ÃM2ôÈ6´Ù®@ÿH§C !˙Ÿ‚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˜ˇˆˇm6       Ü˝ˇˇ˚í˚ˇ˝˛›Ñ|√ˇˇ˝ˇˇˇˇˇˇˇˇüÿ˛˛˝ˇˇˇ…%^˘ˇ¸˝ˇˇˇ√∑¸ˇˇˇ¸π¡ˇˇˇ˛ˇˇˇ˝∆Ø¸¸ˇˇˇˇˇˇ˛ˇˇ˜ådÒÚAy˛ˇˇˇÁö˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛¸Èêˇ˛ˇ˚ˇˇˇ˛ˇ¯ˇ˜ˇ˙ˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇ˛¸ˇˇˇ˝ˇıˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇ¸ˇˇˇ¸ˇˇˇ˛˚˛ˇÏsˇ˝ˇ˛ˇ˛ˇˇˇ˘â˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇ˛ˇˇ˛ˇ˝ˇˇ˛ˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇ˛˝˛ˇ¸°“˝˛˛˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ‹ë¸ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇ˛‹`ß˝˝¸˝ˇˇˇˇˇˇ˛ˇˇˇ¸ÍÅ)”ˇˇ˙ˇˇˇˇˇ˛ˇˇˇ˝ˇˇˇ±ÌÎ “ˇˇH±ˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˛˙wàkcJ!  ?¸ˇˇÛõ˚ˇ˝˝˝ˇˆósÔ˛ˇˇ˙ˇ¸ˇˇˇü€˛˛˛˝ˇˇ(Vﬂ—©ˇˇ˝ˇˇˇ∂®¸ˇˇ˛¸æƒ˛ˇ˛˝ˇ˝ˇˇËi¸ˇˇ˛ˇˇˇˇˇ˝˝ˇ›=;»˛ˇˇˇ€†˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˛ˇ˝∞’ˇ¸ˇ˚ˇˇˇˇˇ¯ˇ¸ˇ˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇıˇÙˇ¸ˇˇˇˇˇˇˇˇˇ˚˛ˇ˛ˇˇˇˇˇˇˇˇˇ˝ˇ¸ˇ˛ˇˇˇ˛ˇˇˇˇ˛˚˛ˇ¸|ˇ˝ˇ˛ˇˇˇˇˇ¯á˙ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛˛ˇ˝ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˛ˇ¸®‘˝˛˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚ˇˇ‚y˝˝˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛˛˛ˇ˛ˇ©{t∂Ù˚¯˘˚˙˙˚˛ŸÆsÜÀìÕ˛ˇ˛ˇˇˇˇˇˇˇˇˇ¸ˇˇˇ°˙Éıˇˇûp¯ˇˇˇˇˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¯Ç˙˚˙˘˙˙ÚﬂŒ˝˛ˇÛò¸˛˝ˇˇ¸˝¸Êxª˛˛ˇˆˇ˛ˇˇ†ﬂˇ˝˛ˇˇÌ Ö¿∆ùØ˜˝˛ˇˇˇ√Ω¸ˇˇˇ˝…Æˇˇˇ˛˝ˇˇˇ¸ÉÊˇ˝ˇ¸ˇ˝ˇ¸ˇ˙¸ˇˆ§û€˜˛ˇˇˇÊö˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˛ˇ˚nı˝ˇˇ˚ˇ˝˛ˇˇ˜ˇ˚ˇ˛ˇ˛ˇ˝ˇˇˇ¸˛ˇ˛ˇ˛ˇˇˇˇ˛ˇˇˇ˚ˇ˛ˇˇ¸ˇ˘ˇ˝ˇ¸ˇ˝ˇ˛˛ˇˇˇˇˇˇ˝ˇ˝ˇ˛˛ˇ¸ˇ¸ˇ¸ˇˇˇˇ˚˛ˇ˝üÎ˝ˇ˛ˇˇ˛ˇˇ˘â˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇ˛˛ˇˇ˛ˇˇ¸˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˛ˇ˝ò”˝ˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇ⁄â˙ˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇ˛ˇ˛˛ˇÔ≤wikëõÅÅclÇª˚˙¢ ˛ˇˇˇ˛ˇ˝ˇ˛ˇ˛ˇ¸ˇ˛ˇÿÚ¸ˇˇ˛ˇÓΩ˛˛˛˛˛ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚ë˝ˇˇˇˇˇˇˇˇ¸ˇˇ¸ù˚ˇ˛ˇ˝ˇ˚˛˛˙Ö∫ˇ¸ˇÛˇ¸ˇ∞”˛¸˛˛ˇ˘Sˇˇ˛ˇˇˇ’±˚ˇˇ˝˚ƒºˇˇˇ˝ˇ˙ˇˇˇ…≤˛˛˚˛˝ˇ˛ˇˇˇˇ˝¸˛˙˝˙˛ˇˇˇıì˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˝ˇˇ¸u˝˛ˇ˛¸˛˚ˇ˛ˇ˚¬¿Îˇ˛ˇ˙ˇˇˇ˝˙˛ˇ˛ˇ¸¸∏Ø˜˛˝˛˛˛¸ˇ¸ˇ˝ˇ˙¸˛˝ˇˇˇ˝˛¸¯˘˘¸¸˚˝ˇˇˇ˛˙ˇ˘ˇ¯ˇˇˇˇ˛˝˛ˇ¸∂¡˝ˇ˛ˇ˛ˇˇˇ˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇ˛˛˛ˇ˛˝˛ˇ˛˝ˇ˝ˇˇˇˇˇˇˇˇˇˇˇ˛˛˛ˇ˚ü⁄˛ˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇ„â˝˛˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛˛˛ˇˇ˝¸˚˙¸˚˛ˇ·—‡Â¸˜¯¯˙˚˝õ÷ˇˇ˝¸˛˝˛˛ˇˇ¸ˇ˛ˇ˚˝˚˝˚˘ˇ˚ˇ˘ˇ˚ˇ˝˚˛¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˘é˚˝˛˛˛˝¸¸¸˛˛ˇÙä˙ˇ˛˝ˇ˛ˇ¸˛¸˝í±ˇ˘ˇÛˇˇ†Á˛ˇ˝ˇˇˇã‰ÏBÑ˘ˇ˝˛ˇˇÃΩ˚ˇˇˇ¸∞∂ˇˇˇ˝˛ˇˇ˛˛˝xÒ˝˛˛˛˛˝ˇˇˇˇ¸ˇ˛ˇˇ˚˝ˇˇˇ€£˘ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˛ˇÎx˝¸ˇ˝˝˝˝ˇˇˇ¸#5«ˇ¸ˇ¸ˇ˚˝˛˝ˇˇˇ˙˚ˇÏ5  ˜ˇıˇıˇˇ˝ˇ˙ˇ¸˛ˇ˛¸˚˚ˇ˝ˇ¸˛ˇˇ˝ˇ˙˝˙˚˛˝ä’˘ˇ¸ˇˇˇˇ˝˛ˇ˝À°˝ˇ˛¸˛ˇˇˇ˘ä˙ˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˝˛ˇ˛˛¸¸˝¸˙˛ˇˇˇˇˇˇˇˇˇˇˇˇ˛¸˛ˇ˝ó‹˝ˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇ€û˚ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇˇ˛˛˚˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛˚ú‘ˇ˛¸˝˝˛ˇˇˇ˝¸ˇ˛ˇ˛˚ˇ˝ˇˇ˘ˇ˘˙¸Ò˛˝˛˛ˇ˝ˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˙Å˙¸¸¸˝˚˙˚˙¸˛ˇ˝å˚ˇ˝˛¸ˇˇˇ¸ˇ˛˛ÆÇˇ¯ˇ˝˝ß‚˛¸˛˛ˇˇùnR-Îˇˇ˝ˇˇˇ∂¡˚ˇˇˇ˙≈ªˇˇˇ˝ˇ˛ˇ˚˛ˇŸj˛ˇˇ˚ˇ¸ˇ˛ˇˇˇ˛ˇ˛˛˛ˇˇˇˇÏõ˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇ˛Ìu˝˝ˇ˝ˇ˙˛˛˚¯¸·˚ˇıˆ˙˛◊Ë¸˝ˆ˛„‰Ì˘ˇÁßÓˇˆˇÌˇˇ˘Ï÷Û˜ˇ˙Û‰„¯˚˙ˇˇˇˇˇ¸ˇÈ›Ω¸˜æbˇ˝ˇ¯ˇˇ˛ˇ˛ˇ˝”û˝ˇ˛˝˛ˇˇˇ˘Ä˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇ˛¸˛˛˝”PÙˇ˛˘˛ˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˝ˇ¸ü⁄˝ˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ‰ë˝ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˛ˇ˛˛˛ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛˝£‘ˇˇ˛ˇˇ˛ˇ˛ˇ˛ˇ˛ˇˇˇˇˇ˝ˇˇˇˇ¸˚îàˇ˛ˇ˝ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˘ï˚ˇˇ˛˛˛¸˝˝˝ˇˇ¸ë˚ˇ˛˛ˇ˛ˇ˛ˇ˙ˇˇ¯ªyˇ˝ˇ˚üË˛˛¸˛ˇˇˇ©rv”ˇˇˇ˛ˇˇˇÃΩ˚˛ˇ˛˚Ω©ˇˇˇ˝ˇˇ¸ˇ¯ˇ˚¿í˚ˇˇ¸˛˝ˇˇˇˇˇ˛ˇˇˇ˝ˇˇˇÏ™˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝¸¸ˇÏÖ˝˛ˇ˝´g¸ˇéYÏ‰˚ô;˛⁄6j˙ˆåæˇˇk1ˇ˘˜!Ã˚Å#¿ˇ«-hˆ˛¸˝˛˙ˇˇ˝^8‰¯PM¸ˇˇ¯ˇˇ˛ˇ˛ˇ˛‹û˝˛˛˚˛ˇˇˇ˘˙ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇ˛¸ˇˇ˛ΩÌˇ˝ˆ˛ˇˇˇˇˇˇˇˇˇˇˇˇ˛¸˛ˇ¸ü⁄˛˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇ‡û˙ˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛˛˛ˇ˛ˇˇˇˇˇ˛˛ˇˇˇˇˇˇ˛–Í˛˚ˇ¸ù÷ˇˇˇ˚˛˝˝˝˝˝˝˛ˇ˘ˇÙˇ˚˚ˇ˝¸˙ˇÏ∆	Ê˛˝˛˝˝ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˙â˝ˇˇˇˇˇˇˇˇ˝ˇˇˆê¸ˇ˝ˇ˝ˇˇˇ˝ˇ¸˚ˇ¯·|Ì¸˝òÁ˛˛˝˛ˇˇ˛¯˛ˇˇˇˇˇ˝ˇˇ˛Ã∑¸ˇˇ˛¸¡≠ˇˇˇ˝ˇˇ˚ˇ˙ˇ˝ˇ¿zÚ˝˛ˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇÁô˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˙¸ˇÎu˝ˇˇˇ£G˘ˇ<Û÷¯ë˘DFÍ’ë∑ ±{#ÏÒú&◊¸Ò√µ≠Ùi3ÎBVÌ≈äóRbPOQ¨Ø—Ê6m˜Õ¿˛˚ˇ˝ˇˇˇˇ˛ˇ˝›ñ˝ˇ˛˘˛ˇˇˇ˙â˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇ˛˝˛˛˛¬‚ˇ˛˘˛ˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˝ˇ¸°”˝ˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ„à˚ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ˛˛ˇˇˇˇˇˇˇ˛˛˛˚ˇˇ¸O<ıˇˇˇ®›ˇˇˇ˝Ùó[pÊ˛Ÿóˇ˝Õ≠ˇ›pÃƒ≠˘ˇˇ˜1è˚∫£˚ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˘ä˝ˇˇˇˇˇˇˇˇ˝ˇˇ˛£¸˛˛ˇˇ˛˛ˇˇˇˇ˚˚ˇ˝ÏÇ∫ˇü‰˛ˇ¸ˇˇˇ˛˝ˇˇˇˇˇˇ˝ˇˇˇ¿ª˚ˇˇ˛¸ƒ≤ˇˇˇ˝ˇˇˇˇˇˇˇˇ˛—nÿˇˇˇ¸˝˝˛˛ˇ˛¸˝¸ˇˇˇ–á˘ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸˝ˇÌ|˛ˇˇ˝ê;Ú¸z:È‡Ùí0ﬁ∞Ù¯\Bo2ˇ˜◊ÿÎ∏_íˇ„¶k<¸Ù’ …–˚ˆL[´ëåyÅ–RI˚˛ÄÓ˛˚ˆˇˇˇˇˇ˛˝˛ˇ˝ƒ®¸ˇ˛˝ˇˇˇˇ¯dﬁˇˇˇ¸¸¸˝¸ˇˇˇˇˇˇˇ˙ˇˇˇ∂Î˚¸ˆ˝ˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˛ˇ¸ó⁄˝ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚ˇˇÈä˝˛˝ˇˇˇ˛ˇ˘Îﬂ¬Œ˙ˇ¸ˇ¸˛ˇˇˇˇ˛ˇˇˇ˚˚¸˛ˇˇˇˇˇˇˇˇ—  PÍˆÛóÿˇˇˇ¸W!bL⁄ñˇˆà2ˆh$∑p4ˇıˇ–3˚º5Óˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˙é¸ˇˇˇˇˇˇˇˇ˝ˇˇ˝ë˚ˇ˛ˇˇˇˇˇˇˇˇˇˇ˛¸˛ˇΩÖw‰˛˙˛¸ˇˇ˝¸˛ˇˇ˛ˇˇ˙ˇˇŸW¬¸¸ˇˇ˚±¿ˇˇˇ˝ˇˇˇˇˇˇˇˇ˛ˇÚôåÔ¸¸ˇˇˇ˝˛˛ˇˇ˙˝€ãY°˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˛ˇ‚w˚ˇˇˇ~Gı˛}9‰ÈˆÇ4ƒ Ã¯ˇk9UCˇˇÏ —Ò«™DˇÂ´ZQ˛˛◊¶ Â˛ˆ\Q€Œ÷Ω∆«·+r˝ˇ¢Ëˇ¸ı˛ˇˇˇˇ˛˝˛ˇ˝À°¸ˇˇ˝˛ˇˇˇ˙lÉiÎ¸¸ˇˇˇˇ˛˛˝˝ˇˇˇ˚ˇˇ˛≠Êˇ˚ˆ˚ˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˝ˇ¸ó‹˝ˇ˛˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ’õ˛ˇ˝ˇˇˇˇˇÌxÛˇˇˇˇˇˇ˚ˇˇˇ˚ˇˇˇ¸¸˚˚˙˘˜ˇˇ˛@   ~˙¸ç“ˇˇˇ€ ŒÏ˘f∞Å&˚ˇÄ<¯H_ˇv<˚ˇˇt/	”, ˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˙â¸ˇˇˇˇˇˇˇˇ˛˛ˇÊ®˙ˇ˝ˇˇˇˇˇˇˇˇˇ˛ˇˇ˝˛˝ÛgS†˝˝˛˝˚˛˛˝˚¸˚˝˝˝∏pñ¢æ˝ˇˇˇ¸ƒ≤ˇˇˇ¸ˇˇˇˇˇˇˇˇ¸ˇˇˇÿ≤É•‡˘˙¸˙˚˘·´ÇäÀ‰ñ˛¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˛˛Êç˝˝ˇˇÜ¯¯o>”ﬂˇà ˆíˆ˜:gçÍÛƒÈÂ∂⁄%Âˆ∫~Û˘∫ ŒìˇÎ>|Å"&-í3uˇˇ∏ ‹ÏÈˆ˚ˇˇˇˇ˛˛ˇˇ˝Ãü¸˛˛˝ˇˇˇ¸¸Ñ˚Ôè}Œˇˇˇ˙ˇˇˇˇˇˇ¸˚˛ˇ¸h ñ¯ˇ¯ˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇ˚ç⁄˛˛˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇ‡ç˚ˇ˝ˇˇˇ˘˛◊zÚü√ˇˇˇˇˇ¸ˇˇ˛˛ˇ˝ˇˇˇ‰¢yÑ|é}àc    ≠ˇöÃˇˇˇ¡Ub^\ßï#ˇˇÑ:˝QnˇrH¸ˇ˙$ë<|ˇlèˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˙é¸ˇˇˇˇˇˇˇˇ˝ˇˇˇî¸ˇ˛ˇˇˇˇˇˇˇˇ˛ˇ˛ˇˇˇˇˇ†«ÆtÖäÀÓÔÙÌ‹Ÿ¡ózÄß˝ˇ∫∂¸ˇˇ˛¸π≠ˇˇˇ˛ˇˇˇˇˇˇˇˇˇ˚¸˝˛ˇ˝“ß|lsa_ÖëπˆˇˇÂó¯ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˝ˇ„Ä˛ˇˇˇå Lë!w¸$Á›Qãäóp€7å%cˇ¯»˝eíåL¨Gsu˝önX◊˝ˇ˙¯˚˚¸O_ˇˇ¢ËQS˝ˇˇˇˇˇˇ˛ˇˇ˝”ó¸ˇ˛˝˝ˇˇˇˆ}˚ˇˇ˛ûwÃˇˇ¸¸ˇˇˇ˛˙¸˛ˇ˝D Sˇ˛˛¸ˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˝˛˝ó”˛ˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇÊÜ˝˛˛ˇˇˇ¸ˇ‡÷¸Ô õˇ˝ˇˇ˙ˇ˝ˇˇˇ˝ˇˇ¡Ts‘ˇ˝˚ˇˇ˙t     ÿô”¸ˇˇ—iéè+säˇÇ=˚]fˇvB¯ˇ¬›Ñ˛∆O˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˘ì˚ˇˇˇˇˇˇˇˇ˝˛ˇÔ†˚ˇ˝ˇˇˇˇˇˇˇˇˇˇ˛˛˝˛˛˛ú‡˚ˇ¸Á≠Åä{zÖô§Êˇ¸ˇ˝ˇ¥ƒ˚ˇˇˇ˚∂ªˇˇˇ˝ˇˇˇˇˇˇˇˇ¸ˇ¸ˇˇˇˇˇ˝˝¸˛Ô¸˚ˇˇˇˇˇ›¢˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˛ˇÊtˇˇˇˇú0ÑSé˛‰/ÿÊ7õ˜∞ju–ˇˇ‚á^îˇÁ∫Òüyo	c‡€dª¯ˇıÆv~Îˇˇ˝ˇˇˇˇˇà(ÒÙ_J˘≈¬¸˝ˇˇˇˇ˛˛˛ˇ˝À†˝ˇ˝˝˛ˇˇ¸¸â˚ˇˇˇˇ¯©u¶Ûˇˇ˜ˇˇ¸ˇ˛ˇ¸≤—˚ˇ˜ˇ˘ˇˇˇˇˇˇˇˇˇˇˇˇ¸˛ˇ¸ó⁄˝ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇ“î˚ˇ˝ˇˇˇ˛ˇÊ÷ˇÛéˇ˛ˇˇˇ˙ˇ˝ˇ˝ıóÑ¢ˇˇˇ˙ˇˇˇˇ      "É—ˇ˝ˇ˘.nÂ§»í£÷<\Î8QÔní›tH˘—’ÎEﬁˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˙è¸ˇˇˇˇˇˇˇˇ¸ˇˇˇé˝˝˛ˇˇˇˇˇˇˇˇˇ˛ˇ˛˛˛˝¸õ‰ˇ˛˛˝ˇˇ˚˛¸ˇˇˇˇˇ˝ˇˇˇ¥ª¸˝ˇˇ¸Ø∏ˇˇˇ˛ˇˇˇˇˇˇˇˇˇ¸ˇ˛ˇˇˇ˝ˇˇˇˇˇˇˇˇ˝ˇˇˇﬂ¨˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˚˝ˇ‚Å˙ˇˇˇyFıˇˇˇÎ≈ˇÖ€ˇˇˇˆˇˇˇˇ¸ˇ˙ˇÎ◊ª˛È<⁄è˛ˇ˝ˇ¸ˇÙˇˇˇˇˇˇˇˇˇˇˇˇˇı(5EŒˇˇ˝ˇˇˇˇˇˇˇ˛˝ˇ˛”´˚ˇ˛˛ˇˇˇˇ˘àˇˇˇˇ¸ˇˇˇƒb§Ó˛ˇˇˇˇ˛ˇˇÊ˛ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇ˛¸˝ˇ˚å›˛˛ˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇÀë˝ˇ˝ˇˇ˛˝˘„ ¢¸¡®ˇˇˇˇˇˇˇˇˇ≈dæˇˇ˛˛ˇˇˇˇˇˇü       „ˇˇˇˇ∆yˇì) øy
 áw9I#üˇ˝;ä˚q´˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˙í¸ˇˇˇˇˇˇˇˇ˝˛ˇÊñ˙ˇ˝ˇˇˇˇˇˇˇˇˇˇˇ˛˛˛˛˛ôÛˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝≤ƒ˛˛ˇ˛¸∑¬ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˝ˇˇˇˇˇˇ˝ˇ˛ˇˇˇˇ˛Êö˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˛ˇÂ|˝ˇˇˇ™i˘ˇˇˇı2Õ—Hˇˇˇˆˇˇˇˇˇˇ¸ˇ÷*œˇˇQŒmºˇ˛ˇˆˇ˜ˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ’zeºˇ˚ˇˇˇˇˇˇˇˇ˛˛ˇˇ¸Ã®˝ˇ˛˝˛ˇˇˇ˚ä¯ˇˇˇˇ˝ˇˇ˛ˆ±jz‘¸˝ˇ¸ˇ˝ˇ¸‹˙˘ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˛ˇ˚Ö“˝ˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇÕú¸ˇ¸ˇˇˇˇ¸”a#3ˆˇˇˇˇˇ¸ˇ¸¨sÁ˛˛˛ˇˇˇ˛ˇˇˇˇ’®¨´¨æ…ﬁ‘k—ˇˇˇ˜ˇ «ˇ˝¯¸Ëæﬁˇ·HXÔÛ¯Óﬁ„ˇ˘¯˜Ôˇ´Cˆˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˘ñ˚ˇˇˇˇˇˇˇˇ¸ˇˇˇá˝˛˛ˇˇˇˇˇˇˇˇ˛˛˛ˇˇˇˇˇé‡ˇ˝ˇˇˇˇˇˇˇˇˇˇ˝˛¸ˇˇˇ≤¬ˇˇˇˇ˚µ¥ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇ˝ˇ¸ˇˇ¸¸¸˝˝¸˚˚˝ˇˇˇ‚ï˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˝ˇÊÖˇˇˇˇ˙˝˜˙ˇˇ˜ˇˆˇ˝ˇÔˇ¸ˇıˇˇˇˇÓˇÒˇıˇˇˇ˚ˇ˛ˇˇ˝˙ˇÛˇÁˇÛˇ¸ˇ˛ˇ˝ˇˇˇˇˇˇ˘ˇˇˇ¸ˇ˝˜˛˙ˇˇˇˇˇˇˇ˛˛˛˛‘óÛˇ˛¸˛ˇˇˇ˚ñ¸ˇˇˇ˛¸˚˚˛¸ˇ˝˜´ûÓ˝ˇ˝˛˛˚ˇ˙ˇ˚ˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇ˚é“˝ˇ˛˝ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇÁû˚ˇ¸ˇˇ˙ˇ˘€ ™Üîˇ˛ˇ˚ˇ˛ˇ›nØˇˇ˙˝¸¸¸ˇ˛˛˛ˇˇˇˇˇ˛ˇˆ˜˘¯ò”ˇˇˇˇˇˇˇ˚ˇˇˇˇ˝ˇ˘ˇÒï°ˇ¸ˇ˛ˇ˘ˇˇ¯ˇÒˇ‡ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˘è˚ˇˇˇˇˇˇˇˇ˝˛ˇÙë˚ˇ˛ˇˇˇˇˇˇˇˇ˛˛ˇˇˇ˛ˇˇñÍˇˇ˙˛ˇ˛˙˙˝˝˝˛˛˛ˇˇˇˇ≈æ˝ˇˇ˛¸∑π˛ˇ˛˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇÊ¢˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˝ˇÍÇˇˇˇˇˇˇˇ˝ˇˇ˚ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇ˛‰°¸ˇ˝˝˛ˇˇˇ˙à˚ˇˇˇ˛ˇˇˇˇˇˇˇˇ˝˝‹mz‚¸˚ˇˇˇˇ˝˝˚˘¸˛˛ˇˇˇˇˇˇˇˇˇˇˇ˛è”˝ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ„í˚ˇ¸ˇ˚ˇˇ˘‡÷¯˙¸˛ˇˇˇˇˇ–b“ˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇáÿˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¶Êˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛î˛ˇˇˇˇˇˇˇˇ˝ˇˇÙì¸˛˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇûÎ˛˛¸˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ∂¬˚ˇˇˇ¸º≥ˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ„ì˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˝ˇÌÖˇ˛ˇ¸ˇˇˇˇˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇ˝Àü˝ˇ˛¸˛ˇˇˇ˙Ä¸ˇˇˇ˛ˇˇˇˇˇˇˇˇ˝ˇˇ˛·övØÛ˚˚˚¸˛ˇˇˇˇˇˇˇˇˇ˚ˇˇˇ˛ˇˇ˚†Ÿ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ⁄5ÖÎ˛˛˝˚ˇ˚ˆe˜ˇˇˇ˚¸˙¸ÛêÄÌˇˇ˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇäﬁˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ë˛ˇˇˇˇˇˇˇˇ˝ˇˇ¸ã˚˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇíÁ˛ˇ¸ˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ™ƒ˚ˇˇˇ¸∫¿ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ“´˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˛˛⁄óˇˇˇˇˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇ˛¿¢¸ˇˇ˛˛ˇˇˇ˘ê˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇ˛˛˛˛˚˙ø~|¡˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ˛¸˛ˇ˝çÂ˛˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇ’õ∆t•ˇˇ˚ˇ¸ˇˇˇˇˇ˝ˇˇˆïs“˚¸ˇ˘ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇí›˝ˇ¸ˇˇˇˇˇ˛ˇˇ˛ˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇ˛ˇ¸ˇ˛ˇ˛˛ˇ˛ˇ˛ˇ˛ˇ˛˛ˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇ˝ˇ˛ˇˇˇˇˇˇˇ˙ì¸ˇˇˇˇˇˇˇˇ˝ˇˇˇã˙ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇñÎˇ˛˝˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ≠ ¸˛ˇˇ˚∂ƒˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇˇ‰õ˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˝ˇÊçˇˇˇ¸˛¯Û˚˙ˇˇ˝ˇ¯ˇˇˇˇ˙˛ˇ¯ˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˛ˇ˝Ãü¸ˇ˝˝˛ˇˇˇ˘˚ˇˇ˛˛ˇˇˇˇˇˇˇˇ˝ˇ˛ˇˇ˝˝˚ˇ˛øëÉπÙˇˇˇˇ˝ˇˇˇ˛ˇ˝˚˚˝ˇ˛ô⁄˝ˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇ⁄ë˚ı¿âé•€Ïˇ¸Û˝Á∆ç}v…ˇ¸¸˝˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇ˝ö’ˇˇ˚˝˝˛ˇ˛˛˛˛˛˝˛˛˛˛˛˛˛˝˝ˇ˝˛˛˛˛¸ˇ¸ˇ˝˛ˇ˛˛ˇ˝˛˛˛˝˛˛˛˝ˇ˛ˇ˛˛˛˛˛ˇ˝ˇ˛˛˝˛ˇ˛ˇ˛˛ˇˇˇˇ˛˙é˚ˇˇˇˇˇˇˇˇ˝ˇˇÚô˚ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ†Ìˇ˛˝ˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇˇªæ˚ˇˇ˛˝√øˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇÊô˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˚˝ˇÎxˇˇ˘ˇ¯Àhc°ó∞˜˛ù°Õôı”mf£˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˝‘ó˝ˇ˛¸˛ˇˇˇ˘í˙ˇˇˇ˛ˇˇˇˇˇˇˇˇ˝¸ˇ˛ˇˇˇ˝ˇˇˇˇˇÕãn∫Ùˇˇ¸¸˚˛ˇˇ˛¸˛ˇ˝°“˝ˇˇ˝˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˙ˇˇ‹îˇ˛ˇˇˇÊ•ämqÅgÅ°‡ˇˇˇˇˇ˛¸ˇ˛ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇ˛ß“ˇ˝˚ˇ˛˛ˇ˛ˇ˝˛˛˛˛˛˛˛ˇ˛˛˛˛˛˛ˇ˛ˇˇ˛ˇˇ˛˝¸˛ˇ˝˛ˇ˛ˇ˛˛˛ˇ˛ˇ˛˝˛ˇ˛ˇˇˇ˛˛˛˛˛ˇˇˇ˛˛˛ˇˇˇˇˇˇ˘í¸ˇˇˇˇˇˇˇˇ¸ˇˇˇâ˚˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇû€˛˛˝˝ˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇÃπ¸˛ˇ˛¸≈ªˇˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇˇÂô˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸˛ˇÙ|˛ˇˇˇ¡f}~ü üºâ)¯g!2Ûˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛˝€ó¸ˇ˛˛˛ˇˇˇ˙ú¸ˇˇˇ˛ˇˇˇˇˇˇˇˇ˛ˇˇˇ˝˛˝ˇˇˇ˛ˇ˛ˇ˛¯‘å{ó”ˆ˝˙ˇˇˇ˛˛ˇ¸†”˝ˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝ˇÏã˚ˇ˝ˇˇˇ˛˝˚˚˙ˇ˛ˇ˝ˇ¸ˇˇˇ˚ˇ¸ˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇ˚ì ˇ˚˚˚¸¸¸¸¸˚˚˚¸˝˚¸˚¸˚¸˚˚¸˚˝˚˚¸¸˚˝˘¸˙˚¸˚¸˙¸˚˝˙¸˚˚˚˚˚˚¸¸˚˚˚¸˚˚˚˚˚˙˚˙¸¸¸˝¸¸˝˝˜á˘ˇˇˇˇˇˇˇˇ˝˛ˇÛü˚ˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ°Ê˛˛˛ˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇÃæ˝ˇˇ˛˝ ≠˛ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ›¢˘ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˝˝ˇÎã¸ˇˇˇ_[‰˜øaÔ`-	{˙Ü$H`⁄0÷ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˛ˇ˝“´¸ˇ˛¸˛ˇˇˇ˙ë˙ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇˇˇˇˇ˝˘˝˝’ó}y≥Í˛˝¸¸ˇ˚°€˛˛ˇ˝˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇ„à˛˛˛ˇˇˇ˙ˇ˙ˇ˚˝ˇ˝ˇˇˇˇˇ˝ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇ˝ì}§Ø´±º∂ª£†¢≤£≤±¢™¨±£©°¨©Æ∞∑±©Æ©Æ©Æ°°ò≤¢´ò≥©§°öôÆ†°ô´£™£ö°£™£°¢ô§™¢≠ô§¢∞£°í`˝ˇˇˇˇˇˇˇˇ¸ˇˇÚã˚ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇßÏ˛˝˝˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ¬¿˝˛ˇ˛¸≈≤ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇÛî˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˛ˇÓ|ˇˇˇ˘LF<1B¯‹‚ˇÜ'ÛPb˙sÇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˛ˇ˝⁄ü¸ˇ˛˝˛ˇˇˇ˘à˙ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝¸˛˝˛˝˝˝ˇˇˇ¸˝˝¸ºíÖâù⁄ˇ˛ó”˛ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇ€ä¸ˇ¸˙˝ˇ˜ˇ˛ˇˇ˛¸ˇ˝˛¸¸˝ˇˇˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇ˚úë¬ª∂ª¬¿√øº¿√øºªø√∏ ∑ª√∑ªø√ø¬¥ππÀ»Ã ¬¿¬øª»º¬∑ »…øª…»√——……—……––—…– –—–‹“—““≈w˙ˇˇˇˇˇˇˇˇ˝ˇˇÙë˚ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ®Êˇ˝˝˛ˇˇˇˇˇˇˇˇˇˇ˛˝ˇ˝≈√˝ˇˇˇ¸æ√ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ„õ˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˛ˇÙ|˚ˇˇ˝dEæ∑}'ı† ßˇàÒ>i˙ﬁ3Ò¸˝˝˘ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇ˝”ó¸ˇ˛˝ˇˇˇˇ˙é˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ”ò|kQù‰˝¸¸˛ˇˇˇˇˇˇˇ˝˝¸ˇ˛˛˝¸˚¸¸˙˝˛Ÿõ¸˛˝˛˛˝ˇ¸ˇ˝˛˛˛˛ˇˇ˛ˇˇ˛ˇ˝ˇ˝ˇ˝ˇ˛˛˛˝¸˚˝˚ˇ¸‰3ä≈¸Ú¯ˆ˘ã’ˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛ˇ˛˛ˇˇˇˇ¸ˆÒ˙ˇ˝ˇˇˇÈ˝ˇˇˇˇˇˇ˜˛ˇ˛ˇˇ˝ˇ˜ˇˇ˛ˇˇ˛ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇ˘è¸ˇˇˇˇ˝ˇ˛ˇ¸¸ˇ¸¶˙ˇ˝ˇˇˇˇ˝ˇ˛ˇˇˇˇˇˇˇˇˇ®Ê˛˛˛ˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇºΩ¸˛ˇˇ¸¬¨ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇÁà˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸˛ˇÎwˇˇˇ˙´ô»,XÊ{b.Â~(ﬁ@H‡˙*ﬂ˛ˇ˝˚˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇˇ˝”ó˚ˇ˛˝˛ˇˇˇ˙ê˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝¸˝˝˘îäwduó“Û˝¸˝¸¸¸˝˝ˇ˝˝˛ˇˇˇˇˇˇˇˇ›à˚ˇ¸ˇˇˇ˛ˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇ  /w◊¯˜óŒˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇˇˇ˛ˇˇˇˇˇˇÚm8πÈM.0-<>◊ˇˇ 9üˇ˛ˇˇ¥8∞˛˛ˇ˝ˇ˝ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇ˛˝¯â˙˙˙˚¸˝¸˚˙˚ˇˇıù˚˝ˇˇ˝ˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇû‚ˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ¡±˚ˇˇ˛¸≈ºˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇÍñ˘ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˛ˇÂÖˇˇˇˇ¸à!9…}IÏÍ^õ•[£ëˇqá¸ˇ˛˛˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇ˝”û˝ˇ˝¸ˇˇˇˇ˘q˚ˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛˝ˇ˝ò…˙˝ı—ü|{zã√ŸÓÌ˝˛ˇ˛ˇ˝ˇˇˇˇˇˇˇﬁçˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ#   1è_◊˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˛ˇˇˇˇY )k	…/  —ˇˇ° vˇ˙˛ˇâè˝¸˛ˇ˛˜ˇˆ˛ˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˘yæ∞†Ñã†¿‘‚ˇˇˇ˙í˝ˇ˝˚ˇ¸ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇ®Êˇ˝˛˛ˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ´ª¸ˇˇˇ˚∞∑˛ˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇﬁ†˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˝˛„åˇ˛ˇ¸˘˘˘˚¯¯ˇ˙˝Úˇ˙‹¬Ú[b˘˘¡2¸ˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇ˛˝”ò¸ˇ˝˝˛ˇˇˇ˘ö˙ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˝ˇ˙ã⁄¸¸˚˚¸ˇˇˇÎºêoq]ioõ√ÏÙ˛¸˛˚˝ˇ”î˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˝¸˛˜Í1     ’ˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇ˝ˇ˛ˇˇˇ¸ˇ¯äU¨ô¶∞ â˛Ó˛ˇˇì s˛˙˚ˇÑò˝˝ˇˇ˛˛˛˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇ˚p≥”ËııﬁÀ¨áuy—Îì˝ˇˇ˛¸˝˛ˇ˛ˇˇˇˇˇˇˇˇˇˇûÏ˛˛˝ˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ≠¡˝˛ˇ˛¸√≤ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ·î˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸˛ˇﬁ|˝ˇˇˇˇˇ˝ˇ˚ˇ˛ˇˇ˛¸ˇù0˝≠¿˝ˇ˘!—ˇˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˛ˇ˝Ãñ¸ˇˇ˝˛ˇˇˇ˙ç¸ˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˚¸¯î⁄ˇˇˇˇˇˇˇˇˇˇ˛ˇ˚˝˚ÍÕ∫êízo|lÅêñXƒ‡ÂÚ˚¯¸¯¸˘Ú˙˚˚˘˚Ò˚˙Ú˚ÒÚÚÚÍÎ‘œ√´áâmotw~'   *¨ñ÷ˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇıˇˇ˛ˇˇÚı√8  <Ì¸≠rÚˇˇˇï |ˇ¸˛ˇxí˝ˇ˛ˇ˛ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¯è˝ˇˇˇˇˇˇˇˇˇÌ©kE‹˝˛˝˛˛˝ˇ˝ˇˇˇˇˇˇˇˇˇˇ†Á˛˝˛˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ≥∂¸˛ˇˇ¸¬∑ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇˇÊà˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸˛ˇ€vˇˇˇˇˇ˝ˇˇˇˇˇˇˇ˝ˇˇ˘‰¯ˇ˚ˇ¸ˇ¡Ì˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˝ˇ˛Àò¸ˇ˝˝ˇˇˇˇ˘ã˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇ˛¸†’˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˝ˇ¸˝˙˚˝‹◊®Hãçuz{hRÄ]oorwgxpyvq_oh[f^{hvî°ø“ÁÌÛˇˇˇx    [Ë˛° ˇˇˇˇˇˇˇˇˇˇˇ˛˝ˇˇˇÙ˛ˇˇˇˇ˛Z rÅ¨Ëˇ˙Ÿ,Yˇˇˇú tˇ˙ˇˇâè˙˚ˇˇ˛ˇˇ˛ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇ˙Ç¸ˇˇˇˇˇˇˇˇ˝ˇˇˇoíl⁄˛˛ˇ˚ˇ˚ˇ˛ˇˇˇˇˇˇˇˇñ‚˛˛˚˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ≠¡˚ˇˇ˛¸µ≈˛ˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ‚¢˘ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˝ˇﬁ|ˇˇ˝ˇ¸ˇˇ˛ˇˇ˙ˇ˝ˇˇˇˇˇ¸ˇˇˇˇˇ˝˝ˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˛ˇ¸ƒñ¸ˇ˝˝˛ˇˇˇ˙î˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˛ö⁄ˇˇˇˇˇˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇ˛˛˛˝˙˝˝ÿâ˘˙˙˜˘˜˘¯˘¯¯˘ÍÔ‚È⁄’ﬂËË˜¯¯˘¯¸¸˙˝¸˛˝ıˇˇˇê  ó˙˝˝ê”ˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˛ˇ˛ˇˇˇˇm Is‘Õ ˚⁄ ◊ˇ˙ã iˇÙıÒwç˘˘Ù˛ˆˇˆˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇ˛˛¯â¸˛ˇ˛ˇˇˇˇˇˇˇˇÎï˘ÏïãÙ˜ˇ˝ˇ˝ˇˇˇˇˇˇˇˇˇë‡˝˛˝˛ˇˇˇˇˇˇˇˇˇˇ¸ˇˇˇ∫æ˚˛ˇˇ˚∞≠ˇˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ›ë˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛˝ˇ‚wˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˙ˇˇˇˇˇ˚ÚÙ¸˚˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˝ˇ˛ ¨¸ˇ˛˝˛ˇˇˇ˘í˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇçÿˇˇˇˇˇˇ˛ˇˇ˛˛¸¸˙˙˚˚¸¸˛˝˛ˇ¸˛ˇ”à¸ˇ˛ˇˇˇ˛ˇˇˇˇˇˇˇˇ˛ˇˇˇˇ˛ˇÙˇˇˇˇˇˇˇˇ˛˛¸˝˝ˇˇ® <ÿ˘ÙıÚ¢¿ˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇˇˇ˛˛ˇˇˇˇ˛ÿ2   òÌ ÂÍ9 Ωï&  m˚ÙÅ ê˘ı˛ˇ˛ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˙ê˙ˇˇ˛˝˝˝˝˝˜˝˛Úã¸ˇ˝øf˝˛˛ˇˇˇˇˇˇˇˇˇˇ|‚ˇ˛¸ˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ¨¬¸ˇˇˇ¸≈∫ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ‚™˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸˛˛Ê|ˇˇˇ˝ˇ˝ˇˇˇˇıˇ˜ˇ¸ˇˇ˙ˇ˙ˇˇˇˇ¸Tz„ˇ˚ˇ˜ˇ˛ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˛ˇ˝Ã®¸ˇ˛˛˛ˇˇˇ˘î˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸˛ˇ˚é”˛˛ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇÕã˝˛˝ˇˇˇˇˇˇˇ¸˚ˇˇˇˇˇˇˇˇ˚ˆˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇÁ™˝˛˛˝ˇˇ≈ò˝˙˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˛˛‹ÀÌˇ˝b <_ ÍΩN t˝¯ûQ ï˙¯˛˛˛˛ˇ˛ˇˇ˛ˇˇˇˇ˛ˇˇˇ˛ˇˇˇ‚ú˚ˇˇˇˇˇˇˇˇ˝ˇˇÌó¸ˇ˛ˇÊu’¸ˇ˚¸ˇ˛ˇˇˇ˛˛ˇíÁˇ˛˝˛ˇˇˇˇˇ˛ˇ˝ˇˇ¸˛ˇˇ¢√¸˛ˇˇ¸Ωªˇˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ€î˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˝ˇÊçˇˇˇˇˇ˝˝˜ˇˇ˜ˇ˛ˇ˛ˇˇˇˇ˘ˇˇˇˇˇ~'êˇˇˇ˙ˇ˛ˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇˇ˛“ü¸ˇ˛˝ˇˇˇˇ˘˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˝ˇ¸ñ”˛ˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇ˛„ë˛˝˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛˛˛ˇ˝˛˚ˇˇˆuˇ˘˛ˇ˝ˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇ˛˛ˇˇ˛˛˛˛¸ˇÙ‰W	6º˚ˇÓµÉ˝¯ˇˇ≥ä˙ˇˇ˛ıˇ˛ˇˇ˛˛˛ˇ˛ˇˇ˛ˇ˛˝ˇ˝ˇà—ˇˇˇˇˇˇˇˇˇ¸ˇˇıè˚ˇˇ˛˛ˇv◊¯ˇ˙ˇ˛ˇˇˇˇ˛ˇëÁ˛˛˝˛ˇˇˇ˛ˇ˝ˇ˛ˇ˛˝ˇˇ˛´ƒ¸˛ˇˇ˚¬∂ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ›ô˘ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˛ˇÎÅˇˇˇˇ˝Ù’ Îˇ˜ˇˆˇ˛Ùˇ˜Î˙ˆˇ˛ˇ˜ó9ˇˇøˇ˛˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˛ˇ˝‘ó¸ˇ˝˝˛ˇˇˇ˘â˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇ¸ã“˛ˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˛ˇ€ì¸ˇ˝˜ˇˇ˜ˇˇˇ˚ˇˇˇˇˇˇˇˇˇı¸ˇˇ˝ˇˇˇˇˇˇˇˇˇˇ˝ˇ˝ˇ¸ˇ˛ˇ˚ˇ˛ˇÄÚˇ˛¸ˇ˝ˇ˛ˇ˝ˇˇˇˇˇˇˇˇˇˇ˛ˇˇ˛ˇˇ˛ˇ˛¸˝¸ÎÓ˘ˇ¸˛ˇÚ‡˙˛˚ˇˇ˛ˆ˛¸˙ˇˇˇ˛ˇ˛ˇˇˇˇ˛ˇ˛˛˛˛˛ˇ¸ˇı_˘ˇˇˇˇˇˇˇˇˇ¸ˇˇÚç˚˛¸˘ˇ˚˛`Ÿ¯ˇˇ˛˛˛ˇˇˇˇçÎˇ¸˝ˇˇˇˇ˛ˇ˛ˇˇˇˇ˝ˇˇˇ∑¬¸ˇˇˇ¸∞√ˇˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ€î˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸ˇ˛ÊáˇˇˇˇÍD/ ˘+øˇÁ!√Ì+=Á$›ˇˇ¸Ü–ˇLÕ˝˝ˇ˝˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˛ˇ˛À©¸ˇ˛˝˛ˇˇˇ˘é˙ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˝ˇ¸ç‘˛ˇˇ˝˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ‹í˝ˇ˝ˇ˘p1/z‰]óˇı^Æòöˇõ$-•ˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇ˛˛˛˛¸ˇˇˇ”z¸ˇ˛¸¸˝˛ˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛˛ˇˇˇˇ˝˚˙˘˚˝ˇˇ˝ÙÛ˛¸˛˝ˇ˛˛˝¸ˇˇˇˇ˛ˇˇ˛ˇˇˇ˛˛ˇ˛˛¸ˇˇ˙∞Ã˛ˇˇˇˇˇˇˇˇˇ˝˛ˇÏó¸ˇ˛ˇˆˇı¸{Ë˝¸˛ˇ˝˛˛ˇˇôÁˇ˝˝˛ˇˇˇˇ˛˛ˇˇˇ˛˛ˇˇ˛≥ƒ¸ˇˇ˛˚±øˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇﬁô˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˝˝˛⁄ãˇˇˇˇÄ%‘ÈXQ“™ˇÊ¿…Ô‘œˇˇ˜Ü˝Ä˝ˇˇˇ˝ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˛˛˛”´˛ˇ˝˝˛ˇˇˇ˙ë˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸˛ˇ˚ò„˛ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇ“û˚ˇ˝˛|"´™{à
≈T'‰plˇ(oëLˆˇˇˇˇˇˇˇˇˇˇˇ˝ˇ˛ˇ˛ˇ˛˛˛ˇ˚ˇ˙•®˝˝˛˝˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇ˝˛˛ˇˇˇ˝¸¸˚¯˙˚ˇ˛˚Ù˝˛˙¸˝¸ˇˇ˝˚ˇ˛ˇ˛ˇ˛˛ˇˇˇ˛ˇ˛ˇ˛˛˛˛ˇ„á˝ˇˇˇˇˇˇˇˇˇˇ¸ˇˇÙõ¸ˇ˝˝ˇÛˇˆÙwÙ˛˛˛˛¸ˇ˛ˇñÙˇ˛˝˛ˇˇˇ˛˛ˇ˝ˇ˛ˇ¸ˇˇˇ≠ ¸˛ˇˇ˚µªˇˇ˛˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇˇ‰ö˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˝˛ÊÖ¸ˇˇ˝KK∑¬®óÓÃ˝Ô Ø ÎÒÕˇˇ√l8ˇ∂!ˇˇ˛ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇ˛”©¸ˇ˝˝ˇˇˇˇ˘é˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇ¸é‚˝ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇ‚í˝˛˝ÔjÌÚüîÍ/% †¸koˇ&éË&‹ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇ¸ˇ˝ˇ˛ˇˇˇ˝ˇ¯ê∂˛˛ˇ˚˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ˛ˇˇˇˇ˝˝¸˝˝ˇˇˇ˛¸˛ˇ˝˝ˇˇ¸˝ˇˇˇˇ˛˛˛ˇˇ˛ˇ˛˛˛ˇˇˇˇˇ˝‚å˘ˇˇ˚ˇˇˇˇˇˇˇˇ˝ˇˇÏê˚ˇ˛ˇ˘ˇÔˇ¯«è˛˛ˇˇ˝ˇ˛ˇ©Ìˇ˛˝˛ˇˇ˛ˇˇˇˇ˛˛˛˛ˇˇˇ≥º¸ˇˇ˛¸π∂ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇÁ°˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˛ˇÎÇ˚ˇˇˇA’	ƒ¸Ë ∞æﬂÂ∑ˇ¯z,‘«ˆ€ˇ˛ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˛”°¸ˇ˛˝˛ˇˇˇ˘Å˙ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˝ˇ¸ó“˝ˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˛ˇ“ù˚ˇ˝ı-ˇπ %Ú˚V\Ù(à˝Uï˝ˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇˇ˛ˇˇˇ˚ˇ˘ˇ˚˛òÜÙˇˇ˝˝˝ˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇˇˇˇˇˇ˝ˇˇˇˇ˛˛˛˛ˇ˛ˇˇ˛ˇˇ˛˛˛˛˛¸ºåı˚ˇ˝˝ˇˇˇˇˇˇˇˇ¸˛ˇË•˚ˇ˝ˇˇ˙ˇÙˇ˘†À˛ˇˇ˝˛ˇˇç‰ˇ˛˝ˇˇˇ˛ˇ˝ˇ˛˛˛ˇ˝ˇˇˇ∏…¸˛ˇ˛¸Ωƒ˛ˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ‰ö˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˝ˇÌéˇˇˇ˛pH¡‡q(ı ëı· ¥≥
ÈÒÑıÌ1äˇ;qÔqã˝ˇ˝¸˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˛ˇ˝À®¸ˇ˛˝˛ˇˇˇ˙ï˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˛ˇ¸é⁄˝ˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ”ú¸ˇ˝˘cΩ U7Ûa¡¸ad˛,äˇ†iˆˇˇˇˇˇˇˇˇˇˇˇ˝ˇ˝ˇ˝ˇˇˇ˝ˇ¸ˇ˜ˇ˛µwøÙˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇ˛ˇ˛˛˛ˇˇ˛˛˛ˇıÃqπ˝ˇ˚ˇ˛ˇˇˇˇˇˇˇˇˇ˝ˇˇ˝ó˚ˇ˛ˇˇˇ˝ˇ˘ˇˇ}˝ˇ˛¸˝ˇˇ†Ìˇ˛˝˛ˇˇˇ˝Ë˛˛ˇˇ˛˛˛ˇˇΩ“˝ˇˇˇ˚±Àˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇˇˇˇˇ¸˚˚˚¯¸˛ˇ”ö˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˛ˇ·Åˇˇˇˇ∆
^{ûÚi6‹W ä◊
FõÊ¸ò$Ì≈H¸ˇ˙˝¯ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇˇ˛¬¨¸ˇ˛˝˛ˇˇˇ˘ë˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˝ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˝ˇ¸å‰˛ˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇ›ú¸ˇ˝˙Å≤øä´ ßG8ıVw∆kÓÈ-Ô˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛Ì¨eåç¥æ»¡…“∏æ…æ∏—æ»…ø¥ø∑»“¥∑≥∏Ø…¿¥∏¥¡¿æ¿≈Ãπª»¬ƒÀ∫¬∑–¬∆∫∏æ®´ï{nßÛ˛ˇ˛˛ˇ˛ˇˇˇˇˇˇˇˇˇ¸ˇˇ˛í¸˛˛ˇˇˇˇˇˇˇˇ£„˛˝ˇˇ˛ˇéÎˇ˛˝ˇˇˇ∂¥ˇˇ˛˝ˇˇˇ§—˝˝ˇˇ˚∑∫ˇˇˇ˝ˇˇˇˇˇˇˇˇ˛˛˛ˇˇˇˇˇ˛˛˚ˇˇˇˇˇˇˇˇˇ‰ö˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˛˝ÁÖˇˇ¸˛ˇ√\IîÙˇêõWbæ˘c ~ˇΩe≠ëˇ˙ÍÅÁˇﬂ˛˝˙¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˛˛˝”π¸ˇ˛˝˛ˇˇˇ˘è˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˝ˇ˛˚ˇ¸ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇ˝˝˛ˇ¸ò·˛ˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇ‘ú˛˛˝ˇÒu lÚcp¯Á>¬|é{ "∞˘C≈˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˝˛ÙŸ¡ß™∑±™™©∑≤©™±≤©∞™±©™±±Ø≤±∑ª∏∫∏±æ∞¬Ωºƒº∫π∆∏Ω´ë∞∂ƒ∆∑πµ¡“ˆ¸˝˛ˇ˛ˇ˛˛ˇˇˇˇˇˇˇˇˇˇ¸˛ˇıó¸ˇ˛ˇˇˇˇˇˇˇˇÓm˙˝ˇ˝ˇˇíÙˇˇ˝˛ˇˇ?o≈∞÷ˇˇ˝ˇˇ˝¥ ¸ˇˇ˛¸∞Ã˛ˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇ˛˛˛ˇˇˇ˝ˇˇˇˇˇˇˇŸ§˘ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˝˛ˇÏ|ˇ˝ˇ˙˝˘˝˝˝¸˛˛˛˘˝˚ˇ ‡ˇˇ˝˙ˇ˚ˇ¯ˇ¯ˇ˛jó˙˝ˆˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇ˝≈ü¸ˇ˛˛˝ˇˇˇ˚ç˚ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇ˛ˇ˝ˇ¸∂1˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ¸ó—˝ˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ“ú¸ˇ˛˜˛˛˙¸˛˚Ù˛˙ˇ¸¯¡…Êôˆˇçv˜ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ¸ˇ¸˛˛˚˝˚¸˚˝˚˚¸¸¸˚˚˝˚¸˚˙˝˚˝˚˝¸¸˚¸¸¸¸¸¸ˇˇ˝ˇ¸¸¯˝˛ø%
ÿˇˇˇ¸¸˝˛˝ˇˇˇˇ˛˛ˇˇˇˇ˛ˇˇˇˇˇˇˇˇ¸ˇˇˆê¸˛˛ˇˇˇˇˇˇˇˇ˝è–˛ˇ¸ˇˇåÌ˛ˇ¸˛ˇˇ‚êkÇ3ö˝ˇ˝ˇˇˇ≥“¸˛ˇˇ˚ªµˇˇˇ¸ˇˇˇˇˇˇˇˇˇˇ˛˝˝ˇ˛˝ˇˇˇ˙ˇˇ˛€⁄–Ò¸◊ç˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛˛„Åˇˇˇ˝ˇ˚˚¸˛˛ˇ¸˝˘ˇ¸ˇıœÙˇˆˇ˚˝˙ˇ¯ˇ¯ˇˇ∑G˝˛˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˛˝‹°˝ˇ˛˝˛ˇˇˇ˘õ˙ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇ˝˝˛˛¸©Ëˇ¸ˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˝ˇ¸ó‹˝ˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇ‘ë˝ˇ˝ˇ˚ˇ˚ˇ˛¸˛˝¸ˇ˚ˇaxˇâ–¸ˇ–*¯ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇ˛ˇ˛¸˚ˇ˛ˇ˛ˇ˛ˇˇ˛˛˛ˇ˛˝˛˛˛ˇˇ˝˛˛˛ˇ˝ˇ˛˛˛ˇ˝˛ˇˇˇˇ¸˘¸˚‹& øˇˇˇ˛˛˝˛˝˛˛˛˛˛ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇ¸ˇˇÛí¸ˇ˛ˇˇˇˇˇˇˇˇ˝Áã¯ˇ¸ˇˇéÚˇ˝˛˛ˇˇäi%öˇˇ˝ˇˇˇ≠ ¸ˇˇˇ˝ÆÕ˛ˇˇ˛ˇˇˇˇˇˇˇˇˇ˛ˇ˝˛˛˛˛˙ˇˇÈÖÖÅúïûâÑf•¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˛˛ﬂÜˇˇˇ˛˝˙˙¸˚˛˝¸˘¸˝˙ˇˇ¸ˇ˙ˇ¯¸¸˝˝˛˝˝¸ˇ¸ˆ¸ˇ˙ˇ˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇ˛˝Ã®¸ˇ¸˝˛ˇˇˇ˙Ü¸ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇ˛˝˛ˇ˝ßÛˇ˛˛¸ˇˇˇˇˇˇˇˇˇˇˇˇ˝˚˛ˇ˚{·ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˝ˇ’ú¸ˇ˝˛˚˛ˇˇˇ˘˛˛˙¯ˇ˜Ìı˛¸ˇıˇ¯º¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛˛˛˛˝˝¸˛˛˝ˇ˛˛˛˝ˇ˛˝˛˝˛˝˛˛˝ˇ˝˛˛˛˛˛˝˝˛˛˝˛˛ˇˇ˝˚˚˙˘«  ûˇˇˇˇˇ˛ˇ˛¸˚¸ˇˇˇˇˇ˛˛ˇˇˇˇˇˇˇˇˇ˝˛ˇ‰ü¸ˇ˝ˇˇˇˇˇˇˇˇ¸ˇîÊ¸ˇˇ˝ãÛˇ˝˝ˇˇˇû˝!àˇˇ˝ˇˇ˛¥ ¸˝ˇˇ˙™…ˇˇˇ¸ˇˇˇˇˇˇˇˇˇ˛ˇ˝ˇˇˇˇˇÃrêÂˇˇ˝˚¸ˇ˚÷ù˚¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛⁄ãˇˇ¸ˇ¸ˇ˚˛˝ˇˇ˛ˇ¸˝ˇˇ˝ˇ˙ˇ˛ˇ˝˝ˇ˝ˇ˚ˇ˝ˇˇ˛ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˛ˇ˝À¨¸ˇ˛˝˛ˇˇˇ˘ë˙ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇ˝™ˇ¸˝¸ˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˝ˇ¸ÅÂ˛ˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇÃõ˝ˇ˛ˇ¸ˇˇˇˇ˛˝˝ˇˇ¸ˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ¸ˇ˝˛ˇ˛ˇ˛ˇ˛ˇˇˇ˛ˇ˛ˇ˛ˇˇˇˇ˛ˇ˛ˇˇ˛ˇˇˇˇˇ˛ˇˇˇˇ˛¯˝¸–    }ˇˇˇˇˇˇ˛˛˝ˇ˛ˇ˛ˇ˛ˇ˛˛˛ˇˇˇˇˇˇˇˇ˝ˇˇËî˚ˇ˛ˇˇˇˇˇˇˇˇ¸ˇ–à˚ˇˇ¸ÜÛˇ˝˝˝ˇÒ ÙˇˇBûˇˇ˝˛ˇ˛ú⁄˝ˇˇˇ¸Æº˛ˇˇ˝ˇˇˇˇˇˇˇˇ˛ˇˇ˛˛˛˛ÓïõÙˇˇ¸˛˝˝ˇ˛ˇ⁄£˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˝˛“çˇˇˇˇ˛ˇˇˇˇˇ˝ˇˇˇˇˇ˝ˇˇˇ˙ˇˇˇˇˇ˙ˇ¯ˇˇˇˇˇ˛˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝ˇ˝ƒ®˝ˇ˛˝ˇˇˇˇ˘Ä˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇ˛˚˛ˇ˝¶
˚ˇ˝Ù˛ˇˇˇˇˇˇˇˇˇˇˇˇ˝˝˝ˇ˚ó·˛ˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ‘ú¸ˇ˝ˇˇˇˇ˝ˇˇˇˇˇ˝ˇ˙ˇ¸ˇˇ˘ˇ˘ˇ˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˛˚º     Yˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇ˛˝˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇÏó˚ˇ˝ˇˇˇˇˇˇˇˇ˚ˇ˘îºˇ˛˝ãÌˇ˝˝ˇˇÏ ﬁˇ˛8èˇˇ¸ˇˇˇ¢“˝˛ˇˇ¸±¿ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇ˝˝˛ˇÛ}Ûˇ˛˛¸˛¸˛˚˛ˇˇÁõ˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˝ˇ·Åˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇ˘ˇˇˇˇ˝¸ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˛ˇ˝À´¸ˇ˝˝˛ˇˇˇ˙ö˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇ˛˘˝ˇÒa ì˛¸Ù˛ˇˇˇˇˇˇˇˇˇˇˇˇ˛¸˛ˇ˝Ç‹˛ˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ‹ù¸ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇ˘ˇ˝ˇ∫8}ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸Z      =ˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇ˝˛ˇÒ¶˚ˇ˝ˇˇˇˇˇˇˇˇ˛¸ˇ¸Åˆ˛˝çÎˇ˝˝˛ˇ˚#}ˇ“ò˛ˇ˝ˇˇˇ∏¡¸˛ˇˇ¸ØÕˇˇˇ˝ˇˇˇˇ˛ˇˇˇˇˇ˝ˇˇ‡x„ˇˇˇ˛ˇˇˇˇ˛ˇˇˇ„™¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˛ˇﬂ|ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇæ∞ˇ¯˜Ë›“≥™ƒÇ˙˚ˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸ˇˇÏ<wˇ¸˛˙ˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇ˙É·˝ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ≈ú¸ˇ˝ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÙˇ‚Å–˙ˇÛˇıˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˘ˇ¸˝˝˛ˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇ¸ˇŸõ)  ˇˇ˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇ˛˛ˇ˛˝ˇˇÙü¸ˇ˛ˇˇˇˇˇˇˇˇ˛˛ˇˇÿv˙ˇãÏˇ˛˛ˇˇˇ¨+(µˇˇˇˇˇˇ¨”˝ˇˇˇ˚∞Àˇˇˇ˛ˇˇˇˇ˝ˇˇˇ¸˛ˇˇÙqÔˇˇˇˇ¸€ŸÁ˛ˇˇˇ€õ˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˚¸˛ﬁÑ˜˜¯¯˜˜¯¯˜¯¯˜˘˜¯¯¯¯˜¯¯ˇ¯˜Ô˚Î˚Ìı˝˘ˇÛ¯˙ˇ˛˙˝˙ˇ˝ı˘¯Ô˘¯¯˘˘˜˜¯¯¯ÈÔÔ¯˜¯¯˘Ú˘¯¯ËË™6+$
    ¨Ü˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˛ˇ¸ô
Ã¸˘ˆ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇí·˛ˇ˛˝˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇÃú¸ˇ˝¯ˇ‚¶ßﬂ˛Ë…˙ˇË‹Ú˚≥÷ı≈ËˇˇˇDb¯Ìîˇ˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˆˇ˜ˇÙ^Â∂r2ˆ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛˛ˇ˛˛ˇ˝˛ˇ‰û˚ˇ˝ˇˇˇˇˇˇˇˇˇˇ˛˝˝≈ç˚ã˜˛˚ˇˇˇˇ˝Ï ı˛ˇ˛˛˛ˇˇˇõﬂ˚˛ˇ˛¸ß·˛ˇ˛˛˝˛˝˝ˇˇ˛ˇ¸˝ˇ˚âÕˇ˛ˇˇÌ/ %;˝ˇˇˇ›™˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸˛ˇ–CgSg\h]\hrhR_h]MgifV_hqpUi]giipU^h`Ximw^dmaVUs|jl`\hwiprWhh_qog_gqg\pho^gihppg\mEX      8Óì˙¸ˇˇˇˇ˛ˇ˛˛˛ˇ˛ˇˇˇ¸ˇ˛˛€)˝˝˝˚ˇˇˇ˛˛˝˛˛˛˛ˇˇ˛˝ˇˇˇò“˛˛˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇÃõ¸ˇ˝ˇ¬(*ﬂºıˇπÊû_™ ˇˇˇ2ËË.ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ¯ˇ˜ˇ˘°–ˇ˛˛˙ˇ˛˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇ˛˛˛ˇˇ˝ˇˇÒ•˚ˇ˝ˇˇˇˇˇˇˇˇˇ˛ˇ¸ˇ˚ØÜÈˇˇ˚˙ˇˇˇˇˇˇˇ˝˝˝˚ˇˇˇ§‹˛ˇˇˇ˙∑Øˇˇˇ˝˙¯˘¸˛ˇˇˇ¸ˇ˚≈Åˇ¸ˇˇˇv;‡€&&˝ˇˇˇ‚î˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˝˛ÊÖ˙˘˘˚˘˚˘˙˙¯˚˙˙˘˙˘˙˘˙˘˙˘˙˘¸¯˙˙˚˘˝˙˝˜Ú˙˚ˇ˝˚˝˚˙˙˙˘¸˝˘˙˙˘˙˘˘¸˚˘˙˘˚¯˚˙˚˘˚˘˙˘˚˙¸˚˙˘˘˚¯»ß•    ÖÌÄ¯ˇˇˇˇˇ˛˛˛˛¸¸˚ˇ˝˛˚˝˛ˇ˛˚Ê˙¸¯ˇ¸ˇ¸˝˝˛˛˛˝˝ˇˇˇ˛ˇˇ¸à·¸ˇ˛˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˛ˇ⁄§˝ˇ¸ÔJ^˜Ùeh√
’ˇ∂Àè)ˇ∑ﬂˇ˚“ó˚c≥ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇ˚©GBë˜¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˘ˇÙˇ˚ŸÅ¯˝¯ˇ˚ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛˛ˇˇ˛˛¸ˇˇˆè¸ˇ˛ˇˇˇˇˇˇˇˇˇ¸ˇ¸ˇ˝¸ó6Îˇˇ˚ˇ¯ˇˇ˛ˇˇ˚¸¯¯˙˛ˇ˝≤—˛ˇˇ˛˝ØÕ¸ˇ˛˛˛˙˝¸ˇˇˇ˛ˇ¸ı|ˇ˚ˇ˛ˇ˚Róˇ˝Ñ"˛ˇˇˇ›°˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˛ˇÏÅˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛Û“»Ï¯ˇˇˇˇÌˇˇ¸˘ˇ¯Ï˘ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇŒ¨ˇ≤ ]ùp˝ˇˇ˝˛¸˝˝˛ˇ˛ˇ˝ˇˇˇ˝˝˛˝˝ˇ¸ˇ˛ˇ¸ˇˇ˛˝˛ˇ˛˛˝¸ˇ˝˚˚˝ˇÍc‹˛ˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ›ú¸ˇ˝ˇf••õè»€ˇ–‘ã)ˇ Òˇ˚4kE˚µhˇ˘ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˚•    G˚˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇ˘ˇ˙ÙeÚ˜˜˙¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇ˛˛ˇˇ˝ˇˇËù˚ˇ˝ˇˇˇˇˇˇˇˇ˝ˇˇˇ˝˛˝ı|cÛ˝˛¯ˇˇ˚˙˝˚˝˙˚¸˝ˇˇ˛≠ ˝ˇˇˇ˙πøˇˇˇ˝ˇ˛ˇ˛ˇ˛ˇ˝ˇ˘ã”ˇˇ˝ˇˇ˝ úˇˇÉ-˛˛ˇˇ€°˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˝Âéˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇ˛ü  éˇˇˇróˇ˝˙˛|±ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇœØˇˇÉ   NÌæ;púÕÙ˛˝˝˛˝˛ˇˇˇˇˇˇ˛˛ˇ˛˛˝ˇ˚ˇˇˇ˛ˇˇˇˇ˛˝ˇ˛ˇˇ˛‡ßèÖäe·˝ˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ‚§¸ˇ˝Û!GA4&“⁄ˇºœÉ*ˇ¥ÌˇÚçÕÊÎ6˜¯ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇ˘˘     Æ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¯ˇ˚˙yÎˇ˚¸˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇ˛ˇ˛ˆ˝˛ˇÓû˝ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇè¿mÆ˝ˇ¸ˇ˚˚˝˛È·˙˛˛ˇˇˇ¨—¸˛ˇ˛¸π¬˛ˇˇ˛¸˙”∞˛¸ˇ˝¸ëôˇ˝ˇˇ˝ˇ˙6ã¸ıP.˛ˇˇˇ›ô˙˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝¸ˇˇÎwˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇ˙˛˙Úïï˝ˇˇt ö˘ˆÛ˚e±ˇ˛ˇ˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇ˛À¶ˇˇˇV  æ¸Ív˚Ùπr^ÇπË˛¸¸¸˛˛˛˝ˇ˛˛˛ˇˇ¸ˇˇˇ˝ˇˇ˝¸˚˝˛ÙÊØsoÜ…˝˛¯àÌ˛˛˛˝˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ’õ˛˛˛ıH_˚ˆK^∏ ≠Ï≤ ‡n&˘√ ∞ı¡ŸÛ-åˇ@ﬂ˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝›      £¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇ˚ˇ|„˚ˇˇ˛ˇ¸ˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˛˛˛˛ˇˇ¸ˇˇÚõ¸˛˛ˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˛ú˙´[ŒˇˇˇˇˇˇòuÂ˚˝ˇ˝§…˛˛ˇˇ˚∏¿ˇˇˇÙ®GXˇˇˇ‚z…ˇ˚ˇ˛ˇˇˇˇ§`g(ˆˇˇˇ„ö˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇÂç˛ˇ˝ˇ˝ˇ˛˛˛˛˛˛˛˛˛˛˛˝ˇ˝˛˛˛˛ˇ˛¸˚˚Ù≥Xn4 Ïˇˇj í˙˘ı˚b Æ˝ˇˇ¸˛ˇˇ˛˝˛˛˛˛˛˛ˇ˝ˇ˝ˇ˛ˇ˛ˇˇ˛˛˛ˇ˛Ã≠˝ˇˇÒL0ÔˇÔà¯ˇ˛ˇˇÏΩûäãÖÑ¶∑ÀŸÙı˜ˇ˙ˇˇ¸ˇˇÈŸ≈ƒ®ãíéí® ¯˛¸˚˝ˇ˝è·˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇ‹£˝ˇ˛˝ÀC@ … %I6“	r®i;ÛÒw&ˇäz˘ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˘¯     ∑¯ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˜ƒ˛˝˙ˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ˛˛ˇˇ˝ˇˇÌë¸ˇ˝ˇˇˇˇˇˇˇˇˇˇ˛˛˛ˇ˛˝ëÏˇ˚˙üà¬ˇˇˇˇ°  jÀˇ˝≤…˛ˇˇˇˇ∑Ø˙Òë   G¸˜Ø~Ï˛ˇˇ˛˛ˇˇ˛ˇˇ¥Yvq"˛ˇˇˇﬁ°˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¯˛˛Îˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˙˘ÚP  #Ø˙˚˝s ë˙ıÌˆ` ¶¸ˇ˝˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¯ˇˇˇ¿´˝ˇˇ˚ÏÃˇˇ˘ä˚ˇˇˇ˛ˇˇ˛ˇ˛ˇ˛È”´évndcswZdnuxó∂¡’ˆ˛˛˛˛ˇˇˇˇ¸˛ˇ¸ãÂ˝ˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇ›ú¸ˇ˛˝˛ˆ¢†Ù˛˛–ıü≠ıc”˝’È©€Í˛˝ÙÃˇ›"Úˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸˚Ω   4b”˜ˇˇˇˇˇˇˇ˛˙˙˙˚˝˛ˇˇˇˇ˛—{”ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇÈù¸ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ®„˛˝˝ˇÙæh§Ò˙Å     W‘î–˛ˇˇˇ˛æ•x     JÆn¿ˇ˛ˇ˛ˇˇˇˇˇˇˇ˚˘˙˝â+˝ˇˇˇ‚õ˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˙˛˛Ê{ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚˙¯˚ áÆVr˙¸˚nï˙ˆÓÌ` ß˝˛˛˚˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ¯ˇ˛ˇ√∞˝ˇˇ˝˝ˇˇˇ¯à˙ˇˇˇ˛ˇ˛ˇ˝ˇ˛ˇˇ¸¸¸˚˝˚˙˚˚˙˚¸¸˚˚¸ˇ˝ˇ˛ˇˇˇ˛ˇˇ˛¸˛ˇ˚è·˛ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇÃ§¸ˇ˝˝˛ˇ˛˝˛˛˝ˇˇ¸˝˝˛î?˝˛¸ˇ˛˛˛˛ˇ˚ˇ˝ˇ" ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸˝˝˝–tVôˇÛúqπÛ˝˝¸¸˚ˇˇˇˇ˛˛¸¸˚˚‚Éôıˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇıù˚ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇëÌˇ˛¸˛ˇˇ¸≈ò|@      5“ˇˇˇˇˇ¶5       C‹ˇˇˇˇ˛ˇˇ˛ˇ˛˛ˇˇ˝˚˝˝µj˛ˇˇˇ—£˘˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˙˛ˇ¸Yˇˇ˝ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˙˚¯¸c  x˚Ÿ±B ú¸˘»£6 Ø˝ˇˇ˝˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇ˛˚™“˛˛ˇ¸ˇˇˇˇ˘é˚ˇˇˇ˛˛˛ˇˇ˛ˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇˇ˝˛˛ˇˇ˛¸˛ˇ˚ç‚˝˛˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˛ˇ’õ˝ˇ˝ˇˇ˛ˇˇ˛ˇˇˇˇ¸˛˙ˇ˚˛˛ˇ˝ˇ¸ˇ˝ˇˇ˛ˇˇˇ´µ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛¸ˇˇ˛ˇˇ˛˚˛˙∏èÜ•Á˝ˇ˙ˇ˝˛ˇ˝ˇÍ∞fäÊ˝¸¸˚ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇ„ó¸˛˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇëÌˇ˝˛ˇˇˇˇˇˇ¸î      {ç“ˇˇˇˇˇ¬≥…$     yˇˇˇˇ˛ˇˇ˛ˇ˛˛ˇˇˇˇ˝¸¸˙˘˛ˇˇˇﬂç˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛¸ˇ˚Ç˛˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˚¸˝Ú~RS®Û˙e£ˇˇF ©˝ˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛¸ˇéÚ˛˛ˇ¸ˇˇˇˇ˘Å˚ˇˇˇ˛ˇˇ˛˛˝˛ˇ˛˛˛˛˛ˇ˛˝˚¸¸˛˝ˇ˛˛˛˛ˇ˛˛˛ˇˇˇˇˇ˛˝˝ˇ¸å„˛ˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ‘•¸ˇ˝˝ˇˇˇˇˇ˛˝ˇˇ˝˛˝ˇ¸¸˛˛˛ˇ˝ˇ˝˛ˇ˘ˇ¸ˇ˙¸˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛¸˝˝˚¸˙ˇ˚˛˚ˇˇ˚Ÿngoì°¥∫®úeÜ®ˇˇ˝¸˝ˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇËì˚ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇá˚ˇ¸˛˝ˇˇˇˇˇ˛ä    g˝°Õˇˇˇˇˇ≤»ˇˇâ   Ñˇˇˇˇˇˇ˛ˇ˛˛ˇˇˇˇˇˇ˝¸¸˚˝ˇˇˇ·£˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇˇ˛è‡˝˛˝˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇ˝˛˝˛ˇ¸˚˛ˇÍº:ö˛˙Ûπ5©˝ˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇ¸ˇ˚~ˇˇˇ˛ˇ˛˛ˇˇ˘è˙ˇˇˇ˝ˇˇˇ˝˛˛˝˛˛˛˝˝¸˙˚˚˚¸˚˝˝˛˝˛˛˝˛˛˛˛ˇˇˇˇ˛˝˛ˇ¸ç⁄˛ˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇ’£˝˛˝¸ˇˇˇˇ˛˛˝ˇˇ˝¸˝˛˝˚˝˛˛ˇ˝˛˝ˇ˛˛ˇ˝˛ˇ˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝¸˙˘˙¯˘˜˚ˇˇˇˇˇ˛ˇ˛ˇ‡Õºæ¬⁄ˇ¸ˇˇˇˇ˛¸˛ˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇÙë˚ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇç¸ˇ˝˝˝ˇˇˇˇˇˇü M ˛˛ˇ¨ ˇˇˇˇˇ¬πˇˇˇÒv âˇˇˇˇ˛˛ˇ˛˛ˇˇˇˇˇˇ˛ˇ˝˛˝˛ˇˇˇÍ†˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ¸◊ß¸ˇ¸˝˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇˇˇˇˇˇˇˇ‹Yƒˇˇˇˇ—bÀ˝ˇ˝ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇ¸ˇÚéˇ˝ˇ˛ˇ˛ˇˇˇ˘à˚ˇˇˇ˛ˇ˛ˇ˛˛ˇˇˇˇˇ˛˛˝˛˝˝˛˝˛˛˛˛ˇ˛ˇ˛˛ˇ˛˛ˇˇˇˇ˛˝˝ˇ¸ã‹˛ˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ‹ß¸˛˝ˇˇˇ˛˛ˇ˛ˇˇˇˇ˝˛˝ˇ¸ˇ˝ˇ˚ˇ˝ˇˇ˛ˇˇˇ¸ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˝ˇ˚˚˝ˇˇ˝˝ˇˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ˝ˇ˝ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇÍõ˝ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇñ‰˛˛˝˛ˇˇˇˇˇˇ©+Øˇ˛ˇˇˇµÕˇˇˇˇˇ¥¬ˇˇˇ˚˝÷]∫ˇˇˇˇˇˇ˛˛˛ˇ˝ˇˇˇˇˇˇ˛ˇˇ˛ˇˇˇ·õ˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˝ˇ|Ûˇ˛˚˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇ˝ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇ˚˛íﬂˇ˛ˇ˝ˇˇˇˇˇ˙x˚ˇˇˇ˛˛ˇ˛ˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ˛ˇˇ˛ˇˇ˛˝˝ˇ¸é‡˛ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇ‹õ˝ˇ˛ˇˇ˛ˇˇ˛ˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇ˛ˇˇˇˇ˘ˇˆˇ¸˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇ˛˛ˇˇˇˇ˛ˇˇ˛ˇˇˇ˛ˇ˝ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇ‰ü¸˛˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇôÛ˛˛˝˛ˇˇˇˇˇˇÚ˛˝ˇˇˇˇˇØ–ˇˇˇˇˇ∂Œˇ˝˚˚˚ˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ’ò˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˝ˇ∏∑˝˛¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇˇˇˇˇˇˇ˛˛ˇˇˇˇˇˇ¯˝ˇˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ¸›ç˝ˇˇˇ˝ˇˇˇˇˇ˘â˚ˇˇˇˇˇˇˇˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ˛˝˛ˇ¸ó›˛ˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ”ú¸ˇ¸ˇˇ˛ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇ˝ˇ˝ˇ˝ˇˇˇˇ¸ˇ˘ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˝˝˝˛¸¸¸˚¸˝˛˛˛˝ˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇÙú¸ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇñÏˇˇ˝ˇˇˇˇˇˇˇˇˇ˝˛˛ˇˇˇ™’ˇˇˇˇ˚∏¬ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ“ô˙ˇˇˇˇˇˇ¸ˇˇˇˇˇˇˇ¸ˇˇˇ˙ˇ˘ˇˇˇ˝ˇˇˇˇˇˇˇˇˇê¨˛ˇ˝¸˝˝¸¸¸¸˝¸¸˝˝˚¸¸¸¸¸˝˚˝˚¸¸¸˚¸˝˝¸¸¸¸˚¸¸˝¸¸¸˝¸¸¸¸˝¸˝¸¸ˇˇˇˇˇ˚ˇˇ˚˚¸¸˝¸˝˝¸ˇˇ˝…lÏˇˇˇˇˇˇˇˇˇˇ˙à˙ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˝ˇ¸éŸ˛ˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇ˛“ë˚ÙÚ˚˚˚ÚÛÚ˚ÛÚÛ˚Û˚˚˚ÚÛÚÙ˚ÌÛÚÏÒÏÚÛÛÍÛÍÏÍÏÙÚÂÚÏÛÎÂÍÏÍÌÛÊÎÎÒıÙ‰˜¸¸˜¸ˇÔÌ¯Ú˜ÓÔÏ¯·ÌÍÚÈ‰ÂÍÏÎÂÍÂﬂÚÂÎÏ‡ÂÌÎÂÍÂ·ﬁﬁ·ÂÍÊ·ÂÍÌÂÍÊÍÂ·ÌÏ‚Â·ﬁÍﬁÂ‚Ï‚ﬁËÊÁ“î¸˛˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇëÙˇ˛˝ˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˛≠…˝˛ˇˇ˚π∂ˇˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇÁô˙ˇˇˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇ˝ˇ˝ˇ˛ˇˇˇˇˇˇˇˇ˛˚ö´ıˇ¸˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇˇˇˇ˛ˇˇ˛˜˛˘‚oÚ˛˛ˇˇˇˇˇˇˇˇˇÓë˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˛ˇ˚ó›˝˛˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇ◊)ev{q{h}Å}zy|o}ÅÜyÇÜzÖzqäzÜyrysÄyryÖyÜyyÜÅ|íqyä|y|Äá{{tç|zz{Ç~áóâÇÅÜyzsàíàvãzÉãÖ}{yÉ|ÄÜwëâäÜÅÖãêÅÄöäêëöÅÄèëÖöÖâõëäê¢zäõâõôä§ëèõëèÄèäéèíåé¸ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇèÍˇ˝˛˝ˇˇˇˇˇˇˇˇˇˇ˝˛ˇ˝Æ…˝˛ˇ˛¸∞¬ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ“ö˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˝˙≠çÙ˛˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¯î˘ˇˇ˚ˇˇˇˇˇˇˇˇˇ˘è˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇ¸ÜŸ˝ˇˇ˝˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇ˛—ê˜˘˜¯˘¯¯˘¯˘˘˘¯˘˘˙˘˘˙˘˘˘˙¯˘˘˘˘˘˘˘˘˜˙˘˘˜˙¯˙˘˘˘¯˘˘˘¯˘˘˘˝˙˘¯˘˘¯¯˝˛˛˘˝˙˛¸˝˘˚˙˚˝¸˝˘˘˙˜˙˘˙¸˘˘˘˙˘˘˘˘˘˙˘˘˙˙˙˙˘˙˙˙˙˘˘˘˚¯˙˘˙˘˙˙˙˘˙˙˘˙˙˚˙˚˘˚˘˙˙˙˜˙˝Úú˚ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇäıˇ˝¸˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˛¢ ˝˛ˇˇ˚∑πˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ„°˚˛ˇˇ˝¸˙ˇıˆˇ¸ˇ¯ˇ˛ˇ¯˚˝¯Úı¸ˇˇˇˇˇˇˇˇˇˇ¸ˇˇ˝⁄çà¿Û˚˛Ù˛˚˝˝˛˚˜¸˛˚¸¸¸˝˝Ì˝˚˝Ù˝˛¸˝¸˛¸ÙÙ¸˛¸ı¸˛˝ı¸ı¸Ù˚˝ı˙˘˙¸ˇˇ˝¸˝Ù˚ˇ˝¯Á }¿ˇ¸˛ˇˇˇˇˇˇˇˇˇˇˇ˙ç¸ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝¸˝ˇ˚é·˛ˇ˝˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇ÷¢¸¸¸ˇ˛ˇ˛ˇˇˇˇˇˇˇ˛ˇ˛ˇˇˇˇˇ˛ˇ˛ˇˇˇˇ˛˛ˇˇˇ˛˛ˇ˛ˇ˛ˇ˛ˇˇ˛ˇˇˇˇ˛˛ˇˇ˛˛˝˛¸˝ˇˇˇˇˇˇˇ˘ˇˇˇ˛˛ˇ˝˛˛˛ˇˇ˝ˇ˛ˇ˛˝ˇ˛ˇ˛ˇ˛˛˛ˇˇ˛˛˛ˇˇ˛ˇ˝ˇ˛ˇ˛˛˛˛ˇ˛ˇ˛ˇ˛ˇˇ˛ˇ˛ˇ˛ˇˇˇˇ˛˛˛˛¸˝ˇÏí¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇíÛˇ˝˝˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˛¨…˝ˇˇˇ¸πÕ˛ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ›ö˙ˇ˚˝˚m
iÚJüˇÌ&è~i˛É%ïˇ˛˝ˇˇˇˇˇˇˇˇˇ˝˙ˇˇˇÈ©Äl_bYwsjÉvj|us`sls_lrw{Ksums`Puckkjkluj_lkjjm|lk[_\Heh^^tlkbtqîºı˛ˇ˙ˇ˝˝ˇˇˇˇˇˇˇˇˇˇ˘ë˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇ¸ÅÏ˛˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˛ˇ”±˛ˇ˛ˇˇˇˇˇˇ˛˛ˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇ˛ˇˇ˛ˇˇ˛ˇˇˇˇˇˇ˛ˇ˛ˇˇˇˇ˛ˇ˛ˇˇˇˇˇ˛˝˝˛˝¸˚˝ˆ˛¯¸˘˙˝˚˚˘¸ˇˇˇ˝˝ˇ˛¸ˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇ˛ˇˇˇ˛˛ˇ˛ˇˇˇ˛ˇˇˇˇ˝ˇ˛˛ˇˇˇ˛ˇ˛ˇˇ˛ˇ˛˛ˇ˛ˇ˛ˇ˝ˇˇÍ£¸ˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÖ˝ˇ˛¸˛ˇˇˇˇˇˇˇˇˇˇ¸ˇˇˇ≠‹¸˛ˇˇ˚∏¬ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ‹°˚ˇˇ¸t$ß¥!|î…d#‡cIÎ5LîB˛˝¸ˇˇˇˇˇˇˇˇ˛ˇˇ˝ˇˇˇˇ˙˘¸¯˚˘˘˙˚˘˚˘˙˘˙˙˘˙˙˘˙˘˚˙˙˚˘˙˙˙˙˘˙˙˙˘˙˙˙˙˙˘˚˙˙˙˘˙ı˘øöˇ˙Ú˙˘˙¸˚¸˙˙ˇˇˇˇ˘ˇˇˇˇˇˇˇˇˇˇˇˇ˘á˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˝˝ˇ¸éÈ˛ˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇ÷õ˚ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝¸ˇ˛ƒ{N^•ı≤ÉÉ{}uª˚ˇˇÜü˛ˇˇ˙ˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ˛ˇˇˇˇˇˇ˛ˇˇˇˇˇˇ˛ˇˇˇˇˇ˛ˇ˛ˇ˛ˇ˛˝ˇˇ‰ß˝ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇíÏˇ¸˛˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˛¨À¸ˇˇˇ˝¡¬˛ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇÁ¢˙ˇˇıîÎÒ∑ë¸@®ˇl7Í;z4ı˜ˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇ˝ˇ˝ˇˇ˛ˇˇˇˇ˛˛ˇ˛ˇˇ˛ˇˇˇ˛ˇ˛ˇ˛ˇ˛ˇˇˇ˛ˇ˛ˇˇˇ˛˛ˇˇ˛˛ˇ˛ˇˇ¯˘P [ˇ¸ı˛˛˛˛ˇˇˇˇˇˇˇ¯ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇà˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˛ˇ¸ã‰˛˛˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ“©¸ˇ˘ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚ˇˇ÷ Ñy   vˇˇˇ:˛ˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚ˇˇˆõˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇñÙ˛˛¸ˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇˇ≠“¸˛ˇˇ¸∏Ãˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ„™˚ˇ¸˚!#8˜≥ =ÔˇkLÓ*|˛dÆıˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˚˛¸˝˝˝˝˝˛˝¸˝˛¸˛˝˛¸˛˝˝˛˝˛ˇ˝˝˝˝˛˝˛˛˝˝˝˝˛˛˝˛˝˝˝˛˝˛˝˛˝˝˘~  Îˇı˛˝˛˝˛˝˝¸˛¸˚ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇ˙Ä˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˛ˇ˚Ü·˛˛˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇ‘¶˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ¢<«h Iœ w≤ØÈˇˇÓ>ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÔ¶¸ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÉÙˇ˛˝˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˛õÿ˝˛ˇˇ˚™ ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ’ü˚ˇˇˆ~—øR3ˇZ ÕˇQ?˚'á˙∞;¯ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚˛˛ˇ˝©    ï˜ˆˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÑˇˇˇˇˇˇˇˇ˚ˇ˙ˇˇ˝˝˛˝˝¸¸˝˚˚˝¸ˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇ˛˝˝ˇ¸Ç‰˛˛ˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˘ˇ˙„ùˇ˚˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¯˝ˇ˝ç*  ã¯¶  wÈÔ˘˙◊=˘ˇ¸ˆ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˙ˇˇÈ£˛ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇóÚˇ˛˝˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ•–¸˛ˇˇ˚©“ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇÏ™˚˛¸¸èòò!í£±W(ﬂ^G∏F›Ï‰ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˝˝¸Â    3Ò˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇñ˛ˇˇˇ¯ãﬁˇ¯ˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇ¸¸ˇˇˇˇˇˇˇ˝ˇˇ˛¸˛ˇ˚ÜË˛ˇ˛˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˙ˇ¸Ÿõˇ¸˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˜˛˝ø  -TçÍˇˇ»E C‚˝ˇˆA¸ˇ˝˜ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚ˇˇÊõˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇí¸ˇ˛˝˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˝£ÿ˛˛ˇˇ˚±Àˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÈ™˚ˇ˚ˇˇî~oê˝Í9øîèy ≥ˇO§ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˙˝ˇ˚j      …ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¯ÉˇˇˇˇÜ çˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇ˝ˇ˛ˇ˛ˇˇˇ˛˝˛ˇ˚Å›˛ˇˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇÂéˇ˝˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸¯˚ˇ∆  ¨A îˇˇˇ˘3 èˇˇÈ	B˙ˇ˛¸˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇ’≠ˇ˝˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇñ¸ˇ˝˝˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˝úŸ˝˛ˇˇ˚∞Àˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇŸ°˚ˇˇ˝˘˝˙ˇ˜˜ˇ˘ˇÒˇˆÃ√ıá¯ˇ¨_˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˛ˇˇ∫     |ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ê˝ˇ˘á  >˙˝˝ˇˇˇ˜Ï‘»ÊÁÓÙı˝˝ˇˇˇˇˇ˝˚¸˛ˇ˛ˇˇˇˇ˛¸˝ˇ¸éË˛ˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸ˇÏ|˙˝˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚˛ˇÛH  6Ùé'©ˇ }ÊaO E˚ˇ˛˝˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇ˙∞ªˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇãÙˇ˛¸ˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˛£Ÿ˝ˇˇ˛˙°¡ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ‹¢˙ˇˇ˛ˇˇ˛ˇˇ˛ˇˇˆˇˇˇzg˝∑Á˛ˇ¯;ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝Ù∆™Å.F7%>ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˆë¸ˇy   ≈ﬂßásx{åû∞âêäÑ}î∫Ìˇ˛˛˙˝˛˝˝ˇ˛˛ˇˇˇ˛¸˛ˇ˚çÈ˛ˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˘ˇˆÇÙˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˝ˇ˛ˇ˛˘÷ø”ˆ˘≈ "É©÷D=˚ˇ˝ˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¯~Íˇ˚˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇòÙˇ˝˝˝ˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˛£–˝˛ˇˇ˚üÀˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ ©˙ˇˇˇˇ˚ˇˇˇ˝ˇ˝ˇ˙ˇ˝ˇ˝ˇˇˇˇ˛ˇÎˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇ›ñˇˇ˙ˆˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÒèÓñ     p¿Ìˇˇ˝˚¸˘˝˚¸˚ˇÏñlb≥˙˝ˇ˛ˇ˝ˇ˝ˇ˛ˇˇ˛¸˛ˇ¸x‰˛ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇ¯çÊˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ˛ˇˇˇˇˇ˛ˇı`   Ñ˝¸Í·J˙ˇ˝ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇÅ˙ˇ˝˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÜ¸ˇ˛˝˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˛õ€˝˛ˇ˛˙°”ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ—™˚ˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇ˝ˇ˝ˇ¯ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˛ˇˇˇˇˇû›ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÏzõ     ˚ˇˇˇ˛ˇˇˇ˝ˇ˛˛˘˚˛ˇ˜±Ñzƒ¸˛ˇ¸ˇ˝ˇˇˇˇ˝˛ˇ¸|Ô˛˛˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇˇ‡≤˝˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˝ˇˇˇˇˇˇˇ˝ﬂ∆Ê˘˚˝ˇÒ€“˚ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˙∆ûˇ˚ˇ˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇëÙˇ˝¸˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇöÿ˝ˇˇˇ¸©Àˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ›°˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇ˜ˇˆˇˇÔˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝¸˛˚˙Ò^˚ˇ˝ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÁ;        ∞˚˚ˇˇ˛˛˝¸˝˛Ú“È˛˝˝¸˝˝ı∏o—˝ˇˇˇˇˇˇ˝¸˛ˇ˚Ç‰˛ˇ˛˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇ˛ˇ˝u˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˝ˇˇˇ˛ˇˇˇˇˇˇ˛ˇˇˇˇ˙¸ˇ¸ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÙtÙˇıˇ˘ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÖ¸ˇ˛¸˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˛•„˛˛ˇˇ¸©√ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ—õ˙ˇˇˇˇ˛ˇ˛ˇˇˇˇˇˇ˘ˇˇˇˇˇ˝ˇˇˇ÷?Ò˛ˇıˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇüÀ˛˛¸˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÒ]äxcH$  u˛ˇˇˇˇ¯ˇ¯ˇ†	Ü˙˙˝˝ˇˇˇÎÉàÏˇˇ˙ˇˇ˚ˇ˙ˇ˚{Ùˇ˛ˇ˚ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇ¸ˇˇˇ µ˛ˇˇ˛˛˛˝¸¸˝˝˝˛˛˛˝˛˛˛˝˝˝˛˛˝˝˛˝˛˝˝˛˛˝˝˝˝˝˝¸˝˛˝˝˛˝˛¸˝˝˝˝˝˝˝˛˝ˇ˝ˇˇˇˇˇˇˇ˛˛ˇˇ˛˝˛˛˝˝˝¸˝˝˝˝˝˝˝˝˝˝˝¸˝¸˝˝˝˝˝˛ˇ¸ˇ˝ˇ˝˝˝˛˝ˇ˛˝˝ˇ˛˝˝˝ˇ˝˝˝˚˚˝˝˛˛ˇˇˇ¿∂ˇˇˇˇˇˇˇˇ˛ˇ˛˝ˇˇˇˇˇˇˇˇˇ|˚ˇ˝¸˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˛õÿ˝˛ˇˇ˚©Àˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ’™˚ˇˇˇˇˇ˝˚˝˛ˇˇ˚ˇˆˇ˛ˇˇˇ˘ˇˇˇ¸ﬁ±ˇ˚˙ˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛˛˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇ˙˚ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ¯ˇˇÏm¸ˇˇ˚˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛‰á¯ˇ˛˝˘˙È“·˝˛˛˛ˇˇˇ˝zÙ®	Ò˚ˇ˙ˇˇ¸ˇ˝–OÕ˘˝ˇ˛ˇ¯ˇ˚ˇÉˇ˙ˇ˘ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇ˝ˇˇ˝ë¥˝˝˝˛ˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇˇˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇ˛˝˝¸¸∑ˇˇˇˇˇˇˇ˚ˇ˛ˇ˛ˇ˛ˇˇˇˇˇˇˇˇçÛˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˛ö€˝˛ˇˇ˚†›ˇˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ⁄™˚ˇˇˇˇ¶koº˛ÓïÚˇ‰óÛıáâ€ôÙˇ˝ˇOGˇÂdˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛˛Ëˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˆv6ë¯˛˛ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˆˇˇ˝}ﬂ˛ˇ¸¸˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇè˚ˇˇˇˇˇˇˇˇˇˇ˛˛ˇˇˇˇ«ŒˇˇΩÙ˝ˇˇˇˇ¸ˇˇ˝˚àÜÚˇˇ˘ˇ˙ˇˆ~Íˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇ˝ˇ˚˛˛¸©°Â˜ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˜ˇˇıåÅ!´ˇ˘ˇˇˇ˛ˇˇˇ˛˛˝ˇˇˇˇˇˇˇˇˇäıˇ˛¸˛ˇˇˇˇˇˇˇˇˇˇ¸ˇˇˇë—˝˛ˇˇ˚ª…ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇﬁ´˚ˇˇˇ¶beÆ—ÿˇ◊%⁄∑èœ◊ˇ˝˘ﬁÔ/ƒˇˇˇˇˇˇˇˇˇˇ˛ˇˇ˝ˇ˝˛ˇˇˇˇˇˇˇˇˇˇˇˇä    U˚˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¯ˇ˚ˇπ±˝˛˝˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÓÄ˙ˇˇ˝¸˝˚¸˚ˇˇˇˇ˛ˇ˙ˇ÷„ˇ¸˛ˇˇ˝ˇ˚ˇˇ˛˘ˇ˝ˇΩl˙¸ˇ˘ˇˇˇtÂˇˇˇ˝ˇ˙ˇˇˇˇˇˇ¯ˇˇˇ˛ˇˇ˛ˇ˘ˇ˚ˇˇˇ˚˝˛ˇ”fº˛ˆˇˇ¸ˇˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇ˛ˇ˝ˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇˇ˛ˇ˝ˇ˛ˇˇˇˇ¸ˆ˚˝˚˛˚ˇˇ˝ˇıˇˇˇˇ˛ˇˇ˛ˇˇ˛ˇ¸ˇ˝ˇ˛ˇˇˇ˛ˇˇ˛ˇ˛˛ˇ¸ˇ¸ˇˇˇˇ˛˛˝ˇ˝˝˛˝ˇ˛˝˛ˇˇ˚ˇ˛˛Úªq‘Í 9Âˇˇˇˇ˛ˇ˝˛˛˛ˇˇˇˇˇˇˇˇˇé˚ˇ˝˝˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˛Ø“˝˛ˇ˛¸ÆÃˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇˇ€ö˙ˇˇ˜4uı¯íh’›ˇ‘ŸÆ2ˇ∑Õˇ¸ª*{˙sÑˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇ    Œ˛˝˛˝ˇˇˇˇˇˇˇˇˇˇ˛˝ˇ˙ˇ≥ì˛ˇ˝ˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÎà˘ˇ˛˙¯¯ˆ¯¸˛ˇˇˇˇˇˇˇÍô˙:‚˚˚ˇˇˇ¸˛ˇ˙ˇˇˇ€y’˝ˇ¸ˇ˜âÌ˘ˇ˙˛Ô»òøˇÂ≈ˇıÛ∆ÓŸËˇ◊¨ï˛˝ˇˇ˝˛ˇˇˇ¯æÄñΩΩ—¬≈√ƒ”ø∆À¿À∞¡Õø√æ∫∆ƒ≈æ∫≈ƒøªæ¡±øªŒƒ≈∏ª∏≥∑º´≤√´º∏≥π∂º™∫Æ≤Ø∞Æ±∫°Ø±§√≤™¿¨™≥¨õ≥≤´¿™∫π´≤™´≥´±´™©™©π£≥™§¥´≤©≥≤≥´°≥¨≥™´£¨°ûòÅq©ˇˇÚ! 
ÄÈ˘¸˛ˇˇ˝ˇ˛ˇˇˇˇˇˇˇˇˇÉ¸ˇˇ¸˝ˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ°À˝˛ˇˇ˚π—ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ€°˚ˇˇ˛7PUJU»Í˛–‘†2ˇª ·ˇˇcJé%Ï·=˛ˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇÌ     Ø˝˚¯˝ˇˇˇˇˇˇˇˇˇˇ˚ˇˇ¸ã¨¯ˇ˛˛˛ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÍç¸ˇˇ˝˝¸¸¸˝ˇˇˇˇˇˇˇˇ˙ãR<˙ˇ˘ˇˇˇˇˇ˝ˇ¸ˇˇ˝w›˜ˇ˘ˇÑﬁˇˇˇıgHBºÑçˆRA‹œ‘<&‰ˇ˛ˇ˚ˇ¸ˇˇ˝ˇˇÓ‹«∏∞∑π∑∫≈ƒ∫∑¬Ω∫∂Ω∫∂πΩ¡ƒ≈ ≈¡æ∏∆√¬Ω¡Ω“∑≈ ≈¡À“ƒ√¿À–≈¡“’«–∆– ª`@¬Ã√ª∂Ã»ƒ“ƒ∏√¡√À —” “ ““À— ∏Ω““ øm∑œ”“ÿ›——Ÿ€“ÿ⁄““————⁄Ÿ€ÕﬁÓˆ˝ˇ¸ˇ˘/   ú˝˛˝¸¸˛ˇˇˇˇˇˇˇˇˇˇôÙˇ¸˝ˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˛ú–˝˛ˇˇ¸∞Àˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ”™¸ˇ˛ÎHÑôE#÷ ıÒ“ „ö8Í∏ ÿˇ¸≥ÿ≈˝E‹ˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇ˝ˇ¯2     ¶˝¸¯˚ˇˇˇˇˇˇˇˇˇˇ˛¸Ávƒ˙ˇ˚ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÔâ¸ˇˇˇˇˇˇˇˇˇˇ˛˛ˇˇˇˇ˘ˇ±ksÌ¯ˇ˘ˇˇˇˇˇˇ¯ˇ˚ˇˇˇÍZ˙ˇ¯Éﬂ¸ˇ˙ÿ ¨˙¿∆xí∫Î–¥ »pô˝ˇ˝˛¸ˇ˝ˇˇˇ˝¸¸˚˛¸¸˚¸˚˚˛¸˚¸¸¸¸¸¸˚¸˚˚¸˚¸¸˝¸˝˚˝˙˝˚˝˝¸¸˝¸¸¸˝˚¸¸¸˝¸˝˝ˇ˛˙˜˚˝ﬂ˘˛¸ı˚ˇˇ˚˝¸˛¸¸¸˚˚˛˚˝¸˝˝˝˚˝˝˝¸˝¸¸‰~¯˙˛¸˛ˇ˝˛˝˚˝¸˝Î˚˝˝¸˚˛˝¸ˇ¸¸˝˛ˇˇˇ¯<      l˛ˇˇ¸˛˛ˇˇˇˇˇˇˇˇˇçÛˇ˛˝ˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇ˛•⁄˝ˇˇˇ˚∞¬ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ‰°˚ˇˇ˚^>Œ‹5d› g’µ’éÍ« X«≤Áı3z˛m¢ˇˇˇˇˇˇˇˇˇ˛ˇˇ˝ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇ∂	   çöÇñ∆ˇˇˇˇˇˇˇˇˇˇˇ≈ÖÖÁ¸ˇ¸¸ˇˇˇˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇıÇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ˛ˇ¸ˇˇˇˇˇˇˇˇ¸ˇˇˇˇ˝˝ˇˇˇˇ›dÁ˛˛É⁄ˇˇˇ∞ Ñìòg’ÊL3 ]˝ÛÃ» ”º8˛ˇ˝¸ˇˇˇ˚˚¸˛ˇˇˇˇˇ˛ˇ˛ˇˇˇˇˇ˛˛ˇ˛ˇ˛ˇ˛ˇ˛˛˛ˇ˛˛˛ˇˇˇˇ˛ˇ˛˛ˇˇ˛˛˛˛ˇ˛˛˛˛ˇˇˇ˛ˇˇ˛˘˝¸o  ºˇ˛˘¸ˇˇ˛ˇˇ˛ˇ˛ˇ˛ˇ˛˛˛˛ˇ˛˛ˇˇ˛˛˛ˇ˛˛éÿˇ¸˝˝ˇˇˇˇ˛¸˛ˇ˝ô®˛˛ˇ¸˝ˇˇ˛ˇ˛ˇ˛¸˙˚ÚV    >Ÿ˛˛˛˝˛ˇ˛ˇˇˇˇˇˇˇˇí˚ˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇ˛˛ˇ˛§◊˛˛ˇˇ¸±¿ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇﬁ°˚ˇ˚ˇÁ@6Ê‡6xŸ <»;Z[ˇ˙ß9˜ÕU˘ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ⁄ÄñÍˇˇˇÓ°rvñ¥¡π¥ßãÖv∫Ì˛˛˝˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÔÄ˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝Êv˚˙âÔˇ˛ˇæ LAA é„R8 {ÒÏ‘ƒ’Ì’ˇˆˇˆˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛˛ˇ˛ˇˇˇˇ˘˘«   GÚˆˆˇˇˇˇˇˇˇˇˇˇˇˇ˙Ω›ˇ˘ìy¨˜ˇÒÿró◊u˚ˇ˝¯˛ˇˇ˛ˇˇßÔˇˇÆD˝ˇ˝¸¸ˇˇˇˇˇˇˇˇˇˇ˜y  "ß˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÖ¸ˇ˝˝˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˝¶⁄˝˛ˇˇ˚ØÃˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ€¢˚ˇ˝˚ˇ˝ –Í˚¸ÛÚ”„˚˙ï$ıˇı◊˚ˆˇ˛¸ˇ¯0Ëˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇˇ¸˝˝ˇ˛˛˝˛˛¸–±∞∂∫ƒÏ˝˝˛˛˛˛˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˘á˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚–ˆ~Û˝ˇ˙›®˘∏≈ü	g»ﬁΩ… ’˘iò˚˙˛˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇ˛˛ˇˇˇˇˇ˚Í   ›˜˝˝ˇˇˇˇˇˇˇˇˇˇˇ˝-®˝?2d'm˘ÆWS'“ÓËÙ‚ËÁÌˇˇÁªˇˇYS˙ˇˇ˝˛ˇˇˇˇˇˇˇˇˇˇ˝Ä hÇ˜˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇôÌˇ˝˝˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˛¢ﬂ˛˛ˇˇ˚≤‘ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ›™˚ˇˇ˛ˇ˛ˇ˝ˇˇˇˇˇ˚ˇ˛ˇ |˙ˇ˜ˇ˘ˇˇˇ˝ˇ¸ˇˆfßˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇ˝ˇˇˇˇ˛ˇ˛ˇ˝ˇˇˇ˚˚˛˝ˇ˛ˇˇ˛ˇˇˇˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˙â˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇ˙æölÚˇˇˇˇë$[›
áéˆdGÔ∆ ˇªM˚˛˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇˇ˛˛˛ˇˇˇ˛á     Ç˘ˇ˝ˇˇˇˇˇˇˇˇˇˇˇÔ ïÆ-Û˘Ω‚ ÄˇˆGxÖ"à˝˛’øˇˇ¯˝ˇ˝¸¸ˇˇˇˇˇˇˇˇˇˇˇ¯§Pˆ˙{˜¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ®¸˛˛˝ˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˝¶⁄˛˛ˇˇ˚∞Àˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ€°˚ˇ¸˛ˇˇˇ¸˝˚˝˝˛˚ˇ˝˛˙¸˙ˇ¯ˇ˘ˇ˝ˇ˝˛˛ˇ˚‘«ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ˛˝˛˛ˇˇˇ˛˛˝¸˝˛˛˝˛˝˛ˇ˛ˇ˛ˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¯ï˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚ˇ˚ˇèHÁ˘ˇ˘˛˜ÿüæˇ‚Ÿ‰˙ıı–È—Î© æ¸4Èˇ˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇ˛ˇˇˇˇ·     "ˇˇˇˇˇˇˇˇˇˇˇˇˇˇúqSˇ˛Îè∞ˇıÉ.Ó›ÊÂﬁÏÙ˛˚‡∑ˇ˛˝˛˛ˇˇ¸ˇ˝ˇˇˇˇˇˇˇˇˇ˙¸¸ˇ˝~¯˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇöÊˇ˛˝˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ¢Ÿ˝˛ˇ˛¸≤Àˇˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇﬁö˚ˇ˝ˇˇˇ˛˙˙˙¸˚˚¸˛˝¸˙¸˝˛˝¸˙˚˝˛ˇ˝ˇˇ¸ˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˝¸˝ˇˇˇˇ˝˚˚˚ˇˇˇ¸˝˚¸¸˝˛˛˛˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÔá¸ˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˙ˇˇ¸DÔˇˇˇ˝˛˙˝ˇ˝ˇ˚ˇˆˇˇˇ˙,Ë≈4‰ˇ¸o´˝¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛˛˛ˇ˛ˇˇˇ]    ≠ˇˇˇˇˇˇˇˇˇˇˇˇˇÚ"úì4ˇ˘Ôí≤ˇ¯yB¥mWdly¨¸ˇ€¡ˇ˛˚¸˚˛¸¸ˇˇˇˇˇˇˇˇˇˇˇ˚ˇˇˇ¯uÓ˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇñÛˇ˝˝ˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇ˝•—˝ˇˇˇ˚ØÀˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ€õ˘ˇˇˇˇˇ¸˝˛˝˛ˇ˝ˇ˝ˇ˝ˇ˛ˇ˙ˇ˙ˇ¸ˇ˛ˇ˛ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛˛ˇˇˇ˛ˇ˝˝˝ˇ˛ˇˇ˛ˇ˝˛˛˛ˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇà˘ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇˇÖÍˇˇˇˇ˛ˇˇˇˇ˛ˇ˛ˇˇˇˇıô‰ˇ˝ˇ¸ˇ√°˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇ˛˛ˇˆˇˇˇÒ◊øâE}nR°ˇˇˇˇˇˇˇˇˇˇˇˇˇ‰É≥£Áu#ﬂMCÙ€&íæïêàÜÑÕˇ¸“∑ˇ˝¢•¸ˇ¸˚¸ˇˇˇˇˇˇˇˇˇˇ˝˛ˇˇˇgÙˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇôÛˇ˝˛˝ˇˇˇˇˇˇˇˇˇˇ¸ˇˇˇ£ÿ˝ˇˇˇ˚∏¬ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ€¢˚˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇ¸ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˛˛ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˙é˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛˝ˇ¸óÎˇ˙ˇ˙ˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ˘ˇ¸ˇ˛˛˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ˛ˇ˛ˆˇˇˇˇ˘˛êŒ˘˙ˆˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇ_ ßñ)Õˇﬂ=\˝˝˝˝ˇ¸Ú˚ıâgøˇ˚rU˙ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇpˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇä¸˛ˇ˝˛ˇˇˇˇˇˇˇˇˇˇ˛ˇˇ˛£—¸˛ˇˇ˚®Àˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ è˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÔâ˚ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˙ˇ¸˛ÅÒˇˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇ˚ˇˇˇˇˇˇ˜ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛ˇˇˇˇˇˇ˛Îq˜¸˘˜ˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ÕâˇˇÊ“˜ˇˆ˜˜”‹o¸˚ˇˇ˝ˇıˇÒ^  ¿ˇˇ˘ˇˇ˛ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˆoˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇüÎˇ˝˛˛ˇˇˇˇˇˇˇˇˇˇ¸ˇˇ˝ê⁄˝˛ˇ˛˚¢ ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ“í˙˛¸˝¸ÏÙ¸˝¸˝¸¸˛˚ˆ¸¸¸¸˝¸¸¸¸¸˝¸¸¸¸˝˚¸¸˚˝˚˝˚¸¸¸¸˚¸¸¸¸¸ˇˇˇ˛ı˚˚˙ˇ˛ˇˇˇˇ˚ˇ¸¯˝˙ˇ˚˝˝ÈÛ˚Ú˚¸˚˚Û˙¸˙¸˚˚˙˚˚˚˚˚¸˙¸˚˚¸˚˚˚˚˚˚˙˚˚˙˚˙˚˚˚˚˚˚˚˚˚˛Ó~˘ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸˝ˇ˚ÜÌˇ˝ˇ˜ˇ¸ˇˇˇˇˇ¯ˇˇˇˇˇˆˇ˝ˇˇˇ˜ˇ∂§ﬁˇÛˇ¸ˇ˛ˇ¯ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇ¸ˇ˚Õ©˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÒF ’ˇˇ˘ˇ˚ˇ˝ˇı˚í·¸ˇˇˇˇˇˇ˛ˇÿ)ªˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚ˇ˝ˇﬁã˚˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇíÙˇ˝¸˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˛õÿ˛˛ˇˇ˚©Àˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ﬂ[ûè°òèòôôóçô°òòô°éèôöô£ôéèôôêèàéwëÑëÑvÑàëÑêÖê{àêÜâÑãíìo}ãàîçÖòÖÑÜn|ÉznxrjgonryÖprxp|zgfiyxhq|zghÄrpgi]pphhsh]hrYzrÅtihqzhebw˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˛ˇ˚ÇÛˇˇˇ¸ˇ¸˙˛ˇ¸ˇ˝ˇˇˇˇˇ˘ˇˇˇˇˇ¸ˇüIBˇ¯˛˛ˇ˛ˇ˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝ˇ˝ˇNÍˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˝ÔöÒ˚ˇ˝ˇ¸ˇˇˇ˜˘£≠˛ˇ˛ˇˇˇˇˇˇˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚ˇˇ˛≥´ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇéÍˇ˝˝˝ˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˛•Ÿ˝˛ˇˇ˙© ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ∆{Ã –«ª–√∑»»¡œø––œ–––––––œ–––÷«»»÷÷ŒŒœ÷«◊Œÿ–ÿ›‡›Œ‡ﬁ‡ÿ”‡€—‡€’›·ﬁÈË·ÊÂﬂ„‰Í‰◊Âﬁ€„‚ﬁÎÈ„„ÔÍÔÍÎ¯„·Á„ÁÍÍ˘È„›˜¯¯¯¯¯˘¯¯˘Ò¯¯˚›í˜ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˛ˇ˚ÜÊˇˇ˝˙ˇÙ€‚˘¸¸Û¸ˇˇ˘˙˛ˇıˇˆ˙˜ˇˇ”∆¸ÍÒˇ˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˝˛ˇ˛˝¸˝˙ˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇˇ≈ï¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÚˇ˙ˇ¸ˇ˚ˇˇˇ˜ˇ¸˘”sÔˇˇ˙ˇˇˇˇÙˇ¸ˇ¸ˇˇˇ˝˛ˇˇˇˇˇˇˇˇˇˇˇˇˇ˚ˇˇ˙v˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÉÏˇ˛˝˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇ¸õ–˝˛ˇˇ˚©÷˛ˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˝‡ù˙˝˝˝˝˝˛¸˝˝˛¸˝˝˛¸˛˝˝¸˛˝˛˛˝˝˛˝ˇ˝˝¸˛˝˛˛¸ˇ¸ˇ˝˝˛˛ˇ˝˛˛˝˛ˇˇˇ˙˝˙˚ÈÈ˚ˇ˘ˇ˛ˇˇˇ¸ˇ˚ˇ˛ˇˇ˛˛¸˛ˇ˛˛ˇˇˇ˛ˇ˝ˇ˝˛˛˛˛˝ˇ˛ˇ˛ˇˇ˝ˇ˝ˇ˝ˇˇ˛˛˛ˇ˛ˇ˛ˇˇˇ˛˛˛ˇˇˇ¯˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˝ˇ¸ÅÚˇ˝ˇ¸ß®˛ëP[¯ˇhy˛|≠téˇ˝ˇŒuˇÅ~¸˛˛ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝¸˛˚˚˘¯˙˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇ˛Ûn˚˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÒ˚˛ˇˇ¸˚ˇˇˇ¸˙˛Û˚`·ˇ˛¸˝¸ˇ˙˘˝¸ˇˇˆ˚˝˚¸˝ˇ˛ˇˇˇˇˇˇˇˇˇˇ˝˝ˇ∑πˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÜ¸ˇ˝˝˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇê‚˝˛ˇˇ˚∏ ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇÀπ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˙ˇ˝Ëd)wÛ˛ˇœ-h˛ˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇÍè˚ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸˝ˇ˙}‰ˇˇˇÈ—ä€p_^ˇ˛\e˚!äÒfs˝ˇ˛ö'Ú€;Úˇ˚ˇ˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸˛˛˛˝˘˘˚¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚ˇãÀ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˝ıˇ˘ˇ˚˝∂à≠˝˙¯˝ˇøêıˇ¯ˇ˝˛˝¸˚˘ˇ˛¢wØ˝˝¸¸˝ˇˇˇˇˇˇˇˇˇˇˇ˛ÌÅ¯˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÑ¸ˇ˛˝˛ˇˇˇˇˇˇˇˇˇˇ˛ˇˇ¸§Âˇ¸ˇˇ˚±÷˛ˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ‡©¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸g .h Ç˛ˇ… I¸ˇ˛˚ˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇë˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˛ˇ¸ÅÂ˛ˇˇ∞µÏŸß⁄bIG˜ˇkYÔÅ˝jX¸˚ˇKrœ˘6—ˇ˘ˇ˘ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˛ˇˇˇ¸Ì˚¯ˇ˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚«s˝ˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇ˘ˇ˘ˇ¸ˇ`Fáˇ˘ˇ˛ˇ˛á‘¸˙ˇ˝ˇˇˇ˙ˇ˚ˇÅ3MÍˇ¸˚¸ˇˇˇˇˇˇˇˇˇˇˇ˙èﬁˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇé˝ˇ˛˝˛ˇˇˇˇˇˇˇˇˇˇ¸ˇˇˇõ€˝˛ˇˇ˚®Àˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇŸ¨˘˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˜ônöè1 t˝ˇ∂ I˛ˇˇ˘ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¯å˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸˝ˇ¸}Ëˇˇˇ° 	 •WRD˙˛ccêˆmg˛˜‰›Bx˙rå˛˙¸˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸˝˝˝¡:;¬˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸«Åˇ˙ˇ˚˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇŒˇ˙ˇ‰˜Lù¯˙„ı¸ÊÒ‚£Ÿæ‚˚˝ˇı¡ºÚˇıÄFªÙ¸˙¸ˇˇˇˇˇˇˇˇˇˇˇﬂêˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇä¸ˇ˛¸ˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇˇõﬂ˛˝ˇˇ˙¢“ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ⁄§˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˝—)  *–¸ˇπKˇˇˇ˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÛè¸ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸˛ˇ˚|Ù˛ˇ˘«∂‡ø ¿_'ÍˇMaÚàÚm3˙Ûï:ˇö2Í«9˙¸˙ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˙˛˛ß    —ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ•ç˛˛ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÿ›ˇ—Ó@ú˛È ‡Í%¢Ò].´˛Ω+D¸¸çGC∑˝˙ˇˇˇˇˇˇˇˇˇˇˇ‚¸˝ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇíÛˇˇ˚˛ˇˇˇˇˇˇˇˇˇˇ¸ˇˇ˛õ‡˝˛ˇˇ˚©’ˇˇˇ˛ˇ˛ˇˇˇ˛ˇˇˇ¸ˇˇˇˇˇˇ˝˚ˇ˜ˇ˙ˇˇ˝˚ˇ¸—ö¸ˇ˛˛˛˛ˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸ˇ¯q 5àxá‚˚¸∂ P˚ˇ˛ıˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ˛˛ˇ˛Òã¸ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˛ˇ˚w˛ˇˇ˘>t!=˝c  Jk ¶° 0Œ` =ñÖ˘È«Ú)“ˇ˙ˇˆˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˚˙˝@     ïˇˇˇ˛˛˛˝˝˛˝˝ˇˇ˚¸˝˛Ëuµ˝ˇ˛˝˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¬ Ë˚ ÍN¥ˇ˚≠ÚÙ…°›Ù}Û$Å˚‚8ñ˛ãYörˇ˛ˇˇˇ˙¸¸˛ˇˇˇÏXÏˇ˛¸˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇéÛˇ˝˝˛ˇˇˇˇˇˇˇˇˇˇ˛˛ˇ˛¶Îˇ˛ˇˇ˚°‘ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇ¯ˇ˙ˇˇˇ˝ˇ˛·•˝˛ˇ˛˛ˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˚¯ç #{ «ˆÛ¨ I˚ˇ˛¯˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇ˛ˇ˛ˇˇ–ù˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˛ˇ˚|Ù˝˚˛˛Ï~YhÍˇ¿ùûãSîÒ©?÷∂†wúz‰˘ˇ®À˝rí˝ˇˇ˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˙˘¸:     Öˇˇ˚ˇ˛ˇ˛ˇˇ˝ˇ˜˝ˇˇÙö~◊˛ˇˇ˛˛˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ… Ê˝ÕÈEßˇ˜IÛ˘'øj?˝˚‚∏’ˇ˙ÅV˜äVœÛˇˇˇˇˇˇˇ˝˛˚⁄~Ì˛˛˛˝˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇã˚ˇ˛˝˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˝úÂ˛˛ˇˇ˚≤ ˇˇˇ¸ˇˇˇˇˇ˛ˇˇˇˇˇ˝ˇˇˇˇˇ¸ˇ¸ˇˇˇˇ˛ˇˇˇá˚˛˛ˇˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸¸˚˘k	$†˙¨  P˝ˇ˝˙˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛˛ˇ˛˛˛¿∂ˇ˝ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸¸ˇ˚x˝ˇ˙˝¸ˇ¸˛˛ˇ˜˛¯ˇ˙¯˛¯ñˇˇ˜¸ˇ¯ˇ˜ˇ¸ˇˇ∑EÙˇ˘ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˙˚¯˝x     WÖ≈˜˚¸˚¸˙˚˚¸ˇÛ Üy«¸˛ˇ˛˛ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÀ⁄ˇÃÛM•ˇˆ ˚ˆøiA¸ˇ˘	±⁄ˇ¸wP¸çOıC≈ˇˇˇˇˇˇˇ˛¸≤åÈ˛ˇˇˇ˛ˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇè¸ˇ˝˝˛ˇˇˇˇˇˇˇˇˇˇ¸ˇˇ˝ú·˛˛ˇˇ˙°“ˇˇˇ˝˝˝˝ˇ¸ˇˇˇ˛ˇˇˇ˚˛ˇˇˇ˝ˇˇ˚ˇ˝ˇ˝ˇ˚ˇ˘ë˙˛˛˝˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚˚¯˚˘ˇˇÙ˙⁄ò8 D˘ˇ˝¸˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˝˛˛¸˛âÏˇ˚ˇ˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝ˇˇ¸tÛˇˇ˝˛˚¸˝¸ˇˇ˝ˇ˘˝˝˚ˇ˘÷ﬁˇ˚˙˝ˇ˜ˇ˘ˇ˝ˇˇÒ=˜ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸¸¸˛Ï=   èˇÚ∆úïâ{ã†ïóÅçúΩÔˇˇ˝¸˛ˇˇ˛˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ— ßÚøJìˇ‡!‡Ú'¥õËÙì ‹*äˇÙ-å˙á[˙õx˚ˇˇˇˇ˝ˇº¿˛ˇ˛˛ˇ˛¸ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇã¸ˇ˛¸˛ˇˇˇˇˇˇˇˇˇˇ˝˛ˇ˛îÂ˝˝ˇˇ˚©”ˇˇˇ˝˘£Ñ}‰Íñ‰˚˚†“ØŒ¸¡ÄlËˇ˚ˇ˝ˇˇˇˇˇ˘â˘˛˛ˇˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇ˛˛˝˝ˇˇˇˇˇˇÔ'm¸ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ¸ˇˇˇ˛Ú{˚ˇ˚ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˝˝ˇ˙Çˇˇ˛¸˘˚¸˚˝˛¸˚˘˝˝˛˛ˇ˘ˇ˙ˇ˝˛¸˚¸˝˝˛˛¸˝ˇ˙ˇˆˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇ¸˝˝˝Ω°Âˇˇˇˇˇ¸˛˝Ù‚Á˝˛ˇ˛˝˛˛ˇˇˇ˝˝˛˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ«NcÙD∞ˇ€œ\'ØT+Güˇ∏603˚ˇÜ_˝„LÍˇ˛ˇ˜Økµˇˇˇ˛¸˝˛˝˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÜÚˇ˝˝˝ˇˇˇˇˇˇˇˇˇˇ¸ˇˇ˛ëÎ˛˛ˇˇ˚°Àˇˇˇ˛á%T@È9>Êt'€#åÏ'4Bêˇ¯ˇ¸ˇˇˇ˛ˇ˘∏ß˝ˇ˛ˇ˛ˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˙˝ˇˇˇ˝ˇˇˇˇˇˇ˝ˇ˝ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛ˇˇÆ¡ˇ˚˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇ˚uÎˇ˝ˇ˚ˇ˝˛ˇˇ˝ˇ¸ˇ¸ˇˇˇ¸ˇˇˇ˝ˇˇ˚ˇ˚ˇ˝ˇˇ˝ˇˇˇ˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛˛ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸…öçô‚˙N†ˇÀ“ØÄÂ˘òÉ∫ˇˇˇ«íóËˇ˚ÖP¸˝AŒˇ–âçÆ˜ˇˇ˝ˇˇ˝˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇä¸ˇ˛¸˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˛ìﬂ˛˛ˇˇ˚© ˇˇˇÏôÌÙd≤∑dë‚1ÜË±ªK˚˙ˇˇˇˇˇˇˇ¸Ùz–˛ˇ˛ˇ˝ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇ˛ˇˇˇ˝ˇ˛ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛˛˝˛ˇÈs˚ˇ˚ˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˝˝ˇ˚ã„ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇ˘ˇ˛ˇˇ˛ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇ¸ˇˇ˛ˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÕ≈ˇˇˇÓBV “	–Ó$L‹ˇÙˇ˝ˇˇˇ˛˚ˇˇˇ∏UC˜ˇ}õ˚ˇ˛˚ˇ˝˝˝ˇ˝ˇˇˇˇˇˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÖ¸ˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇ˚ˇˇ˛ê⁄˝˛ˇˇ˚°“ˇˇˇ  WSgF´˝Ö HÔÚ ñË©Í,Îˇ˝ˇˇˇˇˇ˛˚ˇÈÖË˛ˇ˛˛˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛¸ˇ¸ˇ˝ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸˛ˇÌcŸ¸ˇ˜ˇ¯ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸˛ˇ˚t˜ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇˇˇˇ˛ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇÔˇˇˇˇˇˇˇˇ¸¸˝˝˝˝¸¸˚˝˝ˇˇˇˇˇˇ˛ˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ’i‰ˇ˚ˇ¯yXáÎaÁ˚•6¡ˇÚˇ˘ˇˇˇˇˇ˛ˇˇâ[ïÙˇºåˆˇ˝ˇ˝ˇˇˇ˛˛˝ˇˇ˛ˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÑÌˇ˛¸˛ˇˇˇˇˇˇˇˇˇˇ¸ˇˇ˛Å◊˝˝ˇˇ˚® ˇˇˇ“ kÉÄwÍd B·˙ïÂ∏Ùh©ˇ¯ˇ˜˛ˇ˛˛˛ˇ˛ËìÏ˛˝˚˝˚ˇ˝˝˝˝˛˛˝˛˝˛˝˛˛˛˝˝˛˛˝˛˝˝˝˝˛˝˛˛˛˝˛˝˝˛˝˛˝˛˝˝˝˛˛˝˛¸˛˝ˇˇˇˇˇˇˇˇ˝˝˝˝˝˛˝˛ˇ˝˝˛˝˛˛˝˛˛˝˛˝˛˛˝˝˝˛˛˝˛˝˝˛˝˛¸ˇ˝˝˛˛¸˛˝˛˛˛˛ˇˇ¸˝¸Âb|ı˝ˇ˙ˇ˛ˇ¸ˇˇˇˇˇˇˇˇˇˇ¸ˇ˚ˇˇ˛ˇˇˇˇ˚ˇˇ˛ˇˇˇˇˇˇˇˇˇˇ˛¸˛ˇ˚}Èˇ˜ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇ˘ˇˇˇˇˇˇˇˇˇˇˇˇ¸˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˜ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛ˇˇˇˇˇˇˇˇ}Ûˇ˛˝˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˛ä◊˝˛ˇˇ˙©‘ˇˇˇ˝(PËÃπ°îrË)Ç‹
úÓÆC˚˛ˇ˚˛˛ˇ˛ˇ˛ˇˇ–g“˝ˇ˝ˇ¯˛ˇˇˇ˛ˇˇ˛ˇˇˇˇ˛˛˛ˇˇˇˇ˛ˇ˛˛ˇˇˇ˛ˇ˛˛˛ˇˇ˛ˇˇˇˇˇˇˇ˛ˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇ˛ˇ˝ˇ˛ˇˇ˛˛˛ˇ˛ˇˇ˛˛ˇ˛˛ˇˇˇ˛˛ˇˇ˛˛ˇˇ˝ˇˇ˛ˇ˛˛˛˛ˇ˛ˇ˝˛˛˘˘ˇ¸∑vÒÀt˛˘ˇˆˇ˙ˇˇˇˇˇˇˇˇˇˇˇ˝ˇ¯ˇ˛˝˙ˇ˚ˇ˚ˇ˛ˇˇˇˇˇˇˇˇˇˇˇ˛¸˛ˇ¸m‡˘˘˘˙˙Ó˘˚ÒÔ˙Ò˘Ò¯˘˙˘˙˘˙˘˙Ò˚˙˘˙˙˙ÓÒ˘Ó˘˙˘˙˙˘˙˙˚˘˙˙˙˙˙˙˘˙˚˙˘Ó˘˙˘ÔÓ˘˙È˘Ô˘˘Ò˘ˇ˚ÚÎÒ˜Á˚˘Ùˇ¯ÚˇıÎË˚ÛÍÚ˛˙˙ÔÒ˚Ò˚ÔÚ‰Ò€ÚÔÔÒÓÈÔﬂÈÔÒÔÒÔÒÒÓ‡ÔÈÂÔÚÈ˙˚Ê€ÈÁÈÊÒÔËÍÊÒÓÚËÈÂÚÍÔÒÍÁ‡ÍÔÈÚÔÈÂ·ÒÚÊÖÍˇ¸¸˝ˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˛õ„˝˝ˇˇ˚°Àˇˇˇ˛Ê@ vˇHm˙ÕÿFòM ¡Ò(‡ˇˇˇ˛˛ˇ˛ˇˇ˛˛ˇ¯îÉ∂ˆ˚ı˚Ú˙Ú¸˘˚˘˚˘Ú˙˚˚˙Ú˙˙Ò˙Ò˚˚˙˙Ò˙˚˘˚˘˙˙˙˙˘˙˙˙˘˙Ò¯¸˘˙˙˙˚Ôˇ˙ˇˇˇ˙˚˙˚ÔÚÒ˙È˘˚˙˚˙˙˚Ú˙¸˘˙˚˙ÚÒ˙Û˙ÍÈÒÚ˙Ï˘Î˙Ï˚¸ÒÚÍÍÎÎÙ”âî¿¯˝¸ƒjˇÛˇÒˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ¸ˇˇ¸˝ˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇ˛¸˝ˇ˚}xáíéâáÄÜÄÄàÜÜâïáwéâÄàááâîêá£úïëéêáâéëááâÜáêïñöéàùöúé°éöïàxéöèàéÄáñwîâáëçéöÜàÄâëíëÉôàáê{åëî|çÑëÄ{ÖêããÖôîëéöïëïõêîíéà~áàwàéöîéêïëîêÜçêïôçêéôçáöñèÄòïè†èêïáçî°éõîôïìëîôïö¢ï±éëööììöîâî¢ú°IÎˇ˛¸˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˛õ◊˝ˇˇˇ˚© ˇˇˇ˛¯ıÈ‡˘˚˜¸ˇ˘ˇÍÙË˝´˘¸Zûˇˇ˛ˇˇ˛˛˛ˇˇ˛¸˛ˇı≤nbh|Ñt|~Ö~ssÄsjstsru|~{Ä{s`ruÑjkjk}kjusZuÑ`rutjubuÖwtkASsiålssqÄssujr~|ttstsbkïukststbj{avq_ssuå`||shÖsÉ{pô‚˛˛˙ˇˇˇƒvˇÚˇ˜ˇˇˇˇˇˇˇˇˇ˝˛ˇˇˇˇ˛ˇ˛ˇ˝ˇˇ˛˝ˇˇˇˇˇˇˇˇˇˇˇ˛¸˛ˇ˚Ç·˙¸˚˙˚˚˚˚˙˚˙˚¸˙¸˚¸˚˚˙˚˙˚˚˚˚¸˙¸˚¸˚˙˚˙˚¸˙¸˚˚¸˚˚˚˚˚˚˚˙¸˙¸˚˚˚˚˚˚˙˚¸˙˚˙¸¯˝˙˚˙˚˚¸˘˝˙˚˚¸˚˙˝¸˝˝¸¸¯¸ˆˇ˛ˇ˛˚¸˛˚˚¸˛ˇ¸˚˚˚˚˚¸¸¸˚˚˚˚˚˙˙˚˚˚˙¸˚˚˚˚¸˚¸˚¸˚˚˚˚˚˚¸˚¸˚˚˚¸˙˚˚˙˚˚˝˙¸˚¸˙˚˚˚¸˚˚˚¸˚¸˚˝¸˙˝˙˚˚˚¸˙¸˚˝˚}Úˇ˝˝¸ˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇõ€˝˝ˇˇ˚™“ˇˇˇ¸˝ˇ˛ˇˇˇˇˇ¸ˇ˛ˇ2è˘ÑÊ˝ˇ¥b˝˛ˇ˛ˇˇ˛ˇ˛˝˛ˇˇ˝˛˛˛˚ˇ˝¸˛¸˛˚˛˝¸¸˝˝¸˝˝˝˛˝¸˛¸˝˝˝˝˝¸˛¸˝¸˝˝˝˝¸˝˝¸˝¸¸˚˛¸˛˝˝¯˜ß∆ˇˇ˘¸˝¸ˇ¸˝˝˝˝˝˛¸˛¸¸˝˝¸ˇ¸˝¸˝¸¸˛˝¸˝¸¸˝¸˛˝˚˛¸˝˝˝˛˚ˇ˚ˇ˝˝ˇˇ˚˛˝ˇ¸ˇˇ˘√Ñˇıˇ˚ˇˇˇˇˇˇˇˇˇ˙ˇ¯ˇˆ˚ÏÛ¸˝˙ˇ¸ˇ˛ˇˇˇˇˇˇˇˇˇˇ˛¸˝ˇ˚}‰ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇ˝⁄êsÉÊ˜æ†Ø∞††·ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇëÙˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇ˛õ◊˛˛ˇˇ˙°‘ˇˇˇ˝ˇˇˇˇˇ˙ˇˇˇ¯ˇ˜„„ˇ˛ˇ¸ˇÛ¬ˇˇˇˇ˛ˇ˛˛ˇˇ˛ˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸·òˇˇ˘ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ˚ˇˇ˙ˇˆ◊oˇ˙ˇˇˇˇˇˇˇˇˇˇ˛ˇ˚ˇÀ/!º˛¸¸¸ˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˛ˇ˚nˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˛ˇ™ “2     ÆˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇáÚˇ˝˛˛ˇˇˇˇˇˇˇˇˇˇ˛ˇˇ˛õ‚˝˝ˇ˛˚©‘ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˝ˇ˛ˇ˛ˇ˝ˇ˛ˇ˛ˇˇ˛˛ˇ˚ˇ¸ˇˇˇ˛ˇˇˇˇˇˇ˛ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇ˛ˇ˛ˇˇˇ˛ˇ˛ˇˇˇ˛ˇˇˇÌT  Iˇˇı˛ˇˇˇˇˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇ˛ˇˇˇ˛ˇˇˇˇ˛ˇˇˇˇˇˇˇˇ˛ˇˇˇ¸ˇˇˇ˝ˇ˝ˆˇ˘‹|˜˝ˇˇˇˇˇˇˇˇˇˇˇ˚Ò5H¡yÙ˘ˇ˙ˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˝ˇ˚ç‚ˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ˛ˇˇˇˇˇ¸˚˝˝UÉ∑0 èà hãç‹˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇÉı˛˛¸˛ˇˇˇˇˇˇˇˇˇˇ¸ˇˇ˛ì◊˝˛ˇˇ˚∑Ãˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ˛ˇ˝˘ˇ˙ˇ˚ˇ˝ˇ˛˛ˇˇ˛˛ˇ˛ˇˇˇˇ˝¸¸˘¸˝¸˝˝˝¸¸˝˝¸¸¸¸¸¸˝¸˝¸˝˚¸˚¸¸¸¸¸¸¸¸¸˚¸¸˚˝¸¸¸˚˝¸¸¸˝ız   Ï˙ı¸˚¸¸¸¸˝¸˝¸¸¸˝¸¸˝¸¸¸˚˝¸˝¸¸¸¸˚˝¸˚¸¸¸˚˝˚˝¸¸˝˚˝¸¸¸¸¸¸¸ˇ˛ˇˇˇˇˇ˛˜ˇ˛Èk”ˇˇˇˇˇˇˇˇ¸ˇˇˇŸ ÷ˇÙëÌ¸ˇˇ˚ˇˇˇˇˇˇˇˇˇˇˇ˛˝˛ˇ¸uË˝ˇ˛˛˛ˇˇ˛˛ˇ˛˛ˇ˛˛˛˛˛˛˛ˇ˛˛˝ˇ˛ˇ˛˛˛ˇ˛˛ˇ˛ˇ˛˛˛˛˛˛˝ˇ˛˛ˇ˝ˇ˛ˇ˛ˇ˝˛˛˛˛ˇ˛˛˛˛˛˛ˇ˝ˇ˛˛˛˛ˇ˛˛ˇ˝ˇ˛ˇˇ˝˚¸ˇÚÇ;   Ω˚d µ˝ˇ¯˛ˇˇ˝˛ˇ˛ˇ˝ˇ˛˛ˇ˛ˇ˛˛˛˛ˇ˛ˇˇˇ˛ˇ˛˝˛˛˛ˇ˛˛ˇ˛˛˛˛ˇ˛˛˛˛ˇ˛ˇˇ˛ˇ˛ˇ˛˛ˇ˛ˇ˛ˇ˛ˇˇˇˇ˛˛˛ˇˇ˛ˇ˛ˇ˛ˇˇ˛˛ˇ˛˛ˇˇÑ˚ˇ˛˝˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˛úﬁ˛˛ˇˇ˚∫Àˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇ˚ˇ˚ˇ¸˛ˇˇÛˇπnÆ˛ˇˇÙˇ˚ˇˆˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ¸ˇ˝ˇ˛∫    ù¸¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸˛ˇ˝tµˇˇˇ˙˛¯˝ˇˇˇˇ’›ˇˇ¸ˇ˚ˇ˚ˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇˇìÏˇˇˇ˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˙˝˛© P¢˘˘˛í â˘˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ˛ï˝˛˛˙ˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ•⁄˝˛ˇˇ¸±Àˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇ˝ˇˇˇ˙ˇÕ}#‚ˇˇ¯ˇ¸ˇ˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇ˛ˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˜˝˛Ë     F˝¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇ˝˛˝˛˛©ãÈ˝ˇ¸ˇˇˇ¸ˇ˝ÌΩˇS„˘ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇˇã‡ˇ˛ˇ˙ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚¯˚˛} `•7«ÔÙÙª ’ˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇ˝ˇ˛É¸ˇ˛˙ˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˝ùÂ˛˛ˇˇ˚∫’ˇˇˇ˝ˇÍœ€ˇˇ¯¯˝ˇ¸¸˙ˇ”ı˘Òˇˇ˘ˇ9xˇÓ ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝ˇ¸˝˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚˚¸˝X      Áˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝ˇ˛ˇ˛ˇˇ¸‡Z«ˇˇ˝ˇˇ˝ˇ¸ˇ[â@0˘¸˛˛ˇˇˇˇˇˇˇˇˇˇˇ˛˛¯ˇˇ¸üÃ¸ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˘˝˛⁄   P˝S'Íˆ@ µˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇç¸ˇ˛˚˝ˇˇˇˇˇˇˇˇˇˇ¸ˇˇ˝ê·˝ˇˇˇ˙≤€ˇˇˇˇ¿6%g¸∑Óˇ∑8˛õq§-ˇˇˇ˚-˜«7˜ˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ¸¸˝˚˝˚˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇ¸ˇ¯˝˚¸ŒùB/-Øˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛˛˛˛ˇ˚˚ûâ‡ˇˇˇ˙ˇ˝ˇÅBk“˝ˇ¸ˇ¸ˇˇˇˇˇˇˇˇˇˇ˝ˇ¸¸˛¯‘†˛˝˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˚˙˛˚Â©õæ˙¯p ^û ‘ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇ¸ˇˆì¸ˇ˛¸˛ˇˇˇˇˇˇˇˇˇˇ˛ˇˇ˝§ﬁ˛˝ˇˇ¸±’ˇˇ˛ÙÅˇı!Æ•ˆˇø/Ú~0´4ıˇ˝¿Æı/øˇ˘ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇı˘Î˜˙˙˚˙˛˛ˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇ˛ˇ˛ˇ˙nÂˇˇÁÁˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˝˛˛˝˝¸ˇˇ˛ÈàéÎ˚˛ˇ˝ˇ˛¸ˇˇˇˇˇˇ˛ˇ¸ˇˇˇˇˇˇˇˇ˝¸¸ˇ¸ˇ˙¸è˚ˇ¸ˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˛ˇ˝ˇˇˇ¸ˇA ®¸ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇ¸˛˝ ª˝ˇ˝˛ˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇõ⁄˛ˇˇˇ¸©…ˇˇ˛—säÅá∫ßÎ˜≥4ˇgC¯°%˚˚˛QJhXÙäw˛˚ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇﬁT?«˝˚˙˝ˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇˇ¸ˇˇËìˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇ˝˛ˇ¸ˇˇˇ˙›Äò‚ˇˇ˝ˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝¸ˇ˝ˇ˝ˇÉÓ˛˝ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˚ˇˇˇˇˇˇˇ˝–√ˇˇ˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˝¸ˇ˚s˜˝ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˛úÊ˛˛ˇˇ¸®’ˇˇˇ“ ,J<	yõ ˇÙ∞,cJıô,ˇˆÔ ùµ„÷@˘ˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸\    Ú˙¸˘ˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇ¸ˇ˚ˇsÔˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇˇˇˇˇˇˇ¸˛˛ˇ¸˝‰å]‡ˆˇ˝ˇ˝ˇ˝ˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇŸW£Úˇ˚˘»ü˝¸˛¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ˝ˇ˛ˇˇˇˇˇˇˇˇ¸ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝¸¸˛∏™ˇ˝ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇ˛ê„˝ˇˇˇ¸ØÀˇˇˇ˛}Î€$õ†•Èò+ˇZMÁ†
µÊØ‹ˆ#ß˘? ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇÂ     ù˘¸˛˝ˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇ˛˝∞Øˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛˛˛ˇˇ˝ˇ˛ˇ¸ˇ˝ˇˇ„®v±˙˚˛¸ˇ˙ˇˇˇˇˇˇˇˇˇˇˇ¸Ò 0s£ﬂä—¸˝ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˝ˇ˚ˇ˛¸˛¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇ˛˝Ÿç˝˛˝ˇ˝ˇ˛ˇˇˇˇˇˇˇˇˇˇ¸ˇˇ˛õﬂ˝˝ˇ˛¸∞Àˇˇˇ˝√ eˇ∂ )!
ü∂ v¨AU]¸˛}`˜uoˇ˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ‰     ó˙˚¸˚ˇ˝¸˛˝˛˝ˇˇ˛˙¸˚ˇˇ }ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝ÀÜÉzòﬁÏÙ¸¸˛ˇˇˇˇ˛ˇ˛ˇ˜˙'     æ˙ˇˇˇ˝˛˛˝˛˝˝˝˝˝˝˝˛˝˛˝˝˝˝˝˝˝˝˝˛˝¸˛˝˝˝˝˝˝˝˛˝˛¸˛˛¸˝˝˛˛˝˝˝˛˝˝˝˝˝˝˝˛˝¸˛˝˝˝˛˛˝˛˝˝˝˝˝˝˝˝˝˝˝˛¸˝˝¸˝˛˝˛˝˝˝˛˝˛˝˝˝˝˝˝˛˝˝˛˛˛˛˛˝˝˛˝˝˝˝˛˝˛˝˛˝˛˝˝˛˛˛˝˛˝˝˛˝˝˝˝˝˝¸˛˛˛˛˛˛˝˛˛˛˛˝˝˝˝˝˛˝˛˛˛˝˝˝˛˝˛˛˛¸ˇˇ˝–áÙˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇ¢Á˝ˇˇˇ˙©’ˇˇˇ˛˚æ∆˚ˇ˙ÂÎºÿˇ˘Y.Ú˙ÒÒ“ˆ˚¸¸˜ˇˇ 0ı¯¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸\     ∂¯¸˘ˇˇˇˇˇˇˇˇ˛˛˛ˇˇˇ¸ºyÛˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˛˝˝˛˝ˇ‰õnvpë¡·˙ÈÒ˙˙ÔÒ‹–4      !∆éµıˇˇ˛˝˛ˇ˛˛ˇˇˇ˛ˇˇ˛ˇˇˇˇˇ˛ˇˇˇ˛ˇˇ˛ˇˇ˛ˇˇ˛ˇˇ˛ˇ˛ˇ˛˛ˇˇˇˇˇ˛ˇˇˇ˛ˇˇˇˇ˛ˇ˛ˇ˛ˇ˛ˇˇˇˇ˛˛ˇˇˇˇˇ˛ˇ˛ˇ˛ˇˇˇˇ˛ˇˇ˛ˇˇ˛ˇ˛ˇ˛ˇˇˇˇˇ˛ˇˇˇˇ˛˛˛ˇ˛ˇ˛ˇ˛ˇ˛ˇˇ˛ˇˇ˛ˇˇ˛ˇˇ˛ˇˇ˛˛˛ˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛ˇˇ˛˛ˇ˛ˇ˛ˇˇˇ˛ˇˇ˛˛ˇˇ˛ˇˇˇˇ˛˚¸˜Æä¸ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˝¶Ÿˇ˝ˇˇ˚¢—ˇˇˇ˛ˇˇ˛ˇˇ˛ˇˇˇ˛ˇˇ˚ïÉ˛ˇˇˇ˝ˇ˝ˇˇ˙ˇˇÙ/∆˛˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÊT 2®ÑÉ”ˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇ¨Ö˘˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇˇ˛ˇˇ¸¸˝˛˝˚’≤îöéïçâç´ùR    KÎˇ¸∑Ö∑ˆ¸¸¸¸¸˛¸˝˝˝¸˛˝˛¸˝˝˝˝˚˛¸¸˝˝¸˝¸˝¸¸˝¸¸˛˙˛˚˝¸¸¸¸¸¸¸¸˝˝˚¸¸˚˚¸¸¸˚˝˚˝˚¸¸˚˚¸˚¸¸¸¸¸˚˝˚˝˙˛˚¸˝¸¸˝˙¸˚¸˚˚¸¸˚˚˚¸˚¸˚˚˚¸˚¸˚¸˙¸˙¸¸¸˚˝˙˝˚¸¸¸˚˚˚¸˚˚¸¸˚¸˙˚˚˚˚˚˙˚¸˘¸˙¸˙˚˚˚˙˚˙˚˚˙˚˙¸˙˚˚˚˙¸˙¸˚¸Úÿ•é¥ˇˇˇ˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇ˛íÊ˝˛ˇˇ˚ó ˇˇˇ˝˛˛˚¸ˇˇ˛˚ˇ¸¸˛˚˚˚˝¸˙ˇ˝ˇ˛˛˝˙˛ˇ˘ªÕˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚ˇˆ˘‚Ïˆ˚ˇÒî`–ˇˇˇˇˇ˝ˇˇˇ˛ˇÈ¶˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˝˛˛ˇˇˇ˛¸¸˚ˇˇ˚˚¸˙¸˙˚¸ˇˇï  ë˝¯˜˙ˇˇ–z}§πµ≤∞µúõ§ö§•§≠∞£õ§ö§≠õ§ú¢¶§•í§¶§§≠Ü≠õÜúõúß£ìúìúùõìãùìêìíìûêùëäíúîúãíìëåùÜîëûêùùõãêåìîáîã~ãëåíìùúîëåàìåáîáïëñíáãìììÅìáîúåâìÉëåëåàÅâÉîëåûzy~áçáçàå{~åâÇàÉÉíÇà{âåïáîáÑ|Ñç‘ˇˇ˛˙˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇ˝íÍ˛˛ˇˇ˚±‘ˇˇˇ˝˝˚˘˚˝ˇ˛˙˚¸¸˚˝¸˛ˇ˘¯˚˝ˇ˛˛ˇ˙˛˙ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ¸˝¸ˇˇ˜˛ˇı≤Ç~ßÃ—¯¸‡€ºêé‚¸ˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˝¸¸¸˚¸¸ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇ‹
 @◊˚˘ˇ˚ˇ˝ˇˇˇ˛˛⁄””‘”‚‘‘‘‘≈’€‘”‘‘Õﬁ⁄”ﬁ‚‹’”€‘€”‘”÷ﬁË‡„‰·‹“”‚‚‰‚‰·ÓÁ·„‰‘„„ﬂÔ‡‰”‰·Ë„‹€€‹·‡Ôﬂ›ÿÊ·“·Í‰ÈÏËı‡·Â·‹‡‰·‰ËÌÓÌˆÔıËÌÁÓﬂÈ„Ô„ÎÒÁÓÓÌÓ‰Ù˜ıÓÌÁıˇÏÔÁÌÔÎˆÙ˛Ì˝Ìˆ¸˛ı˝¸ˆÛıÙÌÔÛˇ˝˛ÙˆÌˇ˝˝Ù˛¸ˇˇˇ˛ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˛õÊ˛˛ˇˇ¸≤‘ˇˇˇ˛˛ˇ˝˝ˇˇ˛˛ˇˇˇ˛˛ˇˇ˛¸˛¸ˇ˛ˇ˝ˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝ˇ˝ˇ˚ˇˇ˛˝ˇˇˇ›£òuÉá°’ˆ˛˚ˇ˛¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇ˛˛˝˝˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇÁèˇˇˇˇ˘ˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ˝ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˝ú·˝˛ˇˇ˚™”ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇˇˇ˛ˇˇˇ˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇˇˇˇˇ˙˚˚˝¸˚˘˘˛¸ˇˇ˛ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛˛ˇˇˇˇˇˇˇˇ˛ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇÈˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇ˝ˇ˛˛ˇˇ˛ˇˇˇˇˇ˛ˇˇ˛ˇˇˇˇˇ˛ˇˇˇˇˇˇ˛ˇ˛˛ˇˇˇˇˇ˛ˇ˛ˇˇˇˇ˛ˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇ˛ˇ˛ˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇ˛ˇ˛˛ˇˇˇˇˇˇˇˇ˛˛ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇˇ˛ˇˇˇ˛ˇˇˇ˛ˇˇˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇˇâ‡¸˛ˇˇ˙©‘ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇ˛ˇ˝ˇˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇ˛ˇ˛˛˛ˇˇˇˇˇ¸ˇˇˇˇˇˇˇˇˇ˛¸¸¸˛˝˛˝˛¸˝¸˝¸˝˝¸˛˝˝˝¸˝¸¸˝˝˝¸˝¸˝¸˝˝˝¸¸˝¸¸¸¸˝¸˝˝¸˝˝˝˝¸¸¸˝¸˝¸˝¸¸¸¸¸˝˝¸¸¸¸¸˝˝˚˝˝˝˝˝˝˝˝˝˝¸¸¸¸¸¸¸˝˝˝˝˝˝¸˝¸¸¸¸˝˝¸˝˚˝˝˝˝˝˝˝¸¸¸˝˝˝¸¸˝¸˝¸¸¸¸¸¸˝˝˝˝¸¸¸˝¸˝¸¸˝˚¸˝˝˝¸¸˝˝˝˝¸¸¸˝˝˝˝˝¸˝˚¸˛ˇ¸ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇˇ˛õŸ˝˛ˇˇ˘´—ˇˇ˛˝˝˛˛˛˛˛˛˛˛˝˛˝˝˛˝˝˝˝˝˛˝˛˝˛˝˝˛˝˛˝˛˝˝˝˝˝˝˝˝˝˝˛˝˝˝˝˝˝˝˝˝˝˝˝˛˝˝¸¸¸¸¸¸˝¸˝¸˝˝˝¸˝˝¸¸˝¸¸¸¸¸˚˝¸¸˝¸¸¸¸¸¸¸¸˝¸¸¸¸˚˝¸¸¸¸˚¸˚¸¸¸˚¸¸˚˚¸˝˚¸¸˚¸˚¸¸˚¸¸˚¸˚¸˚˚¸˚˚˝˚¸˚˚˚¸˚¸˙˝˙¸˚˚¸˚¸˚¸¸¸˚˚¸¸˚˚¸˚˚˚˚˚¸˚˚¸¸˚¸˚˚˚˚˚˚˚¸˚˚˚˚˚ˇˇˇ˛ˇˇˇˇ¸ˇ˙ˇ¸ˇˇ˙˚˚¸˚˚˚¸˚˚¸˚˚¸¸˚¸˚˚¸˚˚¸˚¸˚˚˚¸˚˚˚˚˚¸˚˚¸˚˚˚˚˚˚˚¸˚˚˚¸¸˚¸¸˙˚¸¸˚˚¸¸˚¸¸˚¸˚˚˚˚˚˚˚˚¸¸˚˚˚˚˚Û˚˚¸¸˚¸¸˚¸¸˚¸˚˚˚¸˚˚¸¸˚¸˚˚˚¸˚˙˚˚¸˚˚˚˚˚¸¸˚¸¸˚˚˚¸¸¸Û˚¸¸˚˚¸˚Û˚˚˚˚Û¸¸˚˚˚¸¸˚Ù¸˚Û¸˚˚Ù˚˚¸¸˚Ú¸˚˚¸¸¸ÚÙ¸¸¸¸˚˚˚¸¸˚¸¸Ú¸˚˝Û˚¸˘ıˇ¸ëﬂ˝˝ˇˇ¸°éæø∞≤¿√πƒµ∏ƒ¡Ω∞Øµ±∂¡Ω∞∂Æ¡µ¡∂πæΩ∞©∞∑±Ø∑©°®ö≤∞©∏∑©©©±©®∞±∞ª±≤Ø©†õ°´°°õ†õöõ¢öõ°™ò™ô£úôïöúëöúö¢ëîööêÜúôõêéôïéêúëéíïóàèäéÄèàöñâïâáéäèâáäàéÅÄëèíéêäùãïzÅâ{èäÄÄàíàèÅââàààèìàäÇäÅÇäzxàztèÅÉâzÅàÄÅáíÅäÇÅxÅãêÅzí|ã{åÅèÇ~ÜíÄÑz{èíèãÅÄÄèàëâÅàyÅzäzÅÄìáÇí{â{yÅyáÇzÄÇâÅÇÇãàìàãsàÅÅîçiÄè{ñäàÅÅèÅâââpÅÅãÄÇÅÅázãzqzäâyÇÅãyíèÅñêäêyàyàèyèâàíèÄíÅoàÅâêõàÅéãÅùäÄäàâÅèõââéÄâäàÅíèäèäÅàäêíáÅâêÅàäùíàóâêâéÅàèõèäùäÄñãéõàíèäèàââÅàäñèäóäèäéè~ïìÜ?Ëˇˇˇˇ˝¨ç©†¥¨¨Ø™∞∞™∞µ∏¥Æ®µ¡µØ™¿πø¡¥Øµ∏∑øØ… …øøΩø……… …»¿…»»…»»€ …»»……»“Ÿ—–»–Ÿ›Ÿ€‚‹œœ“…“–“‡‡‹‡‹œ‹⁄‡€œ“‚—Œ—‡·“‡ÊﬂÂ·‡Â‡ÂÚ˚ÈË‰ÒÓ‡‰ÒÂÈ˙ÂÒÓÂÓ˚Ë‰˙˘˙Ò˚˚˙¯˚˘˘ÓÔ˘˘Ë¯Ë˙˙˙˘˘˙˘˚˘˙˘¯˘˘˘˘˘˘˙˘¯˘˙¯˙˘˘˘˘¯˙˘˘˙˘˘˙˘˘˘˙¯˛ˇˇˇ¸ˇˇˇ˛ˇÒˇıˇ˝ˇ˘˘˘˘˙˙˙˘˘˙˘˙˘¯˘˘˘˘¯˘¯˘˙˘¯˘˘˘˘¯˙¯˘˙˘˘˘˘˘˙˘˙˙˘˘˘˘˘˘˘¯˘˙˙˘˘˘˘˘˘˘˘˘˘˘˘¯˘¯˘˘˙¯˘˘˘˘˘˘˘˘˘˙¯˘˘˙˘˙˘˘˘˙˙˘˘˘˘˘˘˙˙˘˘˘˘¯˙˙˙˘˙˙˘˙˘˘˘˘˘˘¯˚˘¯˙˘˙˘˘˙˙˙˘˘˘¯˘˙˙˘˘˙˘˘˘˘˘˙˘˘˙˘˙˘˙˘˙˘˘˙˙˙˘˘˙˙˙˙˙˙˙˙˙˙˘¯˘˙˘˘˘˘˘˘˙˙˘˙˙˘˘ˆ˙˛˚ç‚˝˝ˇˇ˚®€˛ˇ¸˚¸˝¸¸¸¸¸˝¸˝¸¸¸¸¸˛˝¸¸¸¸˝¸˝˝ˇ¸˝¸˝˝˝˝˝˝¸˛˝¸˝˝¸¸˝˝˝˝¸˝˝˝˛˝˛¸˝˝˛˛˝˛˝˝˛˛˛˛˝˝˝˛˝˝˛˝˛˛˛˛˛˛˝˝˝˛˝˝˝˛˛˛˛˝˝˝˛˛˛˛˛˛˛˛˝ˇ˛ˇˇ˛˛˛˛ˇ˛˛ˇˇ˛˛ˇ˛ˇ˛ˇ˝ˇ˝˛˛ˇˇ˛ˇ˛ˇ˛ˇˇ˛ˇˇ˛ˇ˛˛ˇ˛ˇ˝ˇ˝ˇˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇ˛ˇ˛ˇˇ˛˛ˇ˛ˇˇˇˇˇˇˇ˛ˇ˛˛ˇˇˇÌÏÓˇ˙¸¸˜À˘¯ˇˇˇˇˇˇˇ˛ˇ˛ˇ˛ˇ˛ˇˇ˛ˇˇˇˇˇˇ˛ˇ˛ˇˇ˛ˇ˝ˇ˛˛˛ˇ˛˛˛ˇˇˇˇˇˇˇˇ˛˛ˇˇ˛˛˛˛ˇ˛ˇ˛ˇ˛ˇˇˇ˛ˇˇ˛˛ˇˇˇ˛˛ˇˇˇˇˇˇˇ˛˛˛˛ˇ˛ˇ˛ˇˇˇˇˇˇ˛ˇ˛ˇ˛ˇ˛ˇ˛˛ˇˇ˛ˇ˛ˇˇˇˇ˛ˇˇˇˇˇ˛˛˛ˇ˛ˇˇˇˇˇ˛˛˛˛ˇ˝ˇˇ˛ˇ˛˛ˇˇˇˇ˛˛ˇˇ˛ˇˇ˛˛ˇ˛ˇˇ˛ˇ˛˛ˇ˛ˇˇˇ˛ˇˇˇˇˇ˛˛ˇ˛ˇˇˇ˛ˇ˛ˇ˛ˇ˛ˇ˛ˇ˛ˇˇ¸˛ˇ¸ùÂˇˇˇˇ˙´ﬁˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛ˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇ˝ÌM d¸vº˝ˇˇ˛ˇˇˇˇ˛ˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇ˛ˇ˛ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇ˛ˇ˛ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇ˛˛ˇˇˇ˛ˇˇˇ˝ˇˇˇá·˝˛ˇˇ˝õ‘ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇs :u ã± +Xˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇ˛ˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇ˝ïÊ˛˛ˇˇ˝™◊ˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚∂êÆo fO ù˝P ôˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚˛ˇ˛û‚ˇˇˇˇ¸®Ãˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸«%  )ÀD Àˇã qˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇîÿ˝˛ˇˇ˙´–ˇ˝ˇ˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝w 1}ÅäŒ+ Ω˙Ö ]˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¯ˇ¸ˇÜÏ˘˛ˇˇ˘»∂ˇ˛ˇ˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¯∞%_∑P ¿˘} Äˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˙ˇˇˇoı˛˛ˇˇ˛„ó˙ˇ¸˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˘É5Dô¯x äÁJ ñˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚ˇˇ¯nˇ¸ˇˇˇˇ¯z˜ˇ˘ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚˙¸¸˛¸˘ˆﬂ0$ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ˛ˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇÂÑ˛¸ˇˇ˛˛˝ÉÌˇ˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝˛ˇˇˇˇˇ˛ºJ5h‡ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˆˇˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛¸¢ﬁˇ˛˛ˇ˝˛ˇ’¨˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇ˛ˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸Êãˇ˛ˇ¸ˇ˚ˇˇˇÅÊ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛˝ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇì‘ˇ˛ˇ¸ˇ˚ˇˇˇ„Ä¸˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸ˇ˛ˇˇˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇí∆ıˇÙˇ¸ˇˇˇˇˇ¸¬vÙˇ˛ˇ˛ˇ˝˝¸˛˛˛˛˛˛˝˝˛˛˝˛˛˝˛˝˛˛˛˛˛˛˛˛˛˛˛˛˛˛˛˛˛˝˝˛˝˛˝˛˛˝˝˛˝˛˝˛˛ˇ˛˛˝˛˛˛˝˝˛˝˛˝˝˛˛˛˛˝˝˛˛˛˛˝˝˝˛˛˛˛ˇˇˇˇˇˇˇˇ˝ˇˇˇˇˇˇˇ˛˝˝˛˝˛˝˝˝˝˝˛˛˛˛˝˝˝˛˛˝˝˝˛˛˛˝˛˛˛˝˛˛˛˝˛˝˛˝˛¸˛˛ˇ˝˛˝˛˝˛˛˛˝˛˛˝˛˝˝˛˝˛˛˛˛˛˝˝˛˝˝˛˛˝˛˛˝˛˛˝˛˝˝˝˝˛˛˝˛˝ˇ˝ˇ¸˛˝˝˛˛˝˛˛˝˛˛˛˝˛˛˝˛˛˛˛˛˛˝˛˝˛˝˛˛˝˛˝˝˛˛˛˛˛˝˛˝˛˛˛˝˛˝˛˝˛˛˝˛˝˛˝˛˛˝˛˛˝˛˛˛˛˝˛˝˛˝˝˛˝˝˛˝˛˛˛˝˛˛˝˛˝ˇ˝˛˛˛˛˝ˇ¸ˇ¸˛˝˛˝˛˝˛˝˛˛˛˝˛˝˛˝˛˛˛˝ˇ˛ˇ˛˛˛˛˛˛˛˛˝˛˝˛˛˛˛˛ˇ˝˛˝ˇ˝˛˝˛˛˛˛˛˝˛˛˝˛˛˝˛˝˛˛˛˛˛˛˛˛˝˛˝˛˛˛˛˝ˇ˝ˇ˛˛ˇ˝˛˛˛˛˛˛ˇ˛˛˛˛ˇ˛˛ˇ˛˝˛˛ˇˆÖ∞˛˛˝˛ˇˇˇˇ˝˝˛ˇˇ”}È˝˝¸˙˛˛ˇˇ˛˛˛ˇ˛ˇ˛ˇˇˇˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇ˛˛ˇ˛ˇ˛ˇˇ˛ˇ˛ˇ˛˛ˇˇ˛ˇˇ˛ˇˇˇ˛ˇ˛ˇˇ˛ˇ˛ˇˇ˛ˇˇ˛ˇˇ˛ˇ˛˛ˇˇ˛˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ˛ˇ˛ˇˇ˛˛ˇ˛ˇ˛ˇˇˇ˛ˇˇˇˇ˛ˇ˛˛˛˛ˇˇˇˇ˛ˇ˛ˇ˛ˇ˛ˇˇˇ˛˛ˇ˛˛ˇˇˇ˝ˇ˛ˇˇˇˇ˛ˇ˛ˇ˛ˇˇ˛ˇ˛˛ˇˇˇ˛˛ˇ˛ˇ˛ˇˇˇ˛ˇ˛˛˛˛ˇ˛˛˛ˇ˛˛˛ˇ˛˛˛ˇ˛ˇˇ˛ˇ˛ˇˇˇˇ˛ˇˇ˛˛ˇˇˇˇ˛ˇˇˇˇ˛˛ˇˇˇˇ˛ˇˇˇ˛ˇˇˇˇ˛ˇ˛ˇ˛ˇ˛˛˛˛˛ˇ˛ˇˇ˛ˇ˛˛ˇ˛˛ˇ˛ˇˇˇˇ˛˛˛ˇ˝˛ˇ˛˛˛˛˛ˇ˛ˇ˛˛ˇˇ˛ˇ˛ˇ˛˛˛˛˛˛˛˛ˇ˛ˇ˛ˇ˛ˇ˛˛˛˛˛ˇ˛˛˛ˇˇ˛˛˛˛ˇ˛ˇˇ˛˝˛˛˛˛˝˛ˇˇˇ˛ˇ˝ˇ˛˛˛˛˛˛˛ˇ˛˝˛˛ˇ˛˛˛˛˛˛˝˛˛˛˛˛˝˛˛˛˛˛˛ˇˇ˝˛ˇ˛ˇ˛˛˝˝˝˛˛˛˝˛˛˚¸¸ˇ˛·kﬁ˝ˇ˛˛ˇˇˇˇˇˇ˝˛˚ˇ˛Ìwë‚˝˝˚˛˛˚˚˚˙˚˙˚˚˚˙˚¸˙˚˙˚˚˙˚¸˚˚˚˚˚¸˙˚˘¸˚˚˚˙˚˙˚˚˚˙˚˙˚˚˚˙˚˙˚˙˚˙˚˙˙˙˚˙˙¸˙˚˙˚˚˚˚˙˙˚˚˚˚˚˚˚˙¸˚˚ˇ¸¸˙˚˙˘˘¸¸¸˝˝˛ˇˇ˚˙˚˙˚˚˚˚˙Î˚˙¸˙˝˚˚˙˚˙˚˙˚ÚÒ˙¸˚˚˙˚˙˚˚˙˙¸˚Û˚˚˙˚˙˚˙˚˚Û˚˚˝˙¸˙˚˚Û˚˘Ù˚˚˚˚˚˚˚˙˚˙Ò˚˙Ú˚¸ÛÚ˙˚˚˚˙ÒÛ˙˚Û˚Ò˚Í˚˚Û˘ÛÛ˚Û˙˚˚˙Ú˚˙¸˙˙˚˚˚˚˚˙Û˙¸˙˚¸˚¸˙˚˙˚¸˙Û˙¸˙˚˚Ò¸˙¸Û˚˚¸˙˙¸˚˙ÏÚ˙ÛÚ˚˚Û¸Ú˚¸˙˚˚˚ÛÚÛ˙˚ÏÚ˚Í¸Ù˙ÛÚÏÚÛ¸˙Ó˘ÙÚÛ˚ÌÚÛÚÎÛÚÏÛÚÏ¸ÚÚÛÙÍÛÛÙÈÛÛÛ¸ÚÎÚÏÙ˚ÛÚÌÚÂÙÎÂ¸ÌÚÚÏÏÙÒÊÚÌÚÌÂÚ¸ÛÌÎÊ‰ÏÊ¸ÏÍÌÊÛÌÎÌÎÌÂÚÊÎÌÛÌÛ‚ÌÍÌÍÊÍÏ‡ÍÊ·Â·Ù·ÁÍ ≤äôÓˇ˛ˇ˝ˇ˛ˇˇˇˇˇ˛ˇ˛˝˝˝ˇÍ†ÜèåúããåÇäîöãÇãëãÇäÉäîëëîóîêåääãíåäÇíåëäzíåÉÉëäî|ÉÉçÉ|çëÉãzÖä{ãÉäãòä{âåäÉääÉäåãåëêåêçÉàåçëàâÜâO~íëÉåóÑäÉÉäå|çÑÉzÉ{íãò{åÉÉÉÑÉãîëçëzuêÑòãíìÇìëêåäÉä{äÉîäåëíòâîózÉ{äãïÉÉär|ÑÉäåãìääåÇÉëå}å|äÉÑî|ÉãóïàçèçäÑãëÉäÑÉ|ÇåãÑÅåãäãÉåÑÉä|îëîâåâäîããÇìÉåêäåêåêïêóåäãíùêÉìäïâìëâîÉããîâÉÉôãâãêëîëãâîàâîêãâúòÉûêïâõêåëòîâÉóåòòìêíôîêâúòìï•ûâúêìäí¶ëîóùêíòèî•îûìòëüê§óìùîñòú¨§ùúñ†ìûúûùóñìêúü§ñ§•ûúóõñ•õèúñ•ùìùéùñìû£ó§ò∞º’ˇ˛¸˝˛˛˛ˇ˛ˇˇˇˇˇ˛ˇ˛˝˝ˇˇˇˇˇ˛¸˝¸˝˝˝˝˛˚˝˛˝˝˝ˇ˝˝˝˝˝¸¸˛˝˝˝˛˝˛¸˛¸˛˝˝˛¸˛¸˛¸˛˝˝¸˛˝˛¸˝˝˝˝˛¸˛˚˝˝¸˝¸˛¸˝˝˛˝˛˝˝˝˝˛˝˝˝˝˝¸˛˝˝ˇˇ˚˚˚˙˙˙n‰¸˘ˇˇˇ˝¸˝¸˝˝˛¸˝˚˛¸ˇ˚ˇ¸˛¸˛˝¸˝˛˝˝˛˝¸˝˝˝˝˝˝˝¸˛˝¸˝˝¸˛˚ˇ¸˛˝˝˝¸˛¸˛˝˛˝˚˛¸˝˚˛¸˝˛˝¸˛˝˝˛˛˛˝˝˛˝˝˝¸˝˝˝˛¸˛˛˛¸˛¸˛˝˛¸˛˝˛˝˛˚˝˝¸˝¸˝˝ˇ˝¸˝˛˝˝˝¸˛¸˝˛¸˛¸˝¸˝¸˝˛˝˛¸˛¸˝˛¸˝¸˛˝˝˝˝¸˝˝˛˝˝˝˝˛¸˛˝¸˛¸˝˛¸˛˚˛˝˛˝˝˝˝˝˛˝˝˛˝˝¸ˇ˛˝˛¸ˇ˚ˇ¸˛¸˛˝˛¸˝˛˝˝˝˛˝˛¸˛˝˝˛˝¸ˇ˝˝˛˝˝˛˝ˇ˝˛˝˝˝ˇ˝˝˛˝˛˝˝˛˚ˇ¸ˇ˝˛˛˛˝˛˛˝˛˛˛˝ˇ¸ˇ¸ˇ˝˝˛˛˝˛˝˛˛˛˝˝˛˝˝ˇ˛˛˝ˇ˝ˇ¸˛˛˝˛˝˛˛˛˝˛¸˛ˇ˛ˇˇˇˇ¸˝˝˝˛ˇˇˇˇˇ˛ˇ˛ˇ¸ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇˇü  Õ˛¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˝ˇˇ˛ˇˇˇˇ˝ˇˇˇˇˇ˛ˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇ˛ˇˇˇ˛ˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ¸˙˝ˇø  °ˆ˝˚ˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇ˛˛ˇˇˇˇˇˇˇ˛ˇ˛ˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇ˛ˇ˛ˇ˛ˇˇˇˇ˛ˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇ˛˛ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇ˛ˇˇˇˇˇ˛ˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇ˛ˇ˛ˇˇˇˇˇˇˇ˛ˇˇˇ˛ˇˇˇˇ˛ˇˇˇˇ˛ˇˇˇ˛ˇˇˇˇˇ˛˛ˇˇˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˝˚ˇˇˇˇˇˇˇ˛ˇˇˇˇˇ˛ˇˇˇˇ˛ˇ˛˝˛˝˚˚˝˝¸¸˝˝¸˝˝¸¸˝˝¸˝¸˝¸¸˝˝¸¸˝¸˝¸˝¸˝˛¸¸¸¸¸˝˝˝˝˝¸¸¸¸¸¸˝˝˝˝¸˝˝¸¸˝¸¸˝˝¸¸¸˝¸˝˝˝˝¸˝˝¸¸˝¸˝˝˝ˇˇ˝˘˘Ω   pÚ˛˜ˇˇ˝¸˝¸˝˝˝˝¸¸¸˛¸˝˝˝¸¸¸¸˝˝¸˝˝˝˝˝¸˝¸¸˝¸˝˝˝¸˝¸¸˝˝˝¸˝˝˝¸˝˝˝˝¸¸¸˝¸¸¸˝˝˝˝¸¸¸˝¸˝˝¸˝˝¸¸¸˝¸˝˝˝˝˝¸¸˝¸˝¸¸˝˚˛¸˛˝¸¸˝¸¸¸˝¸¸˝¸¸¸˝˝˝¸˝˚¸˝¸˝˝¸˝˝˝˝˝˝¸˝¸¸˝¸˝˝˝¸˝¸˝˝¸˝˝˝˝˝¸˝¸˝˝¸˝˝˝¸¸˝˝¸˝¸¸¸˝˝˝˝˝¸˝¸˝¸¸˝˝˝˝˝¸˝¸˝˝¸˝¸˝˝¸˝˝˝˝˝¸¸˝¸˛¸˝˝¸¸˝˝˝¸˛¸˝˝˝¸¸˝¸˝˝˝˝˝˝˝˝˛¸¸˝¸˝˝˝˝˝˝¸¸˝¸˝˛¸˝˝˝¸˛¸˝˝˝¸¸˝¸˛¸˝˝˝˝˝˝¸˝¸˝˝˝˝˝˝˝¸˝¸˝˝¸˝˝˝˝˝¸¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˙˛⁄-    -˙˘ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇG      È˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇ˝ˇˇ˝˛˝˚˝˚ˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇï       ”¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˛˛ˇ˛ı˘˚˝˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚÷•J 	  Æˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˝ˇˇ˛˛˙˙¯˛˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝ˇ˜ö¬Ù»í√ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛ˇˇ¯˙¯ˇ¸ˇ˙¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˝z˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛˛˛ˇ≠0 Ü˚ˇ˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇè”ˇˇˇˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˛ˇ˛       ˝˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇŸ}˛˛˝˘ˇ˙ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˙ˇˇ˝Z     u˙˘˚˝˝˝˛ˇˇˇˇˇˇˇˇ˛˝¸˙˝ˇ˙~Ïˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇ˝˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˘˛ˇ¸D     J¸ˇˇˇˇˇˇˇ˛˚¸˝ˇˇˇˇˇˇ˛˚¸v‡¸ˇ˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇˇÛˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˙˛ˇ˝ç     |Ú˝ˇˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇ˝ıäª˙ˇ¯ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˚˛˛˝ÒH  Ux}Úˇ˛ˇ˛ˇˇˇˇˇˇˇˇ˛˛ˇˇÚmæ˝ˇ˛ˇ˚ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛ˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛˛˛˝ˇ˛˛ˇ≠òΩ˘ˇÒáÖ‚˜ˇ˛˚˚˛˛˙˚˛ˇˇı®sﬂˇˇ¸ˇ˘ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˝ˇˇˇˇˇˇˇˇˇÒ†rÅü…ˆ˚˘˝Ùÿ•{çÃˇ˚ˇ˘ˇ˘ˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇˇ˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˝ˇ˛ˇˇˇˇˇˇˇˇˇ¯˚¸˛‰£|ngoe°÷˝¸˚˝ˇ˙ˇ¸ˇ˝ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇ˛ˇ˛ˇˇˇˇˇˇˇˇˇˇ˛˛˝¸˝˛˛˝¸¸¸¸ˇˇˇˇ˙˛˙ˇ¸ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ˛˛ˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇendstreamendobj79 0 obj91740endobj77 0 obj<</Length 80 0 R/Filter /ASCII85Decode >>stream
!!!!"!<E6'!WrN,"9\i2"U,)7"pYA<#RC\B#mgqG$4@4L$k*OR%1NdW%M''\&.fBb
&J5Wg&ebol'GM5r'bqK"()Ic'(`4)-)&X>2)B0V7*#oq=*??1B*ZlIG+<VdM+X&$R
+sS<W,U=W],palb-7:/g-n$Jm.4H_r.P!#"/1`>(/M/S-/h\k20JG180ekF=1,C^B
1c.$H2)R9M2E*QR3&ilX3B9,]3]fDb4?P_h4Zttm5!M7r5X7S#5s[h(6:4+-6psF3
77B[87Ros=84Z9C8P)NH8kVfM9MA,S9heAX:/=Y]:f'tc;,L4h;H$Lm<)cgs<E3(#
<``@(=BJ[.=]np3>$G38>[1N>?!UcC?=.&H?smAN@:<VS@UinXA7T4^AS#IcAnPah
BP;'nBk_<sC27U#Ci!p)D/F0.DJsH3E,]c9EH-#>EcZ;CFEDVIF`hkNG'A.SG^+IY
H$O^^H@(!cI!g<iI=6QnIXcisJ:N0$JUrE)JqJ].KS5#4KnY89L51P>LkpkDM2@+I
MMmCNN/W^TNK&sYNfT6^OH>QdOcbfiP*;)nPa%DtQ'IZ$QC!r)R$a8/R@0M4R[]e9
S=H+?SXl@DStDXITV.sOTqS3TU8+KYUnjf_V5:&dVPg>iW2QYoWMuntWiN2$XK8M*
Xf\b/Y-5%4Yct@:Z*CU?ZEpmD['[3J[C*HO[^W`T\@B&Z\[f;_]">Sd]Y(nj]tM.o
^;%Ft^qdb%_84"*_Sa:/`5KU5`Poj:`lH-?aN2HEaiV]Jb0.uObfn;Uc-=PZcHjh_
d*U.edF$CjdaQ[oeC<!ue^`7%f%8O*f\"j0g"G*5g=tB:gt^]@h;-rEhV[5Ji8EPP
iSieUioB(ZjQ,C`jlPXek3(pjkih6pl07KulKdd%m-O*+mHs?0mdKW5nF5r;naZ2@
o(2JEo^qeKp%A%Pp@n=Uq"XX[q>'m`qYU0er;?KkrVc`prr<#u~>endstreamendobj80 0 obj990endobj81 0 obj<</Length 82 0 R>>stream
Q q 248.4 546 m 248.4 373.8 l 567.6 373.8 l 567.6 546 l 249 545.4 m 249 374.4 l 567 374.4 l 567 545.4 l h W* n 0 0 0 rg 248.4 373.8 319.2 172.2 re fQ endstreamendobj82 0 obj164endobj74 0 obj<</Type /Page/Parent 55 0 R/Resources <</Font 83 0 R/XObject <</im1 78 0 R >>/ProcSet 2 0 R>>/Contents [ 75 0 R 81 0 R  ]>>endobj83 0 obj<</F0 6 0 R/F1 8 0 R/F2 10 0 R/F4 16 0 R/F8 31 0 R/F10 35 0 R/F11 41 0 R>>endobj86 0 obj<</Length 87 0 R>>stream
BT552.6 42  TD0 0 0 rg /F0 10.8  Tf0.0912  Tc 0  Tw (15) Tj-240 768.6  TD /F0 12  Tf-0  Tc -0.0896  Tw (Overload issue 64 december 2004) Tj-271.8 -40.8  TD /F4 10.2  Tf-0.1114  Tc 0.3614  Tw (An HSM is a state machine where states can be grouped into a) Tj-11.4 -12  TD -0.2679  Tc -0.4221  Tw (composite state. Actions defined for such a composite state then apply) Tj0 -12  TD -0.3111  Tc -0.4389  Tw (automatically to all states contained therein. This allows a considerable) TjT* -0.2175  Tc -0.5325  Tw (simplification of the state diagram. In our diagram, you can easily see) TjT* -0.0877  Tc 0.3069  Tw (this. Each state is drawn as a box with rounded edges and bears a) TjT* -0.1258  Tc 0.5091  Tw (unique name. Composite states are those that contain other states.) TjT* -0.2366  Tc 0.1866  Tw (States that contain no other states are leaf states. The only leaf states) TjT* -0.2096  Tc 0.3596  Tw (in our example are ) Tj76.8 0  TD /F2 9  Tf-0.2  Tc 0  Tw (s11) Tj18.6 0  TD /F4 10.2  Tf-0.3096  Tc 0.1596  Tw (and ) Tj16.8 0  TD /F2 9  Tf-0.15  Tc 0  Tw (s211) Tj21 0  TD /F4 10.2  Tf-0.203  Tc 0.503  Tw (. Arrows represent the transitions) Tj-133.2 -12  TD -0.1082  Tc 0.5037  Tw (between the states, they are labeled with an event that causes this) Tj0 -12  TD -0.2117  Tc 0.6617  Tw (transition to be taken. In the example, the transitions are annotated) TjT* -0.2511  Tc 0.1011  Tw (with the key that needs to be pressed to invoke the transition. ) Tj11.4 -12  TD -0.3273  Tc -0.4227  Tw (If a transition originates from a composite state, it is taken whenever) Tj-11.4 -12  TD -0.3118  Tc 0.4346  Tw (a substate does not handle the corresponding event itself. A state can) Tj0 -12  TD -0.2676  Tc -0.1593  Tw (thus pass on the handling of a specific event to its enclosing state. For) TjT* -0.3247  Tc -0.2253  Tw (example, pressing the ) Tj82.8 0  TD /F2 9  Tf0  Tc 0  Tw (e) Tj6.6 0  TD /F4 10.2  Tf-0.3129  Tc -0.3371  Tw (key causes a transition to state ) Tj113.4 0  TD /F2 9  Tf-0.15  Tc 0  Tw (s211) Tj22.2 0  TD /F4 10.2  Tf-0.2951  Tc (regardless) Tj-225 -12  TD -0.2578  Tc 0.5278  Tw (of the currently active state. Rather than cluttering the diagram with) Tj0 -12  TD 0.0548  Tc 3.0202  Tw (numerous transition arrows, it suffices to introduce an all-) TjT* -0.2981  Tc 0.1481  Tw (encompassing top-level state ) Tj112.2 0  TD /F2 9  Tf-0.6  Tc 0  Tw (s0) Tj12.6 0  TD /F4 10.2  Tf-0.3322  Tc 0.1822  Tw (and handle the ) Tj57.6 0  TD /F2 9  Tf0  Tc 0  Tw (e) Tj7.8 0  TD /F4 10.2  Tf-0.3187  Tc 0.1687  Tw (key there. ) Tj-178.8 -12  TD -0.0639  Tc -0.3043  Tw (This does not just simplify the diagram, it also points out where) Tj-11.4 -12  TD -0.1137  Tc -0.103  Tw (code reuse is possible. A statechart implementation should use this) Tj0 -12  TD 0.096  Tc 0.279  Tw (opportunity. We therefore need a possibility to pass unhandled) TjT* -0.0954  Tc -0.1546  Tw (events to the encompassing state. If no state handles the event, it is) TjT* 0.0396  Tc 0.4104  Tw (ultimately discarded. Each state can have special exit and entry) TjT* -0.0907  Tc 0.3407  Tw (actions associated with it. Those actions are executed whenever a) TjT* -0.0622  Tc -0.3378  Tw (transition leads out of or into a state, respectively. This is called an) Tj274.8 288  TD 0.1448  Tc 0.3052  Tw (external transition. By contrast, an internal transition does not) Tj0 -12  TD 0.2793  Tc 3.9207  Tw (execute any exit and entry actions. Our state machine) TjT* -0.0751  Tc -0.0082  Tw (implementation needs to do the necessary bookkeeping to call the) TjT* -0.0898  Tc 0.0598  Tw (actions in the right order. In particular, the actions associated with) TjT* -0.0795  Tc -0.3432  Tw (a transistion are executed after all exit actions and before any entry) TjT* -0.078  Tc 0.003  Tw (action associated with the relevant states are executed. ) Tj11.4 -12  TD -0.114  Tc 0.2913  Tw (During operation the state machine is always in a leaf state. So) Tj-11.4 -12  TD 0.2258  Tc 0.2242  Tw (transitions ultimately lead from one leaf state to another. If a) Tj0 -12  TD -0.1516  Tc 0.6016  Tw (transition is drawn to target a composite state, the composite state) TjT* 0.1774  Tc 0.2726  Tw (needs to specify one of its substates as the initial state. In our) TjT* -0.1949  Tc -0.3837  Tw (example, the initial state of composite state ) Tj167.4 0  TD /F2 9  Tf-0.6  Tc 0  Tw (s0) Tj12 0  TD /F4 10.2  Tf-0.1543  Tc -0.4457  Tw (is specified to be state) Tj-179.4 -12  TD /F2 9  Tf0  Tc 0  Tw (s1) Tj10.8 0  TD /F4 10.2  Tf-0.1203  Tc 0.478  Tw (. As this state is also composite, it needs an initial state, too, in) Tj-10.8 -12  TD -0.0616  Tc 0.2116  Tw (this case ) Tj36.6 0  TD /F2 9  Tf0  Tc 0  Tw (s11) Tj16.2 0  TD /F4 10.2  Tf-0.1198  Tc 0.1698  Tw (. The effect is that any transition targeting state ) Tj190.8 0  TD /F2 9  Tf0  Tc 0  Tw (s0) Tj13.2 0  TD /F4 10.2  Tf0.1983  Tc (is) Tj-256.8 -12  TD -0.1371  Tc -0.4629  Tw (in reality targeting state ) Tj93 0  TD /F2 9  Tf0  Tc 0  Tw (s11) Tj16.2 0  TD /F4 10.2  Tf-0.1951  Tc -0.3835  Tw (. A composite state that does not specify) Tj-109.2 -12  TD 0  Tc 0.3495  Tw (an initial state can not be the target of a transition. Our example) Tj0 -12  TD -0.13  Tc -0.62  Tw (diagram only contains two action specifications. In our code we will) TjT* -0.1864  Tc -0.3636  Tw (additionally print out trace messages for illustration, but the diagram) TjT* -0.1491  Tc 0.0657  Tw (does not show this. The action specifications shown are: ) Tj0 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.025  Tc 0.475  Tw (The transition from ) Tj82.8 0  TD /F2 9  Tf0  Tc 0  Tw (s21) Tj19.2 0  TD /F4 10.2  Tf-0.0239  Tc 0.3739  Tw (to itself \(a self-transition\). This is an) Tj-102 -12  TD -0.0747  Tc 0.0447  Tw (example of a transition that has a guard \(in brackets ) Tj209.4 0  TD /F2 9  Tf0  Tc 0  Tw ([]) Tj10.8 0  TD /F4 10.2  Tf-0.2257  Tc 0.3757  Tw (\) and an) Tj-220.2 -12  TD -0.1399  Tc -0.2501  Tw (associated action \(after the slash ) Tj127.8 0  TD /F2 9  Tf0  Tc 0  Tw (/) Tj5.4 0  TD /F4 10.2  Tf-0.0846  Tc -0.5654  Tw (\). The guard is a condition that) Tj-133.2 -12  TD -0.0706  Tc 0.4661  Tw (must evaluate to true to enable the transition. If it evaluates to) Tj0 -12  TD 0.1567  Tc 0.2933  Tw (false, the transition is not taken and none of the actions are) TjT* -0.1081  Tc -0.3086  Tw (executed. A self-transition exits and reenters the state, hence the) TjT* -0.0796  Tc 0.101  Tw (associated exit and entry actions are executed. ) TjET1 1 1 rg 29.4 56.4 538.2 414.6 re f0.9529 0.9529 0.9529 rg 30 57 537 413.4 re fBT31.8 460.2  TD0 0 0 rg /F0 12  Tf-0.0639  Tc 0.4239  Tw (Miro Samek\222s HSM Implementation ) Tj0 -14.4  TD /F4 10.2  Tf-0.0871  Tc 1.3171  Tw (If coding state machines is one of your favourite pastimes you) Tj0 -12  TD 0.1227  Tc 1.1523  Tw (will surely have come across Miro Samek\222s book \223Practical) TjT* 0.0752  Tc 0.9748  Tw (Statecharts in C/C++\224 [1]. Chris Hills reviewed it for ACCU) TjT* -0.0377  Tc 1.2513  Tw (quite favourably a few months ago. I can second this, yet I\222m) TjT* -0.0831  Tc -0.0169  Tw (still in the game for new state machine designs. Why is that? ) Tj11.4 -12  TD -0.301  Tc -0.449  Tw (Well, you may have noticed that Miro\222s way of implementing state) Tj-11.4 -12  TD -0.1319  Tc 0.4486  Tw (machines isn\222t typesafe and requires quite a few typecasts, neatly) Tj0 -12  TD -0.3145  Tc 0.5245  Tw (tucked away in a set of convenience macros. His implementation of) TjT* -0.2819  Tc -0.1681  Tw (hierarchical state machines isn\222t the fastest either, because of his way) TjT* -0.2749  Tc 0.4749  Tw (of handling entry and exit actions. There is a strong reason for this:) TjT* -0.2762  Tc 0.1262  Tw (His implementation works with just about anything that calls itself a) TjT* -0.2832  Tc 0.5998  Tw (C++ compiler, even ancient versions like VC++1.5. That means he) TjT* -0.2862  Tc -0.4638  Tw (completely avoids the \223newer\224 C++ features like templates. If you are) TjT* -0.3724  Tc -0.3776  Tw (programming for embedded systems this is a good thing because \223full\224) TjT* -0.2868  Tc -0.0882  Tw (C++ compilers are only slowly gaining ground here. ) Tj11.4 -12  TD -0.1002  Tc 0.0252  Tw (State machines are more widely applicable than that, however,) Tj-11.4 -12  TD 0.0264  Tc 0.4236  Tw (and even in embedded systems you may have the luck to use a) Tj0 -12  TD -0.0458  Tc 0.4958  Tw (compiler that attempts to support the full language, for example) TjT* -0.0748  Tc -0.4025  Tw (g++. Hence I believe there is a \223market\224 for state machine designs) TjT* -0.0256  Tc 0.4756  Tw (that use the full language in order to address the deficiencies of) TjT* -0.1304  Tc 0.1518  Tw (Samek\222s design. This is what motivated me. ) Tj11.4 -12  TD -0.2944  Tc -0.0806  Tw (Miro\222s implementation represents the current state with a member) Tj-11.4 -12  TD -0.2618  Tc -0.2155  Tw (function pointer that points to the state handler function for this state.) Tj0 -12  TD 0.0248  Tc 0.2452  Tw (This is an efficient representation, but it means that the handler) TjT* -0.298  Tc -0.3663  Tw (function has to do double duty in that it also handles the entry and exit) TjT* -0.3395  Tc -0.4105  Tw (actions. For this, special reserved event codes are used, and a transition) TjT* -0.1602  Tc 0.4302  Tw (leads to potentially quite a large number of function calls through) TjT* -0.0726  Tc 0.2226  Tw (member function pointers. This is especially annoying when you) TjT* -0.2707  Tc -0.0936  Tw (realize that a large fraction of those will do little or no real work. ) Tj11.4 -12  TD 0.2095  Tc 0.2405  Tw (It also restricts your freedom in the way in which you can) Tj-11.4 -12  TD -0.1142  Tc 0.2042  Tw (represent events. You are forced to use the predefined event class) Tj0 -12  TD 0.2612  Tc 1.0459  Tw (defined by Miro\222s framework, and some events/signals are) TjT* -0  Tc 0.3754  Tw (predefined. The code presented here assumes nothing about the) Tj272.4 396  TD -0.1363  Tc -0.4337  Tw (event representation. This aspect is left entirely to the concrete case) Tj0 -12  TD -0.111  Tc 0.161  Tw (you\222re concerned with. ) Tj11.4 -12  TD -0.0279  Tc 0.4779  Tw (Another difference is that Miro needs a number of typecasts,) Tj-11.4 -12  TD -0.0541  Tc 0.1041  Tw (which are mostly hidden in convenience macros. This is because) Tj0 -12  TD -0.1726  Tc -0.444  Tw (of the C++ restrictions in automatic conversion of member function) TjT* -0.1232  Tc -0.1468  Tw (pointer types. Miro\222s code works efficiently, but lacks type safety. ) Tj11.4 -12  TD -0.0802  Tc -0.0698  Tw (Miro works out which entry and exit actions are to be called in) Tj-11.4 -12  TD -0.1473  Tc 0.2973  Tw (a function ) Tj43.2 0  TD /F2 9  Tf0  Tc 0  Tw (tran\(\)) Tj32.4 0  TD /F4 10.2  Tf-0.1111  Tc 0.4278  Tw (, which does the work at runtime. This is very) Tj-75.6 -12  TD -0.1624  Tc -0.2876  Tw (flexible as it allows dynamic transitions that can change at runtime.) Tj0 -12  TD 0.2244  Tc 0.2256  Tw (This comes at a cost, however, as there are potentially many) TjT* -0.0104  Tc 0.4604  Tw (handler functions that must be called without much work being) TjT* -0.0235  Tc 0.4135  Tw (done in them. As most transitions are static, he implemented an) TjT* -0.0847  Tc 0.2014  Tw (optimization that does the calculation of the transition chain only) TjT* -0.0664  Tc 0.1346  Tw (once and stores the result in a static variable. The code presented) TjT* 0.0614  Tc 0.3886  Tw (here only supports static transitions and calculates the chain at) TjT* 0.1583  Tc 0.2251  Tw (compile time, allowing inlining the entire chain. The result is) TjT* -0.0964  Tc -0.0536  Tw (typically both faster and uses less storage than Miro\222s code. Also,) TjT* -0.1296  Tc -0.5204  Tw (Miro found it hard to obey the UML rule that the actions associated) TjT* -0.0847  Tc -0.3926  Tw (with a transition are executed after any exit actions and before any) TjT* 0.2635  Tc 0.1865  Tw (entry actions are executed. His implementation executes the) TjT* -0.0758  Tc 0.2531  Tw (transition actions as the first thing, followed by all exit and entry) TjT* -0.0832  Tc 0.0968  Tw (actions. This makes exit actions a lot less useful. My code avoids) TjT* -0.0751  Tc -0.0749  Tw (these drawbacks. ) Tj11.4 -12  TD -0.0848  Tc 0.5348  Tw (The flip side is that Miro\222s code is more portable because the) Tj-11.4 -12  TD 0.2429  Tc 0.7471  Tw (demands on the compiler are low. This is most welcome in) Tj0 -12  TD -0.087  Tc 0.537  Tw (embedded systems, where compilers often don\222t even attempt to) TjT* 0.1269  Tc 0.3231  Tw (implement the whole C++ standard. His solution is thus more) TjT* -0.088  Tc -0.062  Tw (widely applicable than mine. ) Tj11.4 -12  TD 0.0176  Tc 0.4324  Tw (Both implementations lack support for some more advanced) Tj-11.4 -12  TD -0.0849  Tc 0.5349  Tw (features of UML statecharts, such as concurrent states or history) Tj0 -12  TD -0.0567  Tc 0.1249  Tw (pseudo-states. It is as yet an open question how difficult they are) TjT* -0.0813  Tc 0.5313  Tw (to add to the solution that I presented here. If you find you need) TjT* -0.0315  Tc 0.4815  Tw (such features and have an idea how to include them in the code) TjT* -0.1102  Tc 0.1852  Tw (presented here, I\222d be interested to hear from you.) TjETq 29.4 471 m 29.4 56.4 l 567.6 56.4 l 567.6 471 l 30 470.4 m 30 57 l 567 57 l 567 470.4 l h W* n 29.4 56.4 538.2 414.6 re fQ endstreamendobj87 0 obj13694endobj84 0 obj<</Type /Page/Parent 85 0 R/Resources <</Font <</F0 6 0 R /F2 10 0 R /F4 16 0 R /F5 21 0 R >>/ProcSet 2 0 R>>/Contents 86 0 R>>endobj89 0 obj<</Length 90 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.0912  Tc 0  Tw (16) Tj0 768.6  TD /F0 12  Tf-0.0449  Tc 0.2549  Tw (Overload issue 64 december 2004) Tj0 -39  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0713  Tc -0.2287  Tw (The internal transition inside ) Tj117 0  TD /F2 9  Tf0  Tc 0  Tw (s11) Tj18.6 0  TD /F4 10.2  Tf-0.1026  Tc -0.1474  Tw (is not drawn with an arrow. It) Tj-135.6 -12  TD -0.1819  Tc -0.2681  Tw (merely specifies an action that is to be taken when a certain event) Tj0 -12  TD -0.0975  Tc 0.3838  Tw (occurs, but no transition to another state occurs, and no exit or) TjT* -0.0755  Tc 0.5255  Tw (entry actions are performed. In our case the internal transition) TjT* -0.115  Tc -0.2921  Tw (has a guard, so the associated action \() Tj147 0  TD /F2 9  Tf-0.24  Tc -0.66  Tw (foo = 0) Tj36 0  TD /F4 10.2  Tf-0.0658  Tc -0.6842  Tw (\) is only executed) Tj-183 -12  TD -0.0511  Tc 0.2011  Tw (when the ) Tj39 0  TD /F2 9  Tf0  Tc 0  Tw (h) Tj7.8 0  TD /F4 10.2  Tf-0.0933  Tc 0.2433  Tw (key is pressed while ) Tj83.4 0  TD /F2 9  Tf0  Tc 0  Tw (foo) Tj18.6 0  TD /F4 10.2  Tf-0.0809  Tc -0.0691  Tw (evaluates to ) Tj49.8 0  TD /F2 9  Tf0  Tc 0  Tw (true) Tj21.6 0  TD /F4 10.2  Tf0.45  Tc (. ) Tj-231.6 -12  TD 0.1372  Tc 1.3628  Tw (Note the difference between a self-transition and an internal) Tj0 -12  TD -0.0695  Tc 1.2528  Tw (transition. The latter never changes the active state and doesn\222t) TjT* 0.5223  Tc 0.661  Tw (execute any exit or entry actions. Note also that internal) TjT* 0.0065  Tc 1.1101  Tw (transitions can be specified in a composite state, too, although) TjT* -0.0647  Tc -0.0853  Tw (this isn\222t shown in our example. ) Tj0 -18  TD /F0 12  Tf0.0168  Tc -0.2568  Tw (Representing the State ) TjT* /F4 10.2  Tf0.2362  Tc 1.0138  Tw (Flat state machines often represent the current state using a) Tj0 -12  TD 0.1849  Tc 0.5651  Tw (variable of ) Tj50.4 0  TD /F2 9  Tf0.15  Tc 0  Tw (enum) Tj26.4 0  TD /F4 10.2  Tf0.1388  Tc 0.9112  Tw (type. Other implementations use a function) Tj-76.8 -12  TD -0.0538  Tc 1.2838  Tw (pointer that points to the handler function for the current state.) Tj0 -12  TD -0.0303  Tc 1.2803  Tw (This handler function is called whenever an event occurs. Still) TjT* 0.3591  Tc 0.6909  Tw (other implementations represent states with objects, so the) TjT* 0.0968  Tc 1.1332  Tw (current state is represented by a pointer to the current state\222s) TjT* 0.0049  Tc 1.1201  Tw (object instance. This latter implementation is suggested by the) TjT* 0.045  Tc 1.185  Tw (State design pattern [6]. This is also the approach taken here,) TjT* 0.0672  Tc 0.9828  Tw (with the additional feature that all states have unique types to) TjT* -0.0776  Tc 0.1526  Tw (allow compile-time algorithms based on the state hierarchy. Only) TjT* -0.0413  Tc 1.1413  Tw (instances of leaf states need to be present, as they are the only) TjT* -0.0502  Tc 0.5548  Tw (states that can be active at any time. Composite states only exist) TjT* -0.0869  Tc 1.1369  Tw (as types, they are abstract and can therefore not be instantiated.) TjT* -0.0143  Tc 1.1976  Tw (The relationship between a composite state and its substates is) TjT* -0.1032  Tc 0.4866  Tw (modelled through inheritance. A composite state is the base class) TjT* -0.0691  Tc -0.0809  Tw (of its substates. All states derive from a top-level state class. ) Tj11.4 -12  TD -0.336  Tc -0.414  Tw (Often, entry or exit actions are empty or consist of trivial statements.) Tj-11.4 -12  TD -0.2799  Tc 0.5453  Tw (I wanted to use the benefits of inlining as much as possible to allow) Tj0 -12  TD -0.2873  Tc -0.196  Tw (the compiler to optimize away the overhead associated with functions) TjT* 0.0565  Tc 0.2844  Tw (that don\222t do much. I was prepared to dismiss the possibility of) TjT* -0.1652  Tc 0.4152  Tw (determining the target state at run time. If all transitions go from a) TjT* -0.2839  Tc -0.3277  Tw (source state to a target state, both of which are known at compile time,) TjT* -0.2749  Tc -0.2905  Tw (the compiler can figure out the entry and exit functions that need to be) TjT* -0.3169  Tc -0.4331  Tw (called and inline all of it into a single optimized string of code. My goal) TjT* -0.2853  Tc 0.0686  Tw (was to use templates to implement this compile-time task. ) Tj11.4 -12  TD 0.085  Tc 0.365  Tw (I chose therefore to represent the states as instances of class) Tj-11.4 -12  TD -0.1774  Tc -0.1976  Tw (templates. Leaf states and composite states have separate templates.) Tj0 -12  TD -0.1271  Tc -0.4048  Tw (Each different state in the diagram is thus represented by a different) TjT* 0.0436  Tc 0.4064  Tw (instantiation of a predefined class template. Implementing state) TjT* 0.0692  Tc 0.3808  Tw (handlers and entry/exit actions is done by specializing member) TjT* 0.0298  Tc 0.4202  Tw (functions from this class template. If you don\222t specialize it, an) TjT* -0.1031  Tc 0.1931  Tw (empty default is automatically taken. ) Tj11.4 -12  TD -0.0782  Tc 0.4082  Tw (Here\222s the definition of the ) Tj112.8 0  TD /F2 9  Tf-0.0667  Tc 0  Tw (CompState) Tj51 0  TD /F4 10.2  Tf-0.1096  Tc -0.0404  Tw (and ) Tj17.4 0  TD /F2 9  Tf0  Tc 0  Tw (LeafState) Tj51.6 0  TD /F4 10.2  Tf-0.1258  Tc (class) Tj-244.2 -12  TD -0.0532  Tc 0.5032  Tw (templates: ) Tj14.4 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc 0  Tw (template<typename H>) Tj0 -12  TD (struct TopState {) Tj10.8 -12  TD (typedef H Host;) Tj0 -12  TD (typedef void Base;) TjT* (virtual void handler\(Host&\) const =0;) TjT* (virtual unsigned getId\(\) const =0;) Tj-10.8 -12  TD (};) Tj0 -12  TD (template<typename H, unsigned id,) Tj48.6 -12  TD (typename B> struct CompState;) Tj-48.6 -12  TD (template<typename H, unsigned id,) Tj37.8 -12  TD -0.2108  Tc 0.0108  Tw (typename B=CompState<H,0,TopState<H> > >) Tj-37.8 -12  TD 0  Tc 0  Tw (struct CompState : B {) Tj10.8 -12  TD (typedef B Base;) Tj274.8 708  TD (typedef CompState<H,id,Base> This;) Tj0 -12  TD (template<typename X> void handle\(H& h,) Tj21.6 -12  TD (const X& x\) const { Base::handle\(h,x\); }) Tj-21.6 -12  TD (static void init\(H&\); ) Tj118.8 0  TD 0 0 0 rg /F2 9  Tf(// no implementation) Tj-118.8 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf(static void entry\(H&\) {}) Tj0 -12  TD (static void exit\(H&\) {}) Tj-10.8 -12  TD (};) Tj0 -12  TD (template<typename H>) TjT* (struct CompState<H,0,TopState<H> > :) Tj172.8 -12  TD (TopState<H> {) Tj-162 -12  TD (typedef TopState<H> Base;) Tj0 -12  TD (typedef CompState<H,0,Base> This;) TjT* (template<typename X> void handle\(H&,) Tj135 -12  TD (const X&\) const {}) Tj-135 -12  TD (static void init\(H&\); ) Tj118.8 0  TD 0 0 0 rg /F2 9  Tf(// no implementation) Tj-118.8 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf(static void entry\(H&\) {}) Tj0 -12  TD (static void exit\(H&\) {}) Tj-10.8 -12  TD (};) Tj0 -12  TD (template<typename H, unsigned id,) Tj32.4 -12  TD (typename B=CompState<H,0,TopState<H> > >) Tj-32.4 -12  TD (struct LeafState : B {) Tj10.8 -12  TD (typedef B Base;) Tj0 -12  TD (typedef LeafState<H,id,Base> This;) TjT* (template<typename X> void handle\(H& h,) Tj21.6 -12  TD (const X& x\) const { Base::handle\(h,x\); }) Tj-21.6 -12  TD (virtual void handler\(H& h\) const) Tj129.6 -12  TD ({ handle\(h,*this\); }) Tj-129.6 -12  TD -0.1105  Tc 0.0248  Tw (virtual unsigned getId\(\) const { return id; }) Tj0 -12  TD 0  Tc 0  Tw (static void init\(H& h\) { h.next\(obj\); }) Tj102.6 -12  TD 0 0 0 rg /F2 9  Tf(// don\222t specialize this) Tj-102.6 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf(static void entry\(H&\) {}) Tj0 -12  TD (static void exit\(H&\) {}) TjT* (static const LeafState obj;) Tj-10.8 -12  TD (};) Tj0 -12  TD (template<typename H, unsigned id, typename B> ) TjT* (const LeafState<H, id, B> LeafState<H, id,) Tj194.4 -12  TD (B>::obj; ) Tj-208.2 -12  TD 0 0 0 rg /F4 10.2  Tf-0.0885  Tc 0.0308  Tw (And here\222s how you use this to specify the states of our example: ) Tj13.8 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc 0  Tw (typedef CompState<TestHSM,0>     Top;) Tj0 -12  TD (typedef CompState<TestHSM,1,Top>  S0;) TjT* (typedef CompState<TestHSM,2,S0>     S1;) TjT* (typedef LeafState<TestHSM,3,S1>       S11;) TjT* (typedef CompState<TestHSM,4,S0>     S2;) TjT* (typedef CompState<TestHSM,5,S2>       S21;) TjT* (typedef LeafState<TestHSM,6,S21>        S211;) Tj-13.8 -12  TD 0 0 0 rg /F4 10.2  Tf0.0394  Tc 1.1906  Tw (I used indentation to indicate state nesting. Each state bears a) Tj0 -12  TD -0.0092  Tc 0.9592  Tw (unique numeric ID code, starting with ) Tj163.8 0  TD /F2 9  Tf0  Tc 0  Tw (0) Tj9.6 0  TD /F4 10.2  Tf-0.0658  Tc 1.3158  Tw (for the top-level state) Tj-173.4 -12  TD -0.1015  Tc 0.1515  Tw (which is outside of the all-encompassing ) Tj165.6 0  TD /F2 9  Tf0  Tc 0  Tw (s0) Tj13.8 0  TD /F4 10.2  Tf-0.0943  Tc 0.3443  Tw (state of our example.) Tj-179.4 -12  TD -0.0951  Tc 0.8723  Tw (The ID code ensures that all states are distinct types. Except for) Tj0 -12  TD -0.0984  Tc 0.2211  Tw (the top-level state you have to specify the enclosing state for each) TjT* 0.6015  Tc 0.6122  Tw (state. This is how the hierarchy is defined. It leads to a) TjT* -0.0888  Tc 1.2588  Tw (corresponding class inheritance pattern, i.e. ) Tj183.6 0  TD /F2 9  Tf0  Tc 0  Tw (Top) Tj19.8 0  TD /F4 10.2  Tf-0.0572  Tc 1.1072  Tw (is a base class) Tj-203.4 -12  TD -0.0594  Tc 0.0594  Tw (for all other states. ) Tj10.8 -12  TD 0.313  Tc 0.137  Tw (The ) Tj21 0  TD /F2 9  Tf0.4286  Tc 0  Tw (TestHSM) Tj44.4 0  TD /F4 10.2  Tf0.238  Tc 1.412  Tw (class is where the current state is held \(it) Tj-76.2 -12  TD -0.1329  Tc -0.1671  Tw (corresponds loosely to Miro\222s ) Tj120 0  TD /F2 9  Tf0  Tc 0  Tw (QHsmTst) Tj39.6 0  TD /F4 10.2  Tf-0.149  Tc -0.001  Tw (class\). This class hosts the) Tj-159.6 -12  TD 0.2377  Tc 0.1266  Tw (state machine. Actions are typically implemented as member) Tj0 -12  TD -0.1008  Tc -0.3492  Tw (functions of this class. As the states all have different types, we can) TjT* -0.0804  Tc 0.5304  Tw (only represent the current state through a pointer to the top-level) TjT* -0.1117  Tc -0.311  Tw (state, from which all states are derived. Dispatching an event to the) TjT* -0.0716  Tc -0.0784  Tw (current state handler calls the ) Tj118.8 0  TD /F2 9  Tf0  Tc 0  Tw (handler\(\)) Tj51 0  TD /F4 10.2  Tf-0.1359  Tc -0.0141  Tw (member function of the) TjETendstreamendobj90 0 obj10564endobj88 0 obj<</Type /Page/Parent 85 0 R/Resources <</Font <</F0 6 0 R /F2 10 0 R /F4 16 0 R /F5 21 0 R /F11 41 0 R >>/ProcSet 2 0 R>>/Contents 89 0 R>>endobj92 0 obj<</Length 93 0 R>>stream
BT553.2 42  TD0 0 0 rg /F0 10.8  Tf0.099  Tc 0  Tw (17) Tj-240.6 768.6  TD /F0 12  Tf-0  Tc -0.0896  Tw (Overload issue 64 december 2004) Tj-283.2 -40.8  TD /F4 10.2  Tf-0.1683  Tc -0.3817  Tw (current state through that pointer. The ) Tj147 0  TD /F2 9  Tf-0.0667  Tc 0  Tw (handler\(\)) Tj49.8 0  TD /F4 10.2  Tf-0.2301  Tc 0.0801  Tw (member function) Tj-196.8 -12  TD -0.1194  Tc 0.4194  Tw (thus needs to be virtual. All states that can actually be the current) Tj0 -12  TD -0.0971  Tc 0.438  Tw (state, that is all leaf states, contain nothing but a vtbl-Pointer. So,) TjT* -0.1258  Tc 0.1758  Tw (ironically, they are objects without state. ) Tj11.4 -12  TD -0.0636  Tc -0.5773  Tw (The current state of the state machine is represented by a pointer) Tj-11.4 -12  TD -0.1043  Tc 0.0743  Tw (to the corresponding state object. ) Tj13.8 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc 0  Tw (const TopState<TestHSM>* state_;) Tj-13.8 -12  TD 0 0 0 rg /F4 10.2  Tf-0.091  Tc 0.8137  Tw (Invoking the handler of the current state in response to an event) Tj0 -12  TD -0.0022  Tc 1.1122  Tw (is called dispatching, and it is done simply like this \(assuming) TjT* -0.0749  Tc 0.0249  Tw (we\222re in a member function of ) Tj124.2 0  TD /F2 9  Tf0  Tc 0  Tw (TestHSM) Tj37.8 0  TD /F4 10.2  Tf-0.1161  Tc -0.0339  Tw (\): ) Tj-148.2 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc 0  Tw (state_->handler\(*this\);) Tj-13.8 -12  TD 0 0 0 rg /F4 10.2  Tf-0.1387  Tc 0.1887  Tw (Note that only ) Tj60 0  TD /F2 9  Tf0  Tc 0  Tw (LeafState) Tj51 0  TD /F4 10.2  Tf-0.1052  Tc 0.4052  Tw (has a static member ) Tj82.2 0  TD /F2 9  Tf0  Tc 0  Tw (obj) Tj16.2 0  TD /F4 10.2  Tf0.1644  Tc 0.2856  Tw (; ) Tj5.4 0  TD /F2 9  Tf0  Tc 0  Tw (CompState) Tj-214.8 -12  TD /F4 10.2  Tf-0.0965  Tc 0.0965  Tw (does not need it because it can\222t be instantiated anyway, as it does) Tj0 -12  TD 0.6428  Tc 0.4072  Tw (not implement the pure virtual functions inherited from) TjT* /F2 9  Tf0  Tc 0  Tw (TopState) Tj43.2 0  TD /F4 10.2  Tf-0.1027  Tc 0.8528  Tw (. The ) Tj25.2 0  TD /F2 9  Tf0  Tc 0  Tw (LeafState) Tj52.2 0  TD /F4 10.2  Tf-0.1096  Tc -0.0404  Tw (and ) Tj18 0  TD /F2 9  Tf0  Tc 0  Tw (CompState) Tj52.2 0  TD /F4 10.2  Tf-0.0411  Tc 1.0911  Tw (templates provide) Tj-190.8 -12  TD -0.0852  Tc 0.6019  Tw (empty implementations for entry and exit actions. If you provide) Tj0 -12  TD -0.0655  Tc 0.5155  Tw (specialized functions yourself, they will be taken instead. This is) TjT* -0.0269  Tc 1.2569  Tw (how you implement your own entry and exit actions. More on) TjT* -0.1214  Tc -0.0286  Tw (this later. ) Tj0 -18  TD /F0 12  Tf-0.0467  Tc 0.1067  Tw (Representing Events ) TjT* /F4 10.2  Tf-0.0842  Tc 0.1142  Tw (An event is something that triggers actions and state transitions in) Tj0 -12  TD -0.0823  Tc -0.0677  Tw (the state machine. Without events, the state machine is sitting still) TjT* -0.0734  Tc 1.2734  Tw (and doing nothing. State machines are reactive systems. Events) TjT* -0.0717  Tc 0.8551  Tw (are not represented by anything predefined in this state machine) TjT* -0.1158  Tc 0.6325  Tw (implementation. You are essentially free to provide what you see) TjT* -0.1031  Tc 0.3531  Tw (fit for this task. The only thing you need to do is to call the event) TjT* -0.0862  Tc 0.4695  Tw (dispatcher shown above whenever an event happens. In order for) TjT* -0.0722  Tc 0.0422  Tw (the state handlers to determine what happened, you will also need) TjT* -0.093  Tc 0.543  Tw (to provide access to data associated with the event. For example,) TjT* 0.0238  Tc 1.0808  Tw (you could store an event ID-code in a member variable of the) TjT* -0.025  Tc 1.275  Tw (state machine\222s host class and have the state handler functions) TjT* -0.112  Tc 0.2347  Tw (interrogate it to find out about the particular event at hand. Here\222s) TjT* -0.1935  Tc 0.6435  Tw (how our ) Tj35.4 0  TD /F2 9  Tf0  Tc 0  Tw (TestHSM) Tj40.2 0  TD /F4 10.2  Tf-0.0693  Tc -0.0807  Tw (class does it: ) Tj-61.8 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc 0  Tw (enum Signal { A_SIG,B_SIG,C_SIG,D_SIG,) Tj75.6 -12  TD (E_SIG,F_SIG,G_SIG,H_SIG };) Tj-75.6 -12  TD (class TestHSM {) Tj0 -12  TD (public:) Tj10.8 -12  TD (TestHSM\(\);) Tj0 -12  TD (~TestHSM\(\);) TjT* (void next\(const TopState<TestHSM>& state\)) Tj129.6 -12  TD ({ state_ = &state; }) Tj-129.6 -12  TD (Signal getSig\(\) const { return sig_; }) Tj0 -12  TD (void dispatch\(Signal sig\)) Tj27 -12  TD ({ sig_ = sig; state_->handler\(*this\); }) Tj-27 -12  TD (void foo\(int i\) { foo_ = i; }) Tj0 -12  TD (int foo\(\) const { return foo_; }) Tj-10.8 -12  TD (private:) Tj10.8 -12  TD (const TopState<TestHSM>* state_;) Tj0 -12  TD (Signal sig_;) TjT* (int foo_;) Tj-10.8 -12  TD (};) Tj-13.8 -12  TD 0 0 0 rg /F4 10.2  Tf-0.0765  Tc 1.0265  Tw (Here, the event is represented by ) Tj140.4 0  TD /F2 9  Tf0  Tc 0  Tw (enum) Tj25.2 0  TD /F4 10.2  Tf-0.0548  Tc 1.1048  Tw (values corresponding to) Tj-165.6 -12  TD 0.1415  Tc 1.1485  Tw (the actual key pressed on the keypad. On each keypress, the) Tj0 -12  TD 0.1314  Tc 0.9186  Tw (surrounding system needs to call ) Tj146.4 0  TD /F2 9  Tf0.18  Tc 0  Tw (dispatch\(\)) Tj60 0  TD /F4 10.2  Tf0.2032  Tc 0.8468  Tw (to invoke the) Tj-206.4 -12  TD -0.1054  Tc 0.1554  Tw (dispatcher. In our example, we do it like this: ) Tj13.8 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc 0  Tw (int main\(\) {) Tj10.8 -12  TD (TestHSM test;) Tj0 -12  TD (for\(;;\) {) Tj10.8 -12  TD (printf\("\\nSignal<-"\);) Tj275.4 708  TD (char c = getc\(stdin\);) Tj0 -12  TD (getc\(stdin\); // discard '\\n') TjT* (if\(c<'a' || 'h'<c\) {) Tj10.8 -12  TD (return 0;) Tj-10.8 -12  TD (}) Tj0 -12  TD (test.dispatch\(\(Signal\)\(c-'a'\)\);) Tj-10.8 -12  TD (}) Tj-10.8 -12  TD (}) Tj-14.4 -12  TD 0 0 0 rg /F4 10.2  Tf-0.107  Tc 0.557  Tw (You can see how the state machine is driven from the outside by) Tj0 -12  TD -0.1092  Tc -0.0408  Tw (calling ) Tj30.6 0  TD /F2 9  Tf0  Tc 0  Tw (dispatch\(\)) Tj57.6 0  TD /F4 10.2  Tf-0.067  Tc 0.7742  Tw (repeatedly. This is the essence of driving a) Tj-88.2 -12  TD 0.2015  Tc 0.9985  Tw (reactive system. You call it each time something interesting) Tj0 -12  TD -0.0715  Tc 0.4124  Tw (happens. This is also easy to integrate with the message pump or) TjT* -0.0538  Tc 1.1538  Tw (event loop of a typical GUI, although I don\222t show this here \(I) TjT* -0.0797  Tc 0.2024  Tw (would have to commit to a specific GUI, making it more difficult) TjT* -0.11  Tc 0.11  Tw (for you to try the code if you use a different system\). ) Tj11.4 -12  TD -0.1254  Tc -0.1746  Tw (Your representation of events may be completely different from) Tj-11.4 -12  TD -0.0733  Tc -0.3338  Tw (that in the example, and it is neither necessary to store it in a single) Tj0 -12  TD 0.0714  Tc 0.3786  Tw (member variable nor indeed do you need to store it in the state) TjT* -0.0857  Tc 0.4857  Tw (machine host class at all. You just need to make sure the handler) TjT* -0.0649  Tc -0.2697  Tw (functions can somehow get at it. This is easiest when it is stored in) TjT* -0.0678  Tc 0.0101  Tw (the host class, as a reference to the host object is always passed to) TjT* -0.081  Tc -0.069  Tw (the handlers. ) Tj0 -18  TD /F0 12  Tf-0.0073  Tc -0.0327  Tw (Handlers and Actions ) TjT* /F4 10.2  Tf0.1757  Tc 0.8743  Tw (Implementing the handler functions is the central element of) Tj0 -12  TD -0.0356  Tc 1.2356  Tw (implementing the statechart. Here are the handler functions for) TjT* 0.084  Tc 1.0993  Tw (our example. You may want to cross-check with the diagram) TjT* 0.3563  Tc 0.8437  Tw (while browsing through this source code. We implement a) TjT* -0.0707  Tc 0.0407  Tw (function template specialization for each state.) Tj14.4 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf-0.0154  Tc 0.0154  Tw (template<> template<typename X> inline void) Tj21.6 -12  TD -0.0167  Tc 0.0167  Tw (S0::handle\(TestHSM& h, const X& x\) const {) Tj-10.8 -12  TD 0  Tc 0  Tw (switch\(h.getSig\(\)\) {) Tj10.8 -12  TD -0.0364  Tc 0.0364  Tw (case E_SIG: { Tran<X,This,S211> t\(h\);) Tj75.6 -12  TD -0.025  Tc 0.025  Tw (printf\("s0-E;"\); return; }) Tj-75.6 -12  TD 0  Tc 0  Tw (default: break;) Tj-10.8 -12  TD (}) Tj0 -12  TD (return Base::handle\(h,x\);) Tj-10.8 -12  TD (}) Tj0 -12  TD -0.0154  Tc 0.0154  Tw (template<> template<typename X> inline void) Tj21.6 -12  TD -0.0167  Tc 0.0167  Tw (S1::handle\(TestHSM& h, const X& x\) const {) Tj-10.8 -12  TD 0  Tc 0  Tw (switch\(h.getSig\(\)\) {) Tj10.8 -12  TD (case A_SIG: { Tran<X,This,S1> t\(h\);) Tj75.6 -12  TD -0.025  Tc 0.025  Tw (printf\("s1-A;"\); return; }) Tj-75.6 -12  TD 0  Tc 0  Tw (case B_SIG: { Tran<X,This,S11> t\(h\);) Tj75.6 -12  TD -0.025  Tc 0.025  Tw (printf\("s1-B;"\); return; }) Tj-75.6 -12  TD 0  Tc 0  Tw (case C_SIG: { Tran<X,This,S2> t\(h\);) Tj75.6 -12  TD -0.025  Tc 0.025  Tw (printf\("s1-C;"\); return; }) Tj-75.6 -12  TD 0  Tc 0  Tw (case D_SIG: { Tran<X,This,S0> t\(h\);) Tj75.6 -12  TD -0.025  Tc 0.025  Tw (printf\("s1-D;"\); return; }) Tj-75.6 -12  TD -0.0364  Tc 0.0364  Tw (case F_SIG: { Tran<X,This,S211> t\(h\);) Tj75.6 -12  TD -0.025  Tc 0.025  Tw (printf\("s1-F;"\); return; }) Tj-75.6 -12  TD 0  Tc 0  Tw (default: break;) Tj-10.8 -12  TD (}) Tj0 -12  TD (return Base::handle\(h,x\);) Tj-10.8 -12  TD (}) Tj0 -12  TD -0.0154  Tc 0.0154  Tw (template<> template<typename X> inline void) Tj16.2 -12  TD -0.0162  Tc 0.0162  Tw (S11::handle\(TestHSM& h, const X& x\) const {) Tj-5.4 -12  TD 0  Tc 0  Tw (switch\(h.getSig\(\)\) {) Tj10.8 -12  TD -0.0364  Tc 0.0364  Tw (case G_SIG: { Tran<X,This,S211> t\(h\);) Tj75.6 -12  TD -0.024  Tc 0.024  Tw (printf\("s11-G;"\); return; }) TjETendstreamendobj93 0 obj9836endobj91 0 obj<</Type /Page/Parent 85 0 R/Resources <</Font <</F0 6 0 R /F2 10 0 R /F4 16 0 R /F11 41 0 R >>/ProcSet 2 0 R>>/Contents 92 0 R>>endobj95 0 obj<</Length 96 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.0912  Tc 0  Tw (18) Tj0 768.6  TD /F0 12  Tf-0.0449  Tc 0.2549  Tw (Overload issue 64 december 2004) Tj36 -40.8  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc 0  Tw (case H_SIG: if\(h.foo\(\)\) {) Tj75.6 -12  TD (printf\("s11-H;"\);) Tj0 -12  TD (h.foo\(0\); return;) Tj-10.8 -12  TD (} break;) Tj-64.8 -12  TD (default: break;) Tj-10.8 -12  TD (}) Tj0 -12  TD (return Base::handle\(h,x\);) Tj-10.8 -12  TD (}) Tj0 -12  TD (template<> template<typename X> inline void) Tj21.6 -12  TD (S2::handle\(TestHSM& h, const X& x\) const {) Tj-10.8 -12  TD (switch\(h.getSig\(\)\) {) Tj10.8 -12  TD (case C_SIG: { Tran<X,This,S1> t\(h\);) Tj75.6 -12  TD (printf\("s2-C;"\); return; }) Tj-75.6 -12  TD (case F_SIG: { Tran<X,This,S11> t\(h\);) Tj75.6 -12  TD (printf\("s2-F;"\); return; }) Tj-75.6 -12  TD (default: break;) Tj-10.8 -12  TD (}) Tj0 -12  TD (return Base::handle\(h,x\);) Tj-10.8 -12  TD (}) Tj0 -12  TD (template<> template<typename X> inline void) Tj16.2 -12  TD (S21::handle\(TestHSM& h, const X& x\) const {) Tj-5.4 -12  TD (switch\(h.getSig\(\)\) {) Tj10.8 -12  TD (case B_SIG: { Tran<X,This,S211> t\(h\);) Tj75.6 -12  TD (printf\("s21-B;"\); return; }) Tj-75.6 -12  TD (case H_SIG: if\(!h.foo\(\)\) {) Tj75.6 -12  TD (Tran<X,This,S21> t\(h\);) Tj0 -12  TD (printf\("s21-H;"\); h.foo\(1\);) TjT* (return;) Tj-10.8 -12  TD (} break;) Tj-64.8 -12  TD (default: break;) Tj-10.8 -12  TD (}) Tj0 -12  TD (return Base::handle\(h,x\);) Tj-10.8 -12  TD (}) Tj0 -12  TD (template<> template<typename X> inline void) Tj10.8 -12  TD (S211::handle\(TestHSM& h, const X& x\) const {) Tj0 -12  TD (switch\(h.getSig\(\)\) {) Tj10.8 -12  TD (case D_SIG: { Tran<X,This,S21> t\(h\);) Tj75.6 -12  TD (printf\("s211-D;"\); return; }) Tj-75.6 -12  TD (case G_SIG: { Tran<X,This,S0> t\(h\);) Tj75.6 -12  TD (printf\("s211-G;"\); return; }) Tj-75.6 -12  TD (default: break;) Tj-10.8 -12  TD (}) Tj0 -12  TD (return Base::handle\(h,x\);) Tj-10.8 -12  TD (}) Tj-14.4 -12  TD 0 0 0 rg /F4 10.2  Tf-0.0792  Tc 1.0292  Tw (This is about as straightforward as is gets. Let\222s look at the last) Tj0 -12  TD -0.0532  Tc 0.5032  Tw (handler: ) Tj36 0  TD /F2 9  Tf0  Tc 0  Tw (S211::handle\(\)) Tj78.6 0  TD /F4 10.2  Tf-0.1349  Tc 0.5849  Tw (as an example. If you check with the) Tj-114.6 -12  TD 0.2241  Tc 0.7259  Tw (diagram, you can see that the ) Tj133.2 0  TD /F2 9  Tf0.45  Tc 0  Tw (s211) Tj26.4 0  TD /F4 10.2  Tf0.1843  Tc 1.1657  Tw (state handles transitions) Tj-159.6 -12  TD -0.0632  Tc 0.2732  Tw (associated with two events: Pressing ) Tj150 0  TD /F2 9  Tf0  Tc 0  Tw (d) Tj8.4 0  TD /F4 10.2  Tf-0.1133  Tc 0.4133  Tw (causes a transition to state) Tj-158.4 -12  TD /F2 9  Tf0  Tc 0  Tw (s21) Tj16.2 0  TD /F4 10.2  Tf-0.0722  Tc 0.3222  Tw (, while pressing ) Tj67.2 0  TD /F2 9  Tf0  Tc 0  Tw (g) Tj8.4 0  TD /F4 10.2  Tf-0.0883  Tc 0.4183  Tw (causes a transition to state ) Tj109.2 0  TD /F2 9  Tf0  Tc 0  Tw (s0) Tj10.8 0  TD /F4 10.2  Tf-0.1301  Tc 0.5801  Tw (. Each of the) Tj-211.8 -12  TD -0.0795  Tc 1.0438  Tw (transitions print a log message. The function ) Tj188.4 0  TD /F2 9  Tf0  Tc 0  Tw (S211::handle\(\)) Tj-188.4 -12  TD /F4 10.2  Tf0.2598  Tc 0.9402  Tw (implements this behaviour, and you should have no trouble) Tj0 -12  TD -0.0752  Tc 1.1919  Tw (making the connection between the diagram and the code. This) TjT* -0.0583  Tc 0.0083  Tw (simple handler function illustrates 3 points: ) TjT* 0.375  Tc 0  Tw (1.) Tj11.4 0  TD -0.094  Tc -0.056  Tw (The event \(key code\) is retrieved from the host object using the) Tj0 -12  TD /F2 9  Tf0.45  Tc 0  Tw (getSig\(\)) Tj49.2 0  TD /F4 10.2  Tf0.1689  Tc -0.3189  Tw (function. A ) Tj52.2 0  TD /F2 9  Tf0.4  Tc 0  Tw (switch) Tj37.8 0  TD /F4 10.2  Tf0.2596  Tc 0.1904  Tw (discriminates amongst the) Tj-139.2 -12  TD -0.0808  Tc 0.0508  Tw (different events that are relevant for this state. The default case) Tj0 -12  TD 0.1554  Tc 0.2946  Tw (forwards the unhandled event types to the parent state. The) TjT* /F2 9  Tf0.3333  Tc 0  Tw (CompState) Tj52.2 0  TD /F4 10.2  Tf0.1644  Tc (/) Tj3 0  TD /F2 9  Tf0.4  Tc (LeafState) Tj57 0  TD /F4 10.2  Tf0.2482  Tc 2.4018  Tw (class templates contain helpful) Tj-112.2 -12  TD -0.0702  Tc 0.0402  Tw (typedefs to make this convenient. If no state handles the event,) Tj0 -12  TD 0.0379  Tc 0.4121  Tw (it ends up in the handler for the top state, where it is silently) Tj274.8 708  TD -0.084  Tc -0.486  Tw (discarded by default. If you want a different behaviour, you may) Tj0 -12  TD -0.0372  Tc 0.1872  Tw (specialize the ) Tj57 0  TD /F2 9  Tf0  Tc 0  Tw (handle\(\)) Tj45.6 0  TD /F4 10.2  Tf-0.1038  Tc 0.1038  Tw (function template for the ) Tj101.4 0  TD /F2 9  Tf0  Tc 0  Tw (Top) Tj18.6 0  TD /F4 10.2  Tf-0.0411  Tc -0.1089  Tw (state. ) Tj-233.4 -12  TD -0.225  Tc 0  Tw (2.) Tj10.8 0  TD -0.2725  Tc -0.2108  Tw (Actions are implemented as ordinary function calls, for example to) Tj0 -12  TD -0.2035  Tc 0.5335  Tw (member functions of the host class. In our example handler, the) TjT* -0.2429  Tc -0.1071  Tw (action is simply a call to ) Tj94.8 0  TD /F2 9  Tf-0.15  Tc 0  Tw (printf\(\)) Tj41.4 0  TD /F4 10.2  Tf-0.2911  Tc -0.0589  Tw (, which prints a log message. ) Tj-147 -12  TD -0.225  Tc 0  Tw (3.) Tj10.8 0  TD -0.0473  Tc 0.4223  Tw (Transitions are managed by yet another class template: ) Tj228 0  TD /F2 9  Tf0.15  Tc 0  Tw (Tran) Tj22.2 0  TD /F4 10.2  Tf-0.15  Tc (.) Tj-250.2 -12  TD -0.0947  Tc -0.1053  Tw (The details of this are explained later, suffice to say that a ) Tj231 0  TD /F2 9  Tf0  Tc 0  Tw (Tran) Tj-231 -12  TD /F4 10.2  Tf-0.0675  Tc -0.221  Tw (object is created on the stack in much the same way as a scoped) Tj0 -12  TD -0.0746  Tc 0.5246  Tw (lock object, and it is destroyed automatically at the end of the) TjT* -0.0592  Tc 0.3592  Tw (scope. At construction time all relevant exit actions associated) TjT* -0.1413  Tc -0.3687  Tw (with the state transition are called, and at destruction the relevant) TjT* -0.1108  Tc -0.2392  Tw (entry actions are performed. Also, the host object\222s state pointer) TjT* -0.065  Tc 0.515  Tw (is made to point at the new state. In between construction and) TjT* -0.0803  Tc -0.0697  Tw (destruction of this ) Tj74.4 0  TD /F2 9  Tf0  Tc 0  Tw (Tran) Tj24 0  TD /F4 10.2  Tf-0.112  Tc -0.038  Tw (object you can call any actions that are) Tj-98.4 -12  TD -0.0659  Tc -0.0841  Tw (associated with this particular transition. ) Tj-10.8 -12  TD -0.1071  Tc 1.1571  Tw (The UML statechart formalism allows a few more variations. It) Tj0 -12  TD 0.1143  Tc 1.0107  Tw (allows conditional transitions, that is transitions that are only) TjT* 0.5202  Tc 0.5298  Tw (executed when a guard condition holds true. This can be) TjT* -0.09  Tc 1.0734  Tw (acommodated easily by testing the guard condition with an ) Tj249 0  TD /F2 9  Tf0  Tc 0  Tw (if) Tj10.8 0  TD /F4 10.2  Tf0.2034  Tc (-) Tj-259.8 -12  TD 0.0618  Tc 0.9882  Tw (statement inside the corresponding ) Tj151.2 0  TD /F2 9  Tf0.3  Tc 0  Tw (switch) Tj37.2 0  TD /F4 10.2  Tf0.043  Tc 1.007  Tw (case. The handler) Tj-188.4 -12  TD -0.1246  Tc -0.0254  Tw (function ) Tj36 0  TD /F2 9  Tf-0.0462  Tc 0  Tw (S21::handle\(\)) Tj72.6 0  TD /F4 10.2  Tf-0.0672  Tc 0.3172  Tw (illustrates this in ) Tj69 0  TD /F2 9  Tf0  Tc 0.6  Tw (case H_SIG) Tj54.6 0  TD /F4 10.2  Tf0.0089  Tc 0.1411  Tw (. For an) Tj-232.2 -12  TD 0.0702  Tc 1.0798  Tw (internal transition, you don\222t construct a ) Tj176.4 0  TD /F2 9  Tf0.15  Tc 0  Tw (Tran) Tj26.4 0  TD /F4 10.2  Tf0.0756  Tc 0.9744  Tw (object. This is) Tj-202.8 -12  TD -0.083  Tc -0.067  Tw (what is done in ) Tj63 0  TD /F2 9  Tf0  Tc 0  Tw (case H_SIG) Tj56.4 0  TD /F4 10.2  Tf-0.0483  Tc -0.1017  Tw (of ) Tj10.8 0  TD /F2 9  Tf0  Tc 0  Tw (S11::handle\(\)) Tj70.2 0  TD /F4 10.2  Tf-0.15  Tc (. ) Tj-189.6 -12  TD 0.2785  Tc 0.7715  Tw (The implementation of exit and entry actions is similarly) Tj-10.8 -12  TD -0.0949  Tc 0.5449  Tw (straightforward: ) Tj13.8 -12  TD /F2 9  Tf0  Tc 0  Tw (// entry actions) Tj0 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf(template<> inline void S0 ::entry\(TestHSM&\)) Tj86.4 -12  TD ({ printf\("s0-ENTRY;"\); }) Tj-86.4 -12  TD (template<> inline void S1 ::entry\(TestHSM&\)) Tj86.4 -12  TD ({ printf\("s1-ENTRY;"\); }) Tj-86.4 -12  TD 0 0 0 rg /F2 9  Tf(// and so on...) Tj0 -24  TD (// exit actions) Tj0 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf(template<> inline void S0 ::exit\(TestHSM&\)) Tj86.4 -12  TD ({ printf\("s0-EXIT;"\); }) Tj-86.4 -12  TD (template<> inline void S1 ::exit\(TestHSM&\)) Tj86.4 -12  TD ({ printf\("s1-EXIT;"\); }) Tj-86.4 -12  TD 0 0 0 rg /F2 9  Tf(// and so on...) Tj-13.8 -12  TD /F4 10.2  Tf-0.0074  Tc 0.4574  Tw (Can it get any simpler? Here we just call the action routine that) Tj0 -12  TD 0.0013  Tc 0.7153  Tw (needs to be executed whenever a state is exited/entered. Again,) TjT* 0.0093  Tc 1.2589  Tw (we just print a log message, but anything could be done here.) TjT* -0.008  Tc 0.698  Tw (The only thing missing is the init routines, which are necessary) TjT* 0.0538  Tc 0.1562  Tw (for each state that has an initial transition. This initial transition) TjT* 0.2837  Tc 1.1263  Tw (may have an associated action, but usually just points to a) TjT* -0.0016  Tc -0.1484  Tw (substate. ) Tj13.8 -12  TD /F2 9  Tf0  Tc 0  Tw (// init actions \(note the reverse ordering!\)) Tj0 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf(template<> inline void S21 ::init\(TestHSM& h\)) Tj27 -12  TD ({ Init<S211> i\(h\); printf\("s21-INIT;"\); }) Tj-27 -12  TD (template<> inline void S2 ::init\(TestHSM& h\)) Tj27 -12  TD ({ Init<S21> i\(h\); printf\("s2-INIT;"\); }) Tj-27 -12  TD 0 0 0 rg /F2 9  Tf(// and so on...) Tj-13.8 -12  TD /F4 10.2  Tf-0.0671  Tc 1.2262  Tw (As before, the action is the printing of a log message. Another) Tj0 -12  TD 0.1297  Tc 0.6203  Tw (special template ) Tj72.6 0  TD /F2 9  Tf0.15  Tc 0  Tw (Init) Tj26.4 0  TD /F4 10.2  Tf0.0941  Tc 1.1273  Tw (is used to specify the transition to the) Tj-99 -12  TD 0.1709  Tc 0.9541  Tw (initial substate. Please crosscheck with the diagram. In most) Tj0 -12  TD -0.067  Tc 0.277  Tw (practical cases, action routines will be members of the host class.) TjT* -0.0949  Tc 0.4849  Tw (This is hinted at in our example with the function ) Tj204 0  TD /F2 9  Tf0  Tc 0  Tw (foo\(\)) Tj27 0  TD /F4 10.2  Tf-0.1556  Tc 0.3056  Tw (. This is) Tj-231 -12  TD -0.1117  Tc 1.2217  Tw (where you put the actual code that implements the actions. The) Tj0 -12  TD -0.0945  Tc 0.4899  Tw (handlers only have the task of selecting the right action and state) TjT* -0.1176  Tc 0.4039  Tw (transition and invoke them in the right order. Try to keep detailed) TjT* -0.0922  Tc 0.0422  Tw (action code out of the handlers. ) TjETendstreamendobj96 0 obj11008endobj94 0 obj<</Type /Page/Parent 85 0 R/Resources <</Font <</F0 6 0 R /F2 10 0 R /F4 16 0 R /F11 41 0 R >>/ProcSet 2 0 R>>/Contents 95 0 R>>endobj98 0 obj<</Length 99 0 R>>stream
BT29.4 776.4  TD0 0 0 rg /F0 12  Tf-0.1331  Tc 0.1931  Tw (The Magical Tran Template ) Tj0 -18.6  TD /F4 10.2  Tf0.224  Tc 0.826  Tw (The most interesting part is the last: the ) Tj180.6 0  TD /F2 9  Tf0.15  Tc 0  Tw (Tran) Tj26.4 0  TD /F4 10.2  Tf0.0976  Tc 1.5524  Tw (template that) Tj-207 -12  TD -0.0897  Tc 0.1397  Tw (figures out which entry and exit actions to call: ) Tj13.8 -12  TD /F2 9  Tf0  Tc 0  Tw (template<typename C, typename S, typename T>) Tj0 -12  TD (// Current,Source,Target) TjT* 0.2 0.2 0.2 rg /F11 9  Tf(struct Tran {) Tj10.8 -12  TD (typedef typename C::Host Host;) Tj0 -12  TD (typedef typename C::Base CurrentBase;) TjT* (typedef typename S::Base SourceBase;) TjT* (typedef typename T::Base TargetBase;) TjT* (enum { ) Tj37.8 0  TD 0 0 0 rg /F2 9  Tf(// work out when to terminate) Tj0 -12  TD (// template recursion) Tj-27 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf(eTB_CB = IsDerivedFrom<TargetBase,) Tj124.2 -12  TD (CurrentBase>::Res,) Tj-124.2 -12  TD (eS_CB = IsDerivedFrom<S,CurrentBase>::Res,) Tj0 -12  TD (eS_C = IsDerivedFrom<S,C>::Res,) TjT* (eC_S = IsDerivedFrom<C,S>::Res,) TjT* (exitStop = eTB_CB && eS_C,) TjT* (entryStop = eS_C || eS_CB && !eC_S) Tj-10.8 -12  TD (};) Tj0 -12  TD 0 0 0 rg /F2 9  Tf(// We use overloading to stop recursion. The) TjT* (// more natural template specialization) TjT* (// method would require to specialize the) TjT* (// inner template without specializing the) TjT* (// outer one, which is forbidden.) TjT* 0.2 0.2 0.2 rg /F11 9  Tf-0.2488  Tc 0.2488  Tw (static void exitActions\(Host&, Bool<true>\) {}) TjT* -0.2  Tc -0.1  Tw (static void exitActions\(Host& h, Bool<false>\){) Tj10.8 -12  TD 0  Tc 0  Tw (C::exit\(h\);) Tj0 -12  TD (Tran<CurrentBase,S,T>::exitActions\(h,) Tj129.6 -12  TD (Bool<exitStop>\(\)\);) Tj-140.4 -12  TD (}) Tj0 -12  TD -0.2429  Tc 0.0929  Tw (static void entryActions\(Host&, Bool<true>\) {}) TjT* -0.2233  Tc 0.2233  Tw (static void entryActions\(Host& h,Bool<false>\){) Tj10.8 -12  TD 0  Tc 0  Tw (Tran<CurrentBase,S,T>::entryActions\(h,) Tj124.2 -12  TD (Bool<entryStop>\(\)\);) Tj-124.2 -12  TD (C::entry\(h\);) Tj-10.8 -12  TD (}) Tj0 -12  TD (Tran\(Host& h\) : host_\(h\)) Tj37.8 -12  TD ({ exitActions\(host_,Bool<false>\(\)\); }) Tj-37.8 -12  TD (~Tran\(\) { Tran<T,S,T>::entryActions\(host_,) Tj54 -12  TD (Bool<false>\(\)\); T::init\(host_\); }) Tj-54 -12  TD (Host& host_;) Tj-10.8 -12  TD (};) Tj-13.8 -12  TD 0 0 0 rg /F4 10.2  Tf-0.2703  Tc 0.5818  Tw (It uses a gadget described in Herb Sutter\222s GotW #71 [4]. It is used) Tj0 -12  TD -0.2712  Tc 0.9462  Tw (to test at compile time whether a class ) Tj156 0  TD /F2 9  Tf0  Tc 0  Tw (D) Tj8.4 0  TD /F4 10.2  Tf-0.3147  Tc 1.1247  Tw (is derived from a class ) Tj93.6 0  TD /F2 9  Tf0  Tc 0  Tw (B) Tj-258 -12  TD /F4 10.2  Tf-0.2123  Tc 1.2023  Tw (either directly or indirectly. This is an important ingredient in the) Tj0 -12  TD -0.28  Tc 0.08  Tw (mechanism that figures out the exit/entry actions to call. Here it is: ) Tj13.8 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc 0  Tw (template<class D, class B>) Tj0 -12  TD (class IsDerivedFrom {) TjT* (private:) Tj10.8 -12  TD (class Yes { char a[1]; };) Tj0 -12  TD (class No { char a[10]; };) TjT* (static Yes Test\( B* \); ) Tj124.2 0  TD 0 0 0 rg /F2 9  Tf(// undefined) Tj-124.2 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf(static No Test\( ... \); ) Tj124.2 0  TD 0 0 0 rg /F2 9  Tf(// undefined) Tj-135 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf(public:) Tj10.8 -12  TD -0.2341  Tc 0.0841  Tw (enum { Res = sizeof\(Test\(static_cast<D*>\(0\)\)\)) Tj70.2 -12  TD 0  Tc 0  Tw (== sizeof\(Yes\) ? 1 : 0 };) Tj-81 -12  TD (};) Tj-13.8 -12  TD 0 0 0 rg /F4 10.2  Tf-0.0258  Tc 1.0758  Tw (So how does ) Tj58.2 0  TD /F2 9  Tf0.15  Tc 0  Tw (Tran) Tj25.8 0  TD /F4 10.2  Tf0.0159  Tc 1.2055  Tw (work? I explained already that all the exit) Tj-84 -12  TD -0.0824  Tc 0.0524  Tw (actions are called when a ) Tj103.8 0  TD /F2 9  Tf0  Tc 0  Tw (Tran) Tj24 0  TD /F4 10.2  Tf-0.0748  Tc 0.2848  Tw (object is constructed and all entry) Tj147 708  TD -0.0767  Tc 1.1813  Tw (actions are called when it is destructed again. Our states are all) Tj0 -12  TD 0.1489  Tc 0.5011  Tw (different types, so ) Tj82.2 0  TD /F2 9  Tf0.15  Tc 0  Tw (Tran) Tj26.4 0  TD /F4 10.2  Tf0.1425  Tc 1.1075  Tw (needs to be a template. Its template) Tj-108.6 -12  TD 0.0124  Tc 1.0922  Tw (parameters are the type of the current state \(which is always a) Tj0 -12  TD -0.0599  Tc 0.1099  Tw (leaf state\), the source state \(where the transition arrow originates,) TjT* -0.0846  Tc 0.48  Tw (which may be a composite state that contains the leaf state either) TjT* -0.0696  Tc -0.0804  Tw (directly or indirectly\) and the type of the target state. ) Tj11.4 -12  TD /F2 9  Tf0  Tc 0  Tw (Tran) Tj24.6 0  TD /F4 10.2  Tf-0.1032  Tc 0.3732  Tw (now needs to walk up in the inheritance hierarchy of the) Tj-36 -12  TD -0.0945  Tc -0.4055  Tw (current state \(C\) until it finds the common base class of current and) Tj0 -12  TD -0.0627  Tc 0.2819  Tw (target state \(C and T\), but it must not stop before the source state) TjT* -0.1311  Tc -0.4007  Tw (\(S\) was reached. From there it needs to descend the hierarchy down) TjT* -0.1666  Tc -0.3988  Tw (to the target state T. While ascending, it needs to call the exit actions) TjT* -0.0862  Tc 0.5362  Tw (of the states along the way, and when descending it needs to call) TjT* -0.0742  Tc -0.0091  Tw (the entry actions of the states along the way. ) Tj11.4 -12  TD 0.0747  Tc 0.3753  Tw (Ascending uses template recursion in ) Tj159.6 0  TD /F2 9  Tf0.1385  Tc 0  Tw (exitActions\(\)) Tj72 0  TD /F4 10.2  Tf0.1803  Tc 0.2697  Tw (, and) Tj-243 -12  TD 0.0543  Tc 0.3957  Tw (descending uses a similar recursion in  ) Tj165 0  TD /F2 9  Tf0.1714  Tc 0  Tw (entryActions\(\)) Tj77.4 0  TD /F4 10.2  Tf0.0473  Tc 0.4027  Tw (. The) Tj-242.4 -12  TD -0.06  Tc 0.51  Tw (additional ) Tj42.6 0  TD /F2 9  Tf0  Tc 0  Tw (Bool) Tj24.6 0  TD /F4 10.2  Tf-0.061  Tc 0.2539  Tw (parameter of these functions is used to terminate) Tj-67.2 -12  TD -0.0649  Tc 0.5149  Tw (the recursion at the right point via overloading. Finding the right) Tj0 -12  TD -0.0912  Tc 0.0162  Tw (point is where Herb\222s gadget enters the picture. ) Tj11.4 -12  TD -0.0664  Tc 0.3528  Tw (The point where the recursion needs to terminate is at the first) Tj-11.4 -12  TD -0.1039  Tc -0.1961  Tw (state that is common to both source and target state, in other words) Tj0 -12  TD -0.0208  Tc 0.4708  Tw (a common base class of both states. So when you are ascending) TjT* -0.0656  Tc -0.1935  Tw (from the source state you will eventually encounter a base class of) TjT* -0.0856  Tc -0.5444  Tw (the target state, and there\222s where the recursion must end. Similarly) TjT* -0.0979  Tc -0.3854  Tw (when ascending from the target state you will eventually encounter) TjT* -0.0934  Tc 0.1616  Tw (a state that is a base class of the source state. ) Tj11.4 -12  TD -0.1383  Tc -0.3389  Tw (So we know how to ascend from both ends towards the common) Tj-11.4 -12  TD -0.098  Tc -0.2702  Tw (base class, but we actually need to descend towards the target class) Tj0 -12  TD -0.011  Tc 0.461  Tw (once we have ascended from the source state, so it appears as if) TjT* -0.1122  Tc -0.2778  Tw (we\222ve got it the wrong way up. But this is not a problem, as we can) TjT* -0.0895  Tc 0.1031  Tw (ensure the correct order of the entry routines by just swapping the) TjT* 0.2513  Tc 1.0387  Tw (recursion point with the invocation of the action as seen in) TjT* /F2 9  Tf0.3  Tc 0  Tw (entryActions\(\)) Tj79.2 0  TD /F4 10.2  Tf0.1853  Tc 0.1647  Tw (. The effect is that in ) Tj92.4 0  TD /F2 9  Tf0.2308  Tc 0  Tw (exitActions\(\)) Tj73.8 0  TD /F4 10.2  Tf0.1464  Tc 0.3036  Tw (, the) Tj-245.4 -12  TD 0.1681  Tc 0.2819  Tw (actual exit actions are invoked as we drill recursively into the) Tj0 -12  TD -0.1066  Tc -0.4934  Tw (inheritance hierarchy, while in ) Tj121.2 0  TD /F2 9  Tf0  Tc 0  Tw (entryActions\(\)) Tj77.4 0  TD /F4 10.2  Tf-0.0748  Tc -0.6752  Tw (the entry actions) Tj-198.6 -12  TD -0.1207  Tc 0.1343  Tw (are invoked as we work ourselves back out of the hierarchy. ) Tj11.4 -12  TD -0.1874  Tc 0.4737  Tw (You can now also see why there is a member function template) Tj-11.4 -12  TD /F2 9  Tf-0.3  Tc 0  Tw (handle\(\)) Tj43.2 0  TD /F4 10.2  Tf-0.36  Tc -0.09  Tw (in the ) Tj22.2 0  TD /F2 9  Tf-0.2667  Tc 0  Tw (CompState) Tj46.8 0  TD /F4 10.2  Tf0.1644  Tc (/) Tj2.4 0  TD /F2 9  Tf-0.2  Tc (LeafState) Tj48 0  TD /F4 10.2  Tf-0.2722  Tc -0.0778  Tw (class template. Since ) Tj80.4 0  TD /F2 9  Tf-0.45  Tc 0  Tw (Tran) Tj-243 -12  TD /F4 10.2  Tf-0.2924  Tc 0.327  Tw (needs to know the current state in order to work out which entry and) Tj0 -12  TD -0.0899  Tc 0.4399  Tw (exit actions to invoke, it is necessary to pass it up the inheritance) TjT* 0.0265  Tc 0.2902  Tw (hierarchy in the default case of each handler function\222s ) Tj230.4 0  TD /F2 9  Tf0.1  Tc 0  Tw (switch) Tj-230.4 -12  TD /F4 10.2  Tf-0.2944  Tc -0.0556  Tw (statement. If we didn\222t do that, transitions handled in the handler for a) Tj0 -12  TD -0.2887  Tc 0.0787  Tw (composite state would miss the exit actions of its substates. ) Tj11.4 -12  TD 0.1106  Tc 0.3394  Tw (Finally, the handling of the initial state of a composite state) Tj-11.4 -12  TD -0.0943  Tc 0.3728  Tw (deserves explanation. Remember that targetting a composite state) Tj0 -12  TD -0.0814  Tc 0.4769  Tw (with a transition leads you to the initial state specified within the) TjT* -0.0983  Tc -0.1608  Tw (composite state. The init action of a target state is always executed) TjT* -0.0551  Tc -0.0487  Tw (after executing the entry action. The init action of a leaf state is to) TjT* -0.0699  Tc 0.5199  Tw (announce itself to the host class as the new state. This behaviour) TjT* 0.1149  Tc 0.2751  Tw (shouldn\222t be changed. A composite state by default has no init) TjT* -0.0739  Tc -0.3761  Tw (action. So if you target a composite state with a transition, you will) TjT* 0.0183  Tc 0.4317  Tw (get a compile-time error, unless you specifically provide an init) TjT* -0.1054  Tc 0.2554  Tw (function for this composite state. Inside such an init function, you) TjT* -0.1419  Tc -0.0081  Tw (use the following ) Tj69.6 0  TD /F2 9  Tf0  Tc 0  Tw (Init) Tj23.4 0  TD /F4 10.2  Tf-0.1228  Tc -0.4557  Tw (class template to specify the initial substate. ) Tj-78.6 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc 0  Tw (template<typename T>) Tj0 -12  TD (struct Init {) Tj10.8 -12  TD (typedef typename T::HostClass Host;) Tj0 -12  TD (Init\(Host& h\) : host_\(h\) {}) TjT* -0.015  Tc 0.015  Tw (~Init\(\) { T::entry\(host_\); T::init\(host_\); }) TjT* 0  Tc 0  Tw (Host& host_;) Tj-10.8 -12  TD (};) Tj234 -19.8  TD 0 0 0 rg /F0 10.8  Tf0.0912  Tc (19) Tj-240 768.6  TD /F0 12  Tf-0  Tc -0.0896  Tw (Overload issue 64 december 2004) TjETendstreamendobj99 0 obj11128endobj97 0 obj<</Type /Page/Parent 85 0 R/Resources <</Font <</F0 6 0 R /F2 10 0 R /F4 16 0 R /F11 41 0 R >>/ProcSet 2 0 R>>/Contents 98 0 R>>endobj101 0 obj<</Length 102 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (20) Tj0 768.6  TD /F0 12  Tf-0.0449  Tc 0.2549  Tw (Overload issue 64 december 2004) Tj0 -34.2  TD -0.069  Tc 0.029  Tw (A Test Run ) Tj0 -18.6  TD /F4 10.2  Tf-0.0756  Tc 0.8256  Tw (When you compile all the code for our example, you may run a) Tj0 -12  TD -0.0737  Tc 0.7237  Tw (little test to see whether the actions are called in the right order.) TjT* -0.0986  Tc 0.0986  Tw (Here\222s what I got: ) Tj14.4 -12  TD /F2 7.8  Tf-0.0725  Tc 0  Tw (top-INIT;s0-ENTRY;s0-INIT;s1-ENTRY;s1-INIT;s11-ENTRY;) Tj0 -12  TD 0.12  Tc (Signal<-a) TjT* (s11-EXIT;s1-EXIT;s1-A;s1-ENTRY;s1-INIT;s11-ENTRY;) TjT* (Signal<-e) TjT* (s11-EXIT;s1-EXIT;s0-EXIT;s0-E;s0-ENTRY;) Tj100.8 -12  TD (s2-ENTRY;s21-ENTRY;s211-ENTRY;) Tj-100.8 -12  TD (Signal<-e) Tj0 -12  TD (s211-EXIT;s21-EXIT;s2-EXIT;s0-EXIT;s0-E;) Tj57.6 -12  TD (s0-ENTRY;s2-ENTRY;s21-ENTRY;s211-ENTRY;) Tj-57.6 -12  TD (Signal<-a) Tj0 -24  TD (Signal<-h) Tj0 -12  TD (s211-EXIT;s21-EXIT;s21-H;s21-ENTRY;s21-INIT;) Tj192 -12  TD (s211-ENTRY;) Tj-192 -12  TD (Signal<-h) Tj0 -17.4  TD (Signal<-x) Tj-14.4 -18.6  TD /F4 10.2  Tf0.1863  Tc 0.9494  Tw (You\222ll notice that Miro\222s implementation renders a different) Tj0 -12  TD 0.0045  Tc 1.1055  Tw (result \(page 100 in [1]\). Notably, the actions associated with a) TjT* -0.1034  Tc 0.7534  Tw (transition are executed before any exit actions in Miro\222s version.) TjT* 0.0978  Tc 1.1922  Tw (This violates the UML rules, but Miro explains that this was) TjT* 0.6345  Tc 2.2155  Tw (deliberate, as obeying this rule would have made his) TjT* -0.1042  Tc 1.4542  Tw (implementation significantly more complicated. My code obeys) TjT* -0.0751  Tc -0.0083  Tw (the rule with no noticeable hit on code performance. ) Tj11.4 -12  TD -0.2445  Tc 0.3945  Tw (Furthermore, note that when pressing the ) Tj163.2 0  TD /F2 9  Tf0  Tc 0  Tw (e) Tj7.8 0  TD /F4 10.2  Tf-0.4197  Tc -0.3303  Tw (key, ) Tj18.6 0  TD /F2 9  Tf0  Tc 0  Tw (s0) Tj13.2 0  TD /F4 10.2  Tf-0.2419  Tc 0.3919  Tw (is exited and) Tj-214.2 -12  TD -0.2131  Tc -0.4169  Tw (reentered. This is not immediately obvious from the way the diagram) Tj0 -12  TD -0.2708  Tc -0.3155  Tw (is drawn. In fact, Miro\222s code doesn\222t show this behaviour. The UML) TjT* -0.2004  Tc 0.2304  Tw (definition seems to specify the behaviour of my code, although this) TjT* -0.0377  Tc 0.4332  Tw (isn\222t entirely clear to me. It certainly is more consistent with the) TjT* -0.0867  Tc 0.27  Tw (behaviour of self-transitions. If my interpretation turned out to be) TjT* 0.0897  Tc 0.7803  Tw (correct, it would be clearer to draw transition arrows in UML) TjT* -0.0673  Tc 0.4507  Tw (statecharts such that they always leave the source state boundary) TjT* -0.2462  Tc -0.1538  Tw (towards the outside, and also enter it from the outside. Hence the exit) TjT* -0.2389  Tc 0.412  Tw (action of the source state is always called, even when the target is a) TjT* -0.3036  Tc -0.3964  Tw (substate of the source state. Likewise the entry action of the target state) TjT* -0.2389  Tc 0.0889  Tw (is called even when the source state is one of its substates. ) Tj0 -18  TD /F0 12  Tf-0.0043  Tc 0.0043  Tw (Efficiency of the Generated Code ) TjT* /F4 10.2  Tf-0.295  Tc 0.0988  Tw (With such a lot of templates, you might worry about the kind of code) Tj0 -12  TD -0.2949  Tc 0.4449  Tw (generated. Templates are still being accused of causing code bloat, a) TjT* -0.2779  Tc 0.3946  Tw (reason why embedded programmers in particular still hesitate to use) TjT* -0.3094  Tc 0.1594  Tw (them. If used wisely, however, templates in conjunction with inlining) TjT* -0.2991  Tc 0.9128  Tw (can actually reduce the amount of code produced. So how does the) TjT* -0.268  Tc -0.0534  Tw (system presented here fare in this respect? ) Tj11.4 -12  TD -0.1396  Tc -0.3104  Tw (Given a good quality compiler and a sensible setting of compiler) Tj-11.4 -12  TD -0.0399  Tc -0.1101  Tw (switches, all ) Tj51 0  TD /F2 9  Tf0  Tc 0  Tw (handle\(\)) Tj43.2 0  TD /F4 10.2  Tf-0.15  Tc (, ) Tj4.8 0  TD /F2 9  Tf0  Tc (init\(\)) Tj32.4 0  TD /F4 10.2  Tf-0.15  Tc (, ) Tj4.2 0  TD /F2 9  Tf0  Tc (entry\(\)) Tj40.2 0  TD /F4 10.2  Tf-0.1096  Tc 0.5596  Tw (and ) Tj16.2 0  TD /F2 9  Tf0  Tc 0  Tw (exit\(\)) Tj34.8 0  TD /F4 10.2  Tf-0.1516  Tc (functions) Tj-226.8 -12  TD -0.052  Tc 0.002  Tw (will be inlined into the virtual ) Tj121.8 0  TD /F2 9  Tf0  Tc 0  Tw (handler\(\)) Tj51 0  TD /F4 10.2  Tf-0.0999  Tc -0.0501  Tw (function for a state. As) Tj-172.8 -12  TD -0.0994  Tc 0.0494  Tw (a result, you get as many handler functions as there are leaf states.) Tj0 -12  TD -0.0873  Tc -0.1827  Tw (A good compiler will also be able to fuse the ) Tj180 0  TD /F2 9  Tf0  Tc 0  Tw (switch) Tj34.8 0  TD /F4 10.2  Tf-0.1267  Tc -0.0233  Tw (statement of) Tj-214.8 -12  TD 0.2712  Tc 0.1788  Tw (a ) Tj7.2 0  TD /F2 9  Tf0  Tc 0  Tw (handle\(\)) Tj45.6 0  TD /F4 10.2  Tf-0.0649  Tc 0.1549  Tw (function with those from the ) Tj117 0  TD /F2 9  Tf0  Tc 0  Tw (handle\(\)) Tj45.6 0  TD /F4 10.2  Tf-0.1328  Tc 0.5828  Tw (functions of) Tj-215.4 -12  TD 0.2505  Tc 0.4395  Tw (the base classes, so that you effectively get a larger ) Tj229.2 0  TD /F2 9  Tf0.5  Tc 0  Tw (switch) Tj-229.2 -12  TD /F4 10.2  Tf-0.0393  Tc 0.4893  Tw (incorporating all cases that need to be considered in a state. The) Tj0 -12  TD 0.0708  Tc 0.3792  Tw (result is the same as if you had converted the hierarchical state) TjT* 0.2636  Tc 0.1864  Tw (machine into a flat one, taking all entry and exit actions into) TjT* -0.1034  Tc 0.5534  Tw (account, and implemented the handler function for each flat state) TjT* 0.035  Tc 0.3483  Tw (manually. The code generated literally is exactly the same. The) Tj275.4 708  TD -0.1105  Tc 0.2272  Tw (templates flatten the hierarchical state machine into a simple state) Tj0 -12  TD -0.0757  Tc -0.0743  Tw (machine and generate the code for that. ) Tj10.8 -12  TD -0.0765  Tc 0.5265  Tw (In particular, empty actions don\222t produce any code at all, not) Tj-10.8 -12  TD 0.0528  Tc 0.3972  Tw (even a call to an empty procedure. If the entry and exit actions) Tj0 -12  TD -0.1073  Tc -0.176  Tw (associated with a particular transition are also empty, the transition) TjT* 0.1989  Tc 0.2511  Tw (simmers down to a single assignment to the host class\222s state) TjT* -0.0715  Tc -0.3513  Tw (variable, which on many processors is just one or two instructions. ) Tj10.8 -12  TD -0.1294  Tc -0.3635  Tw (The result is probably about as fast as it gets, but there is no code) Tj-10.8 -12  TD 0.1381  Tc 0.2519  Tw (sharing between states. This is the reason why you should not) Tj0 -12  TD 0.2628  Tc 0.3872  Tw (include a lot of action code in the handlers, but rather call a) TjT* -0.0904  Tc -0.193  Tw (corresponding action function in the host class. This is particularly) TjT* -0.1256  Tc 0.2328  Tw (true for handler functions of composite states. ) Tj0 -18  TD /F0 12  Tf-0.016  Tc 0.376  Tw (Afterword ) TjT* /F4 10.2  Tf-0.0228  Tc 1.0728  Tw (Templates can be used to advantage here in order to allow the) Tj0 -12  TD -0.2391  Tc 0.5691  Tw (compiler to thoroughly optimize the code. It is even fairly readable) TjT* -0.2344  Tc 0.951  Tw (and requires neither liberal casting nor preprocessor macros as the) TjT* 0.1712  Tc 0.8788  Tw (solution described by Miro Samek. It does require a dose of) TjT* -0.2654  Tc 0.1154  Tw (template metaprogramming, and this may challenge your compiler. ) Tj10.8 -12  TD -0.0884  Tc 0.1384  Tw (So we\222ve got a balance of advantages and drawbacks: ) Tj-10.8 -12  TD 0.2472  Tc 0  Tw (+) Tj10.8 0  TD -0.0845  Tc -0.4405  Tw (Transitions are worked out at compile time, allowing generation) Tj0 -12  TD -0.077  Tc 0.167  Tw (of very efficient inlined code ) Tj-10.8 -12  TD 0.2472  Tc 0  Tw (+) Tj10.8 0  TD -0.0942  Tc 0.2013  Tw (Malformed statecharts are caught at compile time ) Tj-10.8 -12  TD 0.2472  Tc 0  Tw (+) Tj10.8 0  TD -0.082  Tc -0.0013  Tw (Stylized code lends itself well to automatic code generation ) Tj-10.8 -12  TD 0.2472  Tc 0  Tw (+) Tj10.8 0  TD -0.0709  Tc -0.0791  Tw (The code is typesafe and doesn\222t need casts ) Tj-10.8 -12  TD 0.2472  Tc 0  Tw (+) Tj10.8 0  TD -0.0595  Tc 0.0295  Tw (Complete flexibility in representing events ) Tj-10.8 -12  TD 0.3  Tc 0  Tw (\226) Tj10.8 0  TD -0.0835  Tc 0.0085  Tw (We need full template support in the compiler ) Tj-10.8 -12  TD 0.3  Tc 0  Tw (\226) Tj10.8 0  TD -0.0709  Tc 0.0542  Tw (All transitions must be static \(known at compile time\) ) Tj-10.8 -12  TD 0.3  Tc 0  Tw (\226) Tj10.8 0  TD 0.2693  Tc 1.114  Tw (Only a subset of the functionality of UML statecharts is) Tj0 -12  TD -0.0699  Tc -0.0801  Tw (supported ) Tj79.8 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc 0  Tw ([concluded at foot of next page]) TjET1 1 1 rg 304.2 56.4 263.4 347.4 re f0.9529 0.9529 0.9529 rg 304.8 57 262.2 346.2 re fBT306.6 392.4  TD0 0 0 rg /F11 13.8  Tf0.12  Tc (boost::fsm) Tj0 -18.6  TD /F4 10.2  Tf-0.0905  Tc 0.9405  Tw (The well-known boost library [7] is about to acquire statechart) Tj0 -12  TD 0.0646  Tc 1.0521  Tw (support. Andreas Huber has developed a library that aims to) TjT* -0.1026  Tc 0.7526  Tw (cover the entire functionality of UML statecharts, and it should) TjT* -0.07  Tc 1.27  Tw (appear in one of the next official releases of boost. Until it is) TjT* 0.6719  Tc 2.3281  Tw (accepted, you may have a look in boost\222s sandbox:) TjT* /F2 9  Tf0  Tc 0  Tw (http://boost-sandbox.sourceforge.net/libs/fsm/) TjT* 0.3429  Tc (doc/index.html) Tj84.6 0  TD /F4 10.2  Tf0.3082  Tc 0.7418  Tw (is the entry point to the documentation) Tj-84.6 -12  TD -0.1072  Tc -0.0428  Tw (accompanying ) Tj60.6 0  TD /F2 9  Tf0  Tc 0  Tw (boost::fsm) Tj54 0  TD /F4 10.2  Tf-0.15  Tc (. ) Tj-103.2 -12  TD -0.0844  Tc 0.4344  Tw (Some of the design goals of ) Tj117 0  TD /F2 9  Tf0.06  Tc 0  Tw (boost::fsm) Tj57.6 0  TD /F4 10.2  Tf-0.1227  Tc 0.5727  Tw (match mine. Both) Tj-186 -12  TD -0.0195  Tc 0.4695  Tw (facilitate direct coding of statecharts in C++ without the aid of) Tj0 -12  TD 0.2694  Tc 0.1806  Tw (special code generation tools. Such tools ought to be pretty) TjT* -0.0617  Tc 0.5117  Tw (straightforward in both cases, however. Both solutions are type) TjT* -0.0944  Tc 0.0194  Tw (safe and detect malformed statecharts at compile time. ) Tj11.4 -12  TD -0.2298  Tc 0.6798  Tw (The support of ) Tj60.6 0  TD /F2 9  Tf-0.06  Tc 0  Tw (boost::fsm) Tj55.8 0  TD /F4 10.2  Tf-0.2017  Tc 0.3517  Tw (for the complete UML semantics) Tj-127.8 -12  TD -0.2504  Tc -0.0196  Tw (makes it less efficient, although it should still surpass the efficiency) Tj0 -12  TD 0.068  Tc 0.232  Tw (of Miro Samek\222s implementation in many cases. In particular,) TjT* -0.2318  Tc -0.2682  Tw (entering a state is done through construction of a state object. It gets) TjT* -0.2455  Tc -0.3845  Tw (destructed again when exiting the state. As states are allocated using) TjT* /F2 9  Tf-0.2182  Tc -0.9818  Tw (operator new) Tj60.6 0  TD /F4 10.2  Tf-0.2893  Tc -0.4607  Tw (, the heap manager is excercised unless you overload) Tj-60.6 -12  TD /F2 9  Tf-0.2727  Tc 0.8727  Tw (operator new) Tj65.4 0  TD /F4 10.2  Tf-0.1096  Tc 0.5596  Tw (and ) Tj16.8 0  TD /F2 9  Tf-0.1286  Tc 0.1286  Tw (operator delete) Tj78.6 0  TD /F4 10.2  Tf-0.2093  Tc 0.0593  Tw (. This is done so that you) Tj-160.8 -12  TD -0.244  Tc 0.034  Tw (can include your own extra data members with a state. ) Tj11.4 -12  TD 0.0211  Tc 0.4289  Tw (No dynamic allocation happens in the solution I introduced) Tj-11.4 -12  TD -0.1777  Tc -0.2995  Tw (here. As noted, the resulting code should be fast and consume little) Tj0 -12  TD -0.1374  Tc 0.3474  Tw (memory. The downside is of course that some major facilities of) TjT* -0.1095  Tc -0.0405  Tw (UML statecharts aren\222t supported. ) Tj11.4 -12  TD -0.0544  Tc -0.4556  Tw (The benefit is yours: You\222ve got a choice between a restricted,) Tj-11.4 -12  TD -0.076  Tc -0.074  Tw (efficient solution and a flexible, universal solution. ) TjETq 304.2 403.8 m 304.2 56.4 l 567.6 56.4 l 567.6 403.8 l 304.8 403.2 m 304.8 57 l 567 57 l 567 403.2 l h W* n 304.2 56.4 263.4 347.4 re fQ endstreamendobj102 0 obj12445endobj100 0 obj<</Type /Page/Parent 85 0 R/Resources <</Font <</F0 6 0 R /F2 10 0 R /F4 16 0 R /F11 41 0 R >>/ProcSet 2 0 R>>/Contents 101 0 R>>endobj105 0 obj<</Length 106 0 R>>stream
BT29.4 181.8  TD0.2 0.2 0.2 rg /F11 9  Tf0  Tc 0  Tw ([continued from previous page]) Tj0 -12  TD 0 0 0 rg /F4 10.2  Tf0.6469  Tc 0.6281  Tw (If you find this approach useful, have improvements or) TjT* -0.077  Tc 0.0193  Tw (comments on offer or bugs to fix, I\222d like to hear from you. ) Tj11.4 -12  TD -0.0698  Tc -0.3202  Tw (I\222d like to thank Miro Samek and Andreas Huber for discussion) Tj-11.4 -12  TD -0.1093  Tc -0.2043  Tw (and advice as well as for their work on HSM implementations. My) Tj0 -12  TD -0.0123  Tc 0.3956  Tw (work wouldn\222t exist without theirs. Thanks also to the Overload) TjT* -0.0797  Tc 0.5297  Tw (reviewers. ) Tj196.8 -12  TD /F8 10.2  Tf-0.0992  Tc -0.3448  Tw (Stefan Heinzmann) Tj-196.8 -18  TD /F0 12  Tf-0.018  Tc 0  Tw (References) Tj0 -18  TD /F4 10.2  Tf0.1225  Tc 0.3275  Tw ([1] Miro Samek, ) Tj73.2 0  TD /F10 10.2  Tf0.081  Tc 0.369  Tw (Practical Statecharts in C/C++) Tj133.8 0  TD /F4 10.2  Tf0.0929  Tc 0.3571  Tw (, CMP Books) Tj79.2 120  TD -0.1028  Tc -0.5615  Tw (2002. There\222s a companion website with additional information:) Tj0 -12  TD /F2 9  Tf0  Tc 0  Tw (http://www.quantum-leaps.com ) Tj-11.4 -12  TD /F4 10.2  Tf-0.1088  Tc -0.1912  Tw ([2] Booch, Rumbaugh, Jacobson, ) Tj133.8 0  TD /F10 10.2  Tf-0.1076  Tc -0.2424  Tw (The Unified Modeling Language) Tj-122.4 -12  TD -0.0397  Tc -0.1103  Tw (User Guide) Tj46.2 0  TD /F4 10.2  Tf-0.1803  Tc 0.0303  Tw (, Addison-Wesley ) Tj-57.6 -12  TD -0.1088  Tc -0.1912  Tw ([3] Rumbaugh, Jacobson, Booch, ) Tj133.8 0  TD /F10 10.2  Tf-0.1076  Tc -0.2424  Tw (The Unified Modeling Language) Tj-122.4 -12  TD -0.1541  Tc 0.0041  Tw (Reference Manual) Tj73.2 0  TD /F4 10.2  Tf-0.1423  Tc -0.2077  Tw (, Addison-Wesley 1999 ) Tj-84.6 -12  TD -0.1644  Tc 0.0144  Tw ([4] ) Tj14.4 0  TD /F2 9  Tf0  Tc 0  Tw (http://www.gotw.ca ) Tj-14.4 -12  TD /F4 10.2  Tf-0.1644  Tc 0.0144  Tw ([5] ) Tj14.4 0  TD /F2 9  Tf0  Tc 0  Tw (http://www.ilogix.com ) Tj-14.4 -12  TD /F4 10.2  Tf-0.1216  Tc 0.2116  Tw ([6] Gamma, Helm, Johnson, Vlissides, ) Tj157.2 0  TD /F10 10.2  Tf-0.1189  Tc -0.0311  Tw (Design Patterns) Tj64.8 0  TD /F4 10.2  Tf-0.0349  Tc -0.7151  Tw (, Addison-) Tj-210.6 -12  TD -0.179  Tc 0.029  Tw (Wesley 1995 ) Tj-11.4 -12  TD -0.1644  Tc 0.0144  Tw ([7] ) Tj14.4 0  TD /F2 9  Tf0  Tc 0  Tw (http://www.boost.org) Tj234 -19.8  TD /F0 10.8  Tf0.0912  Tc (21) Tj-240 768.6  TD /F0 12  Tf-0  Tc -0.0896  Tw (Overload issue 64 december 2004) Tj0.6 w 1 J 1 j 0 0 0 RG ET29.4 196.8 m 567.6 196.8 l S BT43.2 772.2  TD/F1 18  Tf-0.0548  Tc -0.1492  Tw (A Mini-project to Decode A) Tj25.2 -20.4  TD -0.0777  Tc 0.0737  Tw (Mini-language \226 Part Two) Tj-25.2 -12  TD /F0 10.2  Tf-0.0997  Tc -0.0743  Tw (by Thomas Guest) Tj-13.8 -18  TD /F4 10.2  Tf-0.2849  Tc 0.1349  Tw (Part 1 of this two-part article [15] described the preliminary stages of) Tj0 -12  TD -0.2884  Tc 0.0051  Tw (a mini-project to write a codec for a mini-language, delivering:) Tj0 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1182  Tc 0.2082  Tw (a rough specification of the codec,) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0708  Tc -0.0792  Tw (a suite of test data,) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1131  Tc -0.0369  Tw (some prototype code,) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0634  Tc -0.0866  Tw (three implementation strategies.) Tj-11.4 -12  TD -0.2814  Tc -0.002  Tw (Part 2 continues the project and presents the final implementation.) Tj0 -18  TD /F0 12  Tf-0.0792  Tc 0  Tw (Motivation) TjT* /F4 10.2  Tf0.0343  Tc 1.0702  Tw (Part 1 of this article drew inspiration from \223The Art of UNIX) Tj0 -12  TD -0.1007  Tc 0.5507  Tw (Programming\224, by Eric Raymond [13].  Part 2 continues to draw) TjT* 0.679  Tc 3.371  Tw (from this same source, which applies as readily to) TjT* -0.1186  Tc 0.2086  Tw (implementation as it did to design.) Tj11.4 -12  TD -0.0978  Tc -0.434  Tw (At this point, I can reveal a second motivating source, \223The Tale) Tj-11.4 -12  TD 0.065  Tc 0.2993  Tw (of a Struggling Template Programmer\224, Stefan Heinzmann [7],) Tj0 -12  TD -0.117  Tc 0.117  Tw (which served to remind me how frustrating software development) TjT* -0.0785  Tc -0.3715  Tw (can be: sometimes the tools are to blame, sometimes the languages) TjT* -0.0948  Tc 0.2115  Tw (appear faulty, and sometimes the poor programmer takes a wrong) TjT* -0.1062  Tc 0.5562  Tw (turn. More personally, it reminded me that I ought to experiment) TjT* -0.2158  Tc 0.6658  Tw (with modern C++) Tj70.8 2.4  TD /F4 7.2  Tf0  Tc 0  Tw (1) Tj3.6 -2.4  TD /F4 10.2  Tf-0.15  Tc (.) Tj-63 -12  TD -0.2473  Tc -0.3694  Tw (Anyone familiar with both sources will appreciate there\222s a degree) Tj-11.4 -12  TD -0.2454  Tc -0.2865  Tw (of tension between them. In what follows, I document my attempts to) Tj0 -12  TD -0.0535  Tc 0.3944  Tw (resolve this tension. Along the way, we shall revisit the world of) TjT* -0.2679  Tc 0.1179  Tw (MPEG video encoding and get started with the Boost Spirit library.) Tj0 -18  TD /F0 12  Tf0.011  Tc -0.251  Tw (Project Recap) TjT* /F4 10.2  Tf-0.0816  Tc 1.1316  Tw (To briefly recap, then, our goal is to write a tool to convert the) Tj0 -12  TD -0.0863  Tc 1.003  Tw (binary format used in MPEG-2 digital video broadcasting into a) TjT* -0.0562  Tc -0.0938  Tw (textual form and back again \226 to write a ) Tj162.6 0  TD /F2 9  Tf0  Tc 0  Tw (dvbcodec) Tj43.2 0  TD /F4 10.2  Tf-0.0854  Tc -0.0646  Tw (. For example,) Tj-205.8 -12  TD -0.0529  Tc 1.2829  Tw (we would like to convert a section of the Program Association) Tj0 -12  TD -0.1843  Tc 0.2343  Tw (Table \(PAT\), whose syntax is as follows:) Tj13.8 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc 0  Tw (program_association_section\(\) {) Tj10.8 -12  TD (table_id                   8) Tj0 -12  TD (section_syntax_indicator   1) TjT* ('0'                        1) TjT* (reserved                   2) TjT* (section_length            12) TjT* (transport_stream_id       16) TjT* (reserved                   2) TjT* (version_number             5) TjT* (current_next_indicator     1) Tj275.4 528  TD (section_number             8) Tj0 -12  TD (last_section_number        8) TjT* (for\(i=0; i<N; i++\) {) Tj10.8 -12  TD (program_number          16) Tj0 -12  TD (reserved                 3) TjT* (if\(program_number == '0'\) {) Tj10.8 -12  TD (network_PID           13) Tj-10.8 -12  TD (}) Tj0 -12  TD (else {) Tj10.8 -12  TD (program_map_PID       13) Tj-10.8 -12  TD (}) Tj-10.8 -12  TD (}) Tj0 -12  TD (CRC_32                    32) Tj-10.8 -12  TD (}) Tj-10.8 -15.6  TD 0 0 0 rg /F7 10.2  Tf-0.1057  Tc -0.0443  Tw ([ISO/IEC 13818-1] Table 2-26 \226 Program association section) Tj-3.6 -20.4  TD /F4 10.2  Tf-0.0694  Tc 0.5194  Tw (The numerical values here represent field widths in bits: the first) Tj0 -12  TD 0.3254  Tc 0.6246  Tw (byte of the section encodes the ) Tj142.8 0  TD /F2 9  Tf0.3  Tc 0  Tw (table_id) Tj46.2 0  TD /F4 10.2  Tf0.2561  Tc 1.0939  Tw (, the next bit the) Tj-189 -12  TD /F2 9  Tf0.125  Tc 0  Tw (section_syntax_indicator) Tj132.6 0  TD /F4 10.2  Tf0.0877  Tc 1.048  Tw (, and so on until the final four) Tj-132.6 -12  TD -0.0753  Tc 0.0253  Tw (bytes which encode the cyclic redundancy check.) Tj11.4 -12  TD -0.1492  Tc -0.2316  Tw (The PAT is just one of the tables we would like to decode. There) Tj-11.4 -12  TD 0.2537  Tc 0.3163  Tw (are many others, the next three most important being the the) Tj0 -12  TD -0.1599  Tc -0.5234  Tw (Conditional Access Table, the Program Map Table and the Network) TjT* -0.198  Tc 0.168  Tw (Information Table \(CAT, PMT and NIT\).) Tj11.4 -12  TD 0.1873  Tc 0.2627  Tw (The textual output format we decided on should reflect the) Tj-11.4 -12  TD -0.0849  Tc 0.1349  Tw (syntax description as follows:) Tj14.4 -17.4  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc 0  Tw (program_association_section\(\) {) Tj10.8 -12  TD (table_id                   8 = 0x0) Tj0 -12  TD (section_syntax_indicator   1 = 0x1) TjT* ('0'                        1 = 0x0) TjT* 0 0 0 rg /F2 9  Tf(...) TjT* 0.2 0.2 0.2 rg /F11 9  Tf(CRC_32             32 = 0xcae52d9f) Tj-10.8 -12  TD (}) Tj-14.4 -18.6  TD 0 0 0 rg /F4 10.2  Tf-0.0962  Tc 0.1462  Tw (We came up with three possible implementation strategies for our) Tj0 -12  TD /F2 9  Tf0  Tc 0  Tw (dvbcodec) Tj43.2 0  TD /F4 10.2  Tf0.1644  Tc (:) Tj-43.2 -10.2  TD /F5 6  Tf0.054  Tc (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1478  Tc -0.4688  Tw (Implement a pat-codec. Then implement a cat-codec, then a pmt-) Tj0 -12  TD -0.118  Tc -0.032  Tw (codec, etc.) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0811  Tc -0.5189  Tw (Implement a general codec which understands the full bitstream) Tj0 -12  TD -0.153  Tc -0.297  Tw (syntax and can use it to parse an arbitrary section format. All that) TjT* 0.0431  Tc 0.4069  Tw (then remains is to prime this codec with the required section) TjT* -0.0139  Tc 0  Tw (formats.) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc (l) Tj11.4 -1.8  TD /F4 10.2  Tf0.1158  Tc 0.3342  Tw (Devise a code generator which, given a section format, will) Tj0 -12  TD -0.0713  Tc 0.007  Tw (generate a program to encode/decode that particular format.) Tj-11.4 -18  TD /F0 12  Tf-0.0585  Tc 0.1185  Tw (Towards a Solution) Tj0 -18  TD /F4 10.2  Tf-0.0428  Tc 1.3656  Tw (The first strategy holds little appeal: it risks being a recipe for) Tj0 -12  TD -0.0884  Tc 0.0242  Tw (cut-and-paste code and boring repetition. We reject it.) TjET1 1 1 rg 29.4 201.6 263.4 29.4 re f29.4 201.6 263.4 29.4 re fBT29.4 225  TD0 0 0 rg /F9 7.8  Tf-0.144  Tc 0  Tw (1) Tj10.8 0  TD 0.0788  Tc 0.4992  Tw (My job involves writing portable C++ to run on embedded platforms. The compilers) Tj0 -10.2  TD 0.1022  Tc 0.7758  Tw (supplied for these platforms often do not support \223modern\224 C++ features such as) Tj0 -9.6  TD 0.1489  Tc 0  Tw (templates.) TjET29.4 234.6 m 292.8 234.6 l S endstreamendobj106 0 obj10251endobj103 0 obj<</Type /Page/Parent 104 0 R/Resources <</Font 107 0 R/ProcSet 2 0 R>>/Contents 105 0 R>>endobj107 0 obj<</F0 6 0 R/F1 8 0 R/F2 10 0 R/F4 16 0 R/F5 21 0 R/F7 25 0 R/F8 31 0 R/F9 33 0 R/F10 35 0 R/F11 41 0 R>>endobj109 0 obj<</Length 110 0 R>>stream
BT40.2 769.8  TD0 0 0 rg /F4 10.2  Tf-0.3166  Tc -0.4334  Tw (The second and third strategies look to have more going from them,) Tj-11.4 -12  TD -0.2916  Tc 0.5416  Tw (particularly since we have restricted our scope to a subset of the full) Tj0 -12  TD -0.3349  Tc -0.4901  Tw (bitstream syntax. Although these strategies appear rather different, they) TjT* 0.0984  Tc 0.0516  Tw (both require us to parse syntax descriptions of the general form) TjT* -0.2994  Tc 0.1494  Tw (exemplified by the ) Tj73.8 0  TD /F2 9  Tf-0.2  Tc 0  Tw (program_association_section) Tj139.8 0  TD /F4 10.2  Tf-0.15  Tc (.) Tj-202.2 -12  TD -0.3205  Tc -0.4295  Tw (So, we need a parser. We need one capable of handling conditionals) Tj-11.4 -12  TD -0.2299  Tc 0.1399  Tw (and loops: one capable, that is, of handling a Turing-complete mini-) Tj0 -12  TD -0.2458  Tc 0.0958  Tw (language. Raymond [13] can advise. In general terms, he suggests:) Tj0 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf0.2679  Tc 1.6393  Tw (Where possible, reuse. Look for a proven, documented,) Tj0 -12  TD -0.149  Tc -0.376  Tw (supported, portable, parser. \(He argues these criteria pretty much) TjT* -0.1077  Tc 0.1077  Tw (imply an open source solution.\)) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf0.278  Tc 0.097  Tw (Prefer scripting languages such as Python and Perl. These) Tj0 -12  TD 0.237  Tc 0.213  Tw (facilitate rapid development and are less prone to memory) TjT* 0.1899  Tc 0.1851  Tw (management bugs. You may not need the raw performance) TjT* 0.2012  Tc 0.2488  Tw (offered by C/C++, and the library support offered by these) TjT* -0.1492  Tc 0.1992  Tw (languages is often superior.) Tj-11.4 -12  TD -0.0947  Tc 1.2947  Tw (On the more specific subject of parsers, Raymond recommends) Tj0 -12  TD /F2 10.2  Tf-0.12  Tc 0  Tw (lex) Tj21.6 0  TD /F4 10.2  Tf-0.1096  Tc -0.0404  Tw (and ) Tj18 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (yacc) Tj27.6 0  TD /F4 10.2  Tf-0.1269  Tc 1.1769  Tw (though, in keeping with the Unix philosophy of) Tj-67.2 -12  TD -0.0627  Tc 1.1877  Tw (documenting weaknesses, he admits these tools are not perfect.) Tj0 -12  TD -0.1019  Tc -0.0481  Tw (He also suggests:) Tj17.4 -12  TD /F6 10.2  Tf-0.1588  Tc -0.3092  Tw (\223If you can implement your parser in a higher-level language than) Tj-11.4 -12  TD -0.1185  Tc -0.3658  Tw (C \(which we recommend you do ...\) then look for equivalent facilities) Tj0 -12  TD -0.1434  Tc 0.0954  Tw (like Python\222s PLY ...\224) Tj-6 -12  TD /F4 10.2  Tf-0.1158  Tc 0.6158  Tw (I tend to agree with Raymond, but I\222m not convinced PLY is the) Tj0 -12  TD -0.0833  Tc 0.619  Tw (way to go here. Of course, it won\222t get me very far with my aim) TjT* -0.0049  Tc 1.2549  Tw (of finding out about modern C++, but it\222s also not part of the) TjT* -0.092  Tc 0.2087  Tw (standard Python distribution. In fact, a web search reveals several) TjT* -0.0916  Tc 0.0083  Tw (other Python parser frameworks \226 it\222s unclear which will prevail.) Tj11.4 -12  TD -0.0528  Tc 0.5028  Tw (The C++ standard library doesn\222t provide a parser either. We) Tj-11.4 -12  TD -0.0862  Tc -0.4388  Tw (might make some progress tokenising our data with ) Tj204.6 0  TD /F2 9  Tf0  Tc 0  Tw (std::strtok) Tj-204.6 -12  TD /F4 10.2  Tf-0.0257  Tc -0.1243  Tw (or even ) Tj32.4 0  TD /F2 9  Tf0  Tc 0  Tw (std::sscanf) Tj59.4 0  TD /F4 10.2  Tf-0.1345  Tc 0.3445  Tw (, but this won\222t suffice. ) Tj95.4 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (lex) Tj21 0  TD /F4 10.2  Tf-0.1096  Tc 0.5596  Tw (and ) Tj16.8 0  TD /F2 10.2  Tf-0.12  Tc 0  Tw (yacc) Tj26.4 0  TD /F4 10.2  Tf-0.1514  Tc (are) Tj-251.4 -12  TD -0.0591  Tc -0.5524  Tw (of course a tried and tested solution, but I\222d rather not have to learn) Tj0 -12  TD -0.0411  Tc -0.1089  Tw (two more mini-languages.) Tj11.4 -12  TD 0.2544  Tc 0.1956  Tw (The next place to look is in the next best thing to the C++) Tj-11.4 -12  TD -0.1266  Tc -0.5034  Tw (standard library, namely Boost [3]. Three clicks from the front page) Tj0 -12  TD -0.0836  Tc 0.5336  Tw (takes us to the Spirit parser, which claims to be a scalable parser) TjT* -0.1175  Tc -0.1659  Tw (framework written in C++. We trust the source, the documentation) TjT* -0.0763  Tc 0.0013  Tw (is good, the examples compile: let\222s try some code.) Tj0 -18  TD /F0 12  Tf0.0095  Tc -0.0495  Tw (Getting Started With Spirit) TjT* /F4 10.2  Tf-0.0624  Tc 0.7851  Tw (The code below is a complete program to recognise lines of the) Tj0 -12  TD 0.0271  Tc 0  Tw (form:) Tj14.4 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc (reserved 2 = 0x3) Tj-14.4 -12  TD 0 0 0 rg /F4 10.2  Tf-0.0709  Tc -0.0291  Tw (this being the format we arrived at for fields of our text sections.) Tj14.4 -24  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc 0  Tw (#include <boost/spirit/core.hpp>) Tj0 -12  TD (#include <iostream>) TjT* (#include <string>) Tj0 -17.4  TD (using namespace boost;) Tj0 -18.6  TD 0 0 0 rg /F2 9  Tf(/**) Tj5.4 -12  TD (* @brief Parse a string representing a field ) Tj0 -12  TD (* @returns True if the field matches the) TjT* (* format: <field_name> <bitwidth> = <value>,) TjT* (* false otherwise.) TjT* (*/) Tj-5.4 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf(bool parseField\(std::string const & str\) {) Tj10.8 -12  TD (return spirit::parse\() Tj21.6 -12  TD (str.begin\(\), ) Tj0 -12  TD (str.end\(\),) Tj274.8 708  TD (spirit::lexeme_d[+spirit::graph_p]) Tj0 -12  TD (>> spirit::uint_p) TjT* (>> '=') TjT* (>> spirit::hex_p,) TjT* (spirit::space_p\).full;) Tj-32.4 -12  TD (}) Tj0 -12  TD (int main\(\) {) Tj10.8 -12  TD (std::cout << "Enter text.\\n") Tj32.4 -12  TD (<< "Lines will be matched against: \\n") Tj0 -12  TD (<< "<field_name> <bitwidth> = ") TjT* (<< <hexvalue>\\n") TjT* (<< "Type 'q' to quit\\n";) Tj-32.4 -17.4  TD (std::string str;) Tj0 -12  TD (std::string const quit\("q"\);) Tj0 -18.6  TD (while\(std::getline\(std::cin, str\) &&) Tj32.4 -12  TD (str != quit\) {) Tj-21.6 -12  TD (std::cout << \(parseField\(str\)) Tj118.8 -12  TD (? "hit" : "miss"\)) Tj-64.8 -12  TD (<< std::endl;) Tj-64.8 -12  TD (}) Tj0 -12  TD (return 0;) Tj-10.8 -12  TD (}) Tj-13.8 -12  TD 0 0 0 rg /F4 10.2  Tf-0.1091  Tc 0.8591  Tw (Here, the action is concentrated in the function ) Tj196.2 0  TD /F2 9  Tf0  Tc 0  Tw (parseField\(\)) Tj64.8 0  TD /F4 10.2  Tf-0.15  Tc (,) Tj-261 -12  TD -0.0517  Tc 0.8617  Tw (which wraps a call to ) Tj94.2 0  TD /F2 9  Tf0.08  Tc 0  Tw (spirit::parse\(\)) Tj81.6 0  TD /F4 10.2  Tf-0.15  Tc (. ) Tj6 0  TD /F2 9  Tf0.04  Tc (spirit::parse\(\)) Tj-181.8 -12  TD /F4 10.2  Tf-0.0865  Tc -0.0635  Tw (accepts as arguments:) Tj0 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj10.8 -1.8  TD /F4 10.2  Tf-0.0811  Tc 0.0811  Tw (two iterators marking the start and end of the data to be parsed,) Tj-10.8 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj10.8 -1.8  TD /F4 10.2  Tf-0.0997  Tc -0.0503  Tw (a parser,) Tj-10.8 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj10.8 -1.8  TD /F4 10.2  Tf-0.0834  Tc -0.0666  Tw (a skip parser.) Tj-10.8 -12  TD -0.4112  Tc 1.0612  Tw (We have used ) Tj58.8 0  TD /F2 9  Tf-0.2  Tc 0  Tw (spirit::space_p) Tj81.6 0  TD /F4 10.2  Tf-0.2982  Tc 1.3482  Tw (directly as our skip parser: this) Tj-140.4 -12  TD -0.3067  Tc 0.3567  Tw (primitive parser recognizes whitespace and tells ) Tj185.4 0  TD /F2 9  Tf-0.2  Tc 0  Tw (spirit::parse\(\)) Tj-185.4 -12  TD /F4 10.2  Tf0.4803  Tc 0.5697  Tw (which characters it should skip past in the input. A more) Tj0 -12  TD -0.309  Tc 0.159  Tw (sophisticated skip parser might be used to skip comments.) Tj0 -18  TD /F0 12  Tf-0.0177  Tc 0.3777  Tw (Operator Overloading) TjT* /F4 10.2  Tf-0.1212  Tc 0.7894  Tw (The parser itself is a sequence of sub-parsers which can be read:) Tj0 -12  TD 0.2447  Tc 0.9387  Tw (recognise input consisting of a block one or more printable) TjT* 0.119  Tc 1.081  Tw (characters, followed by an unsigned integer, followed by the) TjT* -0.1227  Tc 0.1727  Tw (equals sign, followed by a hexadecimal integer.) Tj10.8 -12  TD -0.2161  Tc 0.3328  Tw (Operator overloading is used by Spirit to make such expressions) Tj-10.8 -12  TD -0.2661  Tc 0.4911  Tw (into readable approximations of EBNF syntax descriptions \(see also) Tj0 -12  TD -0.2702  Tc -0.2998  Tw ([1] for more on this technique\). Here, we see that ) Tj186 0  TD /F2 9  Tf-0.25  Tc 0  Tw (operator<<\(\)) Tj64.2 0  TD /F4 10.2  Tf-0.3322  Tc (has) Tj-250.2 -12  TD -0.2901  Tc 0.3116  Tw (been overloaded as a sequencing operator, prefix ) Tj190.8 0  TD /F2 9  Tf-0.2727  Tc 0  Tw (operator+\(\)) Tj59.4 0  TD /F4 10.2  Tf-0.3322  Tc (has) Tj-250.2 -12  TD -0.2331  Tc 0.4831  Tw (been overloaded to mean \223one or more of\224, and ) Tj190.8 0  TD /F2 9  Tf-0.1  Tc 0  Tw (operator[]\(\)) Tj66 0  TD /F4 10.2  Tf-0.4017  Tc (is) Tj-256.8 -12  TD -0.2921  Tc 0.1421  Tw (overloaded to adapt the behaviour of a sub-parser \226 in this case using) Tj0 -12  TD /F2 9  Tf-0.225  Tc 0  Tw (spirit::lexeme_d) Tj85.2 0  TD /F4 10.2  Tf-0.3167  Tc 0.1667  Tw (to turn off whitespace skipping.) Tj-85.2 -18  TD /F0 12  Tf-0.0225  Tc -0.2175  Tw (Parser Generators) Tj0 -18  TD /F4 10.2  Tf-0.1053  Tc 0.9553  Tw (I should also mention that the ) Tj126.6 0  TD /F2 9  Tf-0.4  Tc 0  Tw ('=') Tj19.2 0  TD /F4 10.2  Tf-0.1335  Tc 1.1835  Tw (sub-parser is a shorthand for) Tj-145.8 -12  TD /F2 9  Tf-0.2118  Tc 0  Tw (spirit::ch_p\('='\)) Tj87.6 0  TD /F4 10.2  Tf-0.2976  Tc 0.6726  Tw (, which in turn is a parser generator returning) Tj-87.6 -12  TD -0.2941  Tc 0.2941  Tw (the character literal parser ) Tj100.8 0  TD /F2 9  Tf-0.25  Tc 0  Tw (spirit::chlit<char>\('='\)) Tj124.2 0  TD /F4 10.2  Tf-0.15  Tc (.) Tj-214.2 -12  TD -0.0925  Tc -0.0575  Tw (Similarly, ) Tj42.6 0  TD /F2 9  Tf0.0462  Tc 0  Tw (spirit::hex_p) Tj73.8 0  TD /F4 10.2  Tf-0.1096  Tc 0.5596  Tw (and ) Tj17.4 0  TD /F2 9  Tf0  Tc 0  Tw (spirit::uint_p) Tj78.6 0  TD /F4 10.2  Tf-0.0859  Tc 0.5359  Tw (are parser) Tj-223.2 -12  TD 0.0674  Tc 0.3826  Tw (generator functions which return suitable specialisations of the) Tj0 -12  TD /F2 9  Tf0.3789  Tc 0  Tw (spirit::uint_parser) Tj112.8 0  TD /F4 10.2  Tf0.2566  Tc 0.6734  Tw (template struct.  The full template) Tj-112.8 -12  TD -0.0638  Tc -0.0862  Tw (parameters of this struct are as follows:) Tj13.8 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc 0  Tw (template<typename T = unsigned,) Tj48.6 -12  TD (int Radix = 10,) Tj0 -12  TD (unsigned MinDigits = 1,) TjT* (int MaxDigits = -1>) Tj-48.6 -12  TD (struct uint_parser { ) Tj113.4 0  TD 0 0 0 rg /F2 9  Tf(/* */) Tj32.4 0  TD 0.2 0.2 0.2 rg /F11 9  Tf(};) Tj-435 -19.8  TD 0 0 0 rg /F0 10.8  Tf0.1872  Tc (22) Tj0 768.6  TD /F0 12  Tf-0.0449  Tc 0.2549  Tw (Overload issue 64 december 2004) TjETendstreamendobj110 0 obj10974endobj108 0 obj<</Type /Page/Parent 104 0 R/Resources <</Font 111 0 R/ProcSet 2 0 R>>/Contents 109 0 R>>endobj111 0 obj<</F0 6 0 R/F2 10 0 R/F4 16 0 R/F5 21 0 R/F6 23 0 R/F11 41 0 R>>endobj113 0 obj<</Length 114 0 R>>stream
BT549.6 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (23) Tj-237 768.6  TD /F0 12  Tf-0  Tc -0.0896  Tw (Overload issue 64 december 2004) Tj-283.2 -40.8  TD /F4 10.2  Tf-0.1064  Tc 0.3564  Tw (The helper functions ) Tj86.4 0  TD /F2 9  Tf0  Tc 0  Tw (hex_p) Tj30.6 0  TD /F4 10.2  Tf-0.1096  Tc 0.5596  Tw (and ) Tj17.4 0  TD /F2 9  Tf0  Tc 0  Tw (uint_p) Tj35.4 0  TD /F4 10.2  Tf-0.0944  Tc 0.5444  Tw (are often good enough,) Tj-169.8 -12  TD -0.1272  Tc 1.1272  Tw (but it\222s also useful to have the full flexibility of the base parser.) Tj0 -12  TD -0.0528  Tc 1.1574  Tw (For example, if we need to match larger hex values, and ) Tj241.8 0  TD /F2 9  Tf0  Tc 0  Tw (long) Tj-241.8 -12  TD (long) Tj24 0  TD /F4 10.2  Tf-0.0718  Tc -0.0032  Tw (is available, we could create an alternative hex parser:) Tj-10.2 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc 0  Tw (uint_parser<unsigned long long, 16> const) Tj10.8 -12  TD (long_long_hex_p) Tj10.8 -12  TD (= uint_parser<unsigned long long, 16>\(\);) Tj-35.4 -12  TD 0 0 0 rg /F4 10.2  Tf0.0199  Tc 1.0301  Tw (In fact, the ) Tj50.4 0  TD /F2 9  Tf0.1091  Tc 0  Tw (uint_parser) Tj64.8 0  TD /F4 10.2  Tf0.0782  Tc 0.9718  Tw (should work with any user defined) Tj-115.2 -12  TD -0.1183  Tc -0.0317  Tw (scalar type.) Tj11.4 -12  TD -0.3991  Tc -0.2759  Tw (\(You\222ve probably noticed I\222m now working in the ) Tj185.4 0  TD /F2 9  Tf-0.3231  Tc 0  Tw (boost::spirit) Tj-196.8 -12  TD /F4 10.2  Tf-0.2838  Tc 0.0247  Tw (namespace. I continue to do so for the remainder of this article.\)) Tj11.4 -12  TD -0.1533  Tc 0.4397  Tw (One thing I cannot do with the hex parser, unfortunately, is get) Tj-11.4 -12  TD -0.0863  Tc 0.0863  Tw (it to accept the ) Tj61.8 0  TD /F2 9  Tf0  Tc 0  Tw (0x) Tj13.2 0  TD /F4 10.2  Tf-0.1256  Tc 0.4423  Tw (we\222ve used to prefix hex digits. We can fix the) Tj-75 -12  TD -0.0761  Tc -0.0739  Tw (bug in our program by introducing a new parser rule.) Tj13.8 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc 0  Tw (with_base_hex_p) Tj10.8 -12  TD (=  lexeme_d) Tj16.2 -12  TD ([) Tj10.8 -12  TD (as_lower_d["0x"]) Tj0 -12  TD (>> hex_p) Tj-10.8 -12  TD (];) Tj-40.8 -12  TD 0 0 0 rg /F4 10.2  Tf-0.1354  Tc -0.0146  Tw (Note here:) Tj0 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.3548  Tc 0.2048  Tw (the ) Tj13.2 0  TD /F2 9  Tf-0.18  Tc 0  Tw (as_lower_d) Tj54.6 0  TD /F4 10.2  Tf-0.2037  Tc -0.4463  Tw (directive, which converts all characters from the) Tj-67.8 -12  TD -0.1888  Tc 0.0388  Tw (input to lowercase, and therefore recognising both ) Tj198 0  TD /F2 9  Tf0  Tc 0  Tw (0x) Tj13.2 0  TD /F4 10.2  Tf-0.3096  Tc 0.1596  Tw (and ) Tj16.2 0  TD /F2 9  Tf0  Tc 0  Tw (0X) Tj10.8 0  TD /F4 10.2  Tf-0.15  Tc (.) Tj-249.6 -10.2  TD /F5 6  Tf0.054  Tc (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1027  Tc 0.3346  Tw (the rather unusual code layout. I have tried to follow the Spirit) Tj0 -12  TD 0.2552  Tc 0.1948  Tw (style guide [17] when writing parser grammars.  This will) TjT* -0.0853  Tc 0.3853  Tw (become increasingly more important when we develop a more) TjT* -0.1688  Tc 0.0188  Tw (substantial grammar.) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.156  Tc 0.006  Tw (the string literal ) Tj63 0  TD /F2 9  Tf0  Tc 0  Tw ("0x") Tj21.6 0  TD /F4 10.2  Tf-0.1646  Tc -0.2425  Tw (, which in this context becomes yet another) Tj-84.6 -12  TD -0.3241  Tc 0  Tw (parser.) Tj-11.4 -18  TD /F0 12  Tf-0.0032  Tc -0.2368  Tw (Semantic Actions) Tj0 -18  TD /F4 10.2  Tf-0.0588  Tc 0.6724  Tw (Simply recognising fields is not enough: we need to act on their) Tj0 -12  TD 0.0055  Tc 1.3112  Tw (contents. That is, we must associate semantic actions with the) TjT* 0.5993  Tc 0.4507  Tw (sub-parsers. This can be done using another overload of) TjT* /F2 9  Tf0  Tc 0  Tw (operator[]\(\)) Tj64.8 0  TD /F4 10.2  Tf-0.0727  Tc -0.0773  Tw (, which enables us to link an action to a parser.) Tj-53.4 -12  TD 0.0954  Tc 0.3546  Tw (Here, then is an encoder which will convert text versions of) Tj-11.4 -12  TD 0.0539  Tc 0.3961  Tw (sections to binary. I have omitted ) Tj142.8 0  TD /F2 9  Tf0.225  Tc 0  Tw (#include) Tj47.4 0  TD /F4 10.2  Tf0.1062  Tc 0.3438  Tw (directives etc. for) Tj-190.2 -12  TD 0.2687  Tc 0.1063  Tw (brevity. The full implementation is available with the source) Tj0 -12  TD -0.0669  Tc 0.0669  Tw (distribution for this article [8].) Tj13.8 -17.4  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc 0  Tw (typedef std::string::const_iterator iter;) Tj0 -18.6  TD 0 0 0 rg /F2 9  Tf(/**) Tj5.4 -12  TD (* @brief Put the input value to the output) Tj0 -12  TD (*  stream using the specified bitwidth) TjT* (*/) Tj-5.4 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf(void putBits\(std::ostream &, unsigned w,) Tj70.2 -12  TD (unsigned v\) { ) Tj75.6 0  TD 0 0 0 rg /F2 9  Tf(/* */) Tj32.4 0  TD 0.2 0.2 0.2 rg /F11 9  Tf(}) Tj-178.2 -12  TD 0 0 0 rg /F2 9  Tf(/**) Tj5.4 -12  TD (* @brief Parse a field of the form:) Tj0 -12  TD (*  <field_name> <bitwidth> = <value>) TjT* (*/) Tj-5.4 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf(bool parseField\(iter const & begin,) Tj86.4 -12  TD (iter const & end,) Tj0 -12  TD (unsigned & bitwidth,) TjT* (unsigned & value\) {) Tj-75.6 -12  TD (return parse\() Tj21.6 -12  TD (begin, ) Tj0 -12  TD (end,) TjT* (lexeme_d[+graph_p]) TjT* (>> uint_p[assign_a\(bitwidth\)]) Tj275.4 708  TD (>> '=') Tj0 -12  TD (>> lexeme_d) Tj16.2 -12  TD ([) Tj16.2 -12  TD (! as_lower_d["0x"]) Tj0 -12  TD (>>  hex_p[assign_a\(value\)]) Tj-16.2 -12  TD (]) Tj-16.2 -12  TD (,) Tj0 -12  TD (space_p\).full;) Tj-32.4 -12  TD (}) Tj0 -12  TD (int main\(\) {) Tj10.8 -12  TD (std::string str;) Tj0 -12  TD (int line = 0;) TjT* (try {) Tj10.8 -12  TD (while\(std::getline\(std::cin, str\)\) {) Tj10.8 -12  TD (++line;) Tj0 -12  TD (unsigned bitwidth, value;) TjT* -0.0167  Tc 0.0167  Tw (if\(parseField\(str.begin\(\), str.end\(\),) Tj75.6 -12  TD 0  Tc 0  Tw (bitwidth, value\)\) {) Tj-64.8 -12  TD -0.0176  Tc 0.0176  Tw (putBits\(std::cout, bitwidth, value\);) Tj-10.8 -12  TD 0  Tc 0  Tw (}) Tj-10.8 -12  TD (}) Tj-10.8 -12  TD (}) Tj0 -12  TD (catch\(std::exception & exc\) {) Tj10.8 -12  TD -0.0171  Tc 0.0171  Tw (std::cerr << "Error parsing line " << line ) Tj54 -12  TD 0  Tc 0  Tw (<< "\\n" << str << "\\n") Tj0 -12  TD -0.05  Tc 0.05  Tw (<< exc.what\(\) << std::endl;) Tj-54 -12  TD 0  Tc 0  Tw (return -1;) Tj-10.8 -12  TD (}) Tj0 -12  TD (return 0;) Tj-10.8 -12  TD (}) Tj-14.4 -12  TD 0 0 0 rg /F4 10.2  Tf-0.2021  Tc 0.6521  Tw (Note here:) Tj0 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf0.0906  Tc 0.4194  Tw (I have used typedefs for the iterators passed into the parser.) Tj0 -12  TD 0.1377  Tc 0.379  Tw (This will ease switching to another forward iterator type, if) TjT* 0.0737  Tc 0  Tw (required.) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1536  Tc -0.3564  Tw (I decided to make the ) Tj85.2 0  TD /F2 9  Tf-0.6  Tc 0  Tw (0x) Tj12.6 0  TD /F4 10.2  Tf-0.1605  Tc -0.3895  Tw (preceding hexadecimal values optional,) Tj-97.8 -12  TD -0.0926  Tc 0.0926  Tw (using Spirit\222s overload of ) Tj103.8 0  TD /F2 9  Tf0  Tc 0  Tw (operator!\(\)) Tj-115.2 -10.2  TD /F5 6  Tf0.054  Tc (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.2744  Tc 0.2744  Tw (The use of the ) Tj56.4 0  TD /F2 9  Tf-0.075  Tc 0  Tw (assign_a) Tj44.4 0  TD /F4 10.2  Tf-0.2013  Tc -0.4487  Tw (actor for our semantic action. We could) Tj-100.8 -12  TD 0.0364  Tc 0.4136  Tw (have used any function accepting an unsigned integer or any) Tj0 -12  TD -0.0828  Tc 0.2328  Tw (functor providing ) Tj73.8 0  TD /F2 9  Tf0.0522  Tc 0.5478  Tw (operator\(\)\(unsigned int\)) Tj131.4 0  TD /F4 10.2  Tf-0.1513  Tc 0.3013  Tw (. Again, it\222s) Tj-205.2 -12  TD -0.1178  Tc 0.1392  Tw (simpler to use one of Sprit\222s off-the-peg actors.) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf0.0642  Tc 0.3858  Tw (The program implements a classic Unix filter. This makes it) Tj0 -12  TD -0.0307  Tc 0.4807  Tw (suitable for use in a Unix pipeline. See [13] for more on this.) TjT* -0.0579  Tc -0.583  Tw (Unfortunately, I\222m not sure this is a great idea for binary output:) TjT* -0.0976  Tc 0.0226  Tw (I haven\222t found a portable way to reset ) Tj157.2 0  TD /F2 9  Tf-0.0667  Tc 0  Tw (std::cout) Tj51 0  TD /F4 10.2  Tf-0.1504  Tc 0  Tw (for binary.) Tj-219.6 -18  TD /F0 12  Tf0.06  Tc -0.3  Tw (Exceptions in Parsers) Tj0 -18  TD /F4 10.2  Tf-0.0902  Tc 0.9002  Tw (Another important point to note about our simple encoder is the) Tj0 -12  TD 0.0382  Tc 1.3118  Tw (way it handles failure conditions using C++ exceptions rather) TjT* -0.0513  Tc 0.2013  Tw (than C-style error codes. There are plenty of failure conditions to) TjT* -0.0906  Tc 0.6497  Tw (handle: a value might not fit in the available bitwidth, the output) TjT* -0.1135  Tc 0.1435  Tw (stream might not be in a suitable state, and so on.) Tj11.4 -12  TD -0.0455  Tc 0.4955  Tw (In this simple parser we might equally well have passed error) Tj-11.4 -12  TD 0.255  Tc 0.195  Tw (codes around, but a more complex parser is likely to involve) Tj0 -12  TD -0.0725  Tc -0.0775  Tw (recursion and/or nested function calls. Exceptions perform well in) TjT* -0.0928  Tc -0.1772  Tw (both the simple and the complex case, offering a scalable solution.) Tj11.4 -12  TD -0.0769  Tc -0.4481  Tw (The Spirit parser framework itself uses exceptions internally for) Tj-11.4 -12  TD -0.0718  Tc -0.1982  Tw (similar reasons. To quote the documentation:) Tj16.8 -12  TD /F6 10.2  Tf0.0396  Tc 0.2874  Tw (\223C++\222s exception handling mechanism is a perfect match for) Tj-11.4 -12  TD -0.0681  Tc 0.1534  Tw (Spirit due to its highly recursive functional nature. C++ Exceptions) Tj0 -12  TD -0.0706  Tc 0.0226  Tw (are used extensively by this module for handling errors.\224) TjETendstreamendobj114 0 obj10070endobj112 0 obj<</Type /Page/Parent 104 0 R/Resources <</Font 115 0 R/ProcSet 2 0 R>>/Contents 113 0 R>>endobj115 0 obj<</F0 6 0 R/F2 10 0 R/F4 16 0 R/F5 21 0 R/F6 23 0 R/F11 41 0 R>>endobj117 0 obj<</Length 118 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (24) Tj0 768.6  TD /F0 12  Tf-0.0449  Tc 0.2549  Tw (Overload issue 64 december 2004) Tj0 -40.8  TD /F4 10.2  Tf-0.0735  Tc 0.8235  Tw (Like our program, Spirit should not leak any such exceptions to) Tj0 -12  TD -0.0833  Tc -0.0667  Tw (its users.) Tj0 -18  TD /F0 12  Tf-0.0456  Tc 0  Tw (Weaknesses) TjT* /F4 10.2  Tf0.6512  Tc 2.2988  Tw (The simple encoder presented above follows Postel\222s) Tj0 -12  TD 0.0257  Tc 1.0843  Tw (prescription, to a degree [11]. It doesn\222t mind too much about) TjT* -0.0128  Tc 1.1962  Tw (whitespace; it allows any sequence of printable characters as a) TjT* 0.6814  Tc 0.702  Tw (field name; and it isn\222t fussy about the presentation of) TjT* -0.1173  Tc 0.5673  Tw (hexadecimal numbers.) Tj11.4 -12  TD -0.0157  Tc 0.4657  Tw (Its main flaw is that it does not look at the text format of our) Tj-11.4 -12  TD -0.079  Tc -0.221  Tw (sections as a whole: it simply skips the lines which close blocks or) Tj0 -12  TD -0.1033  Tc 0.4933  Tw (start loops, for example. This means the encoding will quietly do) TjT* -0.0719  Tc -0.4054  Tw (the wrong thing given input where a new-line has gone missing, or) TjT* -0.0513  Tc -0.6442  Tw (where the data has been truncated. This is dangerous. It also means) TjT* 0.2412  Tc 0.6451  Tw (the encoder cannot check the integrity of our text data \226 for) TjT* -0.14  Tc -0.16  Tw (example, to confirm the ) Tj94.8 0  TD /F2 9  Tf-0.1286  Tc 0  Tw (section_length) Tj76.8 0  TD /F4 10.2  Tf-0.1416  Tc -0.6084  Tw (field contains the actual) Tj-171.6 -12  TD -0.1149  Tc 0.2649  Tw (section length, or to validate a CRC.) Tj11.4 -12  TD 0.3733  Tc 0.1433  Tw (When we start thinking along these lines, we realise that) Tj-11.4 -12  TD 0.0094  Tc -0.5194  Tw (perhaps the encoder should calculate the values of these fields for) Tj0 -12  TD -0.0488  Tc -0.3781  Tw (us. We\222ll need a CRC generator anyway \226 why not embed it in the) TjT* 0.0485  Tc 0  Tw (encoder?) Tj11.4 -12  TD -0.1175  Tc -0.1075  Tw (These are important points. However, we never considered data) Tj-11.4 -12  TD -0.1055  Tc -0.0445  Tw (validation when we planned our codec and I\222m not going to worry) Tj0 -12  TD 0.2563  Tc 0.5629  Tw (about it just yet \226 I need to get started on the decoder. Data) TjT* 0.0233  Tc 0.4267  Tw (validation, though valuable, would need to be optional since an) TjT* -0.0986  Tc 0.2152  Tw (encoder must let us generate broken data for test purposes.) Tj11.4 -12  TD -0.0465  Tc 0.4965  Tw (Also, Raymond [13] encourages us to limit options whenever) Tj-11.4 -12  TD -0.0575  Tc 0.5075  Tw (possible: if we can release code earlier then our users can tell us) Tj0 -12  TD -0.1048  Tc 0.4948  Tw (which options they really want. Ideally, he suggests we make the) TjT* 0.0428  Tc 0.4072  Tw (release open-source, and allow users to \(submit patches which\)) TjT* -0.0812  Tc -0.0688  Tw (implement these options.) Tj0 -18  TD /F0 12  Tf0.0163  Tc -0.2563  Tw (Progress Review) TjT* /F4 10.2  Tf-0.3235  Tc 0.1735  Tw (We\222ve used Spirit to write a micro-parser to drive the encoder. We\222re) Tj0 -12  TD -0.2784  Tc -0.0516  Tw (ready to start on the decoder. Spirit\222s scalability will be tested.) Tj0 -18  TD /F0 12  Tf-0.012  Tc -0.228  Tw (The Decoder) TjT* /F4 10.2  Tf0.2325  Tc 1.0425  Tw (I decided to attempt the second implementation strategy: to) Tj0 -12  TD -0.0832  Tc 0.5999  Tw (develop a codec which understands the bitstream syntax and can) TjT* -0.1257  Tc 1.1257  Tw (use it to parse an arbitrary section format. I had no good reason) TjT* -0.1383  Tc 0.2883  Tw (for preferring this to the code-generator strategy.) Tj11.4 -12  TD 0.0141  Tc 0.4359  Tw (As already noted, this is a parsing task. We will use Spirit to) Tj-11.4 -12  TD -0.1506  Tc -0.4903  Tw (define the grammar used by the bitstream syntax. We can then parse) Tj0 -12  TD -0.0895  Tc 0.1031  Tw (our static program data \226 the section formats we\222re interested in \226) TjT* 0.0088  Tc 0.4412  Tw (which gives us the basis we need to parse the run-time program) TjT* -0.0802  Tc 0.0052  Tw (inputs, that is, actual instances of binary encoded sections.) Tj0 -18  TD /F0 12  Tf0.0451  Tc -0.2851  Tw (Grammar Definitions and) Tj22.2 -12  TD -0.1392  Tc 0.4992  Tw (Parse Trees) Tj-22.2 -18  TD /F4 10.2  Tf-0.0891  Tc 0.7237  Tw (I do not propose to dwell on the practical use of Spirit for much) Tj0 -12  TD -0.0581  Tc 0.7581  Tw (longer: we\222ve already seen enough of what it can do, so for full) TjT* -0.1152  Tc 1.0985  Tw (implementation details please refer to [16] and the codec source) TjT* -0.0178  Tc -0.1322  Tw (distribution [8].) Tj11.4 -12  TD 0.1311  Tc 0.3189  Tw (For the decoder, note that simply parsing the data once and) Tj-11.4 -12  TD -0.1036  Tc 0.3536  Tw (associating semantic actions to the various lexical elements is not) Tj0 -12  TD -0.0884  Tc -0.4216  Tw (enough. For instance, to process descriptor loops we need to revisit) TjT* -0.0943  Tc -0.3557  Tw (the same parser node several times.  Spirit provides abstract syntax) TjT* -0.0367  Tc -0.1133  Tw (trees for exactly this purpose.) Tj11.4 -12  TD 0.0365  Tc 0.3635  Tw (I do think it is worth presenting here a portion of the section) Tj-11.4 -12  TD -0.2349  Tc 0.3577  Tw (grammar. To me, this is a quite remarkable application of C++. For) Tj275.4 708  TD -0.2362  Tc -0.3638  Tw (even more remarkable transcriptions of EBNF syntax definitions into) Tj0 -12  TD -0.2558  Tc -0.3558  Tw (Spirit grammars \226 including a C++ tokenizer and a C parser \226 I would) TjT* -0.192  Tc -0.033  Tw (recommend a visit to the Spirit Applications Repository [14].) Tj13.8 -12  TD /F2 9  Tf0  Tc 0  Tw (/**) Tj5.4 -12  TD (* @brief MPEG-2 Section grammar defined) Tj0 -12  TD (* using Boost Spirit.) TjT* (* Reference: - ISO/IEC 13818-1, MPEG-2) TjT* (*              Transport Stream) TjT* (*/) Tj-5.4 -12  TD 0.2 0.2 0.2 rg /F11 9  Tf(struct Section :) Tj10.8 -12  TD (public boost::spirit::grammar<Section> {) Tj0 -12  TD (template <typename ScannerT>) TjT* (struct definition {) Tj10.8 -12  TD (definition\(Section const & ) Tj145.8 0  TD 0 0 0 rg /F2 9  Tf(/*self*/) Tj43.2 0  TD 0.2 0.2 0.2 rg /F11 9  Tf(\) {) Tj-178.2 -12  TD (section_) Tj10.8 -12  TD (=  section_ref_) Tj16.2 -12  TD (>> section_body_) Tj-16.2 -12  TD (;) Tj-10.8 -12  TD (section_ref_) Tj10.8 -12  TD (=  text_id_) Tj16.2 -12  TD (>>  '\(') Tj0 -12  TD (>>  '\)') Tj-16.2 -12  TD (;) Tj-10.8 -12  TD (text_id_) Tj10.8 -12  TD (=  leaf_node_d[) Tj27 -12  TD (lexeme_d[) Tj10.8 -12  TD (alpha_p) Tj0 -12  TD (>> * \(alnum_p | '_'\)) Tj-10.8 -12  TD (]) Tj-10.8 -12  TD (]) Tj-16.2 -12  TD (;) Tj-10.8 -12  TD (quoted_binary_) Tj10.8 -12  TD (=  leaf_node_d[) Tj27 -12  TD (lexeme_d[) Tj10.8 -12  TD ('\\'') Tj0 -12  TD (>>  bin_p) TjT* (>> '\\'') Tj-10.8 -12  TD (]) Tj-10.8 -12  TD (]) Tj-16.2 -12  TD (;) Tj-10.8 -12  TD (section_body_) Tj10.8 -12  TD (=  ch_p\('{'\)) Tj16.2 -12  TD (>> *\(    field_) Tj32.4 -12  TD (|  loop_) Tj0 -12  TD (|  conditional_) TjT* (|  section_ref_) Tj-10.8 -12  TD (\)) Tj-21.6 -12  TD (>> '}') Tj-16.2 -12  TD (;) Tj-10.8 -12  TD (field_) Tj10.8 -12  TD (=  identifier_) Tj16.2 -12  TD (>>   uint_p) Tj-16.2 -12  TD (;) Tj-10.8 -12  TD (identifier_) Tj10.8 -12  TD (=  text_id_) Tj16.2 -12  TD (|  quoted_binary_) Tj-16.2 -12  TD (;) Tj-10.8 -12  TD (conditional_) Tj10.8 -12  TD (=  str_p\("if"\)) Tj16.2 -12  TD (>> condition_) TjETendstreamendobj118 0 obj7617endobj116 0 obj<</Type /Page/Parent 104 0 R/Resources <</Font <</F0 6 0 R /F2 10 0 R /F4 16 0 R /F11 41 0 R >>/ProcSet 2 0 R>>/Contents 117 0 R>>endobj120 0 obj<</Length 121 0 R>>stream
BT549.6 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (25) Tj-237 768.6  TD /F0 12  Tf-0  Tc -0.0896  Tw (Overload issue 64 december 2004) Tj-210 -40.8  TD 0.2 0.2 0.2 rg /F11 9  Tf0  Tc 0  Tw (>> section_body_) Tj0 -12  TD (>>  ! \(str_p\("else"\)) Tj37.8 -12  TD (>>  section_body_\)) Tj-54 -12  TD (;) Tj-10.8 -12  TD (condition_) Tj10.8 -12  TD (=  inner_node_d['\(') Tj27 -12  TD (>> text_id_) Tj0 -12  TD (>> "==") TjT* (>> quoted_binary_) TjT* (>> '\)') Tj-10.8 -12  TD (]) Tj-16.2 -12  TD (;) Tj-10.8 -12  TD (loop_) Tj10.8 -12  TD (=  loop_control_) Tj16.2 -12  TD (>> section_body_) Tj-16.2 -12  TD (;) Tj-10.8 -12  TD (loop_control_) Tj10.8 -12  TD (=  leaf_node_d[str_p\("for"\)) Tj27 -12  TD (>>  '\(') Tj0 -12  TD (>>  * \(anychar_p - '\)'\)) TjT* (>>  '\)') Tj-10.8 -12  TD (]) Tj-16.2 -12  TD (;) Tj-21.6 -24  TD (}) Tj0 -12  TD 0 0 0 rg /F2 9  Tf(...) TjT* 0.2 0.2 0.2 rg /F11 9  Tf(boost::spirit::rule<ScannerT> const &) TjT* (start\(\) const {) Tj16.2 -12  TD (return section_;) Tj-16.2 -12  TD (}) Tj-10.8 -12  TD (};) Tj-10.8 -12  TD (};) Tj-13.8 -30  TD 0 0 0 rg /F0 12  Tf-0.0506  Tc 0.4106  Tw (Decisions Taken) Tj0 -18  TD /F4 10.2  Tf0.1235  Tc 1.0598  Tw (Many of the decisions taken when writing our naive encoder) Tj0 -12  TD -0.0693  Tc 1.1193  Tw (scale up to the decoder: limited use options; exceptions used in) TjT* 0.4986  Tc 0.7014  Tw (preference to error codes; Spirit style guide for grammar) TjT* -0.0514  Tc -0.0986  Tw (definitions; typedefs for iterators.) Tj11.4 -12  TD -0.0589  Tc 0.0289  Tw (Some decisions were ones we haven\222t yet faced. The main one) Tj-11.4 -12  TD -0.1572  Tc 0.2472  Tw (was: where should we put section format definitions \(for the PAT,) Tj0 -12  TD -0.132  Tc 0.057  Tw (CAT, PMT and NIT\)? There are two obvious alternatives:) Tj0 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0609  Tc -0.3073  Tw (create a C++ source file containing  these  definitions \226 perhaps) Tj0 -12  TD -0.1278  Tc 0.2178  Tw (as an array of string literals,) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0548  Tc 0.1355  Tw (place them in a text file in a known location, and have this file) Tj0 -12  TD -0.0843  Tc -0.0657  Tw (read when the decoder starts up.) Tj-11.4 -12  TD 0.0278  Tc 1.0222  Tw (The second alternative is perhaps most faithful to our original) Tj0 -12  TD -0.0642  Tc 0.9142  Tw (aims. Program logic and program data are nicely separated, and) TjT* -0.0823  Tc 0.5323  Tw (extending the decoder to handle other sections is a simple matter) TjT* -0.1058  Tc -0.0442  Tw (of editing the text file. No recompilation necessary.) Tj11.4 -12  TD 0.1217  Tc 0.3283  Tw (Despite these attractions, I went for the first option \226 partly) Tj-11.4 -12  TD -0.102  Tc -0.3753  Tw (because it\222s easier to implement and partly because I didn\222t want to) Tj0 -12  TD -0.1309  Tc 0.2381  Tw (work out where to put the text file.) Tj11.4 -12  TD -0.0817  Tc 0.5317  Tw (The other corner I cut concerns determining how and when to) Tj-11.4 -12  TD -0.0851  Tc -0.4341  Tw (exit loops. The issue is fully described in the first part of this article) Tj0 -12  TD -0.0578  Tc 0.5078  Tw (\(see the subsection headed \223Complications\224\). My resolution was) TjT* -0.0703  Tc -0.3297  Tw (to notice that loops always exit when we\222ve used up the number of) TjT* -0.1322  Tc -0.0178  Tw (bytes encoded in a ) Tj75.6 0  TD /F2 9  Tf0  Tc 0  Tw (length) Tj34.8 0  TD /F4 10.2  Tf-0.0783  Tc -0.0717  Tw (field \226 with the single exception of the) Tj-110.4 -12  TD -0.0818  Tc 0.4228  Tw (outermost loop, which may end four bytes early in order to leave) Tj0 -12  TD 0.0847  Tc 0.3653  Tw (space for a CRC. So, the decoder maintains a stack of ) Tj230.4 0  TD /F2 9  Tf0.1  Tc 0  Tw (length) Tj44.4 708  TD /F4 10.2  Tf-0.0843  Tc -0.0112  Tw (fields, testing the top value after each loop iteration, popping it on) Tj0 -12  TD -0.0763  Tc -0.3045  Tw (loop  exit. The first item to be stacked may need adjusting to allow) TjT* -0.0869  Tc -0.1231  Tw (for the four byte CRC. Again, the source distribution should make) TjT* -0.1108  Tc -0.0392  Tw (this clear.) Tj11.4 -12  TD 0.2438  Tc 0.3396  Tw (I could find no official statement regarding what could be) Tj-11.4 -12  TD 0.0999  Tc -0.5499  Tw (used as a field name in the section format definitions: inspection) Tj0 -12  TD 0.1247  Tc -0.008  Tw (suggested that these names were rather similar to C identifiers,) TjT* 0.2088  Tc 0.3745  Tw (with the important addition of quoted binary values for fixed) TjT* 0.439  Tc 1.011  Tw (fields \(e.g. the ) Tj71.4 0  TD /F2 9  Tf0.6  Tc 0  Tw ('0') Tj22.2 0  TD /F4 10.2  Tf0.4549  Tc 0.8523  Tw (which is the third named field in the) Tj-93.6 -12  TD /F2 9  Tf0.2  Tc 0  Tw (program_association_section) Tj154.2 0  TD /F4 10.2  Tf0.1551  Tc -0.3051  Tw (format definition\).) Tj-142.8 -12  TD -0.1007  Tc 0.278  Tw (A few more parse tree node directives might have resulted in a) Tj-11.4 -12  TD -0.1059  Tc -0.2441  Tw (leaner decoder, but I wanted the syntax grammar to be as simple as) Tj0 -12  TD -0.0706  Tc 0.1872  Tw (possible. I am inexperienced in writing grammars and preferred a) TjT* -0.0683  Tc 0.5183  Tw (small amount of extra code in my application. The application is) TjT* -0.1489  Tc -0.0011  Tw (quite compact anyway.) Tj0 -18  TD /F0 12  Tf0  Tc 0.06  Tw (Ship Happens [1]) TjT* /F4 10.2  Tf0.2156  Tc 1.0526  Tw (Raymond [13] has lots of practical advice on how to ship a) Tj0 -12  TD 0.0333  Tc 1.15  Tw (source code distribution, going down to details of file naming) TjT* -0.0868  Tc 0.0868  Tw (conventions. Some of the suggestions I have followed are:) Tj0 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0505  Tc -0.0995  Tw (choose a suitable license) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1444  Tc 0.2944  Tw (include a README) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.1084  Tc 0.0784  Tw (set up a project homepage [8]) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0969  Tc 0.1719  Tw (include a BUGS file, listing known defects and limitations) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.0802  Tc 0.2302  Tw (include platform/compiler details) Tj-11.4 -10.2  TD /F5 6  Tf0.054  Tc 0  Tw (l) Tj11.4 -1.8  TD /F4 10.2  Tf-0.089  Tc -0.061  Tw (include self-test code) Tj-11.4 -12  TD 0.7419  Tc 0.3748  Tw (The BUGS file is a strangely satisfying thing to write,) Tj0 -12  TD 0.1856  Tc 1.1216  Tw (particularly if you\222ve ever delivered software which doesn\222t) TjT* 0.0555  Tc 0.5145  Tw (admit to defects, let alone limitations \(or indeed if you\222ve ever) TjT* 0.1958  Tc 1.1542  Tw (used such software\). In this case it is essential to document) TjT* -0.0571  Tc 0  Tw (both.) Tj11.4 -12  TD 0.1597  Tc 1.1903  Tw (Version 0.1 of the ) Tj85.2 0  TD /F2 9  Tf0.375  Tc 0  Tw (dvbcodec) Tj49.8 0  TD /F4 10.2  Tf0.3077  Tc 0.9423  Tw (features the naive encoder) Tj-146.4 -12  TD -0.0962  Tc 0.5462  Tw (described in the preceding \226 really only of use for system testing) Tj0 -12  TD 0.1209  Tc 0.3291  Tw (\(we can check that decoding then encoding a file recreates the) TjT* -0.0992  Tc 0.4401  Tw (original file\). The decoder is rather better \226 in fact, I\222ve extended) TjT* -0.0622  Tc 0.5122  Tw (it beyond the original specification to handle a few more section) TjT* -0.0496  Tc 0.4996  Tw (formats: ) Tj36 0  TD /F2 9  Tf0  Tc 0  Tw (dvbcodec -l) Tj61.8 0  TD /F4 10.2  Tf-0.0242  Tc -0.1258  Tw (gives details.) Tj-86.4 -12  TD -0.1041  Tc -0.4823  Tw (Having done the hard work and shipped our beta release, the rest) Tj-11.4 -12  TD -0.0487  Tc -0.1013  Tw (of this article is dedicated to some closing thoughts.) Tj0 -18  TD /F0 12  Tf-0.06  Tc 0.0771  Tw (Is C++ the Right Tool for the Job?) TjT* /F4 10.2  Tf-0.0555  Tc 0.9722  Tw (My criteria for language selection were somewhat artificial. If I) Tj0 -12  TD -0.1114  Tc 0.5069  Tw (had been allowed a free hand I almost certainly would have been) TjT* -0.0691  Tc -0.0809  Tw (biased towards Python [12]. However, having gone the C++ route) TjT* -0.0781  Tc 1.1281  Tw (\226 the modern C++ route, even \226 it would seem a good point to) TjT* -0.0972  Tc 0.0329  Tw (step back and review my selection.  ) Tj11.4 -12  TD -0.0438  Tc -0.1062  Tw (Raymond [13] has reservations about C++, which I summarise) Tj-11.4 -12  TD 0.002  Tc 0  Tw (here:) Tj0 -12  TD 0.3  Tc (1) Tj11.4 0  TD -0.1097  Tc 0.2931  Tw (By not automating memory management it fails to address C\222s) Tj0 -12  TD -0.0575  Tc 0.5075  Tw (biggest shortcoming; and backwards compatibility with C has) TjT* -0.1084  Tc -0.0416  Tw (compromised the language\222s design.) Tj-11.4 -12  TD 0.3  Tc 0  Tw (2) Tj11.4 0  TD -0.0698  Tc 0.5198  Tw (Object oriented software design isn\222t all it\222s cracked up to be.) Tj0 -12  TD -0.0346  Tc 0.4846  Tw (All too often it leads to shaky object hierarchies, unnecessary) TjT* -0.1013  Tc 0.1228  Tw (abstractions and code which is hard to maintain,) Tj-11.4 -12  TD 0.3  Tc 0  Tw (3) Tj11.4 0  TD -0.0985  Tc 0.2213  Tw (C++ is so complex that no one programmer can be expected to) Tj0 -12  TD -0.0886  Tc -0.0614  Tw (know it all,) Tj-11.4 -12  TD 0.3  Tc 0  Tw (4) Tj11.4 0  TD -0.0913  Tc 0.1049  Tw (If C++ really were superior to C, it would now dominate it.) Tj-11.4 -12  TD 0.025  Tc 1.1964  Tw (\(Incidentally, as already mentioned, Raymond is not knocking) Tj0 -12  TD -0.0891  Tc 0.6591  Tw (C++ to promote C. His recommendation is to adopt scripted and) TjT* -0.1046  Tc -0.0454  Tw (mixed language solutions.\)) TjETendstreamendobj121 0 obj9926endobj119 0 obj<</Type /Page/Parent 104 0 R/Resources <</Font <</F0 6 0 R /F2 10 0 R /F4 16 0 R /F5 21 0 R /F11 41 0 R >>/ProcSet 2 0 R>>/Contents 120 0 R>>endobj123 0 obj<</Length 124 0 R>>stream
BT28.8 42  TD0 0 0 rg /F0 10.8  Tf0.1872  Tc 0  Tw (26) Tj0 768.6  TD /F0 12  Tf-0.0449  Tc 0.2549  Tw (Overload issue 64 december 2004) Tj11.4 -40.8  TD /F4 10.2  Tf0.1395  Tc 0.3105  Tw (To fully address all these points is outside the scope of this) Tj-11.4 -12  TD -0.1429  Tc -0.4571  Tw (article. Instead I shall look at each in the context of the development) Tj0 -12  TD -0.0105  Tc -0.1395  Tw (of our codec:) TjT* 0.3  Tc 0  Tw (1) Tj11.4 0  TD 0.0188  Tc 0.3312  Tw (By using standard library containers \226 ) Tj161.4 0  TD /F2 9  Tf0.4  Tc 0  Tw (map) Tj16.8 0  TD /F4 10.2  Tf-0.15  Tc (, ) Tj5.4 0  TD /F2 9  Tf0.1  Tc (vector) Tj33 0  TD /F4 10.2  Tf0.45  Tc (, ) Tj6 0  TD /F2 9  Tf0  Tc (stack) Tj27 0  TD /F4 10.2  Tf-0.15  Tc (,) Tj-249.6 -12  TD /F2 9  Tf0  Tc (string) Tj35.4 0  TD /F4 10.2  Tf-0.0779  Tc 0.5279  Tw (etc \226 I have avoided a single direct call to ) Tj174 0  TD /F2 9  Tf0  Tc 0  Tw (operator) Tj-209.4 -12  TD (new) Tj16.2 0  TD /F4 10.2  Tf-0.1911  Tc -0.3589  Tw (. If I\222ve got my exception handling and my use of Spirit right,) Tj-16.2 -12  TD 0.1032  Tc 0.3468  Tw (there should be no leaks. Regarding C compatibility, I have) Tj0 -12  TD -0.1726  Tc -0.2774  Tw (benefited from the C standard library in a few places. Converting) TjT* -0.0634  Tc -0.0116  Tw (from C string literals to C++ strings is convenient.) Tj-11.4 -12  TD 0.3  Tc 0  Tw (2) Tj11.4 0  TD -0.121  Tc -0.029  Tw (The application code \(as opposed to the Spirit framework code\)) Tj0 -12  TD -0.1032  Tc -0.1068  Tw (uses only two concrete classes. I have resisted the temptation to) TjT* 0.0282  Tc 0.4218  Tw (make these generic, or to make them derive from an abstract) TjT* 0.0349  Tc 0.4151  Tw (class. The RAII class idiom is usefully employed. The Spirit) TjT* 0.2433  Tc 2.7567  Tw (framework itself has moved with the times: what was) TjT* 0.0306  Tc 0.4194  Tw (\223implemented with run-time polymorphic classes\224 is now \223a) TjT* 0.2546  Tc 0.7097  Tw (complete rewrite ... using expression templates and static) TjT* -0.0418  Tc 0  Tw (polymorphism\224.) Tj-11.4 -12  TD 0.3  Tc (3) Tj11.4 0  TD -0.0641  Tc 0.5141  Tw (Agreed! Spirit\222s fine documentation includes examples which) Tj0 -12  TD -0.09  Tc -0.2237  Tw (have served as a basis for my own application. When I deviated) TjT* 0.2885  Tc 3.3615  Tw (from these examples too far the result was a barely) TjT* 0.2492  Tc 5.6008  Tw (comprehensible torrent of compiler errors. Typeless) TjT* -0.0875  Tc 0.0125  Tw (programming in a strongly typed language can be tough) Tj223.8 2.4  TD /F4 7.2  Tf0  Tc 0  Tw (2) Tj3.6 -2.4  TD /F4 10.2  Tf-0.15  Tc (.) Tj-238.8 -12  TD 0.3  Tc (4) Tj11.4 0  TD 0.3515  Tc 0.9985  Tw (C is far more portable. I believe our codec is standards) Tj0 -12  TD 0.3577  Tc 0.2723  Tw (compliant, so maybe in the long term it will be portable.) TjT* -0.0708  Tc -0.4792  Tw (However, at the moment \(September 2004\) the list of compilers) TjT* 0.3215  Tc 0.2485  Tw (which cope with Spirit is small. So our codec isn\222t really) TjT* 0.0701  Tc 0.489  Tw (portable. Not one of the compilers I use at work could cope) TjT* -0.0023  Tc -0.0143  Tw (with this program. This reflects my experience with C++ over) TjT* -0.0106  Tc 0.6106  Tw (the years: to get the good stuff, either you wait, or you work) TjT* -0.0304  Tc -0.4196  Tw (around compiler limitations. Bear in mind too that of two types) TjT* 0.0296  Tc 0.4871  Tw (of compiler bugs \226 incorrect error messages, no object code;) TjT* 0.1051  Tc 0.5249  Tw (no error messages, incorrect object code \226 the second is far) TjT* 0.1369  Tc 0.4464  Tw (more insidious and dangerous: and the presence of the first) TjT* 0.0566  Tc 0.4601  Tw (naturally leads a programmer to suspect the existence of the) TjT* -0.0393  Tc 0  Tw (second.) Tj-11.4 -12  TD -0.1035  Tc 0.4202  Tw (Despite all this, Spirit has proven itself flexible, scalable, capable) Tj0 -12  TD -0.0515  Tc 1.2515  Tw (of expressing grammars clearly and of writing efficient parsers) TjT* -0.0989  Tc 0.3307  Tw (without the need to step outside C++. Indeed, it could never have) TjT* 0.0797  Tc 0.9703  Tw (been done without C++. I am sure I will use the Spirit parser) TjT* -0.066  Tc 0.516  Tw (framework again.) Tj0 -18  TD /F0 12  Tf0.0324  Tc -0.2724  Tw (Open Source) TjT* /F4 10.2  Tf0.5372  Tc 0.7528  Tw (The future of Unix is Linux is open source. Raymond is) Tj0 -12  TD -0.0059  Tc 1.1417  Tw (passionate about software quality and argues convincingly that) TjT* -0.0953  Tc 0.1634  Tw (open source the best way to deliver the highest quality software. I) TjT* 0.1137  Tc 1.0113  Tw (do not propose to rehearse these arguments here: Raymond\222s) TjT* 0.0561  Tc 1.1739  Tw (writings are available both in print form and online. \(See, for) TjT* -0.0164  Tc -0.1336  Tw (example [4]\).) Tj11.4 -12  TD -0.0781  Tc -0.2565  Tw (What does interest me is that I cannot see how the full power of) Tj-11.4 -12  TD -0.1413  Tc -0.2269  Tw (Spirit could be realised using anything other than a full source code) Tj0 -12  TD 0.1841  Tc 0.2659  Tw (distribution. It\222s all done with header files. Maybe with some) Tj275.4 600  TD 0.2012  Tc 0.2488  Tw (reworking the implementation could be delivered in pre-built) Tj0 -12  TD -0.0831  Tc 0.0831  Tw (libraries, multiplied up by the various operating system, platform,) TjT* -0.0957  Tc 0.5457  Tw (version permutations \226 but wouldn\222t this make it even harder for) TjT* -0.1062  Tc 0.2562  Tw (compilers to build applications based on Spirit?) Tj10.8 -12  TD -0.2628  Tc -0.1054  Tw (Of course, open source means more than just access to source: but) Tj-10.8 -12  TD -0.3329  Tc -0.4171  Tw (it\222s still notable that this style of C++ favours open source distribution) Tj257.4 2.4  TD /F4 7.2  Tf0  Tc 0  Tw (3) Tj3.6 -2.4  TD /F4 10.2  Tf-0.15  Tc (.) Tj-261 -18  TD /F0 12  Tf0.0084  Tc -0.2484  Tw (And Finally) Tj0 -18  TD /F4 10.2  Tf0.0461  Tc 1.1424  Tw (I\222m still not sure if it would have been better to write a code) Tj0 -12  TD -0.0686  Tc -0.0814  Tw (generator, to generate our codec from the section formats.) Tj10.8 -12  TD -0.0913  Tc 0.0504  Tw (Maybe I\222ll try using Spirit and C++ to generate a C codec.) Tj202.8 -12  TD /F8 10.2  Tf-0.0502  Tc 0.2062  Tw (Thomas Guest) Tj-85.2 -12  TD /F2 9  Tf0  Tc 0  Tw (thomas.guest@ntlworld.com) Tj-128.4 -18  TD /F0 12  Tf-0.018  Tc (References) Tj0 -18  TD /F4 10.2  Tf0.0605  Tc 0.2395  Tw ([1] I borrowed this section header from Andrei Alexandrescu\222s) Tj10.8 -12  TD -0.008  Tc 0  Tw (homepage.) Tj0 -12  TD /F2 9  Tf0  Tc (http://www.moderncppdesign.com/main.html) Tj216 0  TD /F4 10.2  Tf-0.15  Tc (.) Tj-216 -12  TD -0.1089  Tc -0.0411  Tw (It\222s funny because it\222s true.) Tj-10.8 -12  TD -0.0866  Tc -0.6634  Tw ([2] Frank Antonsen, \223Stream-Based Parsing in C++\224, ) Tj211.2 0  TD /F10 10.2  Tf-0.1325  Tc -0.6175  Tw (Overload 56) Tj49.8 0  TD /F4 10.2  Tf-0.15  Tc 0  Tw (,) Tj-250.2 -12  TD -0.0068  Tc -0.1432  Tw (August 2003) Tj-10.8 -12  TD -0.0817  Tc 0.2317  Tw ([3] Boost: ) Tj42.6 0  TD /F2 9  Tf0  Tc 0  Tw (http://www.boost.org) Tj-42.6 -12  TD /F4 10.2  Tf-0.1003  Tc 0.3503  Tw ([4] Eric Raymond, ) Tj78.6 0  TD /F2 9  Tf0.0353  Tc 0  Tw (http://www.catb.org/~esr/writings/) Tj-67.8 -12  TD 0  Tc (cathedral-bazaar/) Tj-10.8 -12  TD /F4 10.2  Tf-0.0577  Tc 0.3577  Tw ([5]  Greg Colvin, ) Tj73.8 0  TD /F10 10.2  Tf-0.0125  Tc 0.4625  Tw (In the Spirit of C) Tj69.6 0  TD /F4 10.2  Tf-0.15  Tc 0  Tw (, ) Tj5.4 0  TD /F2 9  Tf0.0571  Tc (http://www.artima.com) Tj-138 -12  TD 0  Tc (/cppsource/spiritofc.html) Tj-10.8 -12  TD /F4 10.2  Tf-0.1644  Tc 0.0144  Tw ([6] ) Tj14.4 0  TD /F10 10.2  Tf-0.0467  Tc 0.4967  Tw (Digital Video Broadcasting \(DVB\); Specification for Service) Tj-3.6 -12  TD -0.0871  Tc -0.0629  Tw (Information \(SI\) in DVB systems) Tj-10.8 -12  TD /F4 10.2  Tf0.2176  Tc 3.6074  Tw ([7] S. Heinzmann, \223The Tale of a Struggling Template) Tj10.8 -12  TD -0.089  Tc -0.061  Tw (Programmer\224, ) Tj59.4 0  TD /F10 10.2  Tf-0.1325  Tc 0.5825  Tw (Overload 61) Tj50.4 0  TD /F4 10.2  Tf-0.1607  Tc 0.3107  Tw (, June 2004) Tj-120.6 -12  TD -0.1596  Tc 0.0096  Tw ([8] Homepage:) Tj10.8 -12  TD /F2 9  Tf0  Tc 0  Tw (http://homepage.ntlworld.com/thomas.guest) Tj-10.8 -12  TD /F4 10.2  Tf-0.1964  Tc 0.6464  Tw ([9] INFORMATION TECHNOLOGY - GENERIC CODING OF) Tj10.8 -12  TD 0.1411  Tc 6.3089  Tw (MOVING PICTURES AND ASSOCIATED AUDIO:) Tj0 -12  TD -0.0912  Tc 0.0912  Tw (SYSTEMS Recommendation H.222.0 ISO/IEC 13818-1) Tj-10.8 -12  TD -0.3871  Tc 0.2371  Tw ([10] PLY: ) Tj41.4 0  TD /F2 9  Tf-0.0171  Tc 0  Tw (http://systems.cs.uchicago.edu/ply/) Tj-41.4 -12  TD /F4 10.2  Tf-0.1415  Tc 0.5248  Tw ([11] The canonical form of Postel\222s prescription, according to the) Tj10.8 -12  TD -0.1874  Tc -0.5626  Tw (Jargon File \() Tj49.2 0  TD /F2 9  Tf-0.075  Tc 0  Tw (http://www.catb.org/~esr/jargon/) Tj171 0  TD /F4 10.2  Tf-0.0995  Tc -0.6505  Tw (\) is: \223Be) Tj-220.2 -12  TD -0.0914  Tc -0.0586  Tw (liberal in what you accept, and conservative in what you send.\224) Tj-10.8 -12  TD -0.1214  Tc -0.0286  Tw ([12] Python: ) Tj52.2 0  TD /F2 9  Tf0  Tc 0  Tw (http://www.python.org) Tj-52.2 -12  TD /F4 10.2  Tf-0.0903  Tc 0.5403  Tw ([13] Eric S. Raymond, ) Tj94.8 0  TD /F10 10.2  Tf-0.1174  Tc 0.4174  Tw (The Art of UNIX Programming) Tj126.6 0  TD /F4 10.2  Tf-0.1683  Tc 0.0183  Tw (, Addison-) Tj-210.6 -12  TD -0.0937  Tc -0.0563  Tw (Wesley 0-13-142901-9) Tj-10.8 -12  TD 0.2871  Tc 3.7629  Tw ([14] The Spirit Applications Repository is available at) Tj10.8 -12  TD /F2 9  Tf0  Tc 0  Tw (http://spirit.sourceforge.net) Tj-10.8 -12  TD /F4 10.2  Tf-0.1138  Tc -0.1029  Tw ([15] Thomas Guest, \223A Mini-project to Decode a Mini-language \226) Tj10.8 -12  TD -0.0338  Tc -0.1162  Tw (Part One\224, ) Tj45 0  TD /F10 10.2  Tf-0.1325  Tc -0.0175  Tw (Overload 63) Tj50.4 0  TD /F4 10.2  Tf-0.1003  Tc -0.0497  Tw (, October 2004) Tj-106.2 -12  TD -0.1549  Tc 0.0049  Tw ([16] Spirit:) Tj10.8 -12  TD /F2 9  Tf0  Tc 0  Tw (http://www.boost.org/libs/spirit/index.html) Tj-10.8 -12  TD /F4 10.2  Tf-0.0954  Tc 0.1454  Tw ([17] Spirit Style Guide:) Tj10.8 -12  TD /F2 9  Tf0  Tc 0  Tw (http://www.boost.org/libs/spirit/doc/) Tj0 -12  TD (style_guide.html) Tj-10.8 -30  TD /F0 12  Tf-0.0103  Tc (Credits) Tj0 -18  TD /F4 10.2  Tf-0.0111  Tc 1.2861  Tw (This article and the accompanying source code was developed) Tj0 -12  TD 0.2793  Tc 0.9707  Tw (using the GNU emacs integrated development environment) TjT* 0.1  Tc 1.175  Tw (\(GNU emacs, GNU make, GCC, find, grep, etags, PCL-CVS) TjT* -0.0754  Tc 1.1921  Tw (etc\), JASSPA Microemacs \(for its superb text mode and binary) TjT* 0.4983  Tc 0.7317  Tw (editor\), all running on the \226 sorry Eric, thanks Cygwin \226) TjT* -0.1293  Tc 0.1793  Tw (Microsoft Windows operating system.) TjET1 1 1 rg 28.8 56.4 264 102 re f28.8 56.4 264 102 re fBT30 151.8  TD0 0 0 rg /F9 7.8  Tf-0.144  Tc 0  Tw (2) Tj10.8 0  TD 0.5908  Tc 0.4039  Tw (The \223Techniques\224 section of the Spirit documentation [16] describes an) Tj0 -9.6  TD 0.0956  Tc 0.7824  Tw (extraordinary method for obtaining an object\222s type: \223... Try to compile. Then, the) Tj0 -10.2  TD 0.0901  Tc 0.761  Tw (compiler will generate an obnoxious error message ... THERE YOU GO! You got its) TjT* 0.0616  Tc 0.0164  Tw (type! I just copy and paste the correct type.\224) Tj0 -9.6  TD 0.0967  Tc -0.1687  Tw (Elsewhere, the Spirit documentation mentions Dave Abrahams\222 proposal to reuse the) Tj0 -10.2  TD /F2 9  Tf0  Tc 0  Tw (auto) Tj23.4 0  TD /F9 7.8  Tf0.0843  Tc 0.1437  Tw (keyword for type deduced variables.) Tj-23.4 -10.2  TD 0.0756  Tc -0.0276  Tw (See also Colvin [5] for a radical take on this issue.) Tj-10.8 -19.8  TD -0.144  Tc 0  Tw (3) Tj10.8 0  TD 0.1439  Tc 0.8984  Tw (The case for access to source code is even stronger for the libraries built using) Tj0 -10.2  TD 0.0809  Tc -0.0672  Tw (popular scripting languages such as Python and Perl.) Tj0.6 w 1 J 1 j 0 0 0 RG ET28.8 163.8 m 292.8 163.8 l S endstreamendobj124 0 obj12317endobj122 0 obj<</Type /Page/Parent 104 0 R/Resources <</Font 125 0 R/ProcSet 2 0 R>>/Contents 123 0 R>>endobj125 0 obj<</F0 6 0 R/F2 10 0 R/F4 16 0 R/F8 31 0 R/F9 33 0 R/F10 35 0 R>>endobj6 0 obj<</Type /Font/Subtype /Type1/Name /F0/BaseFont /KCAIHK+HelveticaNeue-BoldExt/FirstChar 32/LastChar 255/Widths [ 370 370 592 816 816 1037 926 370 444 444 464 600 370 481 370 426 816 556 816 816 816 816 816 759 816 816 370 370 600 600 600 759 800 834 889 907 907 778 722 944 926 330 685 870 722 1130 926 944 833 944 852 815 722 870 796 1148 796 778 759 444 426 444 600 500 260 741 778 741 778 758 426 778 741 296 296 722 296 1130 741 778 778 778 519 704 444 741 668 1056 722 648 648 444 222 444 600 500 500 500 370 816 592 1000 816 816 260 1167 815 370 1167 500 759 500 500 370 370 592 592 500 500 1000 260 1000 704 370 1148 500 648 778 370 370 816 816 816 816 222 816 260 800 482 611 600 481 800 260 400 600 530 530 260 741 620 370 260 361 506 611 1222 1222 1222 759 834 834 834 834 834 834 1148 907 778 778 778 778 330 330 330 330 907 926 944 944 944 944 944 600 944 870 870 870 870 778 833 759 741 741 741 741 741 741 1148 741 758 758 758 758 296 296 296 296 778 741 778 778 778 778 778 600 778 741 741 741 741 648 778 648 ]/Encoding /WinAnsiEncoding/FontDescriptor 7 0 R>>endobj7 0 obj<</Type /FontDescriptor/FontName /KCAIHK+HelveticaNeue-BoldExt/Flags 16416/FontBBox [ -250 -213 1466 1000 ]/MissingWidth 944/StemV 218/StemH 218/ItalicAngle 0/CapHeight 1405/XHeight 1055/Ascent 984/Descent -213/Leading 469/MaxWidth 1222/AvgWidth 683/FontFile3 126 0 R>>endobj126 0 obj<</Filter /FlateDecode /Length 127 0 R/Subtype /Type1C>>stream
HâtU{PTÁøÀÓﬁEÑe·rWd◊›ï"båè†|EDQ.7TÈÍ´PÅyòà≠ìôjí:j5çQÎÉ˙÷5æƒW—h¨„t⁄j‚d⁄˛ÓÊ¨mœ™’¸ìπ3˜€˚}Áú=øﬂ˘ùÛ©Mê†R©e¶•ŒÃ»û·Æ®w◊ïó∏r‹K‹#¶z*J”Î√ïpA1©sê2H≠Dihïõ5m?Th	¬Øıaÿé≥{Ã“öHA≠RΩπÂiûÍ¶⁄ÚEeu∂Ñía∂ó∆èmK-ıªm˘Mﬁ:w•◊6≥™ƒS[Ì©u’πKG⁄l©∂ºÄΩ◊ñÁˆ∫kÎy˜Y:∂rØÕe´´uï∫+]µãmûÖ∂¨Ú*O]Sµ€ñ:√Ê™*Â©µï≥ØwI±∑º¥‹U[Óˆ˛»ˇÂ1∂ √qWï∫Küüê
Çä!XB’BDà`Ñÿ~¬ç0F-$¬Aò$)Ç05\»“ò2!HPâ¬<°Y¯≠–…Ω§z3H4#Ë}u∏:M}[ì•©◊|Æ5hój/àq¢Ë?}∫p]ÜÆX∑E◊\|≠_nøö~ª˙˝;$.dFHE˙ø⁄[®&¥8t{X\Xqÿ ∞saˇ’À˙◊ÙááÑóáw‹ÜNCOƒÄàW#ﬁã∏¨◊„˛E)Hâºá¥@Í∏´ÏóCÖ{bKFÉgVSp∫∆Mn *Q‰–È©©£˘0®∞5Va‡Oﬁ ~ø˘·QﬂÜáTﬂ5˛t¨á®ÇYu>ı9T…¡Læ{Ü
p Ö¢æπ	FÂó0™¿v5ñ‚;áÑÅxòÇ(Ç"úº§ÅNﬁå∞ê›HÀM—h∆JËñÒW45Û√˚¥Ã¢ßÌı lŒﬁÄﬂD¢≥§Ωh3bño•ﬁ“‰-ßë+É•Ωl±PßonÉY…„<Œ†'Q§∆ZòÂﬂÔ?πı‡∆õD#ø¬!Xb†É˛¥ÜÚ()õÊ≠∞†H¸v]ﬂG}¶€«Kri≤Â˜M˛±VüÊ'ÿ¿9‘÷cës7äh:ä•Ø¯◊«2å‚ôãK2≤Û≈OÒ¡ΩUVfÑfæçAôXh¬âÎÜ÷*ΩUp!iì•]'ø¥·‡±+1G˝ÖöhMqQzÉÒ≥›ùóL_üÒ‰X•õe5≈Y*0≠ctEl§‚EäTÕÔu2≠±Gµ“^ˇqRD©1êò+I…†ù?⁄ü™•J¶Ó	Ç7Ú7&Fπ»•ªå?À»wÔ9ª˛ò©ö˙°Áîí.Ÿﬁq≠…JE"eæÉbL¨úîÎòéö~ä
F,Øúk›≥V˘9å˛/ür„Â‹¬9ÙIÆ˝_9∫ØUY+#È5ötÄL&:ùLiT@Æªîàp"ˆ$#á2P¸‰âıÛ
≠m?z—¶Ó≥+2∑Yi4MïaYıQvaÃÙÃí$P¸…©+'˜k—ß≥N≥"∑˙
‘[ï”≤≤Z§WË ¢ieÙz0~%D1√1<#<≈˛qı\0rıä(ï+ÿΩÇ"Èà‘ß«ÁÚw=ïÈ”2*áÀËº|©ßÛÅu5›ñëãÙìòlïé‹…?;Ó˝@Ì^›ﬁu∏ıZ0∆∂Sa'6—`*¨§±≠÷ˆ‘.Á’ö‡Vùtd‹í¸ú§©è&#›Å\ãÙ≈*%[‚⁄u¸ÿ¡ù/^kÃuñ-¥Yü‰ŒÏywéÉŸ≥´ªë-S“Ô0…ì	ßo!pçA" '≈é£d AÜÒ◊ot;a•–÷¢4ä6ŸsﬁΩ‡µb4¶ dYΩ¯‹âòﬁºÉ˚ÛÁ§9ä,Å∂E·ì92@ZpW	íüµØ‘·ﬂ•yﬁÃÈl™Lc©É}«ŸAôè•Ú&X˛¶«`∫B.EIî›bÅ]º˜Œ˘}_ôzœïXIOÕ;)/FZ≥Çñ>ˇ˝ö6tíëÔ¡»»eæÔY∆€—)Sùˆ∞åQÎgY∫EÍÒ9µ‘ÃÎ#ßñø•ÍO1Tãõ¢˛∑7√0`$óíÖåp9ßr#˛—-„=Ò‚Ó |g]Èl+uâ‰ ≥¨¨Qqaˇr˛◊…¨\B•ßcGœÈDøpÏgˇ.ëï`îÒñxcÀbß√„uZi´®Ôk‡ARœZ€ábı≈.cUy—≠ßq§°Õ¥ºr6`Úî≤râ§mÌa¢¨Rƒ›øﬂÖ8d=¸¶0n≥UﬂòL9ê”V‚ìi£ÚÖåπ">œ√nxn
EY©‚i÷≈"+9±Xå≈ÉK≠VÆ®/‡Of
ûR_4˙∆¿ÏØA≤2á;rîJòçı6æ∫ÿzÙ3ÀÄÍï±l=£;[EäzËÁãı¯ê9-Ç9í—*]§„ &|(#U§ê∫Ò%,ÚiŸ¸ßj=`ƒ¥K∑jFÌ¥¢BDaÕ˛îÊöh+Ω»}[ÛåÑŒ´≠“Î€ìµîXø ÍÔsBÁ9°éÜß<ÕÈºOÁ·9xá?≠¯ﬂÍ®˜9ûe8ı◊¿◊Ã√’ªÏWÕG Dº-øºlv¸¨íC=ñ?ë√©£˘πÄ'¿Óµ‹8·Ö|ìŸ⁄´Ù˛?úØb˝3îﬁ@Hú‚ô“ãX>≤+ˇ·ˆSŒ°H¶2eùñˆ=rÚfoªàzØ„xUzµÌ˛^ÿ9ü}IiA≈cœDˆÙ%¢Bn˝˝ï--yÏ€“.*˝-Z,b˚S∫Àj]Õ“⁄üL√ŒP£•DùA#Üaÿl4˙£¸ˇkªÍ£¢∏Æ8À:3H…Bg”≤8É¥ÑÉÄüTaQ$·H¸™¢"ÊEw°"¯ëú∞¿
~,ï(
BkàA%J*ïOr–*#jåà&Uså‘;õª≠ΩoWKz⁄?ˆÃ‹∑Ô›πÔæ˚˚›ﬂ=ÛpÇoËü•å_¢µ®M§áÒŸë»∫r k%Ω.#aêt’Vø&˛/ù€Cg!4§Q]9$â˛ØÑœyòtÌÑ¸=^¿ïäcØ;@Nˆ–·ƒS0'˜	IÑ+’U••º8tÍ\æ1~in™Ç’ÃW ÛµﬁÂEµÎƒ˙†W ≤kW+ê¡g∂ﬂlˆΩXnSv1¬Íoh>˜ùÔÂ’Ù≠dŸ±ó◊mfáXLÙRŸ∏
ﬁÄ»˚ÏÔ´Â§bv=pÍ0«ÉW:¯‰)ó√ı}Z∞–711'LÔMù`{`Q0õ«\+ò6Båé›yBZC‹é˙:EÏ√˜ésK+≥Í˛Ï{˙lÀµ´[CkdÜ
µó“6™∞QeëYKX»@?®Âu≠Ï|~0ì|Xˇ¢)]P%EU„U£j™a…5Y•BtÑ
q≈Ëâ≥qv1x^î’PVc∑RÚf3kä˝Fl”BÆû4LT+8™üâé
éô&Fl$dáç≥8^µ9ÕÒ.Svô∫%Æ⁄á6c√πËQﬂ‰0è«DºÄâpÅΩCè„MNÁêp>¯ÿ«ëÊÎáhm?Œó‡©ÄHä§Á˛óS`ÕÅßˆ	oê®à¸Á8å§'Mä0?ûzÛ©[ı∑ªO›b∑∏ôÆ=uò:˙Yg‘X#M
NüõrËÙÈ£∂/+‰GUÕ;Z õˆ˛[@+]©?æ≥◊®≈îööøm—{
Œ+‰¸ﬂAa-Í}Ò≈…‡ˇå∞uu…baY^EﬁŒ<0ÚEá∂;Â
?.∫NblÜ‰·tì¨[BÇÓD›¨ÓÕ£∫®¯Øíˆk'UY+=ÍÎ∏=–∑800zqxDt«#Y,¿h¨ïòjˇ⁄*ƒ~}æ‡äb`Ã˜~µR	¡1YÀ2T°ëmï™ü≤—	Z˚*î n5F¥¢ü30`2ıŸ3ô¥J,¯ùÄ˘ç
&Ò€íVÕ4†ÊµÛCC›ÁAsÈÛ∆:Âb%ó´ëb]„äu‡∂+÷àpW¨p”´}5a∏ ¬üŒåi6êå—#è1äÿéÛ‡◊!u≠∑∂ßS∂Ú:£ôúøÙ^ wÕr˛≈¨ÇHi≈˙•πFz˝·Í≈™Ó⁄+@
qÔH,ﬁC¿d»Ä…†Î ÒåÏÿ”%´∞´·†ÄÙßIŸ≤E–9ÇS¿Û6yáë`‘¬H⁄çåO€ƒv†‚ËëÜíí#2∏e©+Àr8meéSràä<A+Ëñ`&E8<I†∫S*|ú9∏C9Ëß4J‡=x∞ÔÍ`.z£wXÓÃË∞ÉƒÀ‘πYvÆà⁄OI›B¢a< ?–a•Ù8˜ôí*†˛ïëÅô>›Bwß‘¬úRâ‘Ω.A¢"ﬁW∑b¥†ã†Ñujç∞üˆ–≈ÿ≤Üæßı˙7«ﬂö%c'ÿ“PJsÿ∏©ÀS÷…j4T
é#¥º…|ã¢¶’/±ïj˝!Ü}≈© ◊,$zUœ´ïÊn7-ÿ˙G´5_FΩPr¯pÒ1ƒ’ˆ¬hEm@£ﬂ¸ù_ÅtgåÆ¯B˘[=ãπlÊÒ |Kƒú !—¿f\Œ©æ‰¬ú}ıV3œZV8ËPGdÕ∂¸ÆÎ7⁄Olˇys˝îá±'—m¬¨ÙWìÂ/r|h`ªŒR,ºÿ£M4Î›Dnv}‹€ﬁiéï±◊9BˆÂ3Ã~ñ÷·èP^≈6’ ‹€˘·Df…‰≤ÔπÀAlŒ:√∆pF-%A€u“Û≤ÃÄÄ[Ñ0í¥∑®`]%+CÇﬁ	.–t'ºñÑ'‡»Œ6¡ÇX7x†©øÁú–ˇˇ9ÅJìXDV~Ÿ±ÀY0ìÛƒ
I8Ê{åôïTœ“qˇ2+"Ï¶Ì˙É?˙C(N0¡t'Èà6ÁIm‚≈˙«ù_Äó,⁄öﬂŸ÷®¿tA¨/7ÁñôAK”ßø u9Ω»‡zﬁtâ‘Fª~ü8ºfH(V˝î+2Ãﬁ˜^Ô¿9íTﬁ≈˝æ≤–VÔ€—S~ÚÃ_7-¨f˜¿ã^Ô«R!"(/d¿à"7rﬂÌ)Z„õ∂</*,Î»…Ì21{•¯<x>Ø⁄$πpâ˘â{!Í¯W;Àõd,ks,oVÓ˛DÅ$,=1 f∞*#6Ù£îz®”Ã√'-Ê©ïz∫∞é€Ç-ôë÷rEÜny*–]N…¸ÈÊ©∂FFR8ô [Sdè◊B°≥Òï®MªHéwxQõÛbÔ:0≥ãÖªYS˙s´ñÎ·-<‡!kê¯êcÊr∂å:¢∑√ùuD’ù√hz∫Lof.vi€≥&¯Äz≠˝m-8T	ΩaáÎxÿà`1Â`#O§2∆qêœc	%°N™n-E;ó‡Ï£ÇY≥…˛;≠ö√íåOex¬·*ªÛ”∏t≥9?’∞~ù’∫^A¡“˙â•’‡t›J‡I˚é‹îRM5∏¯‘GÍ=±Á#ΩzèÏ«<›fÓB;'ˆÄªÉd\.∂s:Û>{ >Lﬁr)ájÆ◊8ÓÏ¿«åø*Û“©¸h˚EÈﬂıπ˛endstreamendobj127 0 obj4116endobj8 0 obj<</Type /Font/Subtype /TrueType/Name /F1/BaseFont /Arial,Bold/FirstChar 32/LastChar 255/Widths [ 278 333 474 556 556 889 722 238 333 333 389 584 278 333 278 278 556 556 556 556 556 556 556 556 556 556 333 333 584 584 584 611 975 722 722 722 722 667 611 778 722 278 556 722 611 833 722 778 667 778 722 667 611 722 667 944 667 667 611 333 278 333 584 556 333 556 611 556 611 556 333 611 611 278 278 556 278 889 611 611 611 611 389 556 333 611 556 778 556 556 500 389 280 389 584 750 556 750 278 556 500 1000 556 556 333 1000 667 333 1000 750 611 750 750 278 278 500 500 350 556 1000 333 1000 556 333 944 750 500 667 278 333 556 556 556 556 280 556 333 737 370 556 584 333 737 552 400 549 333 333 333 576 556 278 333 333 365 556 834 834 834 611 722 722 722 722 722 722 1000 722 667 667 667 667 278 278 278 278 722 722 778 778 778 778 778 584 778 722 722 722 722 667 667 611 556 556 556 556 556 556 889 556 556 556 556 556 278 278 278 278 611 611 611 611 611 611 611 549 611 611 611 611 611 556 611 556 ]/Encoding /WinAnsiEncoding/FontDescriptor 9 0 R>>endobj9 0 obj<</Type /FontDescriptor/FontName /Arial,Bold/Flags 16416/FontBBox [ -250 -212 1148 1000 ]/MissingWidth 319/StemV 153/StemH 153/ItalicAngle 0/CapHeight 905/XHeight 453/Ascent 905/Descent -212/Leading 150/MaxWidth 957/AvgWidth 479>>endobj10 0 obj<</Type /Font/Subtype /Type1/Name /F2/BaseFont /Courier/FirstChar 32/LastChar 255/Widths [ 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 ]/Encoding /WinAnsiEncoding/FontDescriptor 11 0 R>>endobj11 0 obj<</Type /FontDescriptor/FontName /Courier/Flags 34/FontBBox [ -250 -250 720 1000 ]/MissingWidth 600/StemV 109/StemH 109/ItalicAngle 0/CapHeight 905/XHeight 686/Ascent 805/Descent -250/Leading 324/MaxWidth 600/AvgWidth 600>>endobj14 0 obj<</Type /Font/Subtype /TrueType/Name /F3/BaseFont /Arial/FirstChar 32/LastChar 255/Widths [ 278 278 355 556 556 889 667 191 333 333 389 584 278 333 278 278 556 556 556 556 556 556 556 556 556 556 278 278 584 584 584 556 1015 667 667 722 722 667 611 778 722 278 500 667 556 833 722 778 667 778 722 667 611 722 667 944 667 667 611 278 278 278 469 556 333 556 556 500 556 556 278 556 556 222 222 500 222 833 556 556 556 556 333 500 278 556 500 722 500 500 500 334 260 334 584 750 556 750 222 556 333 1000 556 556 333 1000 667 333 1000 750 611 750 750 222 222 333 333 350 556 1000 333 1000 500 333 944 750 500 667 278 333 556 556 556 556 260 556 333 737 370 556 584 333 737 552 400 549 333 333 333 576 537 278 333 333 365 556 834 834 834 611 667 667 667 667 667 667 1000 722 667 667 667 667 278 278 278 278 722 722 778 778 778 778 778 584 778 722 722 722 722 667 667 611 556 556 556 556 556 556 889 500 556 556 556 556 278 278 278 278 556 556 556 556 556 556 556 549 611 556 556 556 556 500 556 500 ]/Encoding /WinAnsiEncoding/FontDescriptor 15 0 R>>endobj15 0 obj<</Type /FontDescriptor/FontName /Arial/Flags 32/FontBBox [ -250 -212 1211 1000 ]/MissingWidth 276/StemV 80/StemH 80/ItalicAngle 0/CapHeight 905/XHeight 453/Ascent 905/Descent -212/Leading 150/MaxWidth 1009/AvgWidth 441>>endobj16 0 obj<</Type /Font/Subtype /TrueType/Name /F4/BaseFont /TimesNewRoman/FirstChar 32/LastChar 255/Widths [ 250 333 408 500 500 833 778 180 333 333 500 564 250 333 250 278 500 500 500 500 500 500 500 500 500 500 278 278 564 564 564 444 921 722 667 667 722 611 556 722 722 333 389 722 611 889 722 722 556 722 667 556 611 722 722 944 722 722 611 333 278 333 469 500 333 444 500 444 500 444 333 500 500 278 278 500 278 778 500 500 500 500 333 389 278 500 500 722 500 500 444 480 200 480 541 778 500 778 333 500 444 1000 500 500 333 1000 556 333 889 778 611 778 778 333 333 444 444 350 500 1000 333 980 389 333 722 778 444 722 250 333 500 500 500 500 200 500 333 760 276 500 564 333 760 500 400 549 300 300 333 576 453 250 333 300 310 500 750 750 750 444 722 722 722 722 722 722 889 667 611 611 611 611 333 333 333 333 722 722 722 722 722 722 722 564 722 722 722 722 722 722 556 500 444 444 444 444 444 444 667 444 444 444 444 444 278 278 278 278 500 500 500 500 500 500 500 549 500 500 500 500 500 500 500 500 ]/Encoding /WinAnsiEncoding/FontDescriptor 17 0 R>>endobj17 0 obj<</Type /FontDescriptor/FontName /TimesNewRoman/Flags 34/FontBBox [ -250 -216 1166 1000 ]/MissingWidth 324/StemV 73/StemH 73/ItalicAngle 0/CapHeight 891/XHeight 446/Ascent 891/Descent -216/Leading 149/MaxWidth 972/AvgWidth 401>>endobj21 0 obj<</Type /Font/Subtype /Type1/Name /F5/BaseFont /ZapfDingbats/FirstChar 32/LastChar 255/Widths [ 278 974 961 974 980 719 789 790 791 690 960 939 549 855 911 933 911 945 974 755 846 762 761 571 677 763 760 759 754 494 552 537 577 692 786 788 788 790 793 794 816 823 789 841 823 833 816 831 923 744 723 749 790 792 695 776 768 792 759 707 708 682 701 826 815 789 789 707 687 696 689 786 787 713 791 785 791 873 761 762 762 759 759 892 892 788 784 438 138 277 415 392 392 668 668 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 732 544 544 910 667 760 760 776 595 694 626 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 894 838 1016 458 748 924 748 918 927 928 928 834 873 828 924 924 917 930 931 463 883 836 836 867 867 696 696 874 278 874 760 946 771 865 771 888 967 888 831 873 927 970 918 278 ]/FontDescriptor 22 0 R>>endobj22 0 obj<</Type /FontDescriptor/FontName /ZapfDingbats/Flags 4/FontBBox [ -250 -143 1219 1000 ]/MissingWidth 815/StemV 127/StemH 127/ItalicAngle 0/CapHeight 1208/XHeight 1186/Ascent 857/Descent -143/Leading 308/MaxWidth 1016/AvgWidth 695>>endobj23 0 obj<</Type /Font/Subtype /Type1/Name /F6/BaseFont /LCAIHK+HelveticaNeue-CondensedObl/FirstChar 32/LastChar 255/Widths [ 240 258 407 480 480 759 556 240 241 241 352 600 240 352 240 278 480 480 480 480 480 480 480 480 480 480 240 240 600 600 600 444 800 500 519 519 556 463 444 537 537 204 426 500 444 704 556 556 481 556 519 500 463 519 462 722 481 462 463 259 278 259 600 500 204 444 463 426 463 444 259 463 463 204 204 444 204 722 463 444 463 463 296 407 259 463 406 648 406 406 389 259 222 259 600 500 500 500 240 480 407 1000 482 482 204 1037 500 240 796 500 463 500 500 240 240 407 407 500 500 1000 204 990 407 240 722 500 389 462 240 258 480 480 480 480 222 482 204 800 289 389 600 352 800 204 400 600 312 312 204 463 556 240 204 312 289 389 721 721 721 444 500 500 500 500 500 500 722 519 463 463 463 463 204 204 204 204 556 556 556 556 556 556 556 600 556 519 519 519 519 462 481 463 444 444 444 444 444 444 667 426 444 444 444 444 204 204 204 204 444 463 444 444 444 444 444 600 444 463 463 463 463 406 463 406 ]/Encoding /WinAnsiEncoding/FontDescriptor 24 0 R>>endobj24 0 obj<</Type /FontDescriptor/FontName /LCAIHK+HelveticaNeue-CondensedObl/Flags 96/FontBBox [ -250 -212 1244 1000 ]/MissingWidth 556/StemV 82/StemH 82/ItalicAngle -11/CapHeight 1331/XHeight 999/Ascent 932/Descent -212/Leading 398/MaxWidth 1037/AvgWidth 450/FontFile3 131 0 R>>endobj131 0 obj<</Filter /FlateDecode /Length 132 0 R/Subtype /Type1C>>stream
HâlTPWÌûûÓ·gKhu–ûVdA>"Få√'¢à@¢(¬®( B4qWg—çâŸ∏Æaå•≤ &¢ÆPBÈ:1ªà2k,î«X®TÎˆx1Ÿá¶4ImuUﬂ~}Ôπ}ﬂ9Á5Mi5M”cìbcf&L∆≤¸‹úπ∆5∆†ÿ¢¬<ca©1/yi¡`’Lu(•˙–Í(ç:öQGj◊yhp*ÆxRıd*+YÈü,íï3˛ßgè›häzˇÎ!–4~xÂ‡(˛¥≈–Ùˆ6ƒWñ‰/_Q&O»ê'GEÖ»1yEKçrZeiôÒùR9±0∑®§∏®$ßÃò7Iñc

‰‘¡˙R9’Xj,1ë∑/ïÛKÂπ¨$'œ¯NN…*πhôúî_XTVYlîc‚Âú¬º‡¢9ü`K◊,-ÕœÀœ)…7ñ˛)øÿßL6öøzçÒevêä¢…Eπh(ÜÚ¢©•ß®± è¶X*Ñ¶¬5‘4äöNQ3(Íu*âßÚ)™ú¢¶r)≈PÅT.µãj¶nPè®i∫Ç˛Rc–§i3ÆL3á11fÊsè˘Q;UªI{ñıgg±&∂ñmb;πÆë˚Ió°;†kwôÌÚæã’Âﬂ.=Æ3\MÆ-n√›J‹Í›y˜YÓÎ‹˜∫ﬂÚ=xX=ÓÚº∫∂èyÏ’·ñ÷µ_Ù†NîrπîØxWZ®ª˝˘áWÆÎªÉu<b§Èâw9}ºãÅg∂8Ω31√Ù⁄ÇSæGQj‚b¿w9åÉ)zÆÉàÔ`§Ù\”ÇI‚}nÜp”ChL	QzõÎ@ﬂ/qN—cp!FLCÇÉ1V€h®µ1PÎmÉb≤BrKƒb,NÑbé∑<¶;Lá˜ˇùW≥ù>õôs`a≥7øxPé«¡oµö‘∫∂dòÂÖ]¬∑ﬂ®u"‘uq¬agf≤N¯vì‘˙–ç.º’bWœ∑”'X•0Íõvø‚v48v§˛Q˜àˇ\9˘P˙ã´A üÇzI·énËÎ˚ÁF/[í˙ñîÚ;=>f2é–´ÚÛ/ÿÈu”†à–…≈MNıœÒ]<∂5Ô….∏Oa¸<	Ùâ«nivπ:0A«[´mê⁄ﬂŸºæPb(TÑ~°∑Bƒï;q4DAŒ(É)‡W©ò)	˝8"~,é∆ëC`®˝¯Ÿ};5i‹Úﬂ„Ë&	Ω…+Oµ Æâ3+CÉHyPÂùk◊ˆﬁQBØ≤7t¶Å?F$»lá}ÙıSfÉ∑É;ô,TpÕò…:8úÔÃf—çª‡'÷pwÒãÛ9æÕ“V¨o˜jU†ƒÁ˙¡Óâ˝\Á%c@‹™§IÙ‡¬bEX¿A¿ÕØaºí˜Mò’P£‘Àüπ|YÜ…'&IXƒ)±‚CÓˆ·%1®â¸`ô¡è4ØnWÔ∑{59`á#¬!Ù	˜T"o¯Ê*Ÿ˘µ†',DÌ"Å7}w˜≈M´188ê7ÕΩâ~>òµ”0ˆc,6˜ ‰,xÇœG~õ≈€°ÃN∑*L´∑˙äO¡«∞€éª	•∑∞_EÿË~Y£@˜ØÛvíÔµ√…rí31J)9%axÕp2Ïi∂Ω`∆^Ö„Ò#´…ô]˛sgv«Ø¨nwé+ß˜t¡Î®lÂ÷eº:ØÏh´‘9O—4‹¡ˇêiPôó`◊—ÈÿÀ>‡=5
†ô‡–ÇY3<$Ì´,vßÁœÂ*o«„NOÚÃ§ã∂ánS‘â
”FF—÷p˙TÀ*$8µlÕS-'pË;pâ5ì†^b…íÔ}¶Mt®s0p–Y æ‡∂ûpõYıê	ê∞“0À´~Í1
£÷í¿ˇF)~aÓ<±M˚ s•ég{:4Cnu¿H»¡0Àæ˘‹›á3£'¶/ûmÀÒ«û˚·†2›ïJ¨C∏*t™ÈÍ>ÜõÁ\¡Q>òXÑ√¬U¸ÙÄ+fÎ_KœzCÓ†∏ÒˆCáOG¿´}0§¢$·*ÏƒÙÄE˙Î'évHBg◊˛r∂û<Ì4$+pzäê`HãÜ¯ßû 3OJwÜ»†0g`Öà˛∂È‡ÚøÓ¿hI›6∞EÁ_îû∫p©„∑>ÔYªd®±^Åz§®ql0ác∞GA7˚;bîÖòdsn∑—v;c'øNà∑˘9∑˜Ÿ0˛πÏ$√`|bﬂ”Ì~â@íU’∂î6¯ﬁõWù2≥bªÑ„‡•∫â“}fπÌ∏∑¬¨lÀªs+$dÛY°1Œ¥*c¶>TÚ£3-uM˚•N0≈m;j9‰c›≥Ìè⁄tõ7m4Ø˜Ym±Ó1@ãÓÇÂF‚∞åt‰%¯3ãB„¸ÁßV4úk‹i›ˇW©·ÛéÌÎ]¯m’Ì)≠Í‘vòZÓuæ)¬i"πU¸ÔÓ«=ˆ⁄(Ü|yXÙ‰ G†ëÑ™Èhop¬i[ç.˜ì∆‹VlÜ·⁄JòÅ„”3UÃ∞!r¿ÿ‡æ	}HÅ‘.FïTWÒb	Ë–£Vc0±Y“˘÷ˇt∑§H.eÌk±~[à*êyv_À?≠Û2§_M˜Öã∫»tC…t0¨ˆ¶Ωg˜_‰´¬&EóﬂÑa4®©b$n0sß*2Îﬁˆ¡¿JúÅZånBÑ÷∆£G?1⁄™oËÈá•6∑—áX@Tùb≠Ó–†îˇ’]˝1mUQòZ{¡•.º"]^◊l¿6?∆∞Ü(BX	tTòÚC2'N6∆`s]È* DÌ6Dú©cÇ"§°SôJûÅ-†å‡è∞s…≠âÁΩn∆Eóº?ÓÀÕwﬁwŒ;ﬂwÓùhOŒ*∏Y£Ê‹QXèC„¬!Á‡Åoêpqù!~ÉVO„5·ºÿÎ‚RLâ © ëÓùsF8»'m∂>°ﬂµãƒï?ßKO0^Â‘Mÿ‡Á¢õá≥]òTíà’·'·Z©ë3∫ß&&“p3rí:˛W»÷ƒ~2’Ã]¨3dkŸ⁄¡…-Ï	4»/ªÏm:k
)käe>•®¥}5ùÅ∞ h,ΩZôÜm≤Fh•TI˛ÁQ9Ñ,	π:˙±˝«◊w>-xàHWsÀM&dÌ+™ºøQ≤B⁄[˝˚Çˇà8Çê^·#ßÔ]Â#.dÀ≈]ÿ-UB+Ãh¿ Öí∑e1ã Lä`$„"lbmhˇxÎààÜ&ÆbxO¢&ï√!¬#“≥f-?Ëê˘â£ù˝„∑˘ÓéW/]}nA©ÈÄ0Z[÷ô°Õœy~wïŒLx∑#ûÛ¶,≈ï3ÊÌwMY/„ƒ˝$·∞=h≤S—=e≥ nÏ7vÅBÑ˜À›V
Åÿ·%,êÖ	Ë†˚41µK‡æmK?_oeæÃ∑&t+÷úEÇá\4ˆ	îó[ñ®OœŒK˙ÚcBıv‘◊Úü¬OñFÑz+y≤›^qI∫>x‘] *∆gõäãÎ§ƒn8•ƒ˛◊+7Lc‹ı5˙(I¯aÛÃüéF˝ø*≈E‡ä)û„›F37‡Ì"æÄ©X4Èc!†ªdÔ˛ºı°f,ZŸ˜)bÉd|7÷Ê»µÔ.\Ïj9—xJ‡ﬂùÊ¯Ó¶óè[kµôœÓy¸ÄDjt ¿©ÛÂ™˘ >*Búò, ^Ø¢˜kç‡√"µ·	°Ly˘Xïéø6VÂ<˙XPb∆±˝€kæC9ÂZô“ñ~’≤Ò˝¥4wcáÒG–ïëÊÆ—∂≤TIf.∫—)kåˆjPNBRŒ>3sæ£…˙∂0Œ5æToÆ—’µ~¶ÉÛŒpàD^^©¨æ›ÙAƒô∞Îπ¬ƒó?(1xVsÈñu†ˇÍÎè;${=úé>ëgY¶I’ä†ÑàÄ¡¥G@®'	ám(M¬µ≤-ã0ø®hYÒUÇ6`ë\ßi*+˘≈ìÜ'0‡MbÒ≈L∂‚∆F)Øcpç>O÷è‚M*(aÙ‡hb=˚ o≤rÈ=∞ZCõXŒf»ëæò«íù+A∑hÌ®”1©*Íkñh9i=Æ3rç6õπW˚[ás‚å"Ë8Ç∂»îı^ ˘tœ≤ö-’˛ìscsºùﬂ	nÍ¿ãEQ'xÎÃ˘V·.Ê`Cjb–∂9éœbQÀwŸì"…∑9Œ~˛p„†[Â°ˇœëü?À¢f˛K˝¢m•–∆rm∞¡F‡√Êôfœ–)ŒÈ'ﬁØ¨°Eöø1Ê*¸endstreamendobj132 0 obj3205endobj25 0 obj<</Type /Font/Subtype /TrueType/Name /F7/BaseFont /TimesNewRoman,Bold/FirstChar 32/LastChar 255/Widths [ 250 333 555 500 500 1000 833 278 333 333 500 570 250 333 250 278 500 500 500 500 500 500 500 500 500 500 333 333 570 570 570 500 930 722 667 722 722 667 611 778 778 389 500 778 667 944 722 778 611 778 722 556 667 722 722 1000 722 722 667 333 278 333 581 500 333 500 556 444 556 444 333 500 556 278 333 556 278 833 556 500 556 556 444 389 333 556 500 722 500 500 444 394 220 394 520 778 500 778 333 500 500 1000 500 500 333 1000 556 333 1000 778 667 778 778 333 333 500 500 350 500 1000 333 1000 389 333 722 778 444 722 250 333 500 500 500 500 220 500 333 747 300 500 570 333 747 500 400 549 300 300 333 576 540 250 333 300 330 500 750 750 750 500 722 722 722 722 722 722 1000 722 667 667 667 667 389 389 389 389 722 722 778 778 778 778 778 570 778 722 722 722 722 722 611 556 500 500 500 500 500 500 722 444 444 444 444 444 278 278 278 278 500 556 500 500 500 500 500 549 500 556 556 556 556 500 556 500 ]/Encoding /WinAnsiEncoding/FontDescriptor 26 0 R>>endobj26 0 obj<</Type /FontDescriptor/FontName /TimesNewRoman,Bold/Flags 16418/FontBBox [ -250 -216 1178 1000 ]/MissingWidth 327/StemV 136/StemH 136/ItalicAngle 0/CapHeight 891/XHeight 446/Ascent 891/Descent -216/Leading 149/MaxWidth 982/AvgWidth 427>>endobj31 0 obj<</Type /Font/Subtype /TrueType/Name /F8/BaseFont /MCAIHK+MonotypeCorsiva,Italic/FirstChar 32/LastChar 255/Widths [ 220 280 220 680 440 680 780 160 260 220 420 520 220 280 220 340 440 440 440 440 440 440 440 440 440 440 260 240 520 520 520 380 700 620 600 520 700 620 580 620 680 380 400 660 580 840 700 600 540 600 600 460 500 740 640 880 560 560 620 240 480 320 520 500 220 420 420 340 440 340 320 400 440 240 220 440 240 620 460 400 440 400 300 320 320 460 440 680 420 400 440 240 520 240 520 750 440 750 180 400 280 1000 460 480 340 960 460 240 820 750 620 750 750 240 240 340 360 600 500 1000 440 1000 320 260 560 750 440 560 220 280 440 480 600 720 520 420 360 740 260 340 600 280 740 500 400 549 264 264 300 576 500 333 300 264 260 380 660 660 660 400 620 620 620 620 620 620 740 520 620 620 620 620 380 380 380 380 700 700 600 600 600 600 600 520 660 740 740 740 740 560 540 420 420 420 420 420 420 420 540 340 340 340 340 340 240 240 240 240 400 460 400 400 400 400 400 549 440 460 460 460 460 400 440 400 ]/Encoding /WinAnsiEncoding/FontDescriptor 32 0 R>>endobj32 0 obj<</Type /FontDescriptor/FontName /MCAIHK+MonotypeCorsiva,Italic/Flags 104/FontBBox [ -250 -303 1081 1000 ]/MissingWidth 288/StemV 64/StemH 64/ItalicAngle -11/CapHeight 790/XHeight 395/Ascent 790/Descent -303/Leading 122/MaxWidth 901/AvgWidth 350/FontFile2 136 0 R>>endobj136 0 obj<</Filter /FlateDecode /Length 137 0 R/Length1 139 0 R>>stream
Hâ|VXT«˛œ‹{◊TöÿÒÓ‚]≈äh¢"¢ÿ±Å†$∆Ç+RD@T‘†(`EE,±°ÿbèΩ†>5÷ÿ5¡®qó]¬SÛÙŸÛígÅÕ˝¸^^bfæπSÓôôœ˝ˇs†
“ !(0§ÖwB´®(^1sè3%‹X?ôá‰Ë:áèOVGo˘®ê»´#¢‚¥wŒ<ãäù9ÿ%w+‡òx˙EGòFÎ%⁄ ÌvÚ!üDÛB’¿ä=x~óÁ¢„íSJn |*ïìc«Ñõ⁄ÔxËö
(æq¶îEØXÅÄ|∂W„Mq]ûéÛ¸6PÎd¬ò§‰¢:ìÏ@¯J¿%:alD¬¢>7ÉÄ	 Çƒe Ü¬g≠PZŸp∞¨«zÑH·\Y'Qˆ ƒL¸OÈÿ/ıµP“K„ï.Xƒ™¿ÎÕÚ◊Tﬁª≤◊xDµπÈnë{QnÛ«¬/%Y—U®X©ÚGU™Vstrvq≠ÓV£f≠⁄uÍ÷sØØÍ4c√Fûçõ4m÷ºÖWKÔV≠?˛§M€v>Ì};¯uÏ‰ﬂπK◊n›{ÙË’ªOﬂ~ÅA˝ÉC˝Ù≥Aü2tXÿpFÑèåàåä3:6.~LB‚ÿ§‰q„'§Lú4˘ã‘)S”¶MOœ»ú1s÷Ï9s≥ÊÕ_êΩ0g—‚%Kø\∂|≈ Uπ´◊‰≠]∑~√∆Ø6mﬁ≤u€ˆ_Ô‹µ{œﬁ}˚<î¯»—;~‚õìßNü9{Ó€Û.^∫|ÂÍµÎﬂ}_p„áõ∑nˇx«l)¥⁄ä +ç¯óc6È‡á)4ïr».ŒâÛ¬"MëÊHY“ZÈäÏ  C‰0y°{¶˚µ∫ÍÆT£Í•∂R}T_’OÌ™NU7®õ‘ÌzEÔ¢w”ÙF}s˝0˝˝fÉ0Ë’ŒÜÍÜ⁄Ü˙OCCOÉ…·!<=Ù4°9héö´VS´´5–öj≠5_-VK”2¥YZñ∂H[´m◊ˆháµ£⁄iÌ¢vUª≠›3˙;;á√çë∆—O+>´¯ZÿÌe|C„%Œ2˛[å?ÉÒœó÷À$Wï˚À√‰l˜4˜Á™ãZCUÀÒ{´Ìﬁ„_ˇ'¸ÉıŸÔÒ;1˛Z˜w¯áFñ„W?Ä?Ë=˛l-O€˙ˇ∆ãÒ˚º«aåyägxMvªΩ∞ª⁄ó•N¿õºR◊RóRÁRßkIaâ•ƒ\≤Ω¯Xq[j⁄2mKã*Ÿ2ãËß ∂ÎÀ∂ÃÊdkok^‘⁄cùXTœˆÃ∫«öW∏¥p]·\†pSŸ.´æ0±0åg^÷~V´∑eÄ%ƒ“À“√“’‚oÒ≥¥±xY<-K5ÛÛKÛØÊÊßeªÃÊÀÊKÊ3¿ù4Ûﬁ;1Êsê9–Ïmˆ2∑07Â»—R9^.§£ÂBˇ∂˝u—"VL˙”j¸áÏÀﬂ(k"Ù›,¯Ôlˇogc—Ù˝∏—_Z∏Ωl«zd S¨¬R¸åòèπ»≈lÄ#ÊptH«"<«Ã√óòE
˘£≠∆V¸ø‡W¨√ú«9|çG6F‚""-.‡*.·2Æ‡_àƒ˜∏ÜÎÿâ(<≈B¸Ä‹@4‚f#£0qàE<Ú0âH¿X$aí1 )òÑâòåT|ÅCXã©ò¬™ùÜ„1S0ÖêB:™@QÇR@)î>Öù@ï®2}ƒ!Û3Dü”`BC…Å™PU™F√(ˇ≈KN&A·4í"(í¢(öFQç¶Xä£xÉW∏Ié‰D	îHc)âí…ô\hç'W™NnT?°òjR-ö@)TõÍP]öHìh2}A©4ÖÍë;va7’'ïcLÈ…@‘Ä¶—tº∆¸wI##5§FîNîI3h&Õ¢Ÿ4á<©15°¶4ó≤hÕßú!éP3jN-»˜pü‚äpás†6‹Ü{∞Wt'¿Aú=∞˚q”q3Òõ¿r<¡)lD`ı‘á˙R?ëâ|1ﬂ·æ!ô˙ãebπX!V*úmÂ\8 ÎPE
`ù˛hœ·Á=ÆˆRÿ+&J=ÏÖb)g’SÃ´éˆ«ÚÓ2bŸüâƒ?rŒ˛Å"F“ÉøÁÛ[ªÚ·¶Õe¶2É“ò…©:b%£7|ëgtcéıDÔÔ¬åΩÜæÃ¥Õ¯mƒ ˆê	Èà°ú#õ†-∫£:˜-–a–òâœ—ﬁG0bËπ4éONa6ª°=:0Wgc1=ãï›úGuË¡|√u#\PÉ3K(Û9Ém≤˘ªí<§∂‰|¯F´%ûø 
laVÓ„Ë}]\ó*0Ü˙åŸ]»7é`’D≥Ff g»ùŸc†\*†"z$öã,ÒJäÁ(Ø»5Â(yõ“WIRÚá µº–ÜO
¬@÷d2cNa’L«*¨a›nƒW¸˚∑±~≤™ép&ºà÷ãÅY◊û’ëN3Öõkƒ	qF‹óú$ìî*ÂpNÈ%ê◊ ïÒJ∂R†[¢{ƒ1PF5˛áa@Cˆì:±è±‚X«I¨ﬁ\gs…Â∑≥ˆ£˜9⁄<ƒ÷≠µ§n\CYùa¥ÖQ>ù£ãtõ~°7¢íÑøà‰:Z$ä4ÊÂF±MÏÂLW,ÓãÁ‚˚¿WÍ$uìJI“8iµ¥Y⁄!óä•ª“CÏ£Ï+wî˚…ôÚ<yó|Tæ,ﬂê_ •
î™äã“B˘X	PBî  ≈§$+ìï% ÈÍÈ|t˛:ì.ükaÖﬂ˘Æ÷‡&Æ+|ÔÆﬁœ’”≤ÖÂï÷íΩ,ÀHñe[ã•ïmL†NëpD%éi∆¬õ¢îß≤I“LÈP¬4˝—a¯—ñ‡Dòƒù&Ö¶”ˆG:ÖÈåa&-öÈt¸âÌûï1˝Q]Õ’π˜ú›{Ó˘Œ˝ŒUáÙàÙ=ôX∆Äˇü ﬂ=˚ŸC‘¬%o°m¯UÿÂ‡®ˇ¿é˝U$ë@ËœÑ2ÛO–™∞¢ïD6£j»∆¯9`∏h:Ñ_!àœ@'∆◊êÿg/˙æ g˚`0"‡Ó∑Ò>»ÈÛËÓÅÏÕ Xà8˙›+_Aó†›ÄÁ`Ö®ÿx/˙Ù1‹ÁÅq´P'∂êC¿ƒÁ ÖG∞æøÑ÷£Ød‹fÿﬂíA}â£¿M¿ñv¸#¸5˙5~´P5p‡=‹áﬁ'Ú®≥Ë=l@µËbål d‚]x;:F¥°˚ƒoÒM»˝Sx+öó°n¸ﬂ∂õ$Fà;†]è7gâø·‚	Úª¿á‡;¯K|∏ÈM®µ¯¥ÙUï@∑qD$â˛ıß}D^@*»ßó—0n	7õç~ü◊„^ΩjeÉÀYœ8Ïtù≠vÖµ¶⁄Re6z•’®UJÖ\&ïàE$ÅëácíYöweyëãÈÓˆ
c&πß&≤<S…gmx:[1£üµd¡rË,Ÿ%Kˆâ%¶Ë6‘Êı–CÛH0t	oŸò˘dÇI”|π"?WëEÆ @ªû†9ÀpÇÊqñÊ¯‰æ·óM¿˚äJEúâÔPx=®®PÇ®âO2£EúÏ¿ÅHr≠E…‘‡øéIp|ì\‡I'ó€Œoÿò‚Vª=Ìı8æç‰”…k›Ø,√K‚º¥≤="lç”Eœta¢D°¡¨[µùŸû{1≈ìπ¥∞ÜŒÕw1	æÎ–¨≈Î)·s˝)^/a‘üöBÎÛ≈û|"ëV”«ScOõ[…g°Öa°0FÛ?ﬂòzZk˙t^ÍıÙnJŸ¡kÜõ†ÖmlJUv /≈?8)Ã	€\⁄Üf≤;i^Œt2√ÖùY ´¶¿£MÌk÷±Sã_°u]ËO1v>fe“πƒä¢6º‘√“=œjºû"•[ätQ£},®‘O;ûË*R≈\ê¿ÎÂPc¡#¶RÑß∑—‡Iä·	gã–ÌhAÖm-`ü4Üàé@¸≤™U BÏÑªw·ÇD` ˜üù…=ûë8©HÖtyír†_ñy∑õ_ΩZ»i†œ:*„5^œ>æó•hæBÜ6§‡°t´Bn∑(èóX4>ø1µ4¶—†ı"b˝Ó4OdÕÙ≤∆ÙÇ†…/kû<ûe ù/WÆÕ&^ÊzÚ’Rf7‹ cÛˇQÔX“√Ò·Ë¢HÏ,lHπrÖq´+[òH4I8äÖBí°ìÖl!WZÃ24≈äΩΩÖQ.ªº•“‚Ù∏ïg'“√Ç ó¢¡‚)“J§ó$¬J¶Ωà¸Ä2Å†(KësRtIoCÅzÂC§›B‚[‰Œ"‰_∏K›E1°4⁄uvù:°(~Cì”ﬂ∞b∏Ë—¢iD,û^¨De‘âz±ïm˜r‹.Ó07Œâ∑G˜FâÓ>–~ AP∂dW∑ñ¢∏h,vV…ïJŒ¡QT	Õ m£ÕÊ‡§æ˛¯R8ﬁ≠.·ﬂ∞ÜÓ∑µ⁄∞tÌ i9º‚åæ~ç#-·+√§æÑ˝¨Fä0π_>ÀH‘/l%¸Gñ1u’rÌ,W™µé5·h,ÆD˜…Ü1*@£Q‡#<Ö>»™X”S÷4j õƒ&ˇÓŸπÃ¸¨N_—È#‘,5WF±Ú√π¶&j6vØRÛ≥TT˛Ú]™ç*Î#cbü{ÏËÃò∆gqãèR3c‘Ãåff˘|ÅFúŸç2ª„)Væ §ùR	„hp1i(
ª§]köC¡¶*s∞)¬(,ëj∞…(˚íÆáCï&ë*1a=HÇ 6(Í≠·≠’´7◊ô¥∫◊.îwµÑiã∆“fåo|∏~ÚQ{øZ„∞8VıNåÑﬁ‹gÛªmÍ>Ô∫h√¬˝∆∆c∂Ö≈oùqy"§D°Ó˚v˚),Y8Ú;∑£∆!÷¨?wÛÈõf£ugXowÍÃé`∞{l¿¢V(‰j◊·ÁØ.†l˛‰ yœ¬qäŸˇ-÷à¶‡:˘<˙Ç5˜‚ïâ§ShInâ∂£$é∂í*(æí÷Œ.ŒjÌÏ…5 õCh?;Ä±™3#)·$Î47áT9íºíï≠—ˆNÆKπ>≤PÎ˜x<Nπ•H…ﬂuRá¸NÏ,·!Vâl¥çê#ñŸ¸[3[3ÂLô*S≥¥†ãË™"(+Î"˛˘9@Œ/‡âÕ√8—x√wLÊ´¿à"â =ÙH	4¢å ÅDãõBkö;a2ö´ÃU6ºåëæ>ÿ$ &µÅJÉCËKè§h }ò¯æjœ*^z=?πP˙–dT≠ÚôÎÃë◊>«£ø|Â{˘‘P¯ÿ£˘ˆ¯–Û⁄ët√èÂ’Ÿ—`CΩ…æeÌÖKÒÔí◊eÙK±;≈C/ˇr·_„ÆµVj]g2’ù;tGØæ5î{ﬂ≠âuæ|˝òå§¬íÙiÇs¥Uß>?€ﬂƒòˇ˙ÉŒÔ∏ÄéÓ¬_ùwD ≥Î¨V]KÀÂ4Ω%–lö◊ñ'¨¡]üqÓwdˆª}Ôùq+Ä'ÆO ÂÕôs	O≥∆Z˝Okﬂf’ÍÄíÏ!zº}ÑÛd}	 ZË|WÄì√KÕ≥œ€—b>n:™?n(·õÒqT¬øüÏÎ8—≤Øo
+Á/√˘zXûÉˆ1¯©°fQ†™ä¯k ≥‘=jæç∫«≤L	Ü‘¨pÖ£73Û_∫À>∂âÛé„˜‹˘Ób«ÔÁw;~èù¯=NÏãÛÊNHLByçs9®YH°@†ÅíÄiâ
t@°h4PÅ®[ÅNPB´%aÄZ®F⁄°2—uÍ[ÖJ©–U≠2¥Iç≥ÁÏ¢Js$?…s≤‰<ﬂﬂÁ˚˝>ê9GÓ¥I∑É?mû'∫ú ˘M∑Ó°º ÙSyy¢F Ey⁄fysC1Èh)‡?J‡À¢ä √®ÔÜ®ÈVìZ-çZ¥4©ì÷›,Zm_/-QÈ5€CÈ^q*&≥¨894—/¬µEvcâﬁ~˙4 `êi”∂ñcÁñÎlV ¥´?Ÿ-ï∆^}#&“âIÙ`ˆFáÑå	H\ISs-®EW	∂^OªKµﬁT“S˘¬ƒÖÛ(ı l˙'¸E¡%$â‹f ‚-']®€Ìru*c*•2ÊR÷ò¨}Ã¨eu˝s–7∑õ◊ò∑ò˜òI≥π°¨È£XL“SÆÅO·u1n3
ën>”ÈÅkÊ±;FQcw…µ∫ò@È˜ãÏs+]Çf∏Äº“,Í;⁄öˇ y∏xë¥y∏ÇP*^¶`<«ˇ6úåÂΩíÉ"=…	:´í3«Y©Ú,A,Ë¸ü$˝‘
i“Eê"Ã ÕÄﬂ¶ÚxÂôÉ∫xy?ÿs8˚£´[Ï§≈Ay≠–ÁwFJUŒEnSaÿ£]˙Óüwtg‹zª∑å∂ƒCk◊,8–Ù¡∫˝w¡Ês©Åùq3ù˚wﬂÃ^ø>‚∞üÆ–·e( 0P¸k≤Ôgøxù]°®µ,ûwsªˇÒË~d2Çê ÔÃ«§◊√ÎËL8iã“0ﬂ"1æï'[ZN	´TBaUå¶ªebïL&ñG"ß6ï√a´íìëXÜÜ“0Ö‚åLFF'õzj«ÅÒ£.FÌ‡"¥û˛v√Ñc-0·‡”Q–Ã“Üìñ4CÄa$«YÀ†P,ì€∫™Eƒx^qÌÿ°+Ã(P\›£⁄ 7	ìm
 î«…0ÕáÑ¶øNNÂÏ0¯0∑Ã	µ_ cç_Ò¸*ÖÈÜﬂûπ\∆ÕO3
üUÀ=O.àóùòfPgÅYie»;ÊÏÁ	L√´éwK çﬁ¶÷®7PZ—ñ˝©©•·Ëÿäe’^ªŒ]™∑Pãﬂÿ∑ˆŒÑQWlrÑœø€®E,(8±jﬂo{:÷ÿçüﬂ—í|Ì}Ö%Ê(ı«íînª|"ô˝˜≤≥ƒ‰—;hı3¯ÙÓ[fÚñËãäÃˆëbı±Ïõ∞◊ìÍ≠·¡ˇ¸¸ ≈E∞! «g„œAwlB∆òh{rkÚã‰7…í∏%L∆ìNx}` –…‘´¶æû±≈HÆ¥ü‡¨^‡ı⁄bæ¶®*√\y&îéd*k∏Í± CX0ßåIö∂°|Œy·r¶>QXXS≠Ω¢,Ï+VÓ*ê¢‡d¨Ÿõ~Ú‚ı‘ sêÕz&l"ﬁ^2Èmº™ƒìñ/”jÍ¿¸¯öì*Êì,«F¸¬#˘‚1õaË6Ò[/Ëãu1√˝oøòø®.≥j™{/=É«Æq{gNÈ €U˙≈U…Â‚≈—äÓ%·tèxΩ+jî$v›/5,|)˚=Å-¸†g›éŸˇ∆9ø”Æ1ü›˝Ìµ'≠˚⁄÷^ﬂée'⁄€(S•∫P§ç(¨˛Ë*èBÆÁµ¯${óå k¿¶#≤ë€∏z≤á√∑∞/;ˆ∞Gÿ3,~œrœzœÜu∞‡q‚1˚œ.Ï<{ôMå≤„]wÿœª»ÅŒ˜Í/sÄwÿÔdÿ–∏>µæsg„@Í$G¶,0ôÄ… :)ïä¢Tıççù)NïJqî™´ÆÁ GQ?#[9é≥p∏ïoÛ’‚ˆQ‘=íLØE£„,ë¡“±åìéV¨gº–&0Ò°ªßÂ`Ë1F¯Ô‡•“Ë&K}cJÍîIC^g_]›“–(∞Ë›µÙ8„pJÒ¨Ω»˝R˘©…º¡&:F·7·Rì5¸î»k†/œ!…ÕÕúÜºÔ¬W“«Ω∞ˇ£3ôüñ|U·ßÖÁw∂È∏ÁWæ)g≠::s ¿§uÅ}0*Ú’ã≈Ó÷Ño…YØ-l<d–K÷S-!€+#G2ß≥_æ›ÊVZ4QOÙ"H›yt, Q{◊mZ¬=oîK)ùŒv`c˙ {uñßP/Dk¶'IYôî$µï&£w‹H)ï úÆEŸØEó∏Å2\¬fV®-Ò•Ô —•°Ωô/Õ]÷Ë`ˆ~¶s-Q⁄uu[WıvÀù]:H‚öŸ$h¸©DZu4Ä^o#“a[ö
cåΩ°(l+We¬cZÚ˘UçÛòÏ¿ë"p—@Öx‰S¢åÛ©«◊… _Á‚ç‡QÀùû‡Y—◊ö—¸ÈÚgÂ æ„Áˆ•@ÄW.kÍ=Áo;‹Òzv˙Ëõ∑ mvçT*<:Úï—©_πBc1Ô∫µªé≠pitòwC¥-uÊWëïmø>µhÛg{≥‘WeîW6‘∫?~π§=l_π‹‚g˝ÏËfJÑ◊o„):˚ﬁﬂ&ËháKº°°S¶Ä±§êyHò5ôÖi,Cä8·XKä¨£hÄëóP˝äíåß∂?ÓÀ–ˇÚ(∆¡ë8Ã,ùüP$Sƒ
*äÜ¥√!Ìgh’ËCú¡Èúe…ßÚñıù¸·Cy˛gÚiyS(ÁÊt~î¿q™F@√ﬂÛ°y’,Íúk|•ÀÁÏC8≤2˛RÑ}#mÙy“…™Ó•Î∂‡≤A≤⁄<ˆıÊ¬ßÄ¡5
Æw~z(70Ã©7ªœﬁhhEVEËÑ/ã…ÑÑíYµ[@+™‘£KNtX íbã—URÕÓzÙ™A©V;H5Eùæ‚÷^¬y/˚ª˚? ˛3<Û-ˆ'l=RäDëw«÷J@ ÇX°Û®t:J›>Ò>D"óX%!…†‰®ÑÄ‹ø3µîGÔ+◊˝èÎ™èi„º√ÔÎ≥}g„ÛÁ¡Å9üœˆ˘¸&Äl)J©¿Ñ‘êŒ°!+ÅE…¥¶Å§(Iµ.§ù⁄eâ
lm’m˘É4QM%[ViQˇH∑•ï¢-°Zh¶Æ£¥]•≠6{œ6!´lYØŒÚ˝ûèﬂÛVﬂ èÛ0ú¥j¨D“ïFÄ "KI©‡QiC˝!-‘æ=¿≥cÏ$+'Ÿivñ≈ÿ`jd)ï…ór)WhK˘6!3©‹17‰‚ı‰U+u≥)'\J
 ˘=êÄJ|M„9ES∏D‡µ|Üı6∂˚›ñRíãGl£61Ír–4·Ó9‘ã2ûëwwwçŸÿù5Œæ„?87M9±æ‚Ãœﬁ€À0fg-?dÒôãK(}rW[@®›∂ oWπ‰£ötvuºπ˛’ó§˘ù]˝X—•a–˛!÷çmÇj*¿dç∫Z∫’’&5:Ÿ)sò–A8Á·-∏ ó·*THBár(u£B®™ñ«jÕ∏ŸKkäC
{⁄ï,%Â@°!‘J@!ò(úöÛ‡X À@˙°9Yµ®fSæhˇ$ô9X$öÙp@?¨ü‘c§~L?≠ü’ÀıhÙ£K#9éß•,úÉÄ|X,îÑBË!
z©W¬T'µ>~iÁÜèF«çGHX2lîúic è7ÙUóTh∏Œà6ﬂXN[|¡ûì≥èªC>Wiss)∑°Ñåú*µJÏ£ùl”¯°ZŒS”·/‹rç8√ez=ˇ££O•˙N¡ëwóéµxlØV{[¸_eﬁ‹Àπ¥FYßawˆœ˚√Œ⁄-U7Ro≠>¿,X;†∆DJ"î%ÑaaLòfò!T  ƒ
¨l¬`¿Ï;‘TS„òL¡{ZCcR2˝H -óIÂ¥R¶¶êa†©E»ï≈¸ ó–nCóözEΩ;·∏¡{!æ	ò⁄ñZíÊ§	bLa/Â»ùõˇ∞U†k≤kÏ◊≥-Ì«^yø•ΩÔ@Ù]ïﬂ+T6.¸¢´÷ÔprA[‡øæOwÏ˘Ëˆó-ÒÜ#ÕlOMeK≈|±˘…hƒ.w∂?`ˆnfE˛}≈H·á≈¯å—4PT7Ô6Òº€†1Rº≥ÿå¿"ú@Ak“:[⁄Ò2≠K* ≠–`4ô-Ë3ÇÜòÉ≈¢f“:oïç[ß≠2´$‰Ö$ÂC*∫ıØ÷mÚD}.—√qŸˇ—CYú≈d`}≈Hä5r,o<≥≤/˜ÿπßCeç{lUê ≥_OµfÁõh{Ã¬cb∫œˇ˛2F¸gÂ'!∂¬mVøÒ„[2«≤w≥∑+åS°J]∆B `´üd>«f∞ÔÑÄﬁE¶√¡Í`#Ü≥,⁄8ﬁù∞õ	;``§Ÿ4ÉŸ+1G¬Ï§‘T‘1»‡—E:¿⁄+Â–,‡s–)⁄	(‘û÷ÈÑ˛ Ñpé°É¥líû¶gÈÙuZAS£®lÜÛ51"'3¥A$yÂc—‚ ‚#óW!È¿⁄–£†¨ú^Úl1¨\Å.qXã≠ì'.CJ€“’ÛÈUPV·˘‰ıÁ‚ÅW⁄⁄g‰Øg&ÀÖgBŒÅì°¶¨˚`;üh˛˝yû‹‹<>‡ÄÎ4¸Û≥_ÌØÎ9›˚‹kc[ª€–ŒÆMë9∏w{ùÏ†jÁ¡∑GÉb«ÅSŸOc«Ñ´£ëÌMc3Vi?_\]ƒ>CaDLN6¬∞6J®4FH¯åfã≈ÎÛYº·h¥õ–öBÎµX∫)⁄DQ¥óvÑå>_»b°‘∫d≈iw≤L¿º5Ü‡®PâòdëWP°ÅS®@˛]lç≤˜¥CaÌı…© ë ∂ƒ01F(•óIS1D˛Ú0°à˝—®vh2u·Ÿ|¯Vx!ºV™taHÑÁ`ßH´f(ÙÁ)àûÄ"©Í:%W
T∞?’üAØô‹)É@EáëQ	…•EÚﬂyÌG§7Û^äpN †wm¶˘BöG˚D1YˇázÄæÇ:i‡;ÆösÄº‡á4ÒÂ‡ÿZxÕ—§`ÿüËßûnÙr^∂√n˜$zõΩtÁ´!˙ßÓ˛≤À[UÈ)qı∞Å(≥ˇ–K[´x°5PMI£Û∂Ûôz°n£˚Áﬂ6€=—æËhˆÕŸaŸ±wÊG=∂2AQ‘ˆb÷|O8Ë±€7û˚hH …É¸Ùó´ã≤i˘7@º‡í»2˛†_f‰)ŒàºÖ„M«”É6!IäÂø1û∂B+¬Ô≤M,J•qÖƒï_õ¶|ﬁCπ‘(PÑNZËøƒ´Ü∞9xÁ¢qàüÉÆãTøqVãF¿âúå‰:πqnö˚ò˚ÇSrí˝,≠dVÚyv	$ÇKâL˚÷ﬁÄﬁˆ/m±ı3rÊµUVò˜¨zÿ&k /ÖYi†Ö%E‘gÃ!°îı2Óò´¬ÕN˘væµŸˆ∂	˛≈#nNx7ò¬ÚoõØ…c˜'2{Ïœ¶ K¨w≤Ø∑ªénˆÒœ√î¡$UØﬂ!•‹T.∞O4V1™
ÜÈVôT™"Néx. ﬁµrs∫4©ri˘ æˇM,eTEå‹0g√E|ˇ óì¯~|«ºìHâà»àQ¬_ﬂ‹˘€uÆ›ÍKµÖ{]ÀÆ≈«d˘=-{¬˛ƒáõw|ﬂFw¸˛oe(PQ≥5∏!›FY<O~ÈË}9(t~Ø|ﬁı‹I¡j‘Ñæ‰Ï˝l*˚^±çÆñ‹‡< D€±«A'‹*&ˇXœâ7wXi|[|w¸N\éGK‚ÓvSwùïméüªø**DUá¡@÷k4™÷Û"$ÎÎªc¢)U≠≠›m¶∂∂\ﬁƒM Èê9§¿Dy»j¶>kmmSK·äÅª‡U¶Æ¡ª`KnÜrsSR´≠Nöπâ‹7Df–c˛Ÿe€ƒ}áÒ˚›ãÔ.~ªÛ€ùœÔÁ¯›é˚'MbÂ-8@ Ñh8º@T4ÖTec]2ö≠{Èhº¥Sï–u]ª˛A◊–“t’”PU$¥ ö&≠åRJˆ"mQXµˇ≥ﬂùù@G$[óÛ…Ú}Ô˘>œÁ!£ZöiÔê7i
Úø¶@+“Õ'∫ª#â≈ŸöúÑzu“√Fﬁ√œÒ∑¯Eû†ç<†¯Yp[ÊôB™ ∞R·@aºf·nZTPÖ™Q®&°î™Q≈%X%jò•¥•Ì¬§‹<LJFuâ*Ú~’&äUüÄoHkÕ  ∫!≈¢yE™≤fÀœìD‰áΩDC˙Õ5∂Pûπø*ÓÀÓÚL∆je8˙ÓòOt?˘z2⁄`…w;Õ¶∂úœ˙Xè˚±∞ª¡π&„∂G∑√√’æ£'∆Ëh-˜{6Mé¶M!¥.öKÎ∂∆•˙PtËÈr*Ìﬁr≠r/-Í¢πz∂©”$∂I©Ôﬁ˛UΩhó∫§—/_BÀè◊1lt˝˜~P9nŒô8®ö7Óœ„f®öåÿ¨,Éîÿ(¨´£3,¥î`‘FÈL¶O Z$)K≤q°˙‘ì É˜asQû||Ú6<#≈˚e‹=Åxè◊ìÚú˜E:a»/’·§øö#=óıLπï<Y≈—)ãK‹`2òvwGÇcAçÚ6Ña¨û	≠á!O_`Áÿ[Ï"sÑ´‰«H^Iñ.JW%¢G*I§qÈÆDH…ö0`x®Ÿ°à&G5<Ú™ ûañ¯eq<ﬂ_	éï∏]Ç<Àô]IÛˇÖIÌﬂ+‚¯ÕVûHÏ˝Ÿñ¶Púf÷»:≠+è€wñÛë`tDÑÛÉ˘∞£˜d‘3@Xw›ÂˇVèIGsóG˜d“IOh’GWV[,-a±~o.úÕÄ=ﬂ±z¢πmÕ+Øú˙!¯6WÁ∞Fîñt∂Ã#ÿDÈªQv%ù›NT_B,%Bj¥Ã0Õwc ;œ–ÄÜP Bçß’Úß‹R£!NÑ∑»©˜•åNÌ9R˘Ï˛gù~æo∫±æ}€⁄ΩÿÜó~¸qe˙˘o^üπŸı˘üèteáü˚‘8ÇﬁøSA∞yl3G⁄ê€2;Ÿq ıK◊y◊Ô]◊\öÉn upCv€∂Dõ¢∏T\(f®%⁄&[2»Y¸à*±îò˜º.wSøÅ4‡…íEk¡]nÉ€?!‚§h »˚`67¸∆Wg„¸¡P$—Fã$)¶ŸÎ)QQFÙä AèXà„‚Ò¢¯â®±(¢hJ$≠Œ¢]Ìg’éÀîIZ°V¡Àvﬂ
5“ œU‰≠8√≤B‡Cò:@ï#Iò5Eò·HM+≈É¸mËko?nwÈ≈[7g÷UÆø€ŸŸG9c?“øºs◊i˝∆µ÷w2ˆ¯ÊÓ≠áﬁ…ƒRÌ≈FøÌcÿŒª:û|±æ£¥˚≥ ∆PÂº€`ÏLZØOSk˙—/ˇƒ˜^ÎgZ€í:•q∏˜ØAP?ÑFÍë∑di;w‹r‹zÇõÚ&çhµ⁄”v0!H–X –àüNXaEèYmE≠V#–NË`+π#«t¿®ÛËí∫ºÆ[GË‡¶üÉ›n¸¢¨≥øa$Aùv
^?¯€y¢±ä∏slÑm‘Jj1∫TTVrI›ƒbqAe8Â£⁄ÑãœQÌ%Vï	˚†áVVC>∫éŒ0Ï;π.§m∆\Øßt!c≤ÍcCcw8¥πPâ'Ä˛Éô∏ñèÙ˙˜Ìcı˙ñs”£Õ!¡ÏÎéÌˇúœÿ[=XI#œ»‚dú(ç8ÂïRf[ÿNÉ∑Úwô%5yM∑”ÃkKH®dCHõ6¶–”_d3;êO°)xˇÁÏûè¸Jë—aså›kOŸÔ⁄q{≤∏ —a©X%©º
≤Ef^ÖSã+º§2(¥Ó?’‹ß∫ò9 eRN£Cª#.≥ShLEÚ·ﬁë∑è>˝T‹Î£¿ÈH6oiàuOaÖµ	GòWÂìëM€>ÒƒÙÓı˛ÜÄΩé—”>étÍ;∑>µœO≤∏ôÛﬂ∏q"W‰,Bª`ÁQß%4úòÃ…#åp
ÿúG ™èG,<è'òYpKvöyä–¢Bx¡· Z£Ü±1€å&ÿ5·3⁄~ÿ7 ÁÃZ∆8˛!Î4@qÇ‚ÌN¬i˛]Ÿ÷cõ∂a685≈«·ÜŒ/®˛ÆÏdÚ^5ÿa≤´™°†låèÄL¡ˇqÈ
˘øùb⁄©vµ˜e±È«x˜
¨˘≥¡tÁ3∑#¬Y<Ú∂ç¡'ÅXpﬂœM/cw:*ˇ\_yÎtõÉ4Ê^-4wtû G◊√IΩ~ˇ&n¬:ëfËsŒTÀXÀdÀtéòÕ}8∞‡8¿ÕÕXåîÉJ&2‚P Â©ù@tåU÷GÆ3d˙π29d–—< T˜Ø7%Ë¶¥´Í¿ß¸F_Ñ7‡
»Ï F&∏ Ê¿-∞CYâEwj∏$\>Ó
∏,Ù%aZ∏X;ABrıéôã ≈∏h˜‡k	≤“Û ,GæÄz\Ä˚®0”íè<∑lxj>d0ÙAÏU'∑ú~ŸGˆ≥6ÊÊ,∂ÂË‡VìñÂ|;}ówy∂Åg˚eò÷7≠∂òr]ÒÔˇ$∆ª;e”ÚG/÷Py•r5j∂πb‡ZcBÍﬂª)”ê%Úø˚O XÔ?‘Â¨≠|ˆπhuøwŒˇ¯˝8é M»´≤ΩîÀNf≥xCcqÖi#(Ç0⁄¬≥Ëjπ±±ÏöHíIõQc”"Ñ+âK6Aítÿ∞ ËS>›«‘ìÔL“î7°¥—(”,Ëóπ…êc=±RcbﬁX*Ü—0ñ®ò †E=ã 
3K0G`h$ŸVV≈PÛ™ß)tjRSù°“#πfò °áö®ÓqVS›ÌÂ}œÆzzxS[Ê,gØ∑˚¬ßﬂ´Ãì÷»◊˜¸èıjäÍ:„ﬂ9˜‹]@∫X]Xﬁ∏ÄÀäãa%:Ç’»C|0â#âFC≠LöXS≠≈÷&—5jTbçœë‚ã!>®f|Ñh¢£„kåI4N¥öâ2öÍX∆…(€ﬂwóãÑNˇhß{Á7ﬂ›{Œ=Á;ﬂ˘}øÔ‹∆Qπ∂8ó«;˙∫ß√#o’|\9~_ΩHõëx"∆ì1h¯Öﬁ
¸‚Ù∏Í„%ö◊”€ñ‚v8b˚¶=˘BÆå˜ÿì8◊≥€w®≠⁄l*¢˝˙¯˙‰≥ûÌ9(lL…lˇ[˛˜˝ı1Õ1÷Øbo∆ •8Ö*9]¢fãeü,AoV!X¸áÍ·n°ë€ê?9ªGv àót´ùr=!zYd¬‰åHK∆Ény"¸Ñ[?‡ñ€¬∑π%	~Õí„eıåÿe?d?m◊ÏÁrè*ØÉ|ï¯Q¿8†8ò•(…(Õ˜af©°ôÿú÷EÜQPnü⁄˘äN°3å˘%ñ.5îa i®1/w®»Ë'∏$ã»Ñcx“›)…Û§ÙâwUÁM(/M,LÀ*HàŒt%æÚÏ‰]Ûs]}ˇ∞hhﬂ¸ÙXOúªßÕõ98yûœë‚≤«ÂÀ˘}&f&§ÁÓ›ª(=>…e≥®¨‚≈ÌéÃIùì€ø|ÆË!z«m™ÍüÔKM∑ı+Ï;0 ÔH¡~î†}©M¶qt≠†ÿkÒ¶{üÚé˜Vyuüœ;r‰´e‰*+£˛Ø;ŒÁ/Y∏‘/¸˛l w‰À¸|gv“T∑"…Ît¬kqS›qr™‚‚Ô∂O-¥;ìú“y-22)˚•¬îìÁY¶ï⁄ˆC["DlÅ˝ió(pçuMvΩÍ˙£Kw5ãÔ˜îÊ≠ÀY?‰ob<ï’´Ú6¨˘´âOJÅ€®`C]/-ü–Hû
«CœÌ ô∆Ü*N>>Ör`A«ÒIï¨»ÿí„,‘ï˜ùcn•}ÉÒ√‹Æô√zΩwjHÉÚ¥ÙÁFeÊååIt8ºYÒQﬁ!ø~∫oÈ‹πÅ^∂Hgè‘πÌ'NîúUR^˝ÛÃ,á-9&!£|ﬁs•K;05Àù÷s‡ı∫◊‰’X=ÃfÎï™È^g‹»√_ååˆ:Ï÷à»Ã◊⁄/æ1÷bèKÀHt&%:bRikÜ˘{{{E9cÜù^<;àìxE›Ω“Û[^∞˛'≈Öˇ∂<Ûõ˚lõ¶¶ΩÁ£≈·#¨eÿ†FŒC≤î?ZAÉ√V°ın¯Ò.M£.?˘ãŸıì‰àIã»“gä
≠ñv¬ñZÜ–MQ$fJÌ-¡W¥I"F˘Dîh°49ÑÍaW Ê‡MÙ?úV+Ä5@-@´ô∞GÅÂg•h•ﬁ GWx†Tã†èÙ:°©∂‡juäﬁF€ßzΩ´⁄hÅ⁄D7Tõ–Ùô‰GøEZ	Ωàö‘fz—“LØ£_ﬁ9ß i•aO—'⁄NJWDıV∫≠'—9kU5¡®:Ü1b˛◊µãbª\B√0ˇE¡˚Xwû6	æO¢d35¬◊:ÿ-rI˚7ZN˛7·ΩçàAÓw„˛∆⁄Üπ‡”N≠_J9¥VV—Vå˚p	mıËªæÛ∏ŸßˇKnìÚ…DkVƒÎf`›ºfsMÏáOˇ¯∂—Øˇ∫†”∑Ó`ø~—SÀÎ‡[çvë~©M
~™NIú®Jõ‘^?0¿ª≤JúëW≈>5MÙ÷`ã^$¨˙n U”®xàÁ”ı1C≠≈¸˜©m~ÀJÍá∂"Ÿs—Á¿ñ4z{Vá9è√ßZpÈà:%¶°ﬂ8-ß˝[åìßnêá◊â}üÉπÔ2G;cÖ¯Xñ–YÏi#¸úèˆ˘≤Y ”ƒ"—*ñ20F?¯‡∏ÛﬁSMWÃAƒÊ+¯0G˘⁄ø Æ`Õ„±ˇqb&≈¬áußö¸Î¥¥¿‡_tÌú•~uÏó	é?¸ôÓ_æ—j•s4 ~á¿ëeXÛfÃµ}.1óÒlÛñπ√eû0G8–w;˚o¨£ú∂0◊åX˘ƒô@WÄ= ÔE HPCycpó˝5««òﬂ¶eû+©≤Aˆ≈ÁxΩÃ/”Û_¶:3ôg¶Ö6∏ÿ#xuÿıtÑyÃ4≠™nésêÛîs≈¥ù˛!oaﬂÈ∞óå GM€õ´˚iäe U[Qµ*¶rÌ8ï´ù∞’T®Ê‚ûÛªHåE¸#µ+¬&ß—Ÿ∞U–ãÀ"†£m‡ŒÃ∑¶õ]Õ∞^3Ù√tÿ–™¬-ø∏õ&hMgÃ∫≈∂{º€–æt∑Ü∆AgLÀ˚f‰q»nÌˆ#k!ÎÎ!kPﬂ±œw∆~⁄¶#ˆè„ﬁ5˛kª≈}C˜xw∑¨•¨g&e ß=ì+≠?ÎX8ØÂUYé|L÷m¡FŸS§È˚Èûe›’–=äÓ©"\üD«x-ù⁄_EﬂiÎÇ˜;rn!«¬k6t˝L›◊3Ëk#Ô∏Ù_üLgxÏtˇ2kæ˛ê>‘ü¢]Fæ≤œß°Î°yk©¡à·üi?”ÍÉÈ⁄g¡3nó≠Ù˜¡∫å\÷ZŒC Cl¨ÈÚ&Ì0‚8œñ@◊v”«⁄Î–÷ﬁ»Oå©ˆb-*xYØ°˜˙vŒ≈˙ÀÌxfh˝ì¥â◊ŒÂΩË‘Ï≠ÂÌ‡*K˘ı—®eXªæíñc≠«çXM§)fºÃ‹D\Ücú˙,º√ËØé8ö±béZÁP&èi)bE¨0∂æñ>¥Æ£œj9›µ>Oõ’z¿G3≠õÒÓ®ˆûFB'Â‘ùÉÙ>ÎÛZœ#ØlGÌ7Î
¯®UQû˙ërçˇ°⁄”¿˙’ë€M€KëF}‰>≥Ëe=|Û©ÍÔ¥	sm∆ªç™œ“À<ó6ñ≤‰gFld˛v÷=‰ÉjD=j1Êo2|‡∫ª3¯≠J£ÔêØ'Mw∑&ß-®%®øán«s=¥2Íqx‚⁄
[Ügk†√cQ+πvm—wÔËªÂüB0Ôª⁄ÓGCml]€˛€Áˇ‰◊®œ’∆˝E‘∞Ùü-≠≠"H6-÷…z1HÛã’a’¢Ÿ:û™98û™‘p¨ó–`µ∞—`ãü<a$≤°/ı®)≠2Aî¡˛àUc¯åˇœ%|Ru\_j[‘Úü^zÖ^ay”Ú–˙◊ˇtÖÛû^q≤«±»)∆u˛gwlóÌ…ˆ[ˆ[éﬂ9…π2Íô®∂®∂ËÉ—ˇbøJ¿£∏Í¯Ôe7		ÅR	î√—BK≤!Ö ’¶P
Â(B†U´0Ÿù›ÏÓlgf7$V[µZ≠w’~ZãG’™µb[œ¢“zk≠ı∆≥ı™hÎŸ™XÒ¿ˇ˚ø73ªõ-¯°ﬂÁ«Œ73ˇ}Û˛˜˘¥æ˝‘uÍ:uù∫˛7Õ{Ò8Vbı®√¥¢á„;ì_—U∑ÇﬂÚw/›
h£
ÆC#j8ÜÈxP√qÇèh∏-¢]√ò.Êh∏yqÅ‰èù±èañDÏg∏Å◊Ôc∏ë◊2<Ü·C7ë@◊à√Ëàï4\G≥’-éaEÏ«	~T√ıòü´·¨àØ‘p#Õ{ù1XTøE√MÿY≠Üõc˚Í÷X§õn–pöû–∏±4Ô‘x\—ñ`∏YÍ’v=√c•.m72‹¬Î∑2<û·ªû ui;¿$Ç'∂›œp+Ôyà·…LGÈ’∆ÎGû*q€û&˜¥∑2<]ÓiW∫œdx!√syø≤C'√óHxÀ‹~9√Lø=%·µ^`òÂoøjµù±}{ÿJ)”7ç§SrÌÃÄoÙX∆F'Ô¯CÀXÂ∏«5}€…›==›ùÙXö0z≥YÉw{Ükyñ[≤Râ
$œ.ô∑∂gòÜÔö)+g∫ª'=:Ò¡;9`‰Ã!£ﬂ"ö€Û-óÑ≥ÛF“r}ìﬁªäÆÌ•Ï§‹Ô%6ÆÍ]∑v˝ÇÄòÊπ≈ ≥¶[˚c«:ﬂÃ⁄…c~‹n—?ígQbÒ“cS˘ØjãMp‡"YÇ˙1$∆¡¬.‰Ò›—∑≠ÈùGäû.R±õbw∆>ªáÓªc˚c∑c5ldËˆÈ&
)ºWbH•ÜSÓ†U}Ù∂ËΩëæIN>}/ *Ê[‡ß…Â›T°zËŸ©°•H–j/Ió•wD€„Ω-zóXöƒ18yÑYÇ9k6≠ÿå-eˆô{äˆÂXÁ›¥Ê }BíÜMV XR¢w?cH93Ã’giïÂl∆JÚä¥†˙øE÷“£=íZ@ﬂ#Ì6Ô^¨√Z¨«ÇíUËâ-Ã≥HVìzfÌÛ9$ˇ«‹Œöy°}ëã…üˇâ,ˇœæ≠ñ•è!á®KY
ƒ{àÏaêEÚÑ;:ÜÑV3Œ ÛÕ–ˇKIÔ4Ûî_;ÈﬁÃ˙πºf≥Ω∂“≥»ŸØ¸÷À2€eˆ7B^iZS¥r⁄∆ÅŒæ∂≠«{≥+´_,ˆFñmy◊‘+Ü˛îπ›¡æÙk{≤¿ª•. “˝L'†=»û€=ÇÁ kÍáˆ»1UÂ1àkä0J¨•√UMzUríµ«Îé]COõ$ìî,Z˜9Bíñ∫qU
".…ûl™"’-≥ëGíJ…¥ÛÕ≥O—`<ìc»“1Âk•π ë6⁄±úû≤]Å˜®Ï∞µG“lAÉ=ñKY_Í¨Ïgrñ~ı5oè5¨Ã[•i>ÃE-UF_JÊpvLgCÊÁ—3√“÷ñ1V“Ÿd3Â«~¢ÏáYﬂœ8~?ü˝)ÒSÃµ†kÅäLıUR+iØD9)mñaÔXeëìTΩQ˚.œTsÏÔbØ˘2ŒÀ™&yº”+Û∏Cì¨uPk^2‘VÂ≠…V*Ájr¨(Y‹}“n∫Ë‰+AíU÷à«wév»˝9≤B=}⁄c≤ÚüáÑk—7µ◊“‘ÂÓÁR}n∏≤É-õ‚à¯l¢ä’G’a›≤[H¯RZïïlg¨\øàV∂“SÊË≈‘Ò.¢k#Øˆaö˘Ó„¨ıj÷Æ`]Â¶Ãáw∏º7–S´Ãë_l=ù§*‘Ád¿3…’&ÍQ›ç‰QŸï„˝Jì3œ÷ı%»œ Fs∫Í»l|ñÊ&ÎDIG[ÿâÇÃ›2sÙuÑ©™mk…\Æ%6ØÀ˙‘ó}^À^é÷À·¨é®Dm$øîÆi≤2©,/Ø˜k1äáå©¨U••,ŒíëQ1ís4Aî∏⁄ÈŸØÎÖ™N◊ò⁄—!≠øçV≤Ã—+Û|‰Âß i!®S™FY‹ï”∫¢?πœã˘≤JUµœ+õ9bíÓwóW˛®É€RYÓ!vË!•ID/Ë…^E}ç:A¥”°ΩyŒƒ"[\ıØ@%Wytìò≤t	"ÆVK£(>÷±Ó#='-,È_IÎñÓπéû\ûÀ§WÛU>pQ}r	(´.(ßÙ‘,Y‚…f∞¨<ÔÙTNZ∫Á§*r,öX™˝®¨•4ıTQ+èèôU∂Nó¥ëïGr®ú*%≤t◊Û©˚∂Q˝Ô•’ÂXÇe4◊.£S„rz/§ˇÈ28◊”s	]ÛiÂ⁄±åŒ!ÀhmŒ£ÛHﬂ≈5Z«j= ´qPÈã·§22ü
\Lç]“Sã™A^X§ß°◊-≠õq\]5¯÷U%o‘I•N?7–éaﬁ1ÃˆMÈ(-Ú”bªµfõ8[Üı7O«’Äñ3ˆlâ≥ï#÷‡”CZ”tuìz^∆zz∫ÉX'ECyo-[‡™Ìqò«≤™»ÕUÃw’9kÍ\ Í9+≈-ËÊíRë±U]*ØdV^umà8˘·Ã^‰˘Jatp|X¥fÎµ·√„⁄‡Î5e+VE‘ú,k™F09Xzn3™Ï)˚‘üÙåÆ,ôd¨îÆéû0·˝6KËï}§N°CeX)EIÆíVëkXGE^Ylü¿Ú.˜ /ÏzÜéUã{ﬂe:Û‘⁄…≤ü•ÎHT…RúÅ**Ï™®9*L}ÊÊÇ`“≤˘ª∆·H˝Mmõ5TVÆ¥ÉSVsLé¥y:èáa∫úìbè?5<9˝Ma$ñ√ éµæ˝¨
«¢˙ÂÎänÍÛTmöYÓ˝eˇ„3‚›ÒıÒã„Á”≥ßÇÉÃï—®l‚iBNeR˚^ZwπfJ)F«©◊G;î9⁄LY„W∑óÇv≈G=–à1h"èåEyf<N√úéâòÑVLF⁄1Sq¶·LL«Ã§xòÖŸòÉπ8gSƒÃßz.PÙuí∫®£vcı”%‘Eœ£é∫úzÈ
<+q>ûég‡“B:´≠¶sŸ:•≠•ŸÍÍ»®˚ÀSﬁf<ìNn[i"ﬂÜÌîôó”t˜l<W‡πxùwÚÙù‰ÃOsáµ±ã¶…,Y œ3»ïdè≥ßDqµá|4åÁ„*º /ƒ’∏/¬ãÒ\ãó‚e∏/«+p=^âW·’x^ã◊·ı∏o¿Ò&‹(Ífº7·≠∏{Ò6√;N‹Çw·›xn≈{Ò>º∑·∏ƒ>|w‡N‹Ö„#¯(>Üè„∏˚ÒI|™Óf¿=∏ü¡gÒ9|_¿Ò%|_¡}¯*Ó«◊ æéo‡õ¯æçÔ‡ª8àÔ·˚¯~à·«x·'¯)≈”œÒ<å_‚~Ö_S%}ø¡oÒ;¸¿Òß
¸g¸áÒW<Åø·˛é‡ü¯é
à∏®¢QåM¢Yå-bú/NƒÈb¢ò$Z≈d—&⁄≈1Uú!¶â3≈t1CÃÜò%fã9bÆ8Kú-Êâ˘‚qÆX :DßHà.±PtãEbÒøπÆ
8é+¨ˇÈ§sÏ¥)∑v ‹Í¯.hŸñ-$«í"À¡Ωª—›Z{ªÁIvò9;â€¶ÃúB
Iôôôô9eò›Ÿy∫TﬂwÛ˛ŸyÛˇÔÌ¿>°Ñ2*®¢Ü:N¿â8	'„úäç≈&l∆åa+∂aÿéÿâ]òƒv„4Ï¡4f0ã”1áΩò«>úÅ3qŒ∆98h¢Å¥—Åâ˝XÑÖ.l8Ë· \x`	ÀX¡A¬y8‡B\Ñãq	.≈e∏W‡J\Ö´qÆ≈u∏7‡F∆M∏∑‡V‹Ü€qé‡N‹Öªq/¿Ò"‹É„%x)^Üó„x%^ÖW„5x-^á◊„x#ﬁÑ7„-x+Ó≈€vºÔƒ}xﬁç˜‡Ω˜‡~<Ä˜·˝¯ >à·√¯>äè·„¯>âO·”¯>;pü√ÁÒÖÅ£¯"æÑ/„+¯*æÜØ„¯&æÖo„;¯.æáÔ„¯!~Ñ„'¯)~Üü„¯%~Ö_„7¯-~áﬂ„¯#˛Ñ?„/x≈ﬂw¸ˇƒøo¸ˇ•%(I)JSÜ)KC4L9ZC«–ZZG«“√Ë·t=ÇIè¢G”cË±Ù8z<=Å÷”:ûûHO¢'”SË©Ù4z:=ÉûIœ¢g”sËπÙ<z>çPû
T§ï©BU™QùN†È$:ôN°Si#ç“&⁄L[hå∂“6ß	⁄N;h'Ì¢Iö¢›tÌ°iö°Y:ùÊh/Õ”>:ÉŒ§≥Ël:áŒ%É‘§	Z†6u»§˝¥Hu…&áztÄ\Ú»ßÄñhôVË ¢ÛË|∫Ä.§ãËb∫Ñ.•ÀËr∫ÇÆ§´Ëj∫ÜÆ•ÎËz∫Ån§√t›L∑–≠t›Nw–∫ìÓ¢ªÈË¿˝ânêOLu∫ôV◊h∫éùuñÑÎ5W§ªf´Â¯π'pΩ†'\”q”£W,â¥ôÃ®”vl±ò1îMoií"›Rfãg^'3;âÿiLçä»–ƒv2˜ßwÕ¿iKôù √äLrß"i…&=©Üme&ïóôa€Ë9ûÔ:Ωé»Nµä)Îhîﬁ£å˜‘\Wôiı–ãÃ‡LS¥LÀ2˝§gîõô‘¨k⁄ÌT∂ŸYV
Xiü2á"ì‹FH6€ŸftªÜ¥3·)€Ÿ›1eœ∞zùiKXæëµ—ÛLÀ±ÂœlwC?ﬂd€ÎòkªØéîìdGqã¶c∑≤b•i]˘<kÛrıÑ'•≤∆ÇiVÚÖRM£Z=k∏Æ≥lâ?°†7Y◊lw|5ÿrñmÖéﬂ…∆n-;«®·â!«ı;· VŒ¥}ùh˙¶\q 0óKÿMë/F™≈ÙxæV.)SŒG¶Xrz¬nñ%¸·¶#ﬂè—l
€œå™Ìò1îﬁ‹4›f–]∞ƒ ps'7áÔ∑æﬂ±xÜP6=¶∂™àLr,Ù≤ﬁ÷«‘Óc⁄z¥e3∏MÔÄvÜ«˚Êt˙Êå77ŸëMz¬7≠ñHõë…Lƒ±òq,*Sõâ¯Dò oÔcﬂøäwË8cê[lªBÿña∑ÃÊ‡N=li0©ÅÉƒò›Nªùôär‚Ä¶T@Nd˜ËyÆNx∫/$Ø/·ô0a?LxV%®Ñgc˛ ÊüU¸ÅJx6N8àûÎc_Ó√Û}¯‡*N…„–ˆÜF√#ù*πU5Ãåé)kà»OE∑é¬Œ*N˘é<PkZ¶pÖgzQoh4<zÃÚò	KòFnLùøËÒ‡òèO81 MuÕ0E’ôÌsöÍä∂r:÷îÓ—JEZ…M·…èÓÅ‘ñºgbµ‰>9êêj©ËrHÜr©FØg»ª±€h¥+†…ÄˆöôXüvõâ='5^â#»ƒ±$‰µíÿ,ª=37—«⁄ÿA˜áN?'˙ì:iS'}\–©*•h~≤¶‘éRäÆ∞LÃï<¶˙QJ!Yj1J…R)Ÿ≠òrKF˘$‹éìénº|*2	yÌeb›Ñº¸M˘ì›îæÊ\ˇ^˚·Âú˛5
˙◊»·5äÓ¬¸»H°®Q9œ®¿hu¥ƒ®Ã®¬® ®∆®ÆQeÑkT¥Fæƒ|yf…3KûY
ÃR`ñGZ‡¯
ÃW‡¯
Ã\`Ê3ôπ»ÃEf.Ú;(≤Fë5ä¨Qdç"kY£ƒ%÷(±Fâ5J¨±˙^J¨QbçkîVﬂ3œ®å
œ®å
œ®rTUé• ±T9ñ*3Wôπ ÃUfÆ2sçôkúoç5j¨Qcçk‘X£∆5÷®±Fù5Í¨Qgç:k‘Y£Œu÷®ØÊ± ¢5$fîgƒ{w§»®ƒ®Ã®¬® ®∆à5Ú¨±sy5∑ZzÆÌÚ{≤¨Ãú*±ñUÈ5ßè}vY£Ùºr<ôà'<>µ5yÕáﬂ$Yß¥≤ÆºAö≤FYQµzº3+˘¢ºÑÁÀÔ∑/˝‰GKÑuQ'Áw‰Xaox¡\“8ÁIN;Ó§:N‡â5R∆r⁄°Ä¸∂Ö≈ëå∆Ú{˛‡ÙVôü¸A>#ä4(iP”†ÆAEÉ™Âî4OAO/kâ≤f.jûÇ~R–>ÕS÷°ñ¥sQáQ`†’:û"=T“y’Ãjâù5sI«S‚º4sIO/sÇÃ=ëﬂëÜÂ43≤fmJı¨e]?Ó˚≤ZhâT‘fZãëÕ.»äH÷€Œ êBÆ¨p3ækÌ†ß¨˜[∂≤÷B:¨^,ë5Ì%U‹Ü(~ÊuMYwM!Ê%Ó$º¿N/»‚’…∞Iy=)ûlZA#’ÜîhôFW~„ÜªÅo*qLñïˇ∫ËˇÉæ2:nQ˝ﬂ¿öhèr/⁄¨∫ó\Á>ö∏˜¡ıúhr‡"˘;,	ö‹∏~~˝ÜÅ˘uÛ«œˇØ-z˘i"à„ >≥îŒ¥T(u∑l≠∞[ä]¬îÚHì≈§
∆¨x∞j‘j·‡™		I≈å∆◊¡ÉœÑõ\
&ZMH4Í LåQÎãõ—ﬂv{!∏Ÿœ˛væøŸù}§YñqÊº«+∞˜lïôÛ…3i =Ô¿i 2È@2Rº≤W—e]qZÎD˜Îu≠r´ó„JRN*Y9´‰ÇRÍärQë]÷L©t†HE…:xUo@Wı@KCãñV”Å©Ü)Õ„*µ)F#ñE˝˝!_-çƒROq≈Põ¥1UØÈyºc!÷Eãd†ÆÉﬂ‡¯	æÉ"¯
æÄœ‡x	¨ÎxÄ˚‡.∏8∏r`\ ß¿(*≠ª«^~∑]vŸeß]öÏäd°˛ ﬂ¿'<¡5p\g¿·XõﬂÂwÒ7Ñø&¸·3ÑO~ûsÑü%¸4·'#¸(·#§â6Rù6–ÌtU©ü ‘GΩ¥öz®õRÍ§
õ",∂Vòí9≈¶(GÊò.÷√yÏ>0,*√Q,|&2á¢bØaÊ):(⁄S∏‚GÛ_eBö…c4î»„Ç5û
_Ob	~N˚Ùl–™ßgC~cÛ¶na3~q	iÿà∏â∂F¥¢Ω V√ÑúóræF¯
·vÆ‚Ö8j7èÂíıh”ΩÒ÷€8°Ô§ı¬Òƒ<EQ÷3b◊E© œüÜX‘ÔMwñ^¶Êmgep˝©XEUÓpTTÖ£®´K5º˚pã”#ú`ÕÓ©ì¡e¬s•Ÿà∑î[Õ›Õ›VÀÅJ≠jàk -u≤#\∆sÂñ‚Z¯ÙHH}©<æŸóë\RË·^·¥Ç[Â†dwÏ èoá{—hf4Sﬁ383nLˇ ba endstreamendobj137 0 obj18824endobj139 0 obj31457endobj138 0 obj0endobj140 0 obj0endobj33 0 obj<</Type /Font/Subtype /Type1/Name /F9/BaseFont /NCAIHK+HelveticaNeue-Condensed/FirstChar 32/LastChar 255/Widths [ 240 258 407 480 480 759 556 240 241 241 352 600 240 352 240 278 480 480 480 480 480 480 480 480 480 480 240 240 600 600 600 444 800 500 519 519 556 463 444 537 537 204 426 500 444 704 556 556 481 556 519 500 463 519 462 722 481 462 463 259 278 259 600 500 204 444 463 426 463 444 259 463 463 204 204 444 204 722 463 444 463 463 296 407 259 463 406 648 406 406 389 259 222 259 600 500 500 500 240 480 407 1000 482 482 204 1037 500 240 796 500 463 500 500 240 240 407 407 500 500 1000 204 990 407 240 722 500 389 462 240 258 480 480 480 480 222 482 204 800 289 389 600 352 800 204 400 600 312 312 204 463 556 240 204 312 289 389 721 721 721 444 500 500 500 500 500 500 722 519 463 463 463 463 204 204 204 204 556 556 556 556 556 556 556 600 556 519 519 519 519 462 481 463 444 444 444 444 444 444 667 426 444 444 444 444 204 204 204 204 444 463 444 444 444 444 444 600 444 463 463 463 463 406 463 406 ]/Encoding /WinAnsiEncoding/FontDescriptor 34 0 R>>endobj34 0 obj<</Type /FontDescriptor/FontName /NCAIHK+HelveticaNeue-Condensed/Flags 32/FontBBox [ -250 -212 1244 1000 ]/MissingWidth 556/StemV 82/StemH 82/ItalicAngle 0/CapHeight 1331/XHeight 999/Ascent 932/Descent -212/Leading 398/MaxWidth 1037/AvgWidth 450/FontFile3 141 0 R>>endobj141 0 obj<</Filter /FlateDecode /Length 142 0 R/Subtype /Type1C>>stream
HâlT}TSGüGí@xÿ<`ê˜bµ‡
\â+ç
±
Ú%–UîB\¢ñØ– *=VèRÃRï™ı£H‘äTiu´Q,Í¢ÆQkDç]KÂâ—V+gŒ}t‡ú§Î∂{ˆüô3wÓù˚ª˜˜ªC!π¢(Jà◊«‚ﬁög\i1õ≤≥‚çÔ'ÈÛÛråyfcŒ†À…Iî4 M
îI#Â8Á˛≤ˆóHE Bú˜Ü=>pÎï#£|Ê´êå¢6Ó˝\ü_PZd˙Sn±f\ˆxM∏N¶â……«®I.5ﬂ5kyŸ˘E˘EY≈∆ú…MÃ ïö§A≥&…h6Yàı%ç…¨…“eÂﬂÕ*Z°…_¶ôg À/.-0jbb5Yy9°˘Eâ5ø˜éŸîc *2Õøâü:MÛ≤úˇZÀDà"ı!wÑº(‰Éê ˘R( °WÎÜ∆π°…ÖQH+C”äBhBo˙#B%ÈH˚êí°I(ïú∑£ÉË*HÌ†∫‹∫ï∏ï…eo ñ…≤~πè‹ ﬂ%ˇV1M±OqZÒåˆ•ß–	Ù]e∏“¢ºÊŒªœuouó<¸<=6xÏÙxÓÏY‡yiÿòaãáµÎı
ÛJÒ⁄Êı7o•w¢˜'É?∂˛‘%}f-Q}Ôbÿ?C<ÁÖ⁄ËΩ“gäPö›:ê)˜BÆüBiFZ
U£{UÌ.v)kkózà€)3ùΩæ$w5øH˘‡¿∂Îw‘ù°J¶”fÅ;5v‘¯⁄°Äú0Y∏ †Äf¨ΩTªK÷Ó˚√ˇsI≤ˆí¨Àm©Æ-f© ØÉΩqM™„`b]Õ6Ù•'(ŸÂ¡∫uS6π3À≠N©’AùaÖ(ìÊ:9|Åﬁ—t¯Ø«Îüw˙ﬂªﬁxê˙r!∞DnØ%áa5/“'>PwjÒ—Àñ&ΩÕ'æ≠àäç	«˛jIC2óŸ·˚F∞´éã3ƒØ¿wø'≤∑◊A<‡iÒDZ$ˆä/Lÿ¶u”W‹æ*h◊”+w‚Èê£Æv˜,˝ÏÎ{˘J%{
µWˇÂ Mı=Sá˝í"±7Iﬂ≤˝¡„ÎŒÂŸ;h÷Ú‘ô<yz…PﬁßvòÏ§NàP, .Bwß\ÒÈÒñKÎt—˙5X<©ÏqØ•ìa¢`‹EêÅ?å◊wå˛„¢“‹<æ¢Ú0d)†“âoΩ˜$ŸU_äê'ÍE∂áï§ÈKÆæ±g}ÄãÒpnúÈ<€˛◊{ FŒÑ}¢ó.,,*Œ”U0<yVj´œ\ ‡|õkØÓzB‹üTá«ƒò√µ+iÕ]Ìaöu‚«.mó∆rCD≤∂˛è‰ør˙>QH∫ûuS§]≤æ.˙§+`}ß+\4NÈÀT`O˙|WI?¬œ8Öf∂ï9§™”.ÿ·öÍbªŸ«R0TpÆ÷`f®A∫Ωdc∂˚—°9”+öÚ¯˚8( g,«…8«’‚dX"∞è!ÏáÄèÊ§’!]sP◊DÿÌíAhü/G¬"∂ûx<b5√!B(≠’s∞àÜÙFòM»œ»á\$‡dö…∞:aªäù‘E¬îØÙä€°⁄â´°æpˆ+hÊ`ô#Ò"lt¿±_ÒÏl€,ïIª∏ÜÕõ@è≥^L©«±OÂºpÊ“>°ífWO∞KJ%€åı4€£Èêı83ø/ôgõ;œùπE`íﬁ>uBc	dÃ}ôú7‚
h‘dä*Sëfeõ•/≥d∑ÿó©•H&&y’&J!¢¨çXÂï4Lê+D≤ı…ïr‚â«—xLˇEŸ§+
rdNæ`á"’’ë&È[…ΩÏx=Èxd‘C2È\‹rH∆Ç^Ã^¨&⁄”≠!€ˇ#0+H≠∞9ã0ªB+P4xˇ–#!k≠Û<óı‹œtgCztHÍí∑ÑWâJH‡Mlu®H‡™A°Ù∆ﬁÑa4+5~≥q|ï∞À*s´ÓY;≤ó∂Ïzø¶¸ﬁF`¸À/Âûù_ÂNfµÁ˚ö⁄˚N5(fŸ±ú«kìÙ–˜õñÃ∆|à5Mà ˙“‚1 •¢ﬁ≈ﬁbÔJ©“!¸*Ê_«£∞!˚ˆﬁ]‡Å3’o§fÃÊŸáò€Ù‡;AK„êÊ©z7x7Åégo¡n‹ÖΩ`±˙Œ©Ì<{∑£6m¶¿d6Ü;)Hep∏o8qŒ˛‰hà.æòáæ±%‘ EŸ»Âp∞=
∆ÄÊ€á»Kõµ˝õï¡˘©ì"LÕ=ÉG%ì>ƒ˜ãÁ†û√ı"‘+!QöC>z<w‚Q–©ò@îQÖÁŸ˚™Ïî”)s‚yƒ⁄É˙™∫Ì8ˆ7wˇt ¿@§Öc›UA ós ÏâmƒnvUù8≥ÙÏIPIû‹VÂ>Î◊˘œÛ22≠´„WÒXaR∞Ms,+“f™'~ù¸LK›ÈZû®›2gÀ	Î— €˛-ﬁ&¥)?,ﬂT±.†–j€/@ãÚºıûÜG§•bÜáOp«6•,\îí¥Íÿ7MªmµüÚ«¥W©wg2'Nät@dâ™µãl3ñç˚Wuoó≥FáG`¶D^˙‹xvm∂qﬂ—l≥ΩRôΩ≥)˚b ?~0‰•0øñöû∑xïP¶—L˘K¥ÄÃN!©C&Òíwπîd$uÖ8îày^k	V ¯it‚ö7ÙAõ	+ê~ÓPÀﬂm“¯ﬂ°#_Ú‚ÇŒá†É5˜ù]’ˇÆªÍÉ¢™¢8€∂˜1‘léèœﬁ≤#àJÚ!–™à‚Ë2®êN~@`ÚëcjÜ"Ç§êQ.ÎJak¨"YF~íÖJ”E0;¨—lñ
ÃkX
˙<wÁn3ù˜VõúrÊ˝qﬂú9ÁûØﬂÔúkúŒÙï	1)e√,¡9˙º`b˚-‰‚Óµ≠9"ã.gãÿ£,Â2”ﬂs©£„àBïÊANI?ltA¢Ks÷/`ïÉ·ö–ÃµŸ!¿sıX˙JiÁ1ß8‡*a:é¡ûq
û¸.®2%GXa ∞Ñµ∆ŸªŸƒ≠îµÉ!2›<Íäuí≥Mé3“y˜
≤`”Kô)ÊÎú~∂πÈÏûl7ï&cv¯-‘à)Oä3ÌÕà§ÅˇVˆ…Ñø±‘¬]® Ì»Ÿ¥BˆãL∑≥uHŒ_úÏl2ÿñê‚∫y, c~—±Æ∑&¬¬ X€E∏⁄â*FhâíI÷yπ¨ÌF/	πﬁ˜IÁèáñmî|D¶S8ßı.ìr≤∂‰óJ˛2*‹G€À~ü⁄+áˆ¢Jªâq√8ü‰qUÃ2›ﬁi˜‰A€ìØõ¨≥¨©Æ≤¨ñsµñÒÁ≥ü{|ú∑5M—2"@µÎw¥–#ò O7ã∞,f’YhäÈØ<Ãd@ÜY¨	w∑h∏WF¬ïΩyx=)A)ât ¨ÚO„ªújdrﬂâÛ˜##‹ø˛@ç´särwH}≈'ñãkVΩ∫æ‘`!¸ê3ôÛ'K±´ÊäÔ|h≤å™ûÑz◊=l,öÓ“¥z†ÿ£m≈Ne—ÁX(ƒBÃy'—Eä≠S»BY¥ÑøEH™òÄ@lö¯ÈVcdÅÂQs±Z,v<„¶ÛÓ9Å¿RÅ	˙£û1ôAL*õè»ú¸SZËÀd®∂ëèunª,Ç·,=$‰ÄéÒŸπUJ`∑]J`ˇ∂Îá‘£›ÈÂ∆xHa€çM@ÊxK±ãäﬁ‹dé2[∏ˇÒ9L«ÿå3l.w∂^T∆Øûm≈§∑DÆQ®Ño≈ú¡(π˘Ìπ'ÌjK|√0«∑÷Ìﬂg´Wæ≤aÌ≈©æAß7™Yõ˙°¸ú‰tYù:˙Ñ‡¨≠Å '∆§‰D1Ìï›˝•˛f©´rqXÍÚΩ€Áó”è@\mc"dL|ﬂ∫IÛ-8Ã-Ê˜ùa?Ù÷üÏk*^™ ¥∆Mg∫Ttbè"}Ñ,9˛Ú»Èñ:€iÄ´}£⁄R.ÊW5~fÄ€cÆàCø¸ÙSRvøË”jí≤bk^ÍÅ+üJîò|S∏Lk8ø¸Í„ÆÖòwg"√Ñ['iZô∆NCpS
'I€qxD˘“pà¢ix÷ÉhΩcw4vo†ƒê;‰Õ–Ÿ»/æ\ÌÄGÖ2,d.
fí8ıúÑg‹@¬U¸hﬁ•íÊ@5÷Üj¿¶ªlì≤FBÑÉ/ö≈VÕÜU ç·,›ÂªÁ÷¬*aOÆn[u≈ŒBq◊ûÉ∂}3WÎpX⁄≈ﬂZ\WõKPiéÍ≤—Ô≤ënò4B=æÅnåˆèÚù¸2¢N\\ÛOêé˜öO7Jó∏§ù5KS√G9>ã≈O>D¶XRI™ùÌ¸;0Ñ#ÚÒÄX„û:¸q?Úˇ"˝ÎoûÉ≠v@ÑÉ¿Gı#ıæÓ√ú+H~ﬁ¶v·oæÊnÁendstreamendobj142 0 obj3344endobj35 0 obj<</Type /Font/Subtype /TrueType/Name /F10/BaseFont /TimesNewRoman,Italic/FirstChar 32/LastChar 255/Widths [ 250 333 420 500 500 833 778 214 333 333 500 675 250 333 250 278 500 500 500 500 500 500 500 500 500 500 333 333 675 675 675 500 920 611 611 667 722 611 611 722 722 333 444 667 556 833 667 722 611 722 611 500 556 722 611 833 611 556 556 389 278 389 422 500 333 500 500 444 500 444 278 500 500 278 278 444 278 722 500 500 500 500 389 389 278 500 444 667 444 444 389 400 275 400 541 778 500 778 333 500 556 889 500 500 333 1000 500 333 944 778 556 778 778 333 333 556 556 350 500 889 333 980 389 333 667 778 389 556 250 389 500 500 500 500 275 500 333 760 276 500 675 333 760 500 400 549 300 300 333 576 523 250 333 300 310 500 750 750 750 500 611 611 611 611 611 611 889 667 611 611 611 611 333 333 333 333 722 667 722 722 722 722 722 675 722 722 722 722 722 556 611 500 500 500 500 500 500 500 667 444 444 444 444 444 278 278 278 278 500 500 500 500 500 500 500 549 500 500 500 500 500 444 500 444 ]/Encoding /WinAnsiEncoding/FontDescriptor 36 0 R>>endobj36 0 obj<</Type /FontDescriptor/FontName /TimesNewRoman,Italic/Flags 98/FontBBox [ -250 -216 1163 1000 ]/MissingWidth 377/StemV 73/StemH 73/ItalicAngle -11/CapHeight 891/XHeight 446/Ascent 891/Descent -216/Leading 149/MaxWidth 969/AvgWidth 402>>endobj41 0 obj<</Type /Font/Subtype /Type1/Name /F11/BaseFont /Courier-Bold/FirstChar 32/LastChar 255/Widths [ 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 ]/Encoding /WinAnsiEncoding/FontDescriptor 42 0 R>>endobj42 0 obj<</Type /FontDescriptor/FontName /Courier-Bold/Flags 16418/FontBBox [ -250 -250 720 1000 ]/MissingWidth 600/StemV 191/StemH 191/ItalicAngle 0/CapHeight 900/XHeight 703/Ascent 801/Descent -250/Leading 334/MaxWidth 600/AvgWidth 600>>endobj43 0 obj<</Type /Font/Subtype /TrueType/Name /F12/BaseFont /TimesNewRoman,BoldItalic/FirstChar 32/LastChar 255/Widths [ 250 389 555 500 500 833 778 278 333 333 500 570 250 333 250 278 500 500 500 500 500 500 500 500 500 500 333 333 570 570 570 500 832 667 667 667 722 667 667 722 778 389 500 667 611 889 722 722 611 722 667 556 611 722 667 889 667 611 611 333 278 333 570 500 333 500 500 444 500 444 333 500 556 278 278 500 278 778 556 500 500 500 389 389 278 556 444 667 500 444 389 348 220 348 570 778 500 778 333 500 500 1000 500 500 333 1000 556 333 944 778 611 778 778 333 333 500 500 350 500 1000 333 1000 389 333 722 778 389 611 250 389 500 500 500 500 220 500 333 747 266 500 606 333 747 500 400 549 300 300 333 576 500 250 333 300 300 500 750 750 750 500 667 667 667 667 667 667 944 667 667 667 667 667 389 389 389 389 722 722 722 722 722 722 722 570 722 722 722 722 722 611 611 500 500 500 500 500 500 500 722 444 444 444 444 444 278 278 278 278 500 556 500 500 500 500 500 549 500 556 556 556 556 444 500 444 ]/Encoding /WinAnsiEncoding/FontDescriptor 44 0 R>>endobj44 0 obj<</Type /FontDescriptor/FontName /TimesNewRoman,BoldItalic/Flags 16482/FontBBox [ -250 -216 1177 1000 ]/MissingWidth 327/StemV 131/StemH 131/ItalicAngle -11/CapHeight 891/XHeight 446/Ascent 891/Descent -216/Leading 149/MaxWidth 981/AvgWidth 412>>endobj62 0 obj<</Type /Font/Subtype /Type1/Name /F13/BaseFont /OCAIHK+HelveticaNeue-BoldCond/FirstChar 32/LastChar 255/Widths [ 240 296 463 480 480 778 593 260 296 296 390 600 240 370 240 332 480 480 480 480 480 480 480 480 480 480 240 240 600 600 600 481 800 556 556 537 574 481 463 556 556 258 463 537 463 740 574 556 519 556 556 519 480 538 519 760 537 520 481 315 332 315 600 500 222 481 500 463 500 463 296 500 500 240 240 500 240 758 500 480 500 500 333 444 296 500 444 704 462 444 426 315 222 315 600 500 500 500 260 480 463 1000 480 480 222 1093 519 241 778 500 481 500 500 260 260 463 463 500 500 1000 222 990 444 241 741 500 426 520 240 296 480 480 480 480 222 481 222 800 314 426 600 370 800 222 400 600 312 312 222 500 480 240 222 312 314 426 721 721 721 481 556 556 556 556 556 556 759 537 481 481 481 481 258 258 258 258 574 574 556 556 556 556 556 600 556 538 538 538 538 520 519 500 481 481 481 481 481 481 722 463 463 463 463 463 240 240 240 240 480 500 480 480 480 480 480 600 480 500 500 500 500 444 500 444 ]/Encoding /WinAnsiEncoding/FontDescriptor 63 0 R>>endobj63 0 obj<</Type /FontDescriptor/FontName /OCAIHK+HelveticaNeue-BoldCond/Flags 16416/FontBBox [ -250 -224 1312 1000 ]/MissingWidth 556/StemV 150/StemH 150/ItalicAngle 0/CapHeight 1372/XHeight 1034/Ascent 961/Descent -224/Leading 480/MaxWidth 1093/AvgWidth 473/FontFile3 146 0 R>>endobj146 0 obj<</Filter /FlateDecode /Length 147 0 R/Subtype /Type1C>>stream
Hâ}T}PÁﬂΩª}àΩ‡-á◊;‹[-Ö
h!&µ**IÅppú‚‹ë?P¢u&|)
â¡H¶à•ÇEÂ`Ç⁄äZÎ‡ì∂&ç•“ÿôŒÒ,y˘£Ôû1M˛hÁÊÊ›güØﬂÔyœ“îJA—4Õ'¨]ÛFHå•@¥[sLÒñ∑-ã◊ÿÃkÌ6≥,ΩLIZ
PHsïíü
G‚‚oØ|õ¬Ã•®wn¸>zgwxÂi(%MjÍ\k/‹Â∞ÊÂA9?ñDEÖ´ÕˆlãêºÀYlŸÈbm9vG°›a*∂òCauAÅê$«;Ö$ã”‚…€Ô·Vß`ä&≥eß…±C∞Á
qVõΩxW°EXΩA0ŸÃavá`%πŒ∑≥ùV≥’‰∞Zú?»_±BêŸ2ãÕi1ˇ◊%S•(ö¸®˘µê¢B)j	E-£®5^‘&ï¨†RiJOÊD)(%ıUBıPˇ¢sÈßäıäJ≈◊ ï "%®ñ®RTV’M∆ãIdŒ3OQ˙ πX§V◊6â>p|È*Èö≤J¡Ë,Ñ0êÑŒbr#ú8ù…‡ıËKÏ´≠Aw}H›RÂñ*›ÙB*G¸°AÚ 8
πy0ßq9Ç¿y⁄ÎD‚ºµ$Óg∆7êõDiÈk†ìËî◊¸…√Xnfå9•1¶fft”ôÿäg™ô
¥P™fv§ﬁAwπaßõ$ΩóëﬁÉ˛‰°ÎÇÄØ« h*m
/2‚ZOÔQtØ-g›≥5Inº£Ã-ùvkö!Î=π<Ê ò˚{38µ6Î~ø
V‹ü ¸…mylwaj¿àïóò¯÷}ß˚Ù='/˛ÅÁ∏ZÃ1F‡O!òÍ¬~8 "ÒKünø∑xÓ´l?Î‹®O0ŸﬂZU⁄;∆7±Íue+?É1Ò/ö6–a|¡t‹ ◊ØKﬁ⁄lOs[O£#;ØlOv9ˇ∫»pø( Œ^§_{.ÍÈ≠ÓÜ·è˘ƒâGvÎw{Åïuº€2®áﬂ±ì∑q‰ÇˆÂ˜±‹ ‘‚\ÌÊ_;ss˜ûªx©˘Ùq˛‰ëñ˙èº‘€ ‹aO` %ö~‡a!‹^rsÕZ>>z}Ùxˆ∆ﬁ˚‚˜èÇ7èyL<:ƒ]©a”⁄ªƒ!0WøÄtHO˝3©˘bñÕX"Êë˙ï≤	…Î›J™Œ#ó)≈¬§∏ÿGò√\¯&\Ñn«ﬂ¢O¬<Î–2—ú±iø~
æÔèﬁæ˙^r*ˇ#xgøá∑Í;x£◊_¿ãO¿É<¢ã®◊ñﬂîj ∞"âÍ∏À8˝j$0C]MÉÌdp2>xÌsõ¯!ƒjmQy@·Â8ﬁéıòH¢áÇ˛£wav-è}QÏ¡“¸√∂›7n{ŸœUMÏ‡á#Æë˜2¢Ûj\G4ºy‚oœËq‡ï„˛¿Kõ?õX9Ä:éw◊◊WU÷ÛˇdkŒjáaÈñ¡∆¯uãÔ≤Ím8ÓÀW ∞ﬂèüÑπ5ùDÄs@àz‡Æ‘©ÂŒ%T∞√EÈç.≈AXÉ”\øE_oÎÖ6cM4⁄RbJÊπª˜≠ﬂg‰ú˚Í64Í…Pπa∑R¡ñﬂºÛy©éÂz‹≠ÖÖÔ_æÓ:˘&ûæ;.1±¸÷}2l=I5-+AG˜¸0çF[œ\lS¯ñY¿∫∑,OL/Œ(‚+`è|’$±≥‰Ø‡£π¸ú+2ÈNÚöø•öEë
>œc¶3Kh†î‰+"ü#∑î)À5œˇ~‹eO„)t£≠ΩØ˚Ñ#ìüô%€Ïèl…¿˛;k$|cö-I‰+êkoFGú!1´‰Õ|c‚π∞é}NÈE}¬à{?(qüxH•9∑⁄H-Ó¡M9;ö(X=A∑ëå Çªç»'Ù¡´áyX:ÙYìÑåo´ÔÒ“î G∂ﬂGﬁn‹Bî£ﬂµ%y√°á† ì≈a"D∏aÍY«ìˇoÕfµ$L¨AYg:≈´ﬂ-ôë{Ù|œR,b⁄NÁ‰àå€ÕH2f–…ÂπÛñ„Ëﬁ–o/5ú®¨l ‰ŸÍÉ™íÃ÷Tª<†;˜‰T¡CQ”æxêÊ˘…}’—⁄R6∞wÑÅ◊üáÅy¥£oŸ2ø»6&„DYs´æ´˝TÁ'¶‡€å&7„Ÿx~Úö•´∫”«…˜n2ü9˝NÀû|}ñ]4•;:¯F¥Ó–≥5Ú~h»vpÖ„DŸDˇ¯:‚Œc˙‘v†>n;|∏ù V(Ø,7‰8ŸcÑ>≤?äy÷£3∫VZØÑRX¨≠@øî¥D`úÈd`É‘…xÑµ∏
¬AÑp˙ÿ4	ˆı'Œ1I√‘†?ŒhXÇ¿Ké‘°çƒ¨@—ƒÖÉQå«àìR£¨a:≥'5¿¸≠«õq’±n‡_™û•Üﬂ¯Ió¥ˇπ)Ûendstreamendobj147 0 obj1847endobj2 0 obj[ /PDF /Text /ImageC /ImageI  ]endobj5 0 obj<</Kids [4 0 R 18 0 R 28 0 R 38 0 R 46 0 R 50 0 R ]/Count 6/Type /Pages/Parent 151 0 R>>endobj55 0 obj<</Kids [54 0 R 59 0 R 65 0 R 68 0 R 71 0 R 74 0 R ]/Count 6/Type /Pages/Parent 151 0 R>>endobj85 0 obj<</Kids [84 0 R 88 0 R 91 0 R 94 0 R 97 0 R 100 0 R ]/Count 6/Type /Pages/Parent 151 0 R>>endobj104 0 obj<</Kids [103 0 R 108 0 R 112 0 R 116 0 R 119 0 R 122 0 R ]/Count 6/Type /Pages/Parent 151 0 R>>endobj151 0 obj<</Kids [5 0 R 55 0 R 85 0 R 104 0 R ]/Count 24/Type /Pages/MediaBox [ 0 0 596 842 ]>>endobj1 0 obj<</Creator <FEFF0051007500610072006B005800500072006500730073002000280074006D00290020002D0020005B006F007600650072006C006F0061006400360034002D00460049004E0041004C002E007100780064005D>/CreationDate (D:20041126191701)/Title <FEFF006F007600650072006C006F0061006400360034002D00460049004E0041004C002E007100780064>/Author <FEFF00500069007000700061>/Producer (Acrobat PDFWriter 5.0 for Windows NT)>>endobj3 0 obj<</Pages 151 0 R/Type /Catalog>>endobjxref0 1520000000000 65535 f 0000416938 00000 n 0000416332 00000 n 0000417350 00000 n 0000003903 00000 n 0000416379 00000 n 0000365120 00000 n 0000366234 00000 n 0000370771 00000 n 0000371860 00000 n 0000372122 00000 n 0000373201 00000 n 0000000019 00000 n 0000003882 00000 n 0000373457 00000 n 0000374544 00000 n 0000374798 00000 n 0000375889 00000 n 0000014559 00000 n 0000004069 00000 n 0000014537 00000 n 0000376150 00000 n 0000377208 00000 n 0000377472 00000 n 0000378580 00000 n 0000382208 00000 n 0000383309 00000 n 0000014669 00000 n 0000026343 00000 n 0000014756 00000 n 0000026321 00000 n 0000383580 00000 n 0000384687 00000 n 0000403991 00000 n 0000405096 00000 n 0000408858 00000 n 0000409955 00000 n 0000026453 00000 n 0000037536 00000 n 0000026563 00000 n 0000037514 00000 n 0000410225 00000 n 0000411310 00000 n 0000411574 00000 n 0000412678 00000 n 0000037646 00000 n 0000052276 00000 n 0000037768 00000 n 0000052254 00000 n 0000052386 00000 n 0000066291 00000 n 0000052487 00000 n 0000066269 00000 n 0000066401 00000 n 0000078007 00000 n 0000416488 00000 n 0000066524 00000 n 0000077985 00000 n 0000078118 00000 n 0000090918 00000 n 0000078205 00000 n 0000090896 00000 n 0000412957 00000 n 0000414062 00000 n 0000091029 00000 n 0000103974 00000 n 0000091118 00000 n 0000103952 00000 n 0000116240 00000 n 0000104119 00000 n 0000116218 00000 n 0000127903 00000 n 0000116409 00000 n 0000127881 00000 n 0000231943 00000 n 0000128061 00000 n 0000138642 00000 n 0000230614 00000 n 0000138664 00000 n 0000230592 00000 n 0000231684 00000 n 0000231704 00000 n 0000231923 00000 n 0000232094 00000 n 0000245964 00000 n 0000416599 00000 n 0000232193 00000 n 0000245942 00000 n 0000256762 00000 n 0000246121 00000 n 0000256740 00000 n 0000266844 00000 n 0000256932 00000 n 0000266823 00000 n 0000278087 00000 n 0000267002 00000 n 0000278065 00000 n 0000289450 00000 n 0000278245 00000 n 0000289428 00000 n 0000302133 00000 n 0000289608 00000 n 0000302110 00000 n 0000312624 00000 n 0000416711 00000 n 0000302293 00000 n 0000312601 00000 n 0000312739 00000 n 0000323926 00000 n 0000312872 00000 n 0000323903 00000 n 0000324041 00000 n 0000334280 00000 n 0000324130 00000 n 0000334257 00000 n 0000334395 00000 n 0000342180 00000 n 0000334484 00000 n 0000342158 00000 n 0000352346 00000 n 0000342341 00000 n 0000352324 00000 n 0000364916 00000 n 0000352519 00000 n 0000364893 00000 n 0000365031 00000 n 0000366536 00000 n 0000370749 00000 n 0000000000 00000 n 0000000000 00000 n 0000000000 00000 n 0000378884 00000 n 0000382186 00000 n 0000000000 00000 n 0000000000 00000 n 0000000000 00000 n 0000384986 00000 n 0000403907 00000 n 0000403953 00000 n 0000403930 00000 n 0000403972 00000 n 0000405395 00000 n 0000408836 00000 n 0000000000 00000 n 0000000000 00000 n 0000000000 00000 n 0000414366 00000 n 0000416310 00000 n 0000000000 00000 n 0000000000 00000 n 0000000000 00000 n 0000416829 00000 n trailer<</Size 152/Root 3 0 R/Info 1 0 R/ID [<5eaea307082b96d3abb32d51afa75647><5eaea307082b96d3abb32d51afa75647>]>>startxref417401%%EOF